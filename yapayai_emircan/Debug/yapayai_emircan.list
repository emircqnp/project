
yapayai_emircan.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001b674  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002244  0801b810  0801b810  0002b810  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801da54  0801da54  000302bc  2**0
                  CONTENTS
  4 .ARM          00000008  0801da54  0801da54  0002da54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801da5c  0801da5c  000302bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801da5c  0801da5c  0002da5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801da64  0801da64  0002da64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002bc  20000000  0801da68  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000302bc  2**0
                  CONTENTS
 10 .bss          00004874  200002bc  200002bc  000302bc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004b30  20004b30  000302bc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000302bc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0010a18e  00000000  00000000  000302ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00010d16  00000000  00000000  0013a47a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00004e38  00000000  00000000  0014b190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00004c00  00000000  00000000  0014ffc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00033e1b  00000000  00000000  00154bc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00053033  00000000  00000000  001889e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00194ab3  00000000  00000000  001dba16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  003704c9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00017388  00000000  00000000  0037051c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002bc 	.word	0x200002bc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801b7ec 	.word	0x0801b7ec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002c0 	.word	0x200002c0
 80001cc:	0801b7ec 	.word	0x0801b7ec

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strcmp>:
 8000270:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000274:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000278:	2a01      	cmp	r2, #1
 800027a:	bf28      	it	cs
 800027c:	429a      	cmpcs	r2, r3
 800027e:	d0f7      	beq.n	8000270 <strcmp>
 8000280:	1ad0      	subs	r0, r2, r3
 8000282:	4770      	bx	lr

08000284 <strlen>:
 8000284:	4603      	mov	r3, r0
 8000286:	f813 2b01 	ldrb.w	r2, [r3], #1
 800028a:	2a00      	cmp	r2, #0
 800028c:	d1fb      	bne.n	8000286 <strlen+0x2>
 800028e:	1a18      	subs	r0, r3, r0
 8000290:	3801      	subs	r0, #1
 8000292:	4770      	bx	lr

08000294 <__aeabi_drsub>:
 8000294:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000298:	e002      	b.n	80002a0 <__adddf3>
 800029a:	bf00      	nop

0800029c <__aeabi_dsub>:
 800029c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002a0 <__adddf3>:
 80002a0:	b530      	push	{r4, r5, lr}
 80002a2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002aa:	ea94 0f05 	teq	r4, r5
 80002ae:	bf08      	it	eq
 80002b0:	ea90 0f02 	teqeq	r0, r2
 80002b4:	bf1f      	itttt	ne
 80002b6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ba:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002be:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002c2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c6:	f000 80e2 	beq.w	800048e <__adddf3+0x1ee>
 80002ca:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ce:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002d2:	bfb8      	it	lt
 80002d4:	426d      	neglt	r5, r5
 80002d6:	dd0c      	ble.n	80002f2 <__adddf3+0x52>
 80002d8:	442c      	add	r4, r5
 80002da:	ea80 0202 	eor.w	r2, r0, r2
 80002de:	ea81 0303 	eor.w	r3, r1, r3
 80002e2:	ea82 0000 	eor.w	r0, r2, r0
 80002e6:	ea83 0101 	eor.w	r1, r3, r1
 80002ea:	ea80 0202 	eor.w	r2, r0, r2
 80002ee:	ea81 0303 	eor.w	r3, r1, r3
 80002f2:	2d36      	cmp	r5, #54	; 0x36
 80002f4:	bf88      	it	hi
 80002f6:	bd30      	pophi	{r4, r5, pc}
 80002f8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002fc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000300:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000304:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x70>
 800030a:	4240      	negs	r0, r0
 800030c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000310:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000314:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000318:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800031c:	d002      	beq.n	8000324 <__adddf3+0x84>
 800031e:	4252      	negs	r2, r2
 8000320:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000324:	ea94 0f05 	teq	r4, r5
 8000328:	f000 80a7 	beq.w	800047a <__adddf3+0x1da>
 800032c:	f1a4 0401 	sub.w	r4, r4, #1
 8000330:	f1d5 0e20 	rsbs	lr, r5, #32
 8000334:	db0d      	blt.n	8000352 <__adddf3+0xb2>
 8000336:	fa02 fc0e 	lsl.w	ip, r2, lr
 800033a:	fa22 f205 	lsr.w	r2, r2, r5
 800033e:	1880      	adds	r0, r0, r2
 8000340:	f141 0100 	adc.w	r1, r1, #0
 8000344:	fa03 f20e 	lsl.w	r2, r3, lr
 8000348:	1880      	adds	r0, r0, r2
 800034a:	fa43 f305 	asr.w	r3, r3, r5
 800034e:	4159      	adcs	r1, r3
 8000350:	e00e      	b.n	8000370 <__adddf3+0xd0>
 8000352:	f1a5 0520 	sub.w	r5, r5, #32
 8000356:	f10e 0e20 	add.w	lr, lr, #32
 800035a:	2a01      	cmp	r2, #1
 800035c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000360:	bf28      	it	cs
 8000362:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	18c0      	adds	r0, r0, r3
 800036c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000370:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000374:	d507      	bpl.n	8000386 <__adddf3+0xe6>
 8000376:	f04f 0e00 	mov.w	lr, #0
 800037a:	f1dc 0c00 	rsbs	ip, ip, #0
 800037e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000382:	eb6e 0101 	sbc.w	r1, lr, r1
 8000386:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800038a:	d31b      	bcc.n	80003c4 <__adddf3+0x124>
 800038c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000390:	d30c      	bcc.n	80003ac <__adddf3+0x10c>
 8000392:	0849      	lsrs	r1, r1, #1
 8000394:	ea5f 0030 	movs.w	r0, r0, rrx
 8000398:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800039c:	f104 0401 	add.w	r4, r4, #1
 80003a0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a8:	f080 809a 	bcs.w	80004e0 <__adddf3+0x240>
 80003ac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003b0:	bf08      	it	eq
 80003b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b6:	f150 0000 	adcs.w	r0, r0, #0
 80003ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003be:	ea41 0105 	orr.w	r1, r1, r5
 80003c2:	bd30      	pop	{r4, r5, pc}
 80003c4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c8:	4140      	adcs	r0, r0
 80003ca:	eb41 0101 	adc.w	r1, r1, r1
 80003ce:	3c01      	subs	r4, #1
 80003d0:	bf28      	it	cs
 80003d2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d6:	d2e9      	bcs.n	80003ac <__adddf3+0x10c>
 80003d8:	f091 0f00 	teq	r1, #0
 80003dc:	bf04      	itt	eq
 80003de:	4601      	moveq	r1, r0
 80003e0:	2000      	moveq	r0, #0
 80003e2:	fab1 f381 	clz	r3, r1
 80003e6:	bf08      	it	eq
 80003e8:	3320      	addeq	r3, #32
 80003ea:	f1a3 030b 	sub.w	r3, r3, #11
 80003ee:	f1b3 0220 	subs.w	r2, r3, #32
 80003f2:	da0c      	bge.n	800040e <__adddf3+0x16e>
 80003f4:	320c      	adds	r2, #12
 80003f6:	dd08      	ble.n	800040a <__adddf3+0x16a>
 80003f8:	f102 0c14 	add.w	ip, r2, #20
 80003fc:	f1c2 020c 	rsb	r2, r2, #12
 8000400:	fa01 f00c 	lsl.w	r0, r1, ip
 8000404:	fa21 f102 	lsr.w	r1, r1, r2
 8000408:	e00c      	b.n	8000424 <__adddf3+0x184>
 800040a:	f102 0214 	add.w	r2, r2, #20
 800040e:	bfd8      	it	le
 8000410:	f1c2 0c20 	rsble	ip, r2, #32
 8000414:	fa01 f102 	lsl.w	r1, r1, r2
 8000418:	fa20 fc0c 	lsr.w	ip, r0, ip
 800041c:	bfdc      	itt	le
 800041e:	ea41 010c 	orrle.w	r1, r1, ip
 8000422:	4090      	lslle	r0, r2
 8000424:	1ae4      	subs	r4, r4, r3
 8000426:	bfa2      	ittt	ge
 8000428:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800042c:	4329      	orrge	r1, r5
 800042e:	bd30      	popge	{r4, r5, pc}
 8000430:	ea6f 0404 	mvn.w	r4, r4
 8000434:	3c1f      	subs	r4, #31
 8000436:	da1c      	bge.n	8000472 <__adddf3+0x1d2>
 8000438:	340c      	adds	r4, #12
 800043a:	dc0e      	bgt.n	800045a <__adddf3+0x1ba>
 800043c:	f104 0414 	add.w	r4, r4, #20
 8000440:	f1c4 0220 	rsb	r2, r4, #32
 8000444:	fa20 f004 	lsr.w	r0, r0, r4
 8000448:	fa01 f302 	lsl.w	r3, r1, r2
 800044c:	ea40 0003 	orr.w	r0, r0, r3
 8000450:	fa21 f304 	lsr.w	r3, r1, r4
 8000454:	ea45 0103 	orr.w	r1, r5, r3
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	f1c4 040c 	rsb	r4, r4, #12
 800045e:	f1c4 0220 	rsb	r2, r4, #32
 8000462:	fa20 f002 	lsr.w	r0, r0, r2
 8000466:	fa01 f304 	lsl.w	r3, r1, r4
 800046a:	ea40 0003 	orr.w	r0, r0, r3
 800046e:	4629      	mov	r1, r5
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	fa21 f004 	lsr.w	r0, r1, r4
 8000476:	4629      	mov	r1, r5
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	f094 0f00 	teq	r4, #0
 800047e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000482:	bf06      	itte	eq
 8000484:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000488:	3401      	addeq	r4, #1
 800048a:	3d01      	subne	r5, #1
 800048c:	e74e      	b.n	800032c <__adddf3+0x8c>
 800048e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000492:	bf18      	it	ne
 8000494:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000498:	d029      	beq.n	80004ee <__adddf3+0x24e>
 800049a:	ea94 0f05 	teq	r4, r5
 800049e:	bf08      	it	eq
 80004a0:	ea90 0f02 	teqeq	r0, r2
 80004a4:	d005      	beq.n	80004b2 <__adddf3+0x212>
 80004a6:	ea54 0c00 	orrs.w	ip, r4, r0
 80004aa:	bf04      	itt	eq
 80004ac:	4619      	moveq	r1, r3
 80004ae:	4610      	moveq	r0, r2
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	ea91 0f03 	teq	r1, r3
 80004b6:	bf1e      	ittt	ne
 80004b8:	2100      	movne	r1, #0
 80004ba:	2000      	movne	r0, #0
 80004bc:	bd30      	popne	{r4, r5, pc}
 80004be:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004c2:	d105      	bne.n	80004d0 <__adddf3+0x230>
 80004c4:	0040      	lsls	r0, r0, #1
 80004c6:	4149      	adcs	r1, r1
 80004c8:	bf28      	it	cs
 80004ca:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ce:	bd30      	pop	{r4, r5, pc}
 80004d0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d4:	bf3c      	itt	cc
 80004d6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004da:	bd30      	popcc	{r4, r5, pc}
 80004dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e8:	f04f 0000 	mov.w	r0, #0
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004f2:	bf1a      	itte	ne
 80004f4:	4619      	movne	r1, r3
 80004f6:	4610      	movne	r0, r2
 80004f8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004fc:	bf1c      	itt	ne
 80004fe:	460b      	movne	r3, r1
 8000500:	4602      	movne	r2, r0
 8000502:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000506:	bf06      	itte	eq
 8000508:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800050c:	ea91 0f03 	teqeq	r1, r3
 8000510:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000514:	bd30      	pop	{r4, r5, pc}
 8000516:	bf00      	nop

08000518 <__aeabi_ui2d>:
 8000518:	f090 0f00 	teq	r0, #0
 800051c:	bf04      	itt	eq
 800051e:	2100      	moveq	r1, #0
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000528:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052c:	f04f 0500 	mov.w	r5, #0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e750      	b.n	80003d8 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_i2d>:
 8000538:	f090 0f00 	teq	r0, #0
 800053c:	bf04      	itt	eq
 800053e:	2100      	moveq	r1, #0
 8000540:	4770      	bxeq	lr
 8000542:	b530      	push	{r4, r5, lr}
 8000544:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000548:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800054c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000550:	bf48      	it	mi
 8000552:	4240      	negmi	r0, r0
 8000554:	f04f 0100 	mov.w	r1, #0
 8000558:	e73e      	b.n	80003d8 <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_f2d>:
 800055c:	0042      	lsls	r2, r0, #1
 800055e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000562:	ea4f 0131 	mov.w	r1, r1, rrx
 8000566:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800056a:	bf1f      	itttt	ne
 800056c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000570:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000574:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000578:	4770      	bxne	lr
 800057a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057e:	bf08      	it	eq
 8000580:	4770      	bxeq	lr
 8000582:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000586:	bf04      	itt	eq
 8000588:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000594:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000598:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800059c:	e71c      	b.n	80003d8 <__adddf3+0x138>
 800059e:	bf00      	nop

080005a0 <__aeabi_ul2d>:
 80005a0:	ea50 0201 	orrs.w	r2, r0, r1
 80005a4:	bf08      	it	eq
 80005a6:	4770      	bxeq	lr
 80005a8:	b530      	push	{r4, r5, lr}
 80005aa:	f04f 0500 	mov.w	r5, #0
 80005ae:	e00a      	b.n	80005c6 <__aeabi_l2d+0x16>

080005b0 <__aeabi_l2d>:
 80005b0:	ea50 0201 	orrs.w	r2, r0, r1
 80005b4:	bf08      	it	eq
 80005b6:	4770      	bxeq	lr
 80005b8:	b530      	push	{r4, r5, lr}
 80005ba:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005be:	d502      	bpl.n	80005c6 <__aeabi_l2d+0x16>
 80005c0:	4240      	negs	r0, r0
 80005c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ca:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ce:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005d2:	f43f aed8 	beq.w	8000386 <__adddf3+0xe6>
 80005d6:	f04f 0203 	mov.w	r2, #3
 80005da:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005de:	bf18      	it	ne
 80005e0:	3203      	addne	r2, #3
 80005e2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e6:	bf18      	it	ne
 80005e8:	3203      	addne	r2, #3
 80005ea:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ee:	f1c2 0320 	rsb	r3, r2, #32
 80005f2:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f6:	fa20 f002 	lsr.w	r0, r0, r2
 80005fa:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fe:	ea40 000e 	orr.w	r0, r0, lr
 8000602:	fa21 f102 	lsr.w	r1, r1, r2
 8000606:	4414      	add	r4, r2
 8000608:	e6bd      	b.n	8000386 <__adddf3+0xe6>
 800060a:	bf00      	nop

0800060c <__aeabi_dmul>:
 800060c:	b570      	push	{r4, r5, r6, lr}
 800060e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000612:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000616:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800061a:	bf1d      	ittte	ne
 800061c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000620:	ea94 0f0c 	teqne	r4, ip
 8000624:	ea95 0f0c 	teqne	r5, ip
 8000628:	f000 f8de 	bleq	80007e8 <__aeabi_dmul+0x1dc>
 800062c:	442c      	add	r4, r5
 800062e:	ea81 0603 	eor.w	r6, r1, r3
 8000632:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000636:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800063a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063e:	bf18      	it	ne
 8000640:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000644:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000648:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800064c:	d038      	beq.n	80006c0 <__aeabi_dmul+0xb4>
 800064e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000652:	f04f 0500 	mov.w	r5, #0
 8000656:	fbe1 e502 	umlal	lr, r5, r1, r2
 800065a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000662:	f04f 0600 	mov.w	r6, #0
 8000666:	fbe1 5603 	umlal	r5, r6, r1, r3
 800066a:	f09c 0f00 	teq	ip, #0
 800066e:	bf18      	it	ne
 8000670:	f04e 0e01 	orrne.w	lr, lr, #1
 8000674:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000678:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800067c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000680:	d204      	bcs.n	800068c <__aeabi_dmul+0x80>
 8000682:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000686:	416d      	adcs	r5, r5
 8000688:	eb46 0606 	adc.w	r6, r6, r6
 800068c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000690:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000694:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000698:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800069c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006a0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a4:	bf88      	it	hi
 80006a6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006aa:	d81e      	bhi.n	80006ea <__aeabi_dmul+0xde>
 80006ac:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006b0:	bf08      	it	eq
 80006b2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b6:	f150 0000 	adcs.w	r0, r0, #0
 80006ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006be:	bd70      	pop	{r4, r5, r6, pc}
 80006c0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c4:	ea46 0101 	orr.w	r1, r6, r1
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	ea81 0103 	eor.w	r1, r1, r3
 80006d0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d4:	bfc2      	ittt	gt
 80006d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006de:	bd70      	popgt	{r4, r5, r6, pc}
 80006e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e4:	f04f 0e00 	mov.w	lr, #0
 80006e8:	3c01      	subs	r4, #1
 80006ea:	f300 80ab 	bgt.w	8000844 <__aeabi_dmul+0x238>
 80006ee:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006f2:	bfde      	ittt	le
 80006f4:	2000      	movle	r0, #0
 80006f6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006fa:	bd70      	pople	{r4, r5, r6, pc}
 80006fc:	f1c4 0400 	rsb	r4, r4, #0
 8000700:	3c20      	subs	r4, #32
 8000702:	da35      	bge.n	8000770 <__aeabi_dmul+0x164>
 8000704:	340c      	adds	r4, #12
 8000706:	dc1b      	bgt.n	8000740 <__aeabi_dmul+0x134>
 8000708:	f104 0414 	add.w	r4, r4, #20
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f305 	lsl.w	r3, r0, r5
 8000714:	fa20 f004 	lsr.w	r0, r0, r4
 8000718:	fa01 f205 	lsl.w	r2, r1, r5
 800071c:	ea40 0002 	orr.w	r0, r0, r2
 8000720:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000724:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000728:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800072c:	fa21 f604 	lsr.w	r6, r1, r4
 8000730:	eb42 0106 	adc.w	r1, r2, r6
 8000734:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000738:	bf08      	it	eq
 800073a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073e:	bd70      	pop	{r4, r5, r6, pc}
 8000740:	f1c4 040c 	rsb	r4, r4, #12
 8000744:	f1c4 0520 	rsb	r5, r4, #32
 8000748:	fa00 f304 	lsl.w	r3, r0, r4
 800074c:	fa20 f005 	lsr.w	r0, r0, r5
 8000750:	fa01 f204 	lsl.w	r2, r1, r4
 8000754:	ea40 0002 	orr.w	r0, r0, r2
 8000758:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800075c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000760:	f141 0100 	adc.w	r1, r1, #0
 8000764:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000768:	bf08      	it	eq
 800076a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076e:	bd70      	pop	{r4, r5, r6, pc}
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f205 	lsl.w	r2, r0, r5
 8000778:	ea4e 0e02 	orr.w	lr, lr, r2
 800077c:	fa20 f304 	lsr.w	r3, r0, r4
 8000780:	fa01 f205 	lsl.w	r2, r1, r5
 8000784:	ea43 0302 	orr.w	r3, r3, r2
 8000788:	fa21 f004 	lsr.w	r0, r1, r4
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	fa21 f204 	lsr.w	r2, r1, r4
 8000794:	ea20 0002 	bic.w	r0, r0, r2
 8000798:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800079c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a0:	bf08      	it	eq
 80007a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a6:	bd70      	pop	{r4, r5, r6, pc}
 80007a8:	f094 0f00 	teq	r4, #0
 80007ac:	d10f      	bne.n	80007ce <__aeabi_dmul+0x1c2>
 80007ae:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007b2:	0040      	lsls	r0, r0, #1
 80007b4:	eb41 0101 	adc.w	r1, r1, r1
 80007b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007bc:	bf08      	it	eq
 80007be:	3c01      	subeq	r4, #1
 80007c0:	d0f7      	beq.n	80007b2 <__aeabi_dmul+0x1a6>
 80007c2:	ea41 0106 	orr.w	r1, r1, r6
 80007c6:	f095 0f00 	teq	r5, #0
 80007ca:	bf18      	it	ne
 80007cc:	4770      	bxne	lr
 80007ce:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007d2:	0052      	lsls	r2, r2, #1
 80007d4:	eb43 0303 	adc.w	r3, r3, r3
 80007d8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007dc:	bf08      	it	eq
 80007de:	3d01      	subeq	r5, #1
 80007e0:	d0f7      	beq.n	80007d2 <__aeabi_dmul+0x1c6>
 80007e2:	ea43 0306 	orr.w	r3, r3, r6
 80007e6:	4770      	bx	lr
 80007e8:	ea94 0f0c 	teq	r4, ip
 80007ec:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007f0:	bf18      	it	ne
 80007f2:	ea95 0f0c 	teqne	r5, ip
 80007f6:	d00c      	beq.n	8000812 <__aeabi_dmul+0x206>
 80007f8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007fc:	bf18      	it	ne
 80007fe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000802:	d1d1      	bne.n	80007a8 <__aeabi_dmul+0x19c>
 8000804:	ea81 0103 	eor.w	r1, r1, r3
 8000808:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800080c:	f04f 0000 	mov.w	r0, #0
 8000810:	bd70      	pop	{r4, r5, r6, pc}
 8000812:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000816:	bf06      	itte	eq
 8000818:	4610      	moveq	r0, r2
 800081a:	4619      	moveq	r1, r3
 800081c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000820:	d019      	beq.n	8000856 <__aeabi_dmul+0x24a>
 8000822:	ea94 0f0c 	teq	r4, ip
 8000826:	d102      	bne.n	800082e <__aeabi_dmul+0x222>
 8000828:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800082c:	d113      	bne.n	8000856 <__aeabi_dmul+0x24a>
 800082e:	ea95 0f0c 	teq	r5, ip
 8000832:	d105      	bne.n	8000840 <__aeabi_dmul+0x234>
 8000834:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000838:	bf1c      	itt	ne
 800083a:	4610      	movne	r0, r2
 800083c:	4619      	movne	r1, r3
 800083e:	d10a      	bne.n	8000856 <__aeabi_dmul+0x24a>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800084c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000850:	f04f 0000 	mov.w	r0, #0
 8000854:	bd70      	pop	{r4, r5, r6, pc}
 8000856:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800085a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085e:	bd70      	pop	{r4, r5, r6, pc}

08000860 <__aeabi_ddiv>:
 8000860:	b570      	push	{r4, r5, r6, lr}
 8000862:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000866:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800086a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086e:	bf1d      	ittte	ne
 8000870:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000874:	ea94 0f0c 	teqne	r4, ip
 8000878:	ea95 0f0c 	teqne	r5, ip
 800087c:	f000 f8a7 	bleq	80009ce <__aeabi_ddiv+0x16e>
 8000880:	eba4 0405 	sub.w	r4, r4, r5
 8000884:	ea81 0e03 	eor.w	lr, r1, r3
 8000888:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800088c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000890:	f000 8088 	beq.w	80009a4 <__aeabi_ddiv+0x144>
 8000894:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000898:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800089c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008a0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008ac:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008b0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b8:	429d      	cmp	r5, r3
 80008ba:	bf08      	it	eq
 80008bc:	4296      	cmpeq	r6, r2
 80008be:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008c2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c6:	d202      	bcs.n	80008ce <__aeabi_ddiv+0x6e>
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	1ab6      	subs	r6, r6, r2
 80008d0:	eb65 0503 	sbc.w	r5, r5, r3
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008de:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ea:	bf22      	ittt	cs
 80008ec:	1ab6      	subcs	r6, r6, r2
 80008ee:	4675      	movcs	r5, lr
 80008f0:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000902:	bf22      	ittt	cs
 8000904:	1ab6      	subcs	r6, r6, r2
 8000906:	4675      	movcs	r5, lr
 8000908:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800090c:	085b      	lsrs	r3, r3, #1
 800090e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000912:	ebb6 0e02 	subs.w	lr, r6, r2
 8000916:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091a:	bf22      	ittt	cs
 800091c:	1ab6      	subcs	r6, r6, r2
 800091e:	4675      	movcs	r5, lr
 8000920:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	ebb6 0e02 	subs.w	lr, r6, r2
 800092e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000932:	bf22      	ittt	cs
 8000934:	1ab6      	subcs	r6, r6, r2
 8000936:	4675      	movcs	r5, lr
 8000938:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800093c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000940:	d018      	beq.n	8000974 <__aeabi_ddiv+0x114>
 8000942:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000946:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800094a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000952:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000956:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800095a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095e:	d1c0      	bne.n	80008e2 <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	d10b      	bne.n	800097e <__aeabi_ddiv+0x11e>
 8000966:	ea41 0100 	orr.w	r1, r1, r0
 800096a:	f04f 0000 	mov.w	r0, #0
 800096e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000972:	e7b6      	b.n	80008e2 <__aeabi_ddiv+0x82>
 8000974:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000978:	bf04      	itt	eq
 800097a:	4301      	orreq	r1, r0
 800097c:	2000      	moveq	r0, #0
 800097e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000982:	bf88      	it	hi
 8000984:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000988:	f63f aeaf 	bhi.w	80006ea <__aeabi_dmul+0xde>
 800098c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000990:	bf04      	itt	eq
 8000992:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000996:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800099a:	f150 0000 	adcs.w	r0, r0, #0
 800099e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009a2:	bd70      	pop	{r4, r5, r6, pc}
 80009a4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009ac:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009b0:	bfc2      	ittt	gt
 80009b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ba:	bd70      	popgt	{r4, r5, r6, pc}
 80009bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009c0:	f04f 0e00 	mov.w	lr, #0
 80009c4:	3c01      	subs	r4, #1
 80009c6:	e690      	b.n	80006ea <__aeabi_dmul+0xde>
 80009c8:	ea45 0e06 	orr.w	lr, r5, r6
 80009cc:	e68d      	b.n	80006ea <__aeabi_dmul+0xde>
 80009ce:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009d2:	ea94 0f0c 	teq	r4, ip
 80009d6:	bf08      	it	eq
 80009d8:	ea95 0f0c 	teqeq	r5, ip
 80009dc:	f43f af3b 	beq.w	8000856 <__aeabi_dmul+0x24a>
 80009e0:	ea94 0f0c 	teq	r4, ip
 80009e4:	d10a      	bne.n	80009fc <__aeabi_ddiv+0x19c>
 80009e6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ea:	f47f af34 	bne.w	8000856 <__aeabi_dmul+0x24a>
 80009ee:	ea95 0f0c 	teq	r5, ip
 80009f2:	f47f af25 	bne.w	8000840 <__aeabi_dmul+0x234>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e72c      	b.n	8000856 <__aeabi_dmul+0x24a>
 80009fc:	ea95 0f0c 	teq	r5, ip
 8000a00:	d106      	bne.n	8000a10 <__aeabi_ddiv+0x1b0>
 8000a02:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a06:	f43f aefd 	beq.w	8000804 <__aeabi_dmul+0x1f8>
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	e722      	b.n	8000856 <__aeabi_dmul+0x24a>
 8000a10:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a14:	bf18      	it	ne
 8000a16:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a1a:	f47f aec5 	bne.w	80007a8 <__aeabi_dmul+0x19c>
 8000a1e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a22:	f47f af0d 	bne.w	8000840 <__aeabi_dmul+0x234>
 8000a26:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a2a:	f47f aeeb 	bne.w	8000804 <__aeabi_dmul+0x1f8>
 8000a2e:	e712      	b.n	8000856 <__aeabi_dmul+0x24a>

08000a30 <__gedf2>:
 8000a30:	f04f 3cff 	mov.w	ip, #4294967295
 8000a34:	e006      	b.n	8000a44 <__cmpdf2+0x4>
 8000a36:	bf00      	nop

08000a38 <__ledf2>:
 8000a38:	f04f 0c01 	mov.w	ip, #1
 8000a3c:	e002      	b.n	8000a44 <__cmpdf2+0x4>
 8000a3e:	bf00      	nop

08000a40 <__cmpdf2>:
 8000a40:	f04f 0c01 	mov.w	ip, #1
 8000a44:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a48:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a54:	bf18      	it	ne
 8000a56:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a5a:	d01b      	beq.n	8000a94 <__cmpdf2+0x54>
 8000a5c:	b001      	add	sp, #4
 8000a5e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a62:	bf0c      	ite	eq
 8000a64:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a68:	ea91 0f03 	teqne	r1, r3
 8000a6c:	bf02      	ittt	eq
 8000a6e:	ea90 0f02 	teqeq	r0, r2
 8000a72:	2000      	moveq	r0, #0
 8000a74:	4770      	bxeq	lr
 8000a76:	f110 0f00 	cmn.w	r0, #0
 8000a7a:	ea91 0f03 	teq	r1, r3
 8000a7e:	bf58      	it	pl
 8000a80:	4299      	cmppl	r1, r3
 8000a82:	bf08      	it	eq
 8000a84:	4290      	cmpeq	r0, r2
 8000a86:	bf2c      	ite	cs
 8000a88:	17d8      	asrcs	r0, r3, #31
 8000a8a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8e:	f040 0001 	orr.w	r0, r0, #1
 8000a92:	4770      	bx	lr
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__cmpdf2+0x64>
 8000a9e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aa2:	d107      	bne.n	8000ab4 <__cmpdf2+0x74>
 8000aa4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	d1d6      	bne.n	8000a5c <__cmpdf2+0x1c>
 8000aae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ab2:	d0d3      	beq.n	8000a5c <__cmpdf2+0x1c>
 8000ab4:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_cdrcmple>:
 8000abc:	4684      	mov	ip, r0
 8000abe:	4610      	mov	r0, r2
 8000ac0:	4662      	mov	r2, ip
 8000ac2:	468c      	mov	ip, r1
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	4663      	mov	r3, ip
 8000ac8:	e000      	b.n	8000acc <__aeabi_cdcmpeq>
 8000aca:	bf00      	nop

08000acc <__aeabi_cdcmpeq>:
 8000acc:	b501      	push	{r0, lr}
 8000ace:	f7ff ffb7 	bl	8000a40 <__cmpdf2>
 8000ad2:	2800      	cmp	r0, #0
 8000ad4:	bf48      	it	mi
 8000ad6:	f110 0f00 	cmnmi.w	r0, #0
 8000ada:	bd01      	pop	{r0, pc}

08000adc <__aeabi_dcmpeq>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff fff4 	bl	8000acc <__aeabi_cdcmpeq>
 8000ae4:	bf0c      	ite	eq
 8000ae6:	2001      	moveq	r0, #1
 8000ae8:	2000      	movne	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmplt>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffea 	bl	8000acc <__aeabi_cdcmpeq>
 8000af8:	bf34      	ite	cc
 8000afa:	2001      	movcc	r0, #1
 8000afc:	2000      	movcs	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmple>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffe0 	bl	8000acc <__aeabi_cdcmpeq>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpge>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffce 	bl	8000abc <__aeabi_cdrcmple>
 8000b20:	bf94      	ite	ls
 8000b22:	2001      	movls	r0, #1
 8000b24:	2000      	movhi	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpgt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffc4 	bl	8000abc <__aeabi_cdrcmple>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmpun>:
 8000b40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b48:	d102      	bne.n	8000b50 <__aeabi_dcmpun+0x10>
 8000b4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4e:	d10a      	bne.n	8000b66 <__aeabi_dcmpun+0x26>
 8000b50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b58:	d102      	bne.n	8000b60 <__aeabi_dcmpun+0x20>
 8000b5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5e:	d102      	bne.n	8000b66 <__aeabi_dcmpun+0x26>
 8000b60:	f04f 0000 	mov.w	r0, #0
 8000b64:	4770      	bx	lr
 8000b66:	f04f 0001 	mov.w	r0, #1
 8000b6a:	4770      	bx	lr

08000b6c <__aeabi_d2iz>:
 8000b6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b74:	d215      	bcs.n	8000ba2 <__aeabi_d2iz+0x36>
 8000b76:	d511      	bpl.n	8000b9c <__aeabi_d2iz+0x30>
 8000b78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d912      	bls.n	8000ba8 <__aeabi_d2iz+0x3c>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b92:	fa23 f002 	lsr.w	r0, r3, r2
 8000b96:	bf18      	it	ne
 8000b98:	4240      	negne	r0, r0
 8000b9a:	4770      	bx	lr
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba6:	d105      	bne.n	8000bb4 <__aeabi_d2iz+0x48>
 8000ba8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bac:	bf08      	it	eq
 8000bae:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bb2:	4770      	bx	lr
 8000bb4:	f04f 0000 	mov.w	r0, #0
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop

08000bbc <__aeabi_d2uiz>:
 8000bbc:	004a      	lsls	r2, r1, #1
 8000bbe:	d211      	bcs.n	8000be4 <__aeabi_d2uiz+0x28>
 8000bc0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc4:	d211      	bcs.n	8000bea <__aeabi_d2uiz+0x2e>
 8000bc6:	d50d      	bpl.n	8000be4 <__aeabi_d2uiz+0x28>
 8000bc8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bcc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bd0:	d40e      	bmi.n	8000bf0 <__aeabi_d2uiz+0x34>
 8000bd2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bda:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	4770      	bx	lr
 8000be4:	f04f 0000 	mov.w	r0, #0
 8000be8:	4770      	bx	lr
 8000bea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bee:	d102      	bne.n	8000bf6 <__aeabi_d2uiz+0x3a>
 8000bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf4:	4770      	bx	lr
 8000bf6:	f04f 0000 	mov.w	r0, #0
 8000bfa:	4770      	bx	lr

08000bfc <__aeabi_d2f>:
 8000bfc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c00:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c04:	bf24      	itt	cs
 8000c06:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c0a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0e:	d90d      	bls.n	8000c2c <__aeabi_d2f+0x30>
 8000c10:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c14:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c18:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c1c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c20:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c24:	bf08      	it	eq
 8000c26:	f020 0001 	biceq.w	r0, r0, #1
 8000c2a:	4770      	bx	lr
 8000c2c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c30:	d121      	bne.n	8000c76 <__aeabi_d2f+0x7a>
 8000c32:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c36:	bfbc      	itt	lt
 8000c38:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	4770      	bxlt	lr
 8000c3e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c42:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c46:	f1c2 0218 	rsb	r2, r2, #24
 8000c4a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c52:	fa20 f002 	lsr.w	r0, r0, r2
 8000c56:	bf18      	it	ne
 8000c58:	f040 0001 	orrne.w	r0, r0, #1
 8000c5c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c60:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c64:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c68:	ea40 000c 	orr.w	r0, r0, ip
 8000c6c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c70:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c74:	e7cc      	b.n	8000c10 <__aeabi_d2f+0x14>
 8000c76:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c7a:	d107      	bne.n	8000c8c <__aeabi_d2f+0x90>
 8000c7c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c80:	bf1e      	ittt	ne
 8000c82:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c86:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c8a:	4770      	bxne	lr
 8000c8c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c90:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c94:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop

08000c9c <__aeabi_ldivmod>:
 8000c9c:	b97b      	cbnz	r3, 8000cbe <__aeabi_ldivmod+0x22>
 8000c9e:	b972      	cbnz	r2, 8000cbe <__aeabi_ldivmod+0x22>
 8000ca0:	2900      	cmp	r1, #0
 8000ca2:	bfbe      	ittt	lt
 8000ca4:	2000      	movlt	r0, #0
 8000ca6:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000caa:	e006      	blt.n	8000cba <__aeabi_ldivmod+0x1e>
 8000cac:	bf08      	it	eq
 8000cae:	2800      	cmpeq	r0, #0
 8000cb0:	bf1c      	itt	ne
 8000cb2:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000cb6:	f04f 30ff 	movne.w	r0, #4294967295
 8000cba:	f000 b9f5 	b.w	80010a8 <__aeabi_idiv0>
 8000cbe:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc2:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc6:	2900      	cmp	r1, #0
 8000cc8:	db09      	blt.n	8000cde <__aeabi_ldivmod+0x42>
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	db1a      	blt.n	8000d04 <__aeabi_ldivmod+0x68>
 8000cce:	f000 f883 	bl	8000dd8 <__udivmoddi4>
 8000cd2:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cda:	b004      	add	sp, #16
 8000cdc:	4770      	bx	lr
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	db1b      	blt.n	8000d20 <__aeabi_ldivmod+0x84>
 8000ce8:	f000 f876 	bl	8000dd8 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4240      	negs	r0, r0
 8000cf8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cfc:	4252      	negs	r2, r2
 8000cfe:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d02:	4770      	bx	lr
 8000d04:	4252      	negs	r2, r2
 8000d06:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d0a:	f000 f865 	bl	8000dd8 <__udivmoddi4>
 8000d0e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d12:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d16:	b004      	add	sp, #16
 8000d18:	4240      	negs	r0, r0
 8000d1a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1e:	4770      	bx	lr
 8000d20:	4252      	negs	r2, r2
 8000d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d26:	f000 f857 	bl	8000dd8 <__udivmoddi4>
 8000d2a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d32:	b004      	add	sp, #16
 8000d34:	4252      	negs	r2, r2
 8000d36:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d3a:	4770      	bx	lr

08000d3c <__aeabi_uldivmod>:
 8000d3c:	b953      	cbnz	r3, 8000d54 <__aeabi_uldivmod+0x18>
 8000d3e:	b94a      	cbnz	r2, 8000d54 <__aeabi_uldivmod+0x18>
 8000d40:	2900      	cmp	r1, #0
 8000d42:	bf08      	it	eq
 8000d44:	2800      	cmpeq	r0, #0
 8000d46:	bf1c      	itt	ne
 8000d48:	f04f 31ff 	movne.w	r1, #4294967295
 8000d4c:	f04f 30ff 	movne.w	r0, #4294967295
 8000d50:	f000 b9aa 	b.w	80010a8 <__aeabi_idiv0>
 8000d54:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d58:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d5c:	f000 f83c 	bl	8000dd8 <__udivmoddi4>
 8000d60:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d68:	b004      	add	sp, #16
 8000d6a:	4770      	bx	lr

08000d6c <__aeabi_d2lz>:
 8000d6c:	b538      	push	{r3, r4, r5, lr}
 8000d6e:	2200      	movs	r2, #0
 8000d70:	2300      	movs	r3, #0
 8000d72:	4604      	mov	r4, r0
 8000d74:	460d      	mov	r5, r1
 8000d76:	f7ff febb 	bl	8000af0 <__aeabi_dcmplt>
 8000d7a:	b928      	cbnz	r0, 8000d88 <__aeabi_d2lz+0x1c>
 8000d7c:	4620      	mov	r0, r4
 8000d7e:	4629      	mov	r1, r5
 8000d80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d84:	f000 b80a 	b.w	8000d9c <__aeabi_d2ulz>
 8000d88:	4620      	mov	r0, r4
 8000d8a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d8e:	f000 f805 	bl	8000d9c <__aeabi_d2ulz>
 8000d92:	4240      	negs	r0, r0
 8000d94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d98:	bd38      	pop	{r3, r4, r5, pc}
 8000d9a:	bf00      	nop

08000d9c <__aeabi_d2ulz>:
 8000d9c:	b5d0      	push	{r4, r6, r7, lr}
 8000d9e:	4b0c      	ldr	r3, [pc, #48]	; (8000dd0 <__aeabi_d2ulz+0x34>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	4606      	mov	r6, r0
 8000da4:	460f      	mov	r7, r1
 8000da6:	f7ff fc31 	bl	800060c <__aeabi_dmul>
 8000daa:	f7ff ff07 	bl	8000bbc <__aeabi_d2uiz>
 8000dae:	4604      	mov	r4, r0
 8000db0:	f7ff fbb2 	bl	8000518 <__aeabi_ui2d>
 8000db4:	4b07      	ldr	r3, [pc, #28]	; (8000dd4 <__aeabi_d2ulz+0x38>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	f7ff fc28 	bl	800060c <__aeabi_dmul>
 8000dbc:	4602      	mov	r2, r0
 8000dbe:	460b      	mov	r3, r1
 8000dc0:	4630      	mov	r0, r6
 8000dc2:	4639      	mov	r1, r7
 8000dc4:	f7ff fa6a 	bl	800029c <__aeabi_dsub>
 8000dc8:	f7ff fef8 	bl	8000bbc <__aeabi_d2uiz>
 8000dcc:	4621      	mov	r1, r4
 8000dce:	bdd0      	pop	{r4, r6, r7, pc}
 8000dd0:	3df00000 	.word	0x3df00000
 8000dd4:	41f00000 	.word	0x41f00000

08000dd8 <__udivmoddi4>:
 8000dd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ddc:	9d08      	ldr	r5, [sp, #32]
 8000dde:	4604      	mov	r4, r0
 8000de0:	468e      	mov	lr, r1
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d14d      	bne.n	8000e82 <__udivmoddi4+0xaa>
 8000de6:	428a      	cmp	r2, r1
 8000de8:	4694      	mov	ip, r2
 8000dea:	d969      	bls.n	8000ec0 <__udivmoddi4+0xe8>
 8000dec:	fab2 f282 	clz	r2, r2
 8000df0:	b152      	cbz	r2, 8000e08 <__udivmoddi4+0x30>
 8000df2:	fa01 f302 	lsl.w	r3, r1, r2
 8000df6:	f1c2 0120 	rsb	r1, r2, #32
 8000dfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000dfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e02:	ea41 0e03 	orr.w	lr, r1, r3
 8000e06:	4094      	lsls	r4, r2
 8000e08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e0c:	0c21      	lsrs	r1, r4, #16
 8000e0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000e12:	fa1f f78c 	uxth.w	r7, ip
 8000e16:	fb08 e316 	mls	r3, r8, r6, lr
 8000e1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000e1e:	fb06 f107 	mul.w	r1, r6, r7
 8000e22:	4299      	cmp	r1, r3
 8000e24:	d90a      	bls.n	8000e3c <__udivmoddi4+0x64>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000e2e:	f080 811f 	bcs.w	8001070 <__udivmoddi4+0x298>
 8000e32:	4299      	cmp	r1, r3
 8000e34:	f240 811c 	bls.w	8001070 <__udivmoddi4+0x298>
 8000e38:	3e02      	subs	r6, #2
 8000e3a:	4463      	add	r3, ip
 8000e3c:	1a5b      	subs	r3, r3, r1
 8000e3e:	b2a4      	uxth	r4, r4
 8000e40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e44:	fb08 3310 	mls	r3, r8, r0, r3
 8000e48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e4c:	fb00 f707 	mul.w	r7, r0, r7
 8000e50:	42a7      	cmp	r7, r4
 8000e52:	d90a      	bls.n	8000e6a <__udivmoddi4+0x92>
 8000e54:	eb1c 0404 	adds.w	r4, ip, r4
 8000e58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e5c:	f080 810a 	bcs.w	8001074 <__udivmoddi4+0x29c>
 8000e60:	42a7      	cmp	r7, r4
 8000e62:	f240 8107 	bls.w	8001074 <__udivmoddi4+0x29c>
 8000e66:	4464      	add	r4, ip
 8000e68:	3802      	subs	r0, #2
 8000e6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e6e:	1be4      	subs	r4, r4, r7
 8000e70:	2600      	movs	r6, #0
 8000e72:	b11d      	cbz	r5, 8000e7c <__udivmoddi4+0xa4>
 8000e74:	40d4      	lsrs	r4, r2
 8000e76:	2300      	movs	r3, #0
 8000e78:	e9c5 4300 	strd	r4, r3, [r5]
 8000e7c:	4631      	mov	r1, r6
 8000e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e82:	428b      	cmp	r3, r1
 8000e84:	d909      	bls.n	8000e9a <__udivmoddi4+0xc2>
 8000e86:	2d00      	cmp	r5, #0
 8000e88:	f000 80ef 	beq.w	800106a <__udivmoddi4+0x292>
 8000e8c:	2600      	movs	r6, #0
 8000e8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000e92:	4630      	mov	r0, r6
 8000e94:	4631      	mov	r1, r6
 8000e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9a:	fab3 f683 	clz	r6, r3
 8000e9e:	2e00      	cmp	r6, #0
 8000ea0:	d14a      	bne.n	8000f38 <__udivmoddi4+0x160>
 8000ea2:	428b      	cmp	r3, r1
 8000ea4:	d302      	bcc.n	8000eac <__udivmoddi4+0xd4>
 8000ea6:	4282      	cmp	r2, r0
 8000ea8:	f200 80f9 	bhi.w	800109e <__udivmoddi4+0x2c6>
 8000eac:	1a84      	subs	r4, r0, r2
 8000eae:	eb61 0303 	sbc.w	r3, r1, r3
 8000eb2:	2001      	movs	r0, #1
 8000eb4:	469e      	mov	lr, r3
 8000eb6:	2d00      	cmp	r5, #0
 8000eb8:	d0e0      	beq.n	8000e7c <__udivmoddi4+0xa4>
 8000eba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ebe:	e7dd      	b.n	8000e7c <__udivmoddi4+0xa4>
 8000ec0:	b902      	cbnz	r2, 8000ec4 <__udivmoddi4+0xec>
 8000ec2:	deff      	udf	#255	; 0xff
 8000ec4:	fab2 f282 	clz	r2, r2
 8000ec8:	2a00      	cmp	r2, #0
 8000eca:	f040 8092 	bne.w	8000ff2 <__udivmoddi4+0x21a>
 8000ece:	eba1 010c 	sub.w	r1, r1, ip
 8000ed2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ed6:	fa1f fe8c 	uxth.w	lr, ip
 8000eda:	2601      	movs	r6, #1
 8000edc:	0c20      	lsrs	r0, r4, #16
 8000ede:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ee2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ee6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eea:	fb0e f003 	mul.w	r0, lr, r3
 8000eee:	4288      	cmp	r0, r1
 8000ef0:	d908      	bls.n	8000f04 <__udivmoddi4+0x12c>
 8000ef2:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000efa:	d202      	bcs.n	8000f02 <__udivmoddi4+0x12a>
 8000efc:	4288      	cmp	r0, r1
 8000efe:	f200 80cb 	bhi.w	8001098 <__udivmoddi4+0x2c0>
 8000f02:	4643      	mov	r3, r8
 8000f04:	1a09      	subs	r1, r1, r0
 8000f06:	b2a4      	uxth	r4, r4
 8000f08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000f10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000f14:	fb0e fe00 	mul.w	lr, lr, r0
 8000f18:	45a6      	cmp	lr, r4
 8000f1a:	d908      	bls.n	8000f2e <__udivmoddi4+0x156>
 8000f1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f24:	d202      	bcs.n	8000f2c <__udivmoddi4+0x154>
 8000f26:	45a6      	cmp	lr, r4
 8000f28:	f200 80bb 	bhi.w	80010a2 <__udivmoddi4+0x2ca>
 8000f2c:	4608      	mov	r0, r1
 8000f2e:	eba4 040e 	sub.w	r4, r4, lr
 8000f32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f36:	e79c      	b.n	8000e72 <__udivmoddi4+0x9a>
 8000f38:	f1c6 0720 	rsb	r7, r6, #32
 8000f3c:	40b3      	lsls	r3, r6
 8000f3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f46:	fa20 f407 	lsr.w	r4, r0, r7
 8000f4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000f4e:	431c      	orrs	r4, r3
 8000f50:	40f9      	lsrs	r1, r7
 8000f52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f56:	fa00 f306 	lsl.w	r3, r0, r6
 8000f5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f5e:	0c20      	lsrs	r0, r4, #16
 8000f60:	fa1f fe8c 	uxth.w	lr, ip
 8000f64:	fb09 1118 	mls	r1, r9, r8, r1
 8000f68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000f70:	4288      	cmp	r0, r1
 8000f72:	fa02 f206 	lsl.w	r2, r2, r6
 8000f76:	d90b      	bls.n	8000f90 <__udivmoddi4+0x1b8>
 8000f78:	eb1c 0101 	adds.w	r1, ip, r1
 8000f7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f80:	f080 8088 	bcs.w	8001094 <__udivmoddi4+0x2bc>
 8000f84:	4288      	cmp	r0, r1
 8000f86:	f240 8085 	bls.w	8001094 <__udivmoddi4+0x2bc>
 8000f8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000f8e:	4461      	add	r1, ip
 8000f90:	1a09      	subs	r1, r1, r0
 8000f92:	b2a4      	uxth	r4, r4
 8000f94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f98:	fb09 1110 	mls	r1, r9, r0, r1
 8000f9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000fa0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000fa4:	458e      	cmp	lr, r1
 8000fa6:	d908      	bls.n	8000fba <__udivmoddi4+0x1e2>
 8000fa8:	eb1c 0101 	adds.w	r1, ip, r1
 8000fac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000fb0:	d26c      	bcs.n	800108c <__udivmoddi4+0x2b4>
 8000fb2:	458e      	cmp	lr, r1
 8000fb4:	d96a      	bls.n	800108c <__udivmoddi4+0x2b4>
 8000fb6:	3802      	subs	r0, #2
 8000fb8:	4461      	add	r1, ip
 8000fba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000fbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000fc2:	eba1 010e 	sub.w	r1, r1, lr
 8000fc6:	42a1      	cmp	r1, r4
 8000fc8:	46c8      	mov	r8, r9
 8000fca:	46a6      	mov	lr, r4
 8000fcc:	d356      	bcc.n	800107c <__udivmoddi4+0x2a4>
 8000fce:	d053      	beq.n	8001078 <__udivmoddi4+0x2a0>
 8000fd0:	b15d      	cbz	r5, 8000fea <__udivmoddi4+0x212>
 8000fd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000fd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000fda:	fa01 f707 	lsl.w	r7, r1, r7
 8000fde:	fa22 f306 	lsr.w	r3, r2, r6
 8000fe2:	40f1      	lsrs	r1, r6
 8000fe4:	431f      	orrs	r7, r3
 8000fe6:	e9c5 7100 	strd	r7, r1, [r5]
 8000fea:	2600      	movs	r6, #0
 8000fec:	4631      	mov	r1, r6
 8000fee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ff2:	f1c2 0320 	rsb	r3, r2, #32
 8000ff6:	40d8      	lsrs	r0, r3
 8000ff8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ffc:	fa21 f303 	lsr.w	r3, r1, r3
 8001000:	4091      	lsls	r1, r2
 8001002:	4301      	orrs	r1, r0
 8001004:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001008:	fa1f fe8c 	uxth.w	lr, ip
 800100c:	fbb3 f0f7 	udiv	r0, r3, r7
 8001010:	fb07 3610 	mls	r6, r7, r0, r3
 8001014:	0c0b      	lsrs	r3, r1, #16
 8001016:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800101a:	fb00 f60e 	mul.w	r6, r0, lr
 800101e:	429e      	cmp	r6, r3
 8001020:	fa04 f402 	lsl.w	r4, r4, r2
 8001024:	d908      	bls.n	8001038 <__udivmoddi4+0x260>
 8001026:	eb1c 0303 	adds.w	r3, ip, r3
 800102a:	f100 38ff 	add.w	r8, r0, #4294967295
 800102e:	d22f      	bcs.n	8001090 <__udivmoddi4+0x2b8>
 8001030:	429e      	cmp	r6, r3
 8001032:	d92d      	bls.n	8001090 <__udivmoddi4+0x2b8>
 8001034:	3802      	subs	r0, #2
 8001036:	4463      	add	r3, ip
 8001038:	1b9b      	subs	r3, r3, r6
 800103a:	b289      	uxth	r1, r1
 800103c:	fbb3 f6f7 	udiv	r6, r3, r7
 8001040:	fb07 3316 	mls	r3, r7, r6, r3
 8001044:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001048:	fb06 f30e 	mul.w	r3, r6, lr
 800104c:	428b      	cmp	r3, r1
 800104e:	d908      	bls.n	8001062 <__udivmoddi4+0x28a>
 8001050:	eb1c 0101 	adds.w	r1, ip, r1
 8001054:	f106 38ff 	add.w	r8, r6, #4294967295
 8001058:	d216      	bcs.n	8001088 <__udivmoddi4+0x2b0>
 800105a:	428b      	cmp	r3, r1
 800105c:	d914      	bls.n	8001088 <__udivmoddi4+0x2b0>
 800105e:	3e02      	subs	r6, #2
 8001060:	4461      	add	r1, ip
 8001062:	1ac9      	subs	r1, r1, r3
 8001064:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001068:	e738      	b.n	8000edc <__udivmoddi4+0x104>
 800106a:	462e      	mov	r6, r5
 800106c:	4628      	mov	r0, r5
 800106e:	e705      	b.n	8000e7c <__udivmoddi4+0xa4>
 8001070:	4606      	mov	r6, r0
 8001072:	e6e3      	b.n	8000e3c <__udivmoddi4+0x64>
 8001074:	4618      	mov	r0, r3
 8001076:	e6f8      	b.n	8000e6a <__udivmoddi4+0x92>
 8001078:	454b      	cmp	r3, r9
 800107a:	d2a9      	bcs.n	8000fd0 <__udivmoddi4+0x1f8>
 800107c:	ebb9 0802 	subs.w	r8, r9, r2
 8001080:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001084:	3801      	subs	r0, #1
 8001086:	e7a3      	b.n	8000fd0 <__udivmoddi4+0x1f8>
 8001088:	4646      	mov	r6, r8
 800108a:	e7ea      	b.n	8001062 <__udivmoddi4+0x28a>
 800108c:	4620      	mov	r0, r4
 800108e:	e794      	b.n	8000fba <__udivmoddi4+0x1e2>
 8001090:	4640      	mov	r0, r8
 8001092:	e7d1      	b.n	8001038 <__udivmoddi4+0x260>
 8001094:	46d0      	mov	r8, sl
 8001096:	e77b      	b.n	8000f90 <__udivmoddi4+0x1b8>
 8001098:	3b02      	subs	r3, #2
 800109a:	4461      	add	r1, ip
 800109c:	e732      	b.n	8000f04 <__udivmoddi4+0x12c>
 800109e:	4630      	mov	r0, r6
 80010a0:	e709      	b.n	8000eb6 <__udivmoddi4+0xde>
 80010a2:	4464      	add	r4, ip
 80010a4:	3802      	subs	r0, #2
 80010a6:	e742      	b.n	8000f2e <__udivmoddi4+0x156>

080010a8 <__aeabi_idiv0>:
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop

080010ac <_Z15LIS3DSH_WriteIOhPhh>:
static float __Z_Scale = 1.0f;
//Functions definitions
//Private functions
//1. Write IO
void LIS3DSH_WriteIO(uint8_t reg, uint8_t *dataW, uint8_t size)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b084      	sub	sp, #16
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	4603      	mov	r3, r0
 80010b4:	6039      	str	r1, [r7, #0]
 80010b6:	71fb      	strb	r3, [r7, #7]
 80010b8:	4613      	mov	r3, r2
 80010ba:	71bb      	strb	r3, [r7, #6]
	uint8_t spiReg = reg;
 80010bc:	79fb      	ldrb	r3, [r7, #7]
 80010be:	73fb      	strb	r3, [r7, #15]
	//Enable CS
	_LIS3DHS_CS_ENBALE;
 80010c0:	2200      	movs	r2, #0
 80010c2:	2108      	movs	r1, #8
 80010c4:	480c      	ldr	r0, [pc, #48]	; (80010f8 <_Z15LIS3DSH_WriteIOhPhh+0x4c>)
 80010c6:	f004 fd01 	bl	8005acc <HAL_GPIO_WritePin>
	//set register value
	HAL_SPI_Transmit(&accSPI_Handle, &spiReg, 1, 10);
 80010ca:	f107 010f 	add.w	r1, r7, #15
 80010ce:	230a      	movs	r3, #10
 80010d0:	2201      	movs	r2, #1
 80010d2:	480a      	ldr	r0, [pc, #40]	; (80010fc <_Z15LIS3DSH_WriteIOhPhh+0x50>)
 80010d4:	f006 fca3 	bl	8007a1e <HAL_SPI_Transmit>
	//Transmit data
	HAL_SPI_Transmit(&accSPI_Handle, dataW, size, 10);
 80010d8:	79bb      	ldrb	r3, [r7, #6]
 80010da:	b29a      	uxth	r2, r3
 80010dc:	230a      	movs	r3, #10
 80010de:	6839      	ldr	r1, [r7, #0]
 80010e0:	4806      	ldr	r0, [pc, #24]	; (80010fc <_Z15LIS3DSH_WriteIOhPhh+0x50>)
 80010e2:	f006 fc9c 	bl	8007a1e <HAL_SPI_Transmit>
	//Disable CS
	_LIS3DHS_CS_DISABLE;
 80010e6:	2201      	movs	r2, #1
 80010e8:	2108      	movs	r1, #8
 80010ea:	4803      	ldr	r0, [pc, #12]	; (80010f8 <_Z15LIS3DSH_WriteIOhPhh+0x4c>)
 80010ec:	f004 fcee 	bl	8005acc <HAL_GPIO_WritePin>
}
 80010f0:	bf00      	nop
 80010f2:	3710      	adds	r7, #16
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	40021000 	.word	0x40021000
 80010fc:	200002d8 	.word	0x200002d8

08001100 <_Z14LIS3DSH_ReadIOhPhh>:
//2. Read IO
void LIS3DSH_ReadIO(uint8_t reg, uint8_t *dataR, uint8_t size)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0
 8001106:	4603      	mov	r3, r0
 8001108:	6039      	str	r1, [r7, #0]
 800110a:	71fb      	strb	r3, [r7, #7]
 800110c:	4613      	mov	r3, r2
 800110e:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[4];
	spiBuf[0] = reg | 0x80;
 8001110:	79fb      	ldrb	r3, [r7, #7]
 8001112:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001116:	b2db      	uxtb	r3, r3
 8001118:	723b      	strb	r3, [r7, #8]
	//Enable CS
	_LIS3DHS_CS_ENBALE;
 800111a:	2200      	movs	r2, #0
 800111c:	2108      	movs	r1, #8
 800111e:	4818      	ldr	r0, [pc, #96]	; (8001180 <_Z14LIS3DSH_ReadIOhPhh+0x80>)
 8001120:	f004 fcd4 	bl	8005acc <HAL_GPIO_WritePin>
	//set register value
	HAL_SPI_Transmit(&accSPI_Handle, spiBuf, 1, 10);
 8001124:	f107 0108 	add.w	r1, r7, #8
 8001128:	230a      	movs	r3, #10
 800112a:	2201      	movs	r2, #1
 800112c:	4815      	ldr	r0, [pc, #84]	; (8001184 <_Z14LIS3DSH_ReadIOhPhh+0x84>)
 800112e:	f006 fc76 	bl	8007a1e <HAL_SPI_Transmit>
	//Transmit data
	HAL_SPI_Receive(&accSPI_Handle, spiBuf, size, 10);
 8001132:	79bb      	ldrb	r3, [r7, #6]
 8001134:	b29a      	uxth	r2, r3
 8001136:	f107 0108 	add.w	r1, r7, #8
 800113a:	230a      	movs	r3, #10
 800113c:	4811      	ldr	r0, [pc, #68]	; (8001184 <_Z14LIS3DSH_ReadIOhPhh+0x84>)
 800113e:	f006 fdaa 	bl	8007c96 <HAL_SPI_Receive>
	//Disable CS
	_LIS3DHS_CS_DISABLE;
 8001142:	2201      	movs	r2, #1
 8001144:	2108      	movs	r1, #8
 8001146:	480e      	ldr	r0, [pc, #56]	; (8001180 <_Z14LIS3DSH_ReadIOhPhh+0x80>)
 8001148:	f004 fcc0 	bl	8005acc <HAL_GPIO_WritePin>

	for(uint8_t i=0; i<(size&0x3); i++)
 800114c:	2300      	movs	r3, #0
 800114e:	73fb      	strb	r3, [r7, #15]
 8001150:	7bfa      	ldrb	r2, [r7, #15]
 8001152:	79bb      	ldrb	r3, [r7, #6]
 8001154:	f003 0303 	and.w	r3, r3, #3
 8001158:	429a      	cmp	r2, r3
 800115a:	da0c      	bge.n	8001176 <_Z14LIS3DSH_ReadIOhPhh+0x76>
	{
		dataR[i] = spiBuf[i];
 800115c:	7bfa      	ldrb	r2, [r7, #15]
 800115e:	7bfb      	ldrb	r3, [r7, #15]
 8001160:	6839      	ldr	r1, [r7, #0]
 8001162:	440b      	add	r3, r1
 8001164:	3210      	adds	r2, #16
 8001166:	443a      	add	r2, r7
 8001168:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 800116c:	701a      	strb	r2, [r3, #0]
	for(uint8_t i=0; i<(size&0x3); i++)
 800116e:	7bfb      	ldrb	r3, [r7, #15]
 8001170:	3301      	adds	r3, #1
 8001172:	73fb      	strb	r3, [r7, #15]
 8001174:	e7ec      	b.n	8001150 <_Z14LIS3DSH_ReadIOhPhh+0x50>
	}
}
 8001176:	bf00      	nop
 8001178:	3710      	adds	r7, #16
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	40021000 	.word	0x40021000
 8001184:	200002d8 	.word	0x200002d8

08001188 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef>:
//1. Accelerometer initialise function
void LIS3DSH_Init(SPI_HandleTypeDef *accSPI, LIS3DSH_InitTypeDef *accInitDef)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	6039      	str	r1, [r7, #0]
	uint8_t spiData = 0;
 8001192:	2300      	movs	r3, #0
 8001194:	73fb      	strb	r3, [r7, #15]

	memcpy(&accSPI_Handle, accSPI, sizeof(*accSPI));
 8001196:	2258      	movs	r2, #88	; 0x58
 8001198:	6879      	ldr	r1, [r7, #4]
 800119a:	4855      	ldr	r0, [pc, #340]	; (80012f0 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x168>)
 800119c:	f019 f978 	bl	801a490 <memcpy>
	//** 1. Enable Axes and Output Data Rate **//
	//Set CTRL REG4 settings value
	spiData |= (accInitDef->enableAxes & 0x07);		//Enable Axes
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	78db      	ldrb	r3, [r3, #3]
 80011a4:	f003 0307 	and.w	r3, r3, #7
 80011a8:	b2da      	uxtb	r2, r3
 80011aa:	7bfb      	ldrb	r3, [r7, #15]
 80011ac:	4313      	orrs	r3, r2
 80011ae:	b2db      	uxtb	r3, r3
 80011b0:	73fb      	strb	r3, [r7, #15]
	spiData |= (accInitDef->dataRate & 0xF0);			//Output Data Rate
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	f023 030f 	bic.w	r3, r3, #15
 80011ba:	b2da      	uxtb	r2, r3
 80011bc:	7bfb      	ldrb	r3, [r7, #15]
 80011be:	4313      	orrs	r3, r2
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	73fb      	strb	r3, [r7, #15]
	//Write to accelerometer
	LIS3DSH_WriteIO(LIS3DSH_CTRL_REG4_ADDR, &spiData, 1);
 80011c4:	f107 030f 	add.w	r3, r7, #15
 80011c8:	2201      	movs	r2, #1
 80011ca:	4619      	mov	r1, r3
 80011cc:	2020      	movs	r0, #32
 80011ce:	f7ff ff6d 	bl	80010ac <_Z15LIS3DSH_WriteIOhPhh>

	//** 2. Full-Scale selection, Anti-aliasing BW, self test and 4-wire SPI **//
	spiData = 0;
 80011d2:	2300      	movs	r3, #0
 80011d4:	73fb      	strb	r3, [r7, #15]
	spiData |= (accInitDef->antiAliasingBW & 0xC0);		//Anti-aliasing BW
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	789b      	ldrb	r3, [r3, #2]
 80011da:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80011de:	b2da      	uxtb	r2, r3
 80011e0:	7bfb      	ldrb	r3, [r7, #15]
 80011e2:	4313      	orrs	r3, r2
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	73fb      	strb	r3, [r7, #15]
	spiData |= (accInitDef->fullScale & 0x38);				//Full-Scale
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	785b      	ldrb	r3, [r3, #1]
 80011ec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80011f0:	b2da      	uxtb	r2, r3
 80011f2:	7bfb      	ldrb	r3, [r7, #15]
 80011f4:	4313      	orrs	r3, r2
 80011f6:	b2db      	uxtb	r3, r3
 80011f8:	73fb      	strb	r3, [r7, #15]
	//Write to accelerometer
	LIS3DSH_WriteIO(LIS3DSH_CTRL_REG5_ADDR, &spiData, 1);
 80011fa:	f107 030f 	add.w	r3, r7, #15
 80011fe:	2201      	movs	r2, #1
 8001200:	4619      	mov	r1, r3
 8001202:	2024      	movs	r0, #36	; 0x24
 8001204:	f7ff ff52 	bl	80010ac <_Z15LIS3DSH_WriteIOhPhh>

	//** 3. Interrupt Configuration **//
	if(accInitDef->interruptEnable)
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	791b      	ldrb	r3, [r3, #4]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d008      	beq.n	8001222 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x9a>
	{
		spiData = 0x88;
 8001210:	2388      	movs	r3, #136	; 0x88
 8001212:	73fb      	strb	r3, [r7, #15]
		//Write to accelerometer
		LIS3DSH_WriteIO(LIS3DSH_CTRL_REG3_ADDR, &spiData, 1);
 8001214:	f107 030f 	add.w	r3, r7, #15
 8001218:	2201      	movs	r2, #1
 800121a:	4619      	mov	r1, r3
 800121c:	2023      	movs	r0, #35	; 0x23
 800121e:	f7ff ff45 	bl	80010ac <_Z15LIS3DSH_WriteIOhPhh>
	}

	//Assign sensor sensitivity (based on Full-Scale)
	switch(accInitDef->fullScale)
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	785b      	ldrb	r3, [r3, #1]
 8001226:	2b20      	cmp	r3, #32
 8001228:	d858      	bhi.n	80012dc <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x154>
 800122a:	a201      	add	r2, pc, #4	; (adr r2, 8001230 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0xa8>)
 800122c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001230:	080012b5 	.word	0x080012b5
 8001234:	080012dd 	.word	0x080012dd
 8001238:	080012dd 	.word	0x080012dd
 800123c:	080012dd 	.word	0x080012dd
 8001240:	080012dd 	.word	0x080012dd
 8001244:	080012dd 	.word	0x080012dd
 8001248:	080012dd 	.word	0x080012dd
 800124c:	080012dd 	.word	0x080012dd
 8001250:	080012bd 	.word	0x080012bd
 8001254:	080012dd 	.word	0x080012dd
 8001258:	080012dd 	.word	0x080012dd
 800125c:	080012dd 	.word	0x080012dd
 8001260:	080012dd 	.word	0x080012dd
 8001264:	080012dd 	.word	0x080012dd
 8001268:	080012dd 	.word	0x080012dd
 800126c:	080012dd 	.word	0x080012dd
 8001270:	080012c5 	.word	0x080012c5
 8001274:	080012dd 	.word	0x080012dd
 8001278:	080012dd 	.word	0x080012dd
 800127c:	080012dd 	.word	0x080012dd
 8001280:	080012dd 	.word	0x080012dd
 8001284:	080012dd 	.word	0x080012dd
 8001288:	080012dd 	.word	0x080012dd
 800128c:	080012dd 	.word	0x080012dd
 8001290:	080012cd 	.word	0x080012cd
 8001294:	080012dd 	.word	0x080012dd
 8001298:	080012dd 	.word	0x080012dd
 800129c:	080012dd 	.word	0x080012dd
 80012a0:	080012dd 	.word	0x080012dd
 80012a4:	080012dd 	.word	0x080012dd
 80012a8:	080012dd 	.word	0x080012dd
 80012ac:	080012dd 	.word	0x080012dd
 80012b0:	080012d5 	.word	0x080012d5
	{
		case LIS3DSH_FULLSCALE_2:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_06G;
 80012b4:	4b0f      	ldr	r3, [pc, #60]	; (80012f4 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x16c>)
 80012b6:	4a10      	ldr	r2, [pc, #64]	; (80012f8 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x170>)
 80012b8:	601a      	str	r2, [r3, #0]
			break;
 80012ba:	e00f      	b.n	80012dc <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x154>

		case LIS3DSH_FULLSCALE_4:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_12G;
 80012bc:	4b0d      	ldr	r3, [pc, #52]	; (80012f4 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x16c>)
 80012be:	4a0f      	ldr	r2, [pc, #60]	; (80012fc <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x174>)
 80012c0:	601a      	str	r2, [r3, #0]
			break;
 80012c2:	e00b      	b.n	80012dc <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x154>

		case LIS3DSH_FULLSCALE_6:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_18G;
 80012c4:	4b0b      	ldr	r3, [pc, #44]	; (80012f4 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x16c>)
 80012c6:	4a0e      	ldr	r2, [pc, #56]	; (8001300 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x178>)
 80012c8:	601a      	str	r2, [r3, #0]
			break;
 80012ca:	e007      	b.n	80012dc <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x154>

		case LIS3DSH_FULLSCALE_8:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_24G;
 80012cc:	4b09      	ldr	r3, [pc, #36]	; (80012f4 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x16c>)
 80012ce:	4a0d      	ldr	r2, [pc, #52]	; (8001304 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x17c>)
 80012d0:	601a      	str	r2, [r3, #0]
			break;
 80012d2:	e003      	b.n	80012dc <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x154>

		case LIS3DSH_FULLSCALE_16:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_73G;
 80012d4:	4b07      	ldr	r3, [pc, #28]	; (80012f4 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x16c>)
 80012d6:	4a0c      	ldr	r2, [pc, #48]	; (8001308 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x180>)
 80012d8:	601a      	str	r2, [r3, #0]
			break;
 80012da:	bf00      	nop
	}
	_LIS3DHS_CS_DISABLE;
 80012dc:	2201      	movs	r2, #1
 80012de:	2108      	movs	r1, #8
 80012e0:	480a      	ldr	r0, [pc, #40]	; (800130c <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x184>)
 80012e2:	f004 fbf3 	bl	8005acc <HAL_GPIO_WritePin>
}
 80012e6:	bf00      	nop
 80012e8:	3710      	adds	r7, #16
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	200002d8 	.word	0x200002d8
 80012f4:	20000000 	.word	0x20000000
 80012f8:	3d75c28f 	.word	0x3d75c28f
 80012fc:	3df5c28f 	.word	0x3df5c28f
 8001300:	3e3851ec 	.word	0x3e3851ec
 8001304:	3e75c28f 	.word	0x3e75c28f
 8001308:	3f3ae148 	.word	0x3f3ae148
 800130c:	40021000 	.word	0x40021000

08001310 <_Z18LIS3DSH_GetDataRawv>:

//2. Get Accelerometer raw data
LIS3DSH_DataRaw LIS3DSH_GetDataRaw(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b084      	sub	sp, #16
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
	uint8_t spiBuf[2];
	LIS3DSH_DataRaw tempDataRaw;
	//Read X data
	LIS3DSH_ReadIO(LIS3DSH_OUT_X_L_ADDR, spiBuf, 2);
 8001318:	f107 030c 	add.w	r3, r7, #12
 800131c:	2202      	movs	r2, #2
 800131e:	4619      	mov	r1, r3
 8001320:	2028      	movs	r0, #40	; 0x28
 8001322:	f7ff feed 	bl	8001100 <_Z14LIS3DSH_ReadIOhPhh>
	tempDataRaw.x = ((spiBuf[1] << 8) + spiBuf[0]);
 8001326:	7b7b      	ldrb	r3, [r7, #13]
 8001328:	b29b      	uxth	r3, r3
 800132a:	021b      	lsls	r3, r3, #8
 800132c:	b29a      	uxth	r2, r3
 800132e:	7b3b      	ldrb	r3, [r7, #12]
 8001330:	b29b      	uxth	r3, r3
 8001332:	4413      	add	r3, r2
 8001334:	b29b      	uxth	r3, r3
 8001336:	b21a      	sxth	r2, r3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	801a      	strh	r2, [r3, #0]

	//Read Y data
	LIS3DSH_ReadIO(LIS3DSH_OUT_Y_L_ADDR, spiBuf, 2);
 800133c:	f107 030c 	add.w	r3, r7, #12
 8001340:	2202      	movs	r2, #2
 8001342:	4619      	mov	r1, r3
 8001344:	202a      	movs	r0, #42	; 0x2a
 8001346:	f7ff fedb 	bl	8001100 <_Z14LIS3DSH_ReadIOhPhh>
	tempDataRaw.y = ((spiBuf[1] << 8) + spiBuf[0]);
 800134a:	7b7b      	ldrb	r3, [r7, #13]
 800134c:	b29b      	uxth	r3, r3
 800134e:	021b      	lsls	r3, r3, #8
 8001350:	b29a      	uxth	r2, r3
 8001352:	7b3b      	ldrb	r3, [r7, #12]
 8001354:	b29b      	uxth	r3, r3
 8001356:	4413      	add	r3, r2
 8001358:	b29b      	uxth	r3, r3
 800135a:	b21a      	sxth	r2, r3
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	805a      	strh	r2, [r3, #2]

	//Read Z data
	LIS3DSH_ReadIO(LIS3DSH_OUT_Z_L_ADDR, spiBuf, 2);
 8001360:	f107 030c 	add.w	r3, r7, #12
 8001364:	2202      	movs	r2, #2
 8001366:	4619      	mov	r1, r3
 8001368:	202c      	movs	r0, #44	; 0x2c
 800136a:	f7ff fec9 	bl	8001100 <_Z14LIS3DSH_ReadIOhPhh>
	tempDataRaw.z = ((spiBuf[1] << 8) + spiBuf[0]);
 800136e:	7b7b      	ldrb	r3, [r7, #13]
 8001370:	b29b      	uxth	r3, r3
 8001372:	021b      	lsls	r3, r3, #8
 8001374:	b29a      	uxth	r2, r3
 8001376:	7b3b      	ldrb	r3, [r7, #12]
 8001378:	b29b      	uxth	r3, r3
 800137a:	4413      	add	r3, r2
 800137c:	b29b      	uxth	r3, r3
 800137e:	b21a      	sxth	r2, r3
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	809a      	strh	r2, [r3, #4]

	return tempDataRaw;
 8001384:	bf00      	nop

}
 8001386:	6878      	ldr	r0, [r7, #4]
 8001388:	3710      	adds	r7, #16
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
	...

08001390 <_Z21LIS3DSH_GetDataScaledv>:
//3. Get Accelerometer mg data
LIS3DSH_DataScaled LIS3DSH_GetDataScaled(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b08c      	sub	sp, #48	; 0x30
 8001394:	af00      	add	r7, sp, #0
	//Read raw data
	LIS3DSH_DataRaw tempRawData = LIS3DSH_GetDataRaw();;
 8001396:	f107 031c 	add.w	r3, r7, #28
 800139a:	4618      	mov	r0, r3
 800139c:	f7ff ffb8 	bl	8001310 <_Z18LIS3DSH_GetDataRawv>
	//Scale data and return
	LIS3DSH_DataScaled tempScaledData;
	tempScaledData.x = (tempRawData.x * lis3dsh_Sensitivity * __X_Scale) + 0.0f - __X_Bias;
 80013a0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80013a4:	ee07 3a90 	vmov	s15, r3
 80013a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013ac:	4b31      	ldr	r3, [pc, #196]	; (8001474 <_Z21LIS3DSH_GetDataScaledv+0xe4>)
 80013ae:	edd3 7a00 	vldr	s15, [r3]
 80013b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013b6:	4b30      	ldr	r3, [pc, #192]	; (8001478 <_Z21LIS3DSH_GetDataScaledv+0xe8>)
 80013b8:	edd3 7a00 	vldr	s15, [r3]
 80013bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013c0:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 800147c <_Z21LIS3DSH_GetDataScaledv+0xec>
 80013c4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80013c8:	4b2d      	ldr	r3, [pc, #180]	; (8001480 <_Z21LIS3DSH_GetDataScaledv+0xf0>)
 80013ca:	edd3 7a00 	vldr	s15, [r3]
 80013ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013d2:	edc7 7a04 	vstr	s15, [r7, #16]
	tempScaledData.y = (tempRawData.y * lis3dsh_Sensitivity * __Y_Scale) + 0.0f - __Y_Bias;
 80013d6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80013da:	ee07 3a90 	vmov	s15, r3
 80013de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013e2:	4b24      	ldr	r3, [pc, #144]	; (8001474 <_Z21LIS3DSH_GetDataScaledv+0xe4>)
 80013e4:	edd3 7a00 	vldr	s15, [r3]
 80013e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013ec:	4b25      	ldr	r3, [pc, #148]	; (8001484 <_Z21LIS3DSH_GetDataScaledv+0xf4>)
 80013ee:	edd3 7a00 	vldr	s15, [r3]
 80013f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013f6:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800147c <_Z21LIS3DSH_GetDataScaledv+0xec>
 80013fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80013fe:	4b22      	ldr	r3, [pc, #136]	; (8001488 <_Z21LIS3DSH_GetDataScaledv+0xf8>)
 8001400:	edd3 7a00 	vldr	s15, [r3]
 8001404:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001408:	edc7 7a05 	vstr	s15, [r7, #20]
	tempScaledData.z = (tempRawData.z * lis3dsh_Sensitivity * __Z_Scale) + 0.0f - __Z_Bias;
 800140c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001410:	ee07 3a90 	vmov	s15, r3
 8001414:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001418:	4b16      	ldr	r3, [pc, #88]	; (8001474 <_Z21LIS3DSH_GetDataScaledv+0xe4>)
 800141a:	edd3 7a00 	vldr	s15, [r3]
 800141e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001422:	4b1a      	ldr	r3, [pc, #104]	; (800148c <_Z21LIS3DSH_GetDataScaledv+0xfc>)
 8001424:	edd3 7a00 	vldr	s15, [r3]
 8001428:	ee67 7a27 	vmul.f32	s15, s14, s15
 800142c:	ed9f 7a13 	vldr	s14, [pc, #76]	; 800147c <_Z21LIS3DSH_GetDataScaledv+0xec>
 8001430:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001434:	4b16      	ldr	r3, [pc, #88]	; (8001490 <_Z21LIS3DSH_GetDataScaledv+0x100>)
 8001436:	edd3 7a00 	vldr	s15, [r3]
 800143a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800143e:	edc7 7a06 	vstr	s15, [r7, #24]

	return tempScaledData;
 8001442:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001446:	f107 0210 	add.w	r2, r7, #16
 800144a:	ca07      	ldmia	r2, {r0, r1, r2}
 800144c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001450:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001452:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001456:	ee06 1a90 	vmov	s13, r1
 800145a:	ee07 2a10 	vmov	s14, r2
 800145e:	ee07 3a90 	vmov	s15, r3
}
 8001462:	eeb0 0a66 	vmov.f32	s0, s13
 8001466:	eef0 0a47 	vmov.f32	s1, s14
 800146a:	eeb0 1a67 	vmov.f32	s2, s15
 800146e:	3730      	adds	r7, #48	; 0x30
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	20000000 	.word	0x20000000
 8001478:	20000004 	.word	0x20000004
 800147c:	00000000 	.word	0x00000000
 8001480:	20000330 	.word	0x20000330
 8001484:	20000008 	.word	0x20000008
 8001488:	20000334 	.word	0x20000334
 800148c:	2000000c 	.word	0x2000000c
 8001490:	20000338 	.word	0x20000338

08001494 <_Z19LIS3DSH_X_calibrateff>:

}
//** Calibration functions **//
//1. Set X-Axis calibrate
void LIS3DSH_X_calibrate(float x_min, float x_max)
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	ed87 0a01 	vstr	s0, [r7, #4]
 800149e:	edc7 0a00 	vstr	s1, [r7]
	__X_Bias = (x_max+x_min)/2.0f;
 80014a2:	ed97 7a00 	vldr	s14, [r7]
 80014a6:	edd7 7a01 	vldr	s15, [r7, #4]
 80014aa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014ae:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80014b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014b6:	4b0b      	ldr	r3, [pc, #44]	; (80014e4 <_Z19LIS3DSH_X_calibrateff+0x50>)
 80014b8:	edc3 7a00 	vstr	s15, [r3]
	__X_Scale = (2*1000)/(x_max - x_min);
 80014bc:	ed97 7a00 	vldr	s14, [r7]
 80014c0:	edd7 7a01 	vldr	s15, [r7, #4]
 80014c4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80014c8:	eddf 6a07 	vldr	s13, [pc, #28]	; 80014e8 <_Z19LIS3DSH_X_calibrateff+0x54>
 80014cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014d0:	4b06      	ldr	r3, [pc, #24]	; (80014ec <_Z19LIS3DSH_X_calibrateff+0x58>)
 80014d2:	edc3 7a00 	vstr	s15, [r3]
}
 80014d6:	bf00      	nop
 80014d8:	370c      	adds	r7, #12
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	20000330 	.word	0x20000330
 80014e8:	44fa0000 	.word	0x44fa0000
 80014ec:	20000004 	.word	0x20000004

080014f0 <_Z19LIS3DSH_Y_calibrateff>:
//2. Set Y-Axis calibrate
void LIS3DSH_Y_calibrate(float y_min, float y_max)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	ed87 0a01 	vstr	s0, [r7, #4]
 80014fa:	edc7 0a00 	vstr	s1, [r7]
	__Y_Bias = (y_max+y_min)/2.0f;
 80014fe:	ed97 7a00 	vldr	s14, [r7]
 8001502:	edd7 7a01 	vldr	s15, [r7, #4]
 8001506:	ee37 7a27 	vadd.f32	s14, s14, s15
 800150a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800150e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001512:	4b0b      	ldr	r3, [pc, #44]	; (8001540 <_Z19LIS3DSH_Y_calibrateff+0x50>)
 8001514:	edc3 7a00 	vstr	s15, [r3]
	__Y_Scale = (2*1000)/(y_max - y_min);
 8001518:	ed97 7a00 	vldr	s14, [r7]
 800151c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001520:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001524:	eddf 6a07 	vldr	s13, [pc, #28]	; 8001544 <_Z19LIS3DSH_Y_calibrateff+0x54>
 8001528:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800152c:	4b06      	ldr	r3, [pc, #24]	; (8001548 <_Z19LIS3DSH_Y_calibrateff+0x58>)
 800152e:	edc3 7a00 	vstr	s15, [r3]
}
 8001532:	bf00      	nop
 8001534:	370c      	adds	r7, #12
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	20000334 	.word	0x20000334
 8001544:	44fa0000 	.word	0x44fa0000
 8001548:	20000008 	.word	0x20000008

0800154c <_Z19LIS3DSH_Z_calibrateff>:
//3. Set Z-Axis calibrate
void LIS3DSH_Z_calibrate(float z_min, float z_max)
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	ed87 0a01 	vstr	s0, [r7, #4]
 8001556:	edc7 0a00 	vstr	s1, [r7]
	__Z_Bias = (z_max+z_min)/2.0f;
 800155a:	ed97 7a00 	vldr	s14, [r7]
 800155e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001562:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001566:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800156a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800156e:	4b0b      	ldr	r3, [pc, #44]	; (800159c <_Z19LIS3DSH_Z_calibrateff+0x50>)
 8001570:	edc3 7a00 	vstr	s15, [r3]
	__Z_Scale = (2*1000)/(z_max - z_min);
 8001574:	ed97 7a00 	vldr	s14, [r7]
 8001578:	edd7 7a01 	vldr	s15, [r7, #4]
 800157c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001580:	eddf 6a07 	vldr	s13, [pc, #28]	; 80015a0 <_Z19LIS3DSH_Z_calibrateff+0x54>
 8001584:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001588:	4b06      	ldr	r3, [pc, #24]	; (80015a4 <_Z19LIS3DSH_Z_calibrateff+0x58>)
 800158a:	edc3 7a00 	vstr	s15, [r3]
}
 800158e:	bf00      	nop
 8001590:	370c      	adds	r7, #12
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	20000338 	.word	0x20000338
 80015a0:	44fa0000 	.word	0x44fa0000
 80015a4:	2000000c 	.word	0x2000000c

080015a8 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
 80015b0:	6039      	str	r1, [r7, #0]
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	4618      	mov	r0, r3
 80015b6:	370c      	adds	r7, #12
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr

080015c0 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj>:
* aligned_malloc takes in the requested alignment and size
*	We will call malloc with extra bytes for our header and the offset
*	required to guarantee the desired alignment.
*/
__attribute__((unused)) void * ei_aligned_calloc(size_t align, size_t size)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b086      	sub	sp, #24
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	6039      	str	r1, [r7, #0]
	void * ptr = NULL;
 80015ca:	2300      	movs	r3, #0
 80015cc:	617b      	str	r3, [r7, #20]

	//We want it to be a power of two since align_up operates on powers of two
	assert((align & (align - 1)) == 0);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	1e5a      	subs	r2, r3, #1
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	4013      	ands	r3, r2
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d005      	beq.n	80015e6 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x26>
 80015da:	4b17      	ldr	r3, [pc, #92]	; (8001638 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x78>)
 80015dc:	4a17      	ldr	r2, [pc, #92]	; (800163c <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x7c>)
 80015de:	2137      	movs	r1, #55	; 0x37
 80015e0:	4817      	ldr	r0, [pc, #92]	; (8001640 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x80>)
 80015e2:	f018 fedf 	bl	801a3a4 <__assert_func>

	if(align && size)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d01f      	beq.n	800162c <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x6c>
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d01c      	beq.n	800162c <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x6c>
	{
		/*
		 * We know we have to fit an offset value
		 * We also allocate extra bytes to ensure we can meet the alignment
		 */
		uint32_t hdr_size = PTR_OFFSET_SZ + (align - 1);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	3301      	adds	r3, #1
 80015f6:	613b      	str	r3, [r7, #16]
		void * p = ei_calloc(size + hdr_size, 1);
 80015f8:	683a      	ldr	r2, [r7, #0]
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	4413      	add	r3, r2
 80015fe:	2101      	movs	r1, #1
 8001600:	4618      	mov	r0, r3
 8001602:	f011 fce5 	bl	8012fd0 <_Z9ei_callocjj>
 8001606:	60f8      	str	r0, [r7, #12]

		if(p)
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d00e      	beq.n	800162c <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x6c>
		{
			/*
			 * Add the offset size to malloc's pointer (we will always store that)
			 * Then align the resulting value to the arget alignment
			 */
			ptr = (void *) align_up(((uintptr_t)p + PTR_OFFSET_SZ), align);
 800160e:	68fa      	ldr	r2, [r7, #12]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	4413      	add	r3, r2
 8001614:	1c5a      	adds	r2, r3, #1
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	425b      	negs	r3, r3
 800161a:	4013      	ands	r3, r2
 800161c:	617b      	str	r3, [r7, #20]

			//Calculate the offset and store it behind our aligned pointer
			*((offset_t *)ptr - 1) = (offset_t)((uintptr_t)ptr - (uintptr_t)p);
 800161e:	697a      	ldr	r2, [r7, #20]
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	1ad2      	subs	r2, r2, r3
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	3b02      	subs	r3, #2
 8001628:	b292      	uxth	r2, r2
 800162a:	801a      	strh	r2, [r3, #0]

		} // else NULL, could not malloc
	} //else NULL, invalid arguments

	return ptr;
 800162c:	697b      	ldr	r3, [r7, #20]
}
 800162e:	4618      	mov	r0, r3
 8001630:	3718      	adds	r7, #24
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	0801b830 	.word	0x0801b830
 800163c:	0801b84c 	.word	0x0801b84c
 8001640:	0801b884 	.word	0x0801b884

08001644 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv>:
* aligned_free works like free(), but we work backwards from the returned
* pointer to find the correct offset and pointer location to return to free()
* Note that it is VERY BAD to call free() on an aligned_malloc() pointer.
*/
__attribute__((unused)) void ei_aligned_free(void * ptr)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b084      	sub	sp, #16
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
	assert(ptr);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d105      	bne.n	800165e <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x1a>
 8001652:	4b0b      	ldr	r3, [pc, #44]	; (8001680 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x3c>)
 8001654:	4a0b      	ldr	r2, [pc, #44]	; (8001684 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x40>)
 8001656:	215a      	movs	r1, #90	; 0x5a
 8001658:	480b      	ldr	r0, [pc, #44]	; (8001688 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x44>)
 800165a:	f018 fea3 	bl	801a3a4 <__assert_func>

	/*
	* Walk backwards from the passed-in pointer to get the pointer offset
	* We convert to an offset_t pointer and rely on pointer math to get the data
	*/
	offset_t offset = *((offset_t *)ptr - 1);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	f833 3c02 	ldrh.w	r3, [r3, #-2]
 8001664:	81fb      	strh	r3, [r7, #14]

	/*
	* Once we have the offset, we can get our original pointer and call free
	*/
	void * p = (void *)((uint8_t *)ptr - offset);
 8001666:	89fb      	ldrh	r3, [r7, #14]
 8001668:	425b      	negs	r3, r3
 800166a:	687a      	ldr	r2, [r7, #4]
 800166c:	4413      	add	r3, r2
 800166e:	60bb      	str	r3, [r7, #8]
	ei_free(p);
 8001670:	68b8      	ldr	r0, [r7, #8]
 8001672:	f011 fcbb 	bl	8012fec <_Z7ei_freePv>
}
 8001676:	bf00      	nop
 8001678:	3710      	adds	r7, #16
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	0801b900 	.word	0x0801b900
 8001684:	0801b904 	.word	0x0801b904
 8001688:	0801b884 	.word	0x0801b884

0800168c <_ZNSt9_Any_data9_M_accessEv>:
    void (_Undefined_class::*_M_member_pointer)();
  };

  union [[gnu::may_alias]] _Any_data
  {
    void*       _M_access()       { return &_M_pod_data[0]; }
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	4618      	mov	r0, r3
 8001698:	370c      	adds	r7, #12
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr

080016a2 <_ZNKSt9_Any_data9_M_accessEv>:
    const void* _M_access() const { return &_M_pod_data[0]; }
 80016a2:	b480      	push	{r7}
 80016a4:	b083      	sub	sp, #12
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	6078      	str	r0, [r7, #4]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	4618      	mov	r0, r3
 80016ae:	370c      	adds	r7, #12
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr

080016b8 <_ZNSt14_Function_baseC1Ev>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2200      	movs	r2, #0
 80016c4:	609a      	str	r2, [r3, #8]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	4618      	mov	r0, r3
 80016ca:	370c      	adds	r7, #12
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr

080016d4 <_ZNSt14_Function_baseD1Ev>:

    ~_Function_base()
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	689b      	ldr	r3, [r3, #8]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d005      	beq.n	80016f0 <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	6878      	ldr	r0, [r7, #4]
 80016ea:	6879      	ldr	r1, [r7, #4]
 80016ec:	2203      	movs	r2, #3
 80016ee:	4798      	blx	r3
    }
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	4618      	mov	r0, r3
 80016f4:	3708      	adds	r7, #8
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}

080016fa <_ZNKSt14_Function_base8_M_emptyEv>:

    bool _M_empty() const { return !_M_manager; }
 80016fa:	b480      	push	{r7}
 80016fc:	b083      	sub	sp, #12
 80016fe:	af00      	add	r7, sp, #0
 8001700:	6078      	str	r0, [r7, #4]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	2b00      	cmp	r3, #0
 8001708:	bf0c      	ite	eq
 800170a:	2301      	moveq	r3, #1
 800170c:	2300      	movne	r3, #0
 800170e:	b2db      	uxtb	r3, r3
 8001710:	4618      	mov	r0, r3
 8001712:	370c      	adds	r7, #12
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr

0800171c <_ZN2ei9ei_matrixC1EmmPf>:
     * Create a new matrix
     * @param n_rows Number of rows
     * @param n_cols Number of columns
     * @param a_buffer Buffer, if not provided we'll alloc on the heap
     */
    ei_matrix(
 800171c:	b580      	push	{r7, lr}
 800171e:	b084      	sub	sp, #16
 8001720:	af00      	add	r7, sp, #0
 8001722:	60f8      	str	r0, [r7, #12]
 8001724:	60b9      	str	r1, [r7, #8]
 8001726:	607a      	str	r2, [r7, #4]
 8001728:	603b      	str	r3, [r7, #0]
        const char *file = NULL,
        int line = 0
#endif
        )
    {
        if (a_buffer) {
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d006      	beq.n	800173e <_ZN2ei9ei_matrixC1EmmPf+0x22>
            buffer = a_buffer;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	683a      	ldr	r2, [r7, #0]
 8001734:	601a      	str	r2, [r3, #0]
            buffer_managed_by_me = false;
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	2200      	movs	r2, #0
 800173a:	731a      	strb	r2, [r3, #12]
 800173c:	e00e      	b.n	800175c <_ZN2ei9ei_matrixC1EmmPf+0x40>
        }
        else {
            buffer = (float*)ei_calloc(n_rows * n_cols * sizeof(float), 1);
 800173e:	68bb      	ldr	r3, [r7, #8]
 8001740:	687a      	ldr	r2, [r7, #4]
 8001742:	fb02 f303 	mul.w	r3, r2, r3
 8001746:	009b      	lsls	r3, r3, #2
 8001748:	2101      	movs	r1, #1
 800174a:	4618      	mov	r0, r3
 800174c:	f011 fc40 	bl	8012fd0 <_Z9ei_callocjj>
 8001750:	4602      	mov	r2, r0
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	601a      	str	r2, [r3, #0]
            buffer_managed_by_me = true;
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	2201      	movs	r2, #1
 800175a:	731a      	strb	r2, [r3, #12]
        }
        rows = n_rows;
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	68ba      	ldr	r2, [r7, #8]
 8001760:	605a      	str	r2, [r3, #4]
        cols = n_cols;
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	687a      	ldr	r2, [r7, #4]
 8001766:	609a      	str	r2, [r3, #8]
            else {
                ei_dsp_register_matrix_alloc(rows, cols, sizeof(float), buffer);
            }
#endif
        }
    }
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	4618      	mov	r0, r3
 800176c:	3710      	adds	r7, #16
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}

08001772 <_ZN2ei9ei_matrixD1Ev>:

    ~ei_matrix() {
 8001772:	b580      	push	{r7, lr}
 8001774:	b082      	sub	sp, #8
 8001776:	af00      	add	r7, sp, #0
 8001778:	6078      	str	r0, [r7, #4]
        if (buffer && buffer_managed_by_me) {
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d008      	beq.n	8001794 <_ZN2ei9ei_matrixD1Ev+0x22>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	7b1b      	ldrb	r3, [r3, #12]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d004      	beq.n	8001794 <_ZN2ei9ei_matrixD1Ev+0x22>
            ei_free(buffer);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4618      	mov	r0, r3
 8001790:	f011 fc2c 	bl	8012fec <_Z7ei_freePv>
                ei_dsp_register_matrix_free(_originally_allocated_rows, _originally_allocated_cols,
                    sizeof(float), buffer);
            }
#endif
        }
    }
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	4618      	mov	r0, r3
 8001798:	3708      	adds	r7, #8
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}

0800179e <_ZN2ei12ei_matrix_i8C1EmmPa>:
     * Create a new matrix
     * @param n_rows Number of rows
     * @param n_cols Number of columns
     * @param a_buffer Buffer, if not provided we'll alloc on the heap
     */
    ei_matrix_i8(
 800179e:	b580      	push	{r7, lr}
 80017a0:	b084      	sub	sp, #16
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	60f8      	str	r0, [r7, #12]
 80017a6:	60b9      	str	r1, [r7, #8]
 80017a8:	607a      	str	r2, [r7, #4]
 80017aa:	603b      	str	r3, [r7, #0]
        const char *file = NULL,
        int line = 0
#endif
        )
    {
        if (a_buffer) {
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d006      	beq.n	80017c0 <_ZN2ei12ei_matrix_i8C1EmmPa+0x22>
            buffer = a_buffer;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	683a      	ldr	r2, [r7, #0]
 80017b6:	601a      	str	r2, [r3, #0]
            buffer_managed_by_me = false;
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	2200      	movs	r2, #0
 80017bc:	731a      	strb	r2, [r3, #12]
 80017be:	e00d      	b.n	80017dc <_ZN2ei12ei_matrix_i8C1EmmPa+0x3e>
        }
        else {
            buffer = (int8_t*)ei_calloc(n_rows * n_cols * sizeof(int8_t), 1);
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	687a      	ldr	r2, [r7, #4]
 80017c4:	fb02 f303 	mul.w	r3, r2, r3
 80017c8:	2101      	movs	r1, #1
 80017ca:	4618      	mov	r0, r3
 80017cc:	f011 fc00 	bl	8012fd0 <_Z9ei_callocjj>
 80017d0:	4602      	mov	r2, r0
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	601a      	str	r2, [r3, #0]
            buffer_managed_by_me = true;
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	2201      	movs	r2, #1
 80017da:	731a      	strb	r2, [r3, #12]
        }
        rows = n_rows;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	68ba      	ldr	r2, [r7, #8]
 80017e0:	605a      	str	r2, [r3, #4]
        cols = n_cols;
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	687a      	ldr	r2, [r7, #4]
 80017e6:	609a      	str	r2, [r3, #8]
            else {
                ei_dsp_register_matrix_alloc(rows, cols, sizeof(int8_t), buffer);
            }
#endif
        }
    }
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	4618      	mov	r0, r3
 80017ec:	3710      	adds	r7, #16
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}

080017f2 <_ZN2ei12ei_matrix_i8D1Ev>:

    ~ei_matrix_i8() {
 80017f2:	b580      	push	{r7, lr}
 80017f4:	b082      	sub	sp, #8
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	6078      	str	r0, [r7, #4]
        if (buffer && buffer_managed_by_me) {
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d008      	beq.n	8001814 <_ZN2ei12ei_matrix_i8D1Ev+0x22>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	7b1b      	ldrb	r3, [r3, #12]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d004      	beq.n	8001814 <_ZN2ei12ei_matrix_i8D1Ev+0x22>
            ei_free(buffer);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4618      	mov	r0, r3
 8001810:	f011 fbec 	bl	8012fec <_Z7ei_freePv>
                ei_dsp_register_matrix_free(_originally_allocated_rows, _originally_allocated_cols,
                    sizeof(int8_t), buffer);
            }
#endif
        }
    }
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	4618      	mov	r0, r3
 8001818:	3708      	adds	r7, #8
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}

0800181e <_ZSt25__throw_bad_function_callv>:
#endif // __cplusplus

// required on Adafruit nRF52, it seems not to matter too much on other targets...
#ifdef __cplusplus
namespace std {
    __attribute__((weak)) void __throw_bad_function_call() { while(1); };
 800181e:	b480      	push	{r7}
 8001820:	af00      	add	r7, sp, #0
 8001822:	e7fe      	b.n	8001822 <_ZSt25__throw_bad_function_callv+0x4>

08001824 <_ZSt3expf>:
  using ::exp;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  exp(float __x)
  { return __builtin_expf(__x); }
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
 800182a:	ed87 0a01 	vstr	s0, [r7, #4]
 800182e:	ed97 0a01 	vldr	s0, [r7, #4]
 8001832:	f017 fc33 	bl	801909c <expf>
 8001836:	eef0 7a40 	vmov.f32	s15, s0
 800183a:	eeb0 0a67 	vmov.f32	s0, s15
 800183e:	3708      	adds	r7, #8
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}

08001844 <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
 800184a:	ed87 0a01 	vstr	s0, [r7, #4]
 800184e:	ed97 0a01 	vldr	s0, [r7, #4]
 8001852:	f017 fb8f 	bl	8018f74 <roundf>
 8001856:	eef0 7a40 	vmov.f32	s15, s0
 800185a:	eeb0 0a67 	vmov.f32	s0, s15
 800185e:	3708      	adds	r7, #8
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}

08001864 <_ZN2ei5numpy9transposeEPNS_9ei_matrixE>:
     * @param rows
     * @param columns
     * @deprecated You probably want to use transpose_in_place
     * @returns EIDSP_OK if OK
     */
    static int transpose(matrix_t *matrix) {
 8001864:	b580      	push	{r7, lr}
 8001866:	b084      	sub	sp, #16
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
        int r = transpose(matrix->buffer, matrix->cols, matrix->rows);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6818      	ldr	r0, [r3, #0]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	4619      	mov	r1, r3
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	461a      	mov	r2, r3
 800187c:	f000 f818 	bl	80018b0 <_ZN2ei5numpy9transposeEPfii>
 8001880:	60f8      	str	r0, [r7, #12]
        if (r != 0) {
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d001      	beq.n	800188c <_ZN2ei5numpy9transposeEPNS_9ei_matrixE+0x28>
            return r;
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	e00c      	b.n	80018a6 <_ZN2ei5numpy9transposeEPNS_9ei_matrixE+0x42>
        }

        uint16_t old_rows = matrix->rows;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	817b      	strh	r3, [r7, #10]
        uint16_t old_cols = matrix->cols;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	813b      	strh	r3, [r7, #8]

        matrix->rows = old_cols;
 8001898:	893a      	ldrh	r2, [r7, #8]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	605a      	str	r2, [r3, #4]
        matrix->cols = old_rows;
 800189e:	897a      	ldrh	r2, [r7, #10]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	609a      	str	r2, [r3, #8]

        return EIDSP_OK;
 80018a4:	2300      	movs	r3, #0
    }
 80018a6:	4618      	mov	r0, r3
 80018a8:	3710      	adds	r7, #16
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
	...

080018b0 <_ZN2ei5numpy9transposeEPfii>:
     * @param rows
     * @param columns
     * @deprecated You probably want to use transpose_in_place
     * @returns EIDSP_OK if OK
     */
    static int transpose(float *matrix, int rows, int columns) {
 80018b0:	b590      	push	{r4, r7, lr}
 80018b2:	b08f      	sub	sp, #60	; 0x3c
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	60f8      	str	r0, [r7, #12]
 80018b8:	60b9      	str	r1, [r7, #8]
 80018ba:	607a      	str	r2, [r7, #4]
        EI_DSP_MATRIX(temp_matrix, rows, columns);
 80018bc:	68b9      	ldr	r1, [r7, #8]
 80018be:	687a      	ldr	r2, [r7, #4]
 80018c0:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80018c4:	2300      	movs	r3, #0
 80018c6:	f7ff ff29 	bl	800171c <_ZN2ei9ei_matrixC1EmmPf>
 80018ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d101      	bne.n	80018d4 <_ZN2ei5numpy9transposeEPfii+0x24>
 80018d0:	4c23      	ldr	r4, [pc, #140]	; (8001960 <_ZN2ei5numpy9transposeEPfii+0xb0>)
 80018d2:	e03b      	b.n	800194c <_ZN2ei5numpy9transposeEPfii+0x9c>
        if (!temp_matrix.buffer) {
 80018d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d101      	bne.n	80018de <_ZN2ei5numpy9transposeEPfii+0x2e>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 80018da:	4c21      	ldr	r4, [pc, #132]	; (8001960 <_ZN2ei5numpy9transposeEPfii+0xb0>)
 80018dc:	e036      	b.n	800194c <_ZN2ei5numpy9transposeEPfii+0x9c>
        }

#if EIDSP_USE_CMSIS_DSP
        if (rows > EI_MAX_UINT16 || columns > EI_MAX_UINT16) {
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018e4:	da03      	bge.n	80018ee <_ZN2ei5numpy9transposeEPfii+0x3e>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018ec:	db01      	blt.n	80018f2 <_ZN2ei5numpy9transposeEPfii+0x42>
            return EIDSP_NARROWING;
 80018ee:	4c1d      	ldr	r4, [pc, #116]	; (8001964 <_ZN2ei5numpy9transposeEPfii+0xb4>)
 80018f0:	e02c      	b.n	800194c <_ZN2ei5numpy9transposeEPfii+0x9c>

        const arm_matrix_instance_f32 i_m = {
            static_cast<uint16_t>(columns),
            static_cast<uint16_t>(rows),
            matrix
        };
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	b29b      	uxth	r3, r3
 80018f6:	83bb      	strh	r3, [r7, #28]
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	b29b      	uxth	r3, r3
 80018fc:	83fb      	strh	r3, [r7, #30]
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	623b      	str	r3, [r7, #32]
        arm_matrix_instance_f32 o_m = {
            static_cast<uint16_t>(rows),
            static_cast<uint16_t>(columns),
            temp_matrix.buffer
        };
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	b29b      	uxth	r3, r3
 8001906:	82bb      	strh	r3, [r7, #20]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	b29b      	uxth	r3, r3
 800190c:	82fb      	strh	r3, [r7, #22]
            temp_matrix.buffer
 800190e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        };
 8001910:	61bb      	str	r3, [r7, #24]
        arm_status status = arm_mat_trans_f32(&i_m, &o_m);
 8001912:	f107 0214 	add.w	r2, r7, #20
 8001916:	f107 031c 	add.w	r3, r7, #28
 800191a:	4611      	mov	r1, r2
 800191c:	4618      	mov	r0, r3
 800191e:	f00a f9e9 	bl	800bcf4 <arm_mat_trans_f32>
 8001922:	4603      	mov	r3, r0
 8001924:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        if (status != ARM_MATH_SUCCESS) {
 8001928:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800192c:	2b00      	cmp	r3, #0
 800192e:	d002      	beq.n	8001936 <_ZN2ei5numpy9transposeEPfii+0x86>
            return status;
 8001930:	f997 4037 	ldrsb.w	r4, [r7, #55]	; 0x37
 8001934:	e00a      	b.n	800194c <_ZN2ei5numpy9transposeEPfii+0x9c>
                temp_matrix.buffer[j * columns + i] = matrix[i * rows + j];
            }
        }
#endif

        memcpy(matrix, temp_matrix.buffer, rows * columns * sizeof(float));
 8001936:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	687a      	ldr	r2, [r7, #4]
 800193c:	fb02 f303 	mul.w	r3, r2, r3
 8001940:	009b      	lsls	r3, r3, #2
 8001942:	461a      	mov	r2, r3
 8001944:	68f8      	ldr	r0, [r7, #12]
 8001946:	f018 fda3 	bl	801a490 <memcpy>

        return EIDSP_OK;
 800194a:	2400      	movs	r4, #0
        EI_DSP_MATRIX(temp_matrix, rows, columns);
 800194c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001950:	4618      	mov	r0, r3
 8001952:	f7ff ff0e 	bl	8001772 <_ZN2ei9ei_matrixD1Ev>
    }
 8001956:	4623      	mov	r3, r4
 8001958:	4618      	mov	r0, r3
 800195a:	373c      	adds	r7, #60	; 0x3c
 800195c:	46bd      	mov	sp, r7
 800195e:	bd90      	pop	{r4, r7, pc}
 8001960:	fffffc16 	.word	0xfffffc16
 8001964:	fffffc0c 	.word	0xfffffc0c

08001968 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf>:
     * Scale a matrix in place
     * @param matrix
     * @param scale
     * @returns 0 if OK
     */
    static int scale(matrix_t *matrix, float scale) {
 8001968:	b580      	push	{r7, lr}
 800196a:	b088      	sub	sp, #32
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
 8001970:	ed87 0a00 	vstr	s0, [r7]
        if (scale == 1.0f) return EIDSP_OK;
 8001974:	edd7 7a00 	vldr	s15, [r7]
 8001978:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800197c:	eef4 7a47 	vcmp.f32	s15, s14
 8001980:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001984:	d101      	bne.n	800198a <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x22>
 8001986:	2300      	movs	r3, #0
 8001988:	e033      	b.n	80019f2 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x8a>

#if EIDSP_USE_CMSIS_DSP
        if (matrix->rows > EI_MAX_UINT16 || matrix->cols > EI_MAX_UINT16) {
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001992:	d204      	bcs.n	800199e <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x36>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800199c:	d301      	bcc.n	80019a2 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x3a>
            return EIDSP_NARROWING;
 800199e:	4b17      	ldr	r3, [pc, #92]	; (80019fc <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x94>)
 80019a0:	e027      	b.n	80019f2 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x8a>
        }

        const arm_matrix_instance_f32 mi = { static_cast<uint16_t>(matrix->rows), static_cast<uint16_t>(matrix->cols), matrix->buffer };
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	b29b      	uxth	r3, r3
 80019a8:	82bb      	strh	r3, [r7, #20]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	b29b      	uxth	r3, r3
 80019b0:	82fb      	strh	r3, [r7, #22]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	61bb      	str	r3, [r7, #24]
        arm_matrix_instance_f32 mo = { static_cast<uint16_t>(matrix->rows), static_cast<uint16_t>(matrix->cols), matrix->buffer };
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	b29b      	uxth	r3, r3
 80019be:	81bb      	strh	r3, [r7, #12]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	b29b      	uxth	r3, r3
 80019c6:	81fb      	strh	r3, [r7, #14]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	613b      	str	r3, [r7, #16]
        int status = arm_mat_scale_f32(&mi, scale, &mo);
 80019ce:	f107 020c 	add.w	r2, r7, #12
 80019d2:	f107 0314 	add.w	r3, r7, #20
 80019d6:	4611      	mov	r1, r2
 80019d8:	ed97 0a00 	vldr	s0, [r7]
 80019dc:	4618      	mov	r0, r3
 80019de:	f00a f953 	bl	800bc88 <arm_mat_scale_f32>
 80019e2:	4603      	mov	r3, r0
 80019e4:	61fb      	str	r3, [r7, #28]
        if (status != ARM_MATH_SUCCESS) {
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d001      	beq.n	80019f0 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x88>
            return status;
 80019ec:	69fb      	ldr	r3, [r7, #28]
 80019ee:	e000      	b.n	80019f2 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x8a>
#else
        for (size_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
            matrix->buffer[ix] *= scale;
        }
#endif
        return EIDSP_OK;
 80019f0:	2300      	movs	r3, #0
    }
 80019f2:	4618      	mov	r0, r3
 80019f4:	3720      	adds	r7, #32
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	fffffc0c 	.word	0xfffffc0c

08001a00 <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_>:
     * Calculate the root mean square of a matrix, one per row
     * @param matrix Matrix of size (MxN)
     * @param output_matrix Matrix of size (Mx1)
     * @returns 0 if OK
     */
    static int rms(matrix_t *matrix, matrix_t *output_matrix) {
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b084      	sub	sp, #16
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
 8001a08:	6039      	str	r1, [r7, #0]
        if (matrix->rows != output_matrix->rows) {
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	685a      	ldr	r2, [r3, #4]
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	429a      	cmp	r2, r3
 8001a14:	d001      	beq.n	8001a1a <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x1a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001a16:	4b17      	ldr	r3, [pc, #92]	; (8001a74 <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x74>)
 8001a18:	e028      	b.n	8001a6c <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x6c>
        }

        if (output_matrix->cols != 1) {
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	d001      	beq.n	8001a26 <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x26>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001a22:	4b14      	ldr	r3, [pc, #80]	; (8001a74 <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x74>)
 8001a24:	e022      	b.n	8001a6c <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x6c>
        }

        for (size_t row = 0; row < matrix->rows; row++) {
 8001a26:	2300      	movs	r3, #0
 8001a28:	60fb      	str	r3, [r7, #12]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	68fa      	ldr	r2, [r7, #12]
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d21a      	bcs.n	8001a6a <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x6a>
#if EIDSP_USE_CMSIS_DSP
            float rms_result;
            arm_rms_f32(matrix->buffer + (row * matrix->cols), matrix->cols, &rms_result);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	68f9      	ldr	r1, [r7, #12]
 8001a3e:	fb01 f303 	mul.w	r3, r1, r3
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	18d0      	adds	r0, r2, r3
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	f107 0208 	add.w	r2, r7, #8
 8001a4e:	4619      	mov	r1, r3
 8001a50:	f00a fa30 	bl	800beb4 <arm_rms_f32>
            output_matrix->buffer[row] = rms_result;
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	4413      	add	r3, r2
 8001a5e:	68ba      	ldr	r2, [r7, #8]
 8001a60:	601a      	str	r2, [r3, #0]
        for (size_t row = 0; row < matrix->rows; row++) {
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	3301      	adds	r3, #1
 8001a66:	60fb      	str	r3, [r7, #12]
 8001a68:	e7df      	b.n	8001a2a <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x2a>
            }
            output_matrix->buffer[row] = sqrt(sum / static_cast<float>(matrix->cols));
#endif
        }

        return EIDSP_OK;
 8001a6a:	2300      	movs	r3, #0
    }
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3710      	adds	r7, #16
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	fffffc14 	.word	0xfffffc14

08001a78 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_>:
    /**
     * Calculate the mean over a matrix per row
     * @param input_matrix Input matrix (MxN)
     * @param output_matrix Output matrix (Mx1)
     */
    static int mean(matrix_t *input_matrix, matrix_t *output_matrix) {
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b084      	sub	sp, #16
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
 8001a80:	6039      	str	r1, [r7, #0]
        if (input_matrix->rows != output_matrix->rows) {
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	685a      	ldr	r2, [r3, #4]
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	429a      	cmp	r2, r3
 8001a8c:	d001      	beq.n	8001a92 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x1a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001a8e:	4b17      	ldr	r3, [pc, #92]	; (8001aec <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x74>)
 8001a90:	e028      	b.n	8001ae4 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x6c>
        }
        if (output_matrix->cols != 1) {
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d001      	beq.n	8001a9e <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x26>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001a9a:	4b14      	ldr	r3, [pc, #80]	; (8001aec <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x74>)
 8001a9c:	e022      	b.n	8001ae4 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x6c>
        }

        for (size_t row = 0; row < input_matrix->rows; row++) {
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	60fb      	str	r3, [r7, #12]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	68fa      	ldr	r2, [r7, #12]
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d21a      	bcs.n	8001ae2 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x6a>
#if EIDSP_USE_CMSIS_DSP
            float mean;
            arm_mean_f32(input_matrix->buffer + (row * input_matrix->cols), input_matrix->cols, &mean);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	68f9      	ldr	r1, [r7, #12]
 8001ab6:	fb01 f303 	mul.w	r3, r1, r3
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	18d0      	adds	r0, r2, r3
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	f107 0208 	add.w	r2, r7, #8
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	f00a f98d 	bl	800bde6 <arm_mean_f32>
            output_matrix->buffer[row] = mean;
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	4413      	add	r3, r2
 8001ad6:	68ba      	ldr	r2, [r7, #8]
 8001ad8:	601a      	str	r2, [r3, #0]
        for (size_t row = 0; row < input_matrix->rows; row++) {
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	3301      	adds	r3, #1
 8001ade:	60fb      	str	r3, [r7, #12]
 8001ae0:	e7df      	b.n	8001aa2 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x2a>

            output_matrix->buffer[row] = sum / input_matrix->cols;
#endif
        }

        return EIDSP_OK;
 8001ae2:	2300      	movs	r3, #0
    }
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3710      	adds	r7, #16
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	fffffc14 	.word	0xfffffc14

08001af0 <_ZN2ei5numpy3minEPNS_9ei_matrixES2_>:
    /**
     * Get the minimum value in a matrix per row
     * @param input_matrix Input matrix (MxN)
     * @param output_matrix Output matrix (Mx1)
     */
    static int min(matrix_t *input_matrix, matrix_t *output_matrix) {
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b086      	sub	sp, #24
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
 8001af8:	6039      	str	r1, [r7, #0]
        if (input_matrix->rows != output_matrix->rows) {
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	685a      	ldr	r2, [r3, #4]
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	429a      	cmp	r2, r3
 8001b04:	d001      	beq.n	8001b0a <_ZN2ei5numpy3minEPNS_9ei_matrixES2_+0x1a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001b06:	4b18      	ldr	r3, [pc, #96]	; (8001b68 <_ZN2ei5numpy3minEPNS_9ei_matrixES2_+0x78>)
 8001b08:	e029      	b.n	8001b5e <_ZN2ei5numpy3minEPNS_9ei_matrixES2_+0x6e>
        }
        if (output_matrix->cols != 1) {
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	d001      	beq.n	8001b16 <_ZN2ei5numpy3minEPNS_9ei_matrixES2_+0x26>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001b12:	4b15      	ldr	r3, [pc, #84]	; (8001b68 <_ZN2ei5numpy3minEPNS_9ei_matrixES2_+0x78>)
 8001b14:	e023      	b.n	8001b5e <_ZN2ei5numpy3minEPNS_9ei_matrixES2_+0x6e>
        }

        for (size_t row = 0; row < input_matrix->rows; row++) {
 8001b16:	2300      	movs	r3, #0
 8001b18:	617b      	str	r3, [r7, #20]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	697a      	ldr	r2, [r7, #20]
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d21b      	bcs.n	8001b5c <_ZN2ei5numpy3minEPNS_9ei_matrixES2_+0x6c>
#if EIDSP_USE_CMSIS_DSP
            float min;
            uint32_t ix;
            arm_min_f32(input_matrix->buffer + (row * input_matrix->cols), input_matrix->cols, &min, &ix);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	6979      	ldr	r1, [r7, #20]
 8001b2e:	fb01 f303 	mul.w	r3, r1, r3
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	18d0      	adds	r0, r2, r3
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6899      	ldr	r1, [r3, #8]
 8001b3a:	f107 030c 	add.w	r3, r7, #12
 8001b3e:	f107 0210 	add.w	r2, r7, #16
 8001b42:	f00a f97f 	bl	800be44 <arm_min_f32>
            output_matrix->buffer[row] = min;
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	4413      	add	r3, r2
 8001b50:	693a      	ldr	r2, [r7, #16]
 8001b52:	601a      	str	r2, [r3, #0]
        for (size_t row = 0; row < input_matrix->rows; row++) {
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	3301      	adds	r3, #1
 8001b58:	617b      	str	r3, [r7, #20]
 8001b5a:	e7de      	b.n	8001b1a <_ZN2ei5numpy3minEPNS_9ei_matrixES2_+0x2a>

            output_matrix->buffer[row] = min;
#endif
        }

        return EIDSP_OK;
 8001b5c:	2300      	movs	r3, #0
    }
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3718      	adds	r7, #24
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	fffffc14 	.word	0xfffffc14

08001b6c <_ZN2ei5numpy3maxEPNS_9ei_matrixES2_>:
    /**
     * Get the maximum value in a matrix per row
     * @param input_matrix Input matrix (MxN)
     * @param output_matrix Output matrix (Mx1)
     */
    static int max(matrix_t *input_matrix, matrix_t *output_matrix) {
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b086      	sub	sp, #24
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	6039      	str	r1, [r7, #0]
        if (input_matrix->rows != output_matrix->rows) {
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	685a      	ldr	r2, [r3, #4]
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	d001      	beq.n	8001b86 <_ZN2ei5numpy3maxEPNS_9ei_matrixES2_+0x1a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001b82:	4b18      	ldr	r3, [pc, #96]	; (8001be4 <_ZN2ei5numpy3maxEPNS_9ei_matrixES2_+0x78>)
 8001b84:	e029      	b.n	8001bda <_ZN2ei5numpy3maxEPNS_9ei_matrixES2_+0x6e>
        }
        if (output_matrix->cols != 1) {
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d001      	beq.n	8001b92 <_ZN2ei5numpy3maxEPNS_9ei_matrixES2_+0x26>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001b8e:	4b15      	ldr	r3, [pc, #84]	; (8001be4 <_ZN2ei5numpy3maxEPNS_9ei_matrixES2_+0x78>)
 8001b90:	e023      	b.n	8001bda <_ZN2ei5numpy3maxEPNS_9ei_matrixES2_+0x6e>
        }

        for (size_t row = 0; row < input_matrix->rows; row++) {
 8001b92:	2300      	movs	r3, #0
 8001b94:	617b      	str	r3, [r7, #20]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	697a      	ldr	r2, [r7, #20]
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d21b      	bcs.n	8001bd8 <_ZN2ei5numpy3maxEPNS_9ei_matrixES2_+0x6c>
#if EIDSP_USE_CMSIS_DSP
            float max;
            uint32_t ix;
            arm_max_f32(input_matrix->buffer + (row * input_matrix->cols), input_matrix->cols, &max, &ix);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	6979      	ldr	r1, [r7, #20]
 8001baa:	fb01 f303 	mul.w	r3, r1, r3
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	18d0      	adds	r0, r2, r3
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6899      	ldr	r1, [r3, #8]
 8001bb6:	f107 030c 	add.w	r3, r7, #12
 8001bba:	f107 0210 	add.w	r2, r7, #16
 8001bbe:	f00a f8da 	bl	800bd76 <arm_max_f32>
            output_matrix->buffer[row] = max;
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	4413      	add	r3, r2
 8001bcc:	693a      	ldr	r2, [r7, #16]
 8001bce:	601a      	str	r2, [r3, #0]
        for (size_t row = 0; row < input_matrix->rows; row++) {
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	3301      	adds	r3, #1
 8001bd4:	617b      	str	r3, [r7, #20]
 8001bd6:	e7de      	b.n	8001b96 <_ZN2ei5numpy3maxEPNS_9ei_matrixES2_+0x2a>

            output_matrix->buffer[row] = max;
#endif
        }

        return EIDSP_OK;
 8001bd8:	2300      	movs	r3, #0
    }
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3718      	adds	r7, #24
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	fffffc14 	.word	0xfffffc14

08001be8 <_ZN2ei5numpy5stdevEPNS_9ei_matrixES2_>:
    /**
     * Get the stdev value in a matrix per row
     * @param input_matrix Input matrix (MxN)
     * @param output_matrix Output matrix (Mx1)
     */
    static int stdev(matrix_t *input_matrix, matrix_t *output_matrix) {
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b088      	sub	sp, #32
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
 8001bf0:	6039      	str	r1, [r7, #0]
        if (input_matrix->rows != output_matrix->rows) {
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	685a      	ldr	r2, [r3, #4]
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	429a      	cmp	r2, r3
 8001bfc:	d001      	beq.n	8001c02 <_ZN2ei5numpy5stdevEPNS_9ei_matrixES2_+0x1a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001bfe:	4b25      	ldr	r3, [pc, #148]	; (8001c94 <_ZN2ei5numpy5stdevEPNS_9ei_matrixES2_+0xac>)
 8001c00:	e043      	b.n	8001c8a <_ZN2ei5numpy5stdevEPNS_9ei_matrixES2_+0xa2>
        }
        if (output_matrix->cols != 1) {
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	d001      	beq.n	8001c0e <_ZN2ei5numpy5stdevEPNS_9ei_matrixES2_+0x26>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001c0a:	4b22      	ldr	r3, [pc, #136]	; (8001c94 <_ZN2ei5numpy5stdevEPNS_9ei_matrixES2_+0xac>)
 8001c0c:	e03d      	b.n	8001c8a <_ZN2ei5numpy5stdevEPNS_9ei_matrixES2_+0xa2>
        }

        for (size_t row = 0; row < input_matrix->rows; row++) {
 8001c0e:	2300      	movs	r3, #0
 8001c10:	61fb      	str	r3, [r7, #28]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	69fa      	ldr	r2, [r7, #28]
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d235      	bcs.n	8001c88 <_ZN2ei5numpy5stdevEPNS_9ei_matrixES2_+0xa0>
#if EIDSP_USE_CMSIS_DSP
            float std;
            float var;
            cmsis_arm_variance(&input_matrix->buffer[(row * input_matrix->cols)], input_matrix->cols, &var);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	69f9      	ldr	r1, [r7, #28]
 8001c26:	fb01 f303 	mul.w	r3, r1, r3
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	18d0      	adds	r0, r2, r3
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	f107 020c 	add.w	r2, r7, #12
 8001c36:	4619      	mov	r1, r3
 8001c38:	f000 f94e 	bl	8001ed8 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf>
            arm_sqrt_f32(var, &std);
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	61bb      	str	r3, [r7, #24]
 8001c40:	f107 0310 	add.w	r3, r7, #16
 8001c44:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 8001c46:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c4a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c52:	db09      	blt.n	8001c68 <_ZN2ei5numpy5stdevEPNS_9ei_matrixES2_+0x80>
  #else
      *pOut = sqrtf(in);
  #endif

#else
      *pOut = sqrtf(in);
 8001c54:	ed97 0a06 	vldr	s0, [r7, #24]
 8001c58:	f017 fa84 	bl	8019164 <sqrtf>
 8001c5c:	eef0 7a40 	vmov.f32	s15, s0
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	edc3 7a00 	vstr	s15, [r3]
#endif

      return (ARM_MATH_SUCCESS);
 8001c66:	e004      	b.n	8001c72 <_ZN2ei5numpy5stdevEPNS_9ei_matrixES2_+0x8a>
    }
    else
    {
      *pOut = 0.0f;
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	f04f 0200 	mov.w	r2, #0
 8001c6e:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8001c70:	bf00      	nop
            output_matrix->buffer[row] = std;
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	009b      	lsls	r3, r3, #2
 8001c7a:	4413      	add	r3, r2
 8001c7c:	693a      	ldr	r2, [r7, #16]
 8001c7e:	601a      	str	r2, [r3, #0]
        for (size_t row = 0; row < input_matrix->rows; row++) {
 8001c80:	69fb      	ldr	r3, [r7, #28]
 8001c82:	3301      	adds	r3, #1
 8001c84:	61fb      	str	r3, [r7, #28]
 8001c86:	e7c4      	b.n	8001c12 <_ZN2ei5numpy5stdevEPNS_9ei_matrixES2_+0x2a>

            output_matrix->buffer[row] = sqrt(std / input_matrix->cols);
#endif
        }

        return EIDSP_OK;
 8001c88:	2300      	movs	r3, #0
    }
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3720      	adds	r7, #32
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	fffffc14 	.word	0xfffffc14

08001c98 <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_>:
    /**
     * Get the skewness value in a matrix per row
     * @param input_matrix Input matrix (MxN)
     * @param output_matrix Output matrix (Mx1)
     */
    static int skew(matrix_t *input_matrix, matrix_t *output_matrix) {
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b088      	sub	sp, #32
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
 8001ca0:	6039      	str	r1, [r7, #0]
        if (input_matrix->rows != output_matrix->rows) {
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	685a      	ldr	r2, [r3, #4]
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	429a      	cmp	r2, r3
 8001cac:	d001      	beq.n	8001cb2 <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_+0x1a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001cae:	4b47      	ldr	r3, [pc, #284]	; (8001dcc <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_+0x134>)
 8001cb0:	e087      	b.n	8001dc2 <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_+0x12a>
        }
        if (output_matrix->cols != 1) {
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	d001      	beq.n	8001cbe <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_+0x26>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001cba:	4b44      	ldr	r3, [pc, #272]	; (8001dcc <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_+0x134>)
 8001cbc:	e081      	b.n	8001dc2 <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_+0x12a>
        }

        for (size_t row = 0; row < input_matrix->rows; row++) {
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	61fb      	str	r3, [r7, #28]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	69fa      	ldr	r2, [r7, #28]
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d279      	bcs.n	8001dc0 <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_+0x128>
#if EIDSP_USE_CMSIS_DSP
            float mean;
            float var;

            // Calculate the mean & variance
            arm_mean_f32(input_matrix->buffer + (row * input_matrix->cols), input_matrix->cols, &mean);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	69f9      	ldr	r1, [r7, #28]
 8001cd6:	fb01 f303 	mul.w	r3, r1, r3
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	18d0      	adds	r0, r2, r3
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	f107 0210 	add.w	r2, r7, #16
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	f00a f87d 	bl	800bde6 <arm_mean_f32>
            cmsis_arm_variance(&input_matrix->buffer[(row * input_matrix->cols)], input_matrix->cols, &var);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	69f9      	ldr	r1, [r7, #28]
 8001cf6:	fb01 f303 	mul.w	r3, r1, r3
 8001cfa:	009b      	lsls	r3, r3, #2
 8001cfc:	18d0      	adds	r0, r2, r3
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	f107 020c 	add.w	r2, r7, #12
 8001d06:	4619      	mov	r1, r3
 8001d08:	f000 f8e6 	bl	8001ed8 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf>

            // Calculate m_3
            float m_3;
            cmsis_arm_third_moment(&input_matrix->buffer[(row * input_matrix->cols)], input_matrix->cols, mean, &m_3);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	69f9      	ldr	r1, [r7, #28]
 8001d16:	fb01 f303 	mul.w	r3, r1, r3
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	18d0      	adds	r0, r2, r3
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d26:	f107 0208 	add.w	r2, r7, #8
 8001d2a:	eeb0 0a67 	vmov.f32	s0, s15
 8001d2e:	4619      	mov	r1, r3
 8001d30:	f000 f9d0 	bl	80020d4 <_ZN2ei5numpy22cmsis_arm_third_momentEPKfmfPf>

            // Calculate (variance)^(3/2)
            arm_sqrt_f32(var * var * var, &var);
 8001d34:	ed97 7a03 	vldr	s14, [r7, #12]
 8001d38:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d3c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d40:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d48:	edc7 7a06 	vstr	s15, [r7, #24]
 8001d4c:	f107 030c 	add.w	r3, r7, #12
 8001d50:	617b      	str	r3, [r7, #20]
    if (in >= 0.0f)
 8001d52:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d56:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d5e:	db09      	blt.n	8001d74 <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_+0xdc>
      *pOut = sqrtf(in);
 8001d60:	ed97 0a06 	vldr	s0, [r7, #24]
 8001d64:	f017 f9fe 	bl	8019164 <sqrtf>
 8001d68:	eef0 7a40 	vmov.f32	s15, s0
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	edc3 7a00 	vstr	s15, [r3]
      return (ARM_MATH_SUCCESS);
 8001d72:	e004      	b.n	8001d7e <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_+0xe6>
      *pOut = 0.0f;
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	f04f 0200 	mov.w	r2, #0
 8001d7a:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8001d7c:	bf00      	nop

            // Calculate skew = (m_3) / (variance)^(3/2)
            if (var == 0.0f) {
 8001d7e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d82:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001d86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d8a:	d108      	bne.n	8001d9e <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_+0x106>
                output_matrix->buffer[row] = 0.0f;
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	69fb      	ldr	r3, [r7, #28]
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	4413      	add	r3, r2
 8001d96:	f04f 0200 	mov.w	r2, #0
 8001d9a:	601a      	str	r2, [r3, #0]
 8001d9c:	e00c      	b.n	8001db8 <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_+0x120>
            } else {
                output_matrix->buffer[row] = m_3 / var;
 8001d9e:	edd7 6a02 	vldr	s13, [r7, #8]
 8001da2:	ed97 7a03 	vldr	s14, [r7, #12]
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	4413      	add	r3, r2
 8001db0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001db4:	edc3 7a00 	vstr	s15, [r3]
        for (size_t row = 0; row < input_matrix->rows; row++) {
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	3301      	adds	r3, #1
 8001dbc:	61fb      	str	r3, [r7, #28]
 8001dbe:	e780      	b.n	8001cc2 <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_+0x2a>
                output_matrix->buffer[row] = m_3 / m_2;
            }
#endif
        }

        return EIDSP_OK;
 8001dc0:	2300      	movs	r3, #0
    }
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3720      	adds	r7, #32
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	fffffc14 	.word	0xfffffc14

08001dd0 <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_>:
    /**
     * Get the kurtosis value in a matrix per row
     * @param input_matrix Input matrix (MxN)
     * @param output_matrix Output matrix (Mx1)
     */
    static int kurtosis(matrix_t *input_matrix, matrix_t *output_matrix) {
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b086      	sub	sp, #24
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
 8001dd8:	6039      	str	r1, [r7, #0]
        if (input_matrix->rows != output_matrix->rows) {
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	685a      	ldr	r2, [r3, #4]
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	429a      	cmp	r2, r3
 8001de4:	d001      	beq.n	8001dea <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_+0x1a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001de6:	4b3a      	ldr	r3, [pc, #232]	; (8001ed0 <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_+0x100>)
 8001de8:	e06d      	b.n	8001ec6 <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_+0xf6>
        }
        if (output_matrix->cols != 1) {
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d001      	beq.n	8001df6 <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_+0x26>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001df2:	4b37      	ldr	r3, [pc, #220]	; (8001ed0 <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_+0x100>)
 8001df4:	e067      	b.n	8001ec6 <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_+0xf6>
        }

        for (size_t row = 0; row < input_matrix->rows; row++) {
 8001df6:	2300      	movs	r3, #0
 8001df8:	617b      	str	r3, [r7, #20]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	697a      	ldr	r2, [r7, #20]
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d25f      	bcs.n	8001ec4 <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_+0xf4>
#if EIDSP_USE_CMSIS_DSP
            float mean;
            float var;

            // Calculate mean & variance
            arm_mean_f32(input_matrix->buffer + (row * input_matrix->cols), input_matrix->cols, &mean);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	6979      	ldr	r1, [r7, #20]
 8001e0e:	fb01 f303 	mul.w	r3, r1, r3
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	18d0      	adds	r0, r2, r3
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	f107 0210 	add.w	r2, r7, #16
 8001e1e:	4619      	mov	r1, r3
 8001e20:	f009 ffe1 	bl	800bde6 <arm_mean_f32>
            cmsis_arm_variance(&input_matrix->buffer[(row * input_matrix->cols)], input_matrix->cols, &var);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	6979      	ldr	r1, [r7, #20]
 8001e2e:	fb01 f303 	mul.w	r3, r1, r3
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	18d0      	adds	r0, r2, r3
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	f107 020c 	add.w	r2, r7, #12
 8001e3e:	4619      	mov	r1, r3
 8001e40:	f000 f84a 	bl	8001ed8 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf>

            // Calculate m_4
            float m_4;
            cmsis_arm_fourth_moment(&input_matrix->buffer[(row * input_matrix->cols)], input_matrix->cols, mean, &m_4);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	6979      	ldr	r1, [r7, #20]
 8001e4e:	fb01 f303 	mul.w	r3, r1, r3
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	18d0      	adds	r0, r2, r3
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e5e:	f107 0208 	add.w	r2, r7, #8
 8001e62:	eeb0 0a67 	vmov.f32	s0, s15
 8001e66:	4619      	mov	r1, r3
 8001e68:	f000 f9ef 	bl	800224a <_ZN2ei5numpy23cmsis_arm_fourth_momentEPKfmfPf>

            // Calculate Fisher kurtosis = (m_4 / variance^2) - 3
            var = var * var;
 8001e6c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001e70:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e78:	edc7 7a03 	vstr	s15, [r7, #12]
            if (var == 0.0f) {
 8001e7c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e80:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001e84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e88:	d107      	bne.n	8001e9a <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_+0xca>
                output_matrix->buffer[row] = -3.0f;
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	009b      	lsls	r3, r3, #2
 8001e92:	4413      	add	r3, r2
 8001e94:	4a0f      	ldr	r2, [pc, #60]	; (8001ed4 <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_+0x104>)
 8001e96:	601a      	str	r2, [r3, #0]
 8001e98:	e010      	b.n	8001ebc <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_+0xec>
            } else {
                output_matrix->buffer[row] = (m_4 / var) - 3.0f;
 8001e9a:	edd7 6a02 	vldr	s13, [r7, #8]
 8001e9e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001ea2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	009b      	lsls	r3, r3, #2
 8001eae:	4413      	add	r3, r2
 8001eb0:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8001eb4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001eb8:	edc3 7a00 	vstr	s15, [r3]
        for (size_t row = 0; row < input_matrix->rows; row++) {
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	3301      	adds	r3, #1
 8001ec0:	617b      	str	r3, [r7, #20]
 8001ec2:	e79a      	b.n	8001dfa <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_+0x2a>
                output_matrix->buffer[row] = (m_4 / variance) - 3.0f;
            }
#endif
        }

        return EIDSP_OK;
 8001ec4:	2300      	movs	r3, #0
    }
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3718      	adds	r7, #24
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	fffffc14 	.word	0xfffffc14
 8001ed4:	c0400000 	.word	0xc0400000

08001ed8 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf>:
     * @details    Variance in CMSIS version is calculated using fSum / (float32_t)(blockSize - 1)
     * @param[in]  pSrc       Pointer to float block
     * @param[in]  blockSize  Number of floats in block
     * @param      pResult    The variance
     */
    static void cmsis_arm_variance(const float32_t *pSrc, uint32_t blockSize, float32_t *pResult)
 8001ed8:	b480      	push	{r7}
 8001eda:	b08b      	sub	sp, #44	; 0x2c
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	60f8      	str	r0, [r7, #12]
 8001ee0:	60b9      	str	r1, [r7, #8]
 8001ee2:	607a      	str	r2, [r7, #4]
    {
        uint32_t blkCnt;
        float32_t sum = 0.0f;
 8001ee4:	f04f 0300 	mov.w	r3, #0
 8001ee8:	623b      	str	r3, [r7, #32]
        float32_t fSum = 0.0f;
 8001eea:	f04f 0300 	mov.w	r3, #0
 8001eee:	61fb      	str	r3, [r7, #28]
        float32_t fMean, fValue;
        const float32_t *pInput = pSrc;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	61bb      	str	r3, [r7, #24]

        if (blockSize <= 1U) {
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d804      	bhi.n	8001f04 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0x2c>
            *pResult = 0;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	f04f 0200 	mov.w	r2, #0
 8001f00:	601a      	str	r2, [r3, #0]
            return;
 8001f02:	e0e2      	b.n	80020ca <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0x1f2>
        }
        blkCnt = blockSize >> 2U;
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	089b      	lsrs	r3, r3, #2
 8001f08:	627b      	str	r3, [r7, #36]	; 0x24

        while (blkCnt > 0U) {
 8001f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d02f      	beq.n	8001f70 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0x98>
            sum += *pInput++;
 8001f10:	69bb      	ldr	r3, [r7, #24]
 8001f12:	1d1a      	adds	r2, r3, #4
 8001f14:	61ba      	str	r2, [r7, #24]
 8001f16:	edd3 7a00 	vldr	s15, [r3]
 8001f1a:	ed97 7a08 	vldr	s14, [r7, #32]
 8001f1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f22:	edc7 7a08 	vstr	s15, [r7, #32]
            sum += *pInput++;
 8001f26:	69bb      	ldr	r3, [r7, #24]
 8001f28:	1d1a      	adds	r2, r3, #4
 8001f2a:	61ba      	str	r2, [r7, #24]
 8001f2c:	edd3 7a00 	vldr	s15, [r3]
 8001f30:	ed97 7a08 	vldr	s14, [r7, #32]
 8001f34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f38:	edc7 7a08 	vstr	s15, [r7, #32]
            sum += *pInput++;
 8001f3c:	69bb      	ldr	r3, [r7, #24]
 8001f3e:	1d1a      	adds	r2, r3, #4
 8001f40:	61ba      	str	r2, [r7, #24]
 8001f42:	edd3 7a00 	vldr	s15, [r3]
 8001f46:	ed97 7a08 	vldr	s14, [r7, #32]
 8001f4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f4e:	edc7 7a08 	vstr	s15, [r7, #32]
            sum += *pInput++;
 8001f52:	69bb      	ldr	r3, [r7, #24]
 8001f54:	1d1a      	adds	r2, r3, #4
 8001f56:	61ba      	str	r2, [r7, #24]
 8001f58:	edd3 7a00 	vldr	s15, [r3]
 8001f5c:	ed97 7a08 	vldr	s14, [r7, #32]
 8001f60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f64:	edc7 7a08 	vstr	s15, [r7, #32]
            blkCnt--;
 8001f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6a:	3b01      	subs	r3, #1
 8001f6c:	627b      	str	r3, [r7, #36]	; 0x24
        while (blkCnt > 0U) {
 8001f6e:	e7cc      	b.n	8001f0a <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0x32>
        }

        /* Loop unrolling: Compute remaining outputs */
        blkCnt = blockSize % 0x4U;
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	f003 0303 	and.w	r3, r3, #3
 8001f76:	627b      	str	r3, [r7, #36]	; 0x24

        while (blkCnt > 0U) {
 8001f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d00e      	beq.n	8001f9c <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0xc4>
            sum += *pInput++;
 8001f7e:	69bb      	ldr	r3, [r7, #24]
 8001f80:	1d1a      	adds	r2, r3, #4
 8001f82:	61ba      	str	r2, [r7, #24]
 8001f84:	edd3 7a00 	vldr	s15, [r3]
 8001f88:	ed97 7a08 	vldr	s14, [r7, #32]
 8001f8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f90:	edc7 7a08 	vstr	s15, [r7, #32]
            blkCnt--;
 8001f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f96:	3b01      	subs	r3, #1
 8001f98:	627b      	str	r3, [r7, #36]	; 0x24
        while (blkCnt > 0U) {
 8001f9a:	e7ed      	b.n	8001f78 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0xa0>
        }

        fMean = sum / (float32_t)blockSize;
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	ee07 3a90 	vmov	s15, r3
 8001fa2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001fa6:	edd7 6a08 	vldr	s13, [r7, #32]
 8001faa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001fae:	edc7 7a05 	vstr	s15, [r7, #20]

        pInput = pSrc;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	61bb      	str	r3, [r7, #24]

        /* Loop unrolling: Compute 4 outputs at a time */
        blkCnt = blockSize >> 2U;
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	089b      	lsrs	r3, r3, #2
 8001fba:	627b      	str	r3, [r7, #36]	; 0x24

        while (blkCnt > 0U) {
 8001fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d057      	beq.n	8002072 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0x19a>
            fValue = *pInput++ - fMean;
 8001fc2:	69bb      	ldr	r3, [r7, #24]
 8001fc4:	1d1a      	adds	r2, r3, #4
 8001fc6:	61ba      	str	r2, [r7, #24]
 8001fc8:	ed93 7a00 	vldr	s14, [r3]
 8001fcc:	edd7 7a05 	vldr	s15, [r7, #20]
 8001fd0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fd4:	edc7 7a04 	vstr	s15, [r7, #16]
            fSum += fValue * fValue;
 8001fd8:	edd7 7a04 	vldr	s15, [r7, #16]
 8001fdc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001fe0:	ed97 7a07 	vldr	s14, [r7, #28]
 8001fe4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fe8:	edc7 7a07 	vstr	s15, [r7, #28]
            fValue = *pInput++ - fMean;
 8001fec:	69bb      	ldr	r3, [r7, #24]
 8001fee:	1d1a      	adds	r2, r3, #4
 8001ff0:	61ba      	str	r2, [r7, #24]
 8001ff2:	ed93 7a00 	vldr	s14, [r3]
 8001ff6:	edd7 7a05 	vldr	s15, [r7, #20]
 8001ffa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ffe:	edc7 7a04 	vstr	s15, [r7, #16]
            fSum += fValue * fValue;
 8002002:	edd7 7a04 	vldr	s15, [r7, #16]
 8002006:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800200a:	ed97 7a07 	vldr	s14, [r7, #28]
 800200e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002012:	edc7 7a07 	vstr	s15, [r7, #28]
            fValue = *pInput++ - fMean;
 8002016:	69bb      	ldr	r3, [r7, #24]
 8002018:	1d1a      	adds	r2, r3, #4
 800201a:	61ba      	str	r2, [r7, #24]
 800201c:	ed93 7a00 	vldr	s14, [r3]
 8002020:	edd7 7a05 	vldr	s15, [r7, #20]
 8002024:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002028:	edc7 7a04 	vstr	s15, [r7, #16]
            fSum += fValue * fValue;
 800202c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002030:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002034:	ed97 7a07 	vldr	s14, [r7, #28]
 8002038:	ee77 7a27 	vadd.f32	s15, s14, s15
 800203c:	edc7 7a07 	vstr	s15, [r7, #28]
            fValue = *pInput++ - fMean;
 8002040:	69bb      	ldr	r3, [r7, #24]
 8002042:	1d1a      	adds	r2, r3, #4
 8002044:	61ba      	str	r2, [r7, #24]
 8002046:	ed93 7a00 	vldr	s14, [r3]
 800204a:	edd7 7a05 	vldr	s15, [r7, #20]
 800204e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002052:	edc7 7a04 	vstr	s15, [r7, #16]
            fSum += fValue * fValue;
 8002056:	edd7 7a04 	vldr	s15, [r7, #16]
 800205a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800205e:	ed97 7a07 	vldr	s14, [r7, #28]
 8002062:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002066:	edc7 7a07 	vstr	s15, [r7, #28]
            blkCnt--;
 800206a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206c:	3b01      	subs	r3, #1
 800206e:	627b      	str	r3, [r7, #36]	; 0x24
        while (blkCnt > 0U) {
 8002070:	e7a4      	b.n	8001fbc <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0xe4>
        }

        /* Loop unrolling: Compute remaining outputs */
        blkCnt = blockSize % 0x4U;
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	f003 0303 	and.w	r3, r3, #3
 8002078:	627b      	str	r3, [r7, #36]	; 0x24

        while (blkCnt > 0U) {
 800207a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207c:	2b00      	cmp	r3, #0
 800207e:	d018      	beq.n	80020b2 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0x1da>
            fValue = *pInput++ - fMean;
 8002080:	69bb      	ldr	r3, [r7, #24]
 8002082:	1d1a      	adds	r2, r3, #4
 8002084:	61ba      	str	r2, [r7, #24]
 8002086:	ed93 7a00 	vldr	s14, [r3]
 800208a:	edd7 7a05 	vldr	s15, [r7, #20]
 800208e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002092:	edc7 7a04 	vstr	s15, [r7, #16]
            fSum += fValue * fValue;
 8002096:	edd7 7a04 	vldr	s15, [r7, #16]
 800209a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800209e:	ed97 7a07 	vldr	s14, [r7, #28]
 80020a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020a6:	edc7 7a07 	vstr	s15, [r7, #28]
            blkCnt--;
 80020aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ac:	3b01      	subs	r3, #1
 80020ae:	627b      	str	r3, [r7, #36]	; 0x24
        while (blkCnt > 0U) {
 80020b0:	e7e3      	b.n	800207a <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0x1a2>
        }

        /* Variance */
        *pResult = fSum / (float32_t)(blockSize);
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	ee07 3a90 	vmov	s15, r3
 80020b8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80020bc:	edd7 6a07 	vldr	s13, [r7, #28]
 80020c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	edc3 7a00 	vstr	s15, [r3]
    }
 80020ca:	372c      	adds	r7, #44	; 0x2c
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr

080020d4 <_ZN2ei5numpy22cmsis_arm_third_momentEPKfmfPf>:
     * @param[in]  pSrc       Pointer to float block
     * @param[in]  blockSize  Number of floats in block
     * @param[in]  mean       The mean to subtract from each value before cubing
     * @param      pResult    The third central moment of the input
     */
    static void cmsis_arm_third_moment(const float32_t * pSrc, uint32_t blockSize, float32_t mean, float32_t * pResult)
 80020d4:	b480      	push	{r7}
 80020d6:	b089      	sub	sp, #36	; 0x24
 80020d8:	af00      	add	r7, sp, #0
 80020da:	60f8      	str	r0, [r7, #12]
 80020dc:	60b9      	str	r1, [r7, #8]
 80020de:	ed87 0a01 	vstr	s0, [r7, #4]
 80020e2:	603a      	str	r2, [r7, #0]
    {
        uint32_t blkCnt;
        float32_t sum = 0.0f;
 80020e4:	f04f 0300 	mov.w	r3, #0
 80020e8:	61bb      	str	r3, [r7, #24]
        float32_t in;

        /* Loop unrolling: Compute 4 outputs at a time */
        blkCnt = blockSize >> 2U;
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	089b      	lsrs	r3, r3, #2
 80020ee:	61fb      	str	r3, [r7, #28]

        while (blkCnt > 0U) {
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d06f      	beq.n	80021d6 <_ZN2ei5numpy22cmsis_arm_third_momentEPKfmfPf+0x102>

            /* Compute Power and store result in a temporary variable, sum. */
            in = *pSrc++;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	1d1a      	adds	r2, r3, #4
 80020fa:	60fa      	str	r2, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	617b      	str	r3, [r7, #20]
            in = in - mean;
 8002100:	ed97 7a05 	vldr	s14, [r7, #20]
 8002104:	edd7 7a01 	vldr	s15, [r7, #4]
 8002108:	ee77 7a67 	vsub.f32	s15, s14, s15
 800210c:	edc7 7a05 	vstr	s15, [r7, #20]
            sum += in * in * in;
 8002110:	edd7 7a05 	vldr	s15, [r7, #20]
 8002114:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002118:	edd7 7a05 	vldr	s15, [r7, #20]
 800211c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002120:	ed97 7a06 	vldr	s14, [r7, #24]
 8002124:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002128:	edc7 7a06 	vstr	s15, [r7, #24]

            in = *pSrc++;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	1d1a      	adds	r2, r3, #4
 8002130:	60fa      	str	r2, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	617b      	str	r3, [r7, #20]
            in = in - mean;
 8002136:	ed97 7a05 	vldr	s14, [r7, #20]
 800213a:	edd7 7a01 	vldr	s15, [r7, #4]
 800213e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002142:	edc7 7a05 	vstr	s15, [r7, #20]
            sum += in * in * in;
 8002146:	edd7 7a05 	vldr	s15, [r7, #20]
 800214a:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800214e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002152:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002156:	ed97 7a06 	vldr	s14, [r7, #24]
 800215a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800215e:	edc7 7a06 	vstr	s15, [r7, #24]

            in = *pSrc++;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	1d1a      	adds	r2, r3, #4
 8002166:	60fa      	str	r2, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	617b      	str	r3, [r7, #20]
            in = in - mean;
 800216c:	ed97 7a05 	vldr	s14, [r7, #20]
 8002170:	edd7 7a01 	vldr	s15, [r7, #4]
 8002174:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002178:	edc7 7a05 	vstr	s15, [r7, #20]
            sum += in * in * in;
 800217c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002180:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002184:	edd7 7a05 	vldr	s15, [r7, #20]
 8002188:	ee67 7a27 	vmul.f32	s15, s14, s15
 800218c:	ed97 7a06 	vldr	s14, [r7, #24]
 8002190:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002194:	edc7 7a06 	vstr	s15, [r7, #24]

            in = *pSrc++;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	1d1a      	adds	r2, r3, #4
 800219c:	60fa      	str	r2, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	617b      	str	r3, [r7, #20]
            in = in - mean;
 80021a2:	ed97 7a05 	vldr	s14, [r7, #20]
 80021a6:	edd7 7a01 	vldr	s15, [r7, #4]
 80021aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021ae:	edc7 7a05 	vstr	s15, [r7, #20]
            sum += in * in * in;
 80021b2:	edd7 7a05 	vldr	s15, [r7, #20]
 80021b6:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80021ba:	edd7 7a05 	vldr	s15, [r7, #20]
 80021be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021c2:	ed97 7a06 	vldr	s14, [r7, #24]
 80021c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021ca:	edc7 7a06 	vstr	s15, [r7, #24]

            /* Decrement loop counter */
            blkCnt--;
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	3b01      	subs	r3, #1
 80021d2:	61fb      	str	r3, [r7, #28]
        while (blkCnt > 0U) {
 80021d4:	e78c      	b.n	80020f0 <_ZN2ei5numpy22cmsis_arm_third_momentEPKfmfPf+0x1c>
        }

        /* Loop unrolling: Compute remaining outputs */
        blkCnt = blockSize % 0x4U;
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	f003 0303 	and.w	r3, r3, #3
 80021dc:	61fb      	str	r3, [r7, #28]

        while (blkCnt > 0U) {
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d01e      	beq.n	8002222 <_ZN2ei5numpy22cmsis_arm_third_momentEPKfmfPf+0x14e>
            /* Compute Power and store result in a temporary variable, sum. */
            in = *pSrc++;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	1d1a      	adds	r2, r3, #4
 80021e8:	60fa      	str	r2, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	617b      	str	r3, [r7, #20]
            in = in - mean;
 80021ee:	ed97 7a05 	vldr	s14, [r7, #20]
 80021f2:	edd7 7a01 	vldr	s15, [r7, #4]
 80021f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021fa:	edc7 7a05 	vstr	s15, [r7, #20]
            sum += in * in * in;
 80021fe:	edd7 7a05 	vldr	s15, [r7, #20]
 8002202:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002206:	edd7 7a05 	vldr	s15, [r7, #20]
 800220a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800220e:	ed97 7a06 	vldr	s14, [r7, #24]
 8002212:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002216:	edc7 7a06 	vstr	s15, [r7, #24]

            /* Decrement loop counter */
            blkCnt--;
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	3b01      	subs	r3, #1
 800221e:	61fb      	str	r3, [r7, #28]
        while (blkCnt > 0U) {
 8002220:	e7dd      	b.n	80021de <_ZN2ei5numpy22cmsis_arm_third_momentEPKfmfPf+0x10a>
        }

        sum = sum / blockSize;
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	ee07 3a90 	vmov	s15, r3
 8002228:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800222c:	edd7 6a06 	vldr	s13, [r7, #24]
 8002230:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002234:	edc7 7a06 	vstr	s15, [r7, #24]
        /* Store result to destination */
        *pResult = sum;
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	69ba      	ldr	r2, [r7, #24]
 800223c:	601a      	str	r2, [r3, #0]
    }
 800223e:	bf00      	nop
 8002240:	3724      	adds	r7, #36	; 0x24
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr

0800224a <_ZN2ei5numpy23cmsis_arm_fourth_momentEPKfmfPf>:
     * @param[in]  pSrc       Pointer to float block
     * @param[in]  blockSize  Number of floats in block
     * @param[in]  mean       The mean to subtract from each value before calculating fourth power
     * @param      pResult    The fourth central moment of the input
     */
    static void cmsis_arm_fourth_moment(const float32_t * pSrc, uint32_t blockSize, float32_t mean, float32_t * pResult)
 800224a:	b480      	push	{r7}
 800224c:	b08b      	sub	sp, #44	; 0x2c
 800224e:	af00      	add	r7, sp, #0
 8002250:	60f8      	str	r0, [r7, #12]
 8002252:	60b9      	str	r1, [r7, #8]
 8002254:	ed87 0a01 	vstr	s0, [r7, #4]
 8002258:	603a      	str	r2, [r7, #0]
    {
        uint32_t blkCnt;
        float32_t sum = 0.0f;
 800225a:	f04f 0300 	mov.w	r3, #0
 800225e:	623b      	str	r3, [r7, #32]
        float32_t in;

        /* Loop unrolling: Compute 4 outputs at a time */
        blkCnt = blockSize >> 2U;
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	089b      	lsrs	r3, r3, #2
 8002264:	627b      	str	r3, [r7, #36]	; 0x24

        while (blkCnt > 0U) {
 8002266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002268:	2b00      	cmp	r3, #0
 800226a:	d077      	beq.n	800235c <_ZN2ei5numpy23cmsis_arm_fourth_momentEPKfmfPf+0x112>

            /* Compute Power and store result in a temporary variable, sum. */
            in = *pSrc++;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	1d1a      	adds	r2, r3, #4
 8002270:	60fa      	str	r2, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	61fb      	str	r3, [r7, #28]
            in = in - mean;
 8002276:	ed97 7a07 	vldr	s14, [r7, #28]
 800227a:	edd7 7a01 	vldr	s15, [r7, #4]
 800227e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002282:	edc7 7a07 	vstr	s15, [r7, #28]
            float square;
            square = in * in;
 8002286:	edd7 7a07 	vldr	s15, [r7, #28]
 800228a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800228e:	edc7 7a06 	vstr	s15, [r7, #24]
            sum += square * square;
 8002292:	edd7 7a06 	vldr	s15, [r7, #24]
 8002296:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800229a:	ed97 7a08 	vldr	s14, [r7, #32]
 800229e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022a2:	edc7 7a08 	vstr	s15, [r7, #32]

            in = *pSrc++;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	1d1a      	adds	r2, r3, #4
 80022aa:	60fa      	str	r2, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	61fb      	str	r3, [r7, #28]
            in = in - mean;
 80022b0:	ed97 7a07 	vldr	s14, [r7, #28]
 80022b4:	edd7 7a01 	vldr	s15, [r7, #4]
 80022b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022bc:	edc7 7a07 	vstr	s15, [r7, #28]
            square = in * in;
 80022c0:	edd7 7a07 	vldr	s15, [r7, #28]
 80022c4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80022c8:	edc7 7a06 	vstr	s15, [r7, #24]
            sum += square * square;
 80022cc:	edd7 7a06 	vldr	s15, [r7, #24]
 80022d0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80022d4:	ed97 7a08 	vldr	s14, [r7, #32]
 80022d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022dc:	edc7 7a08 	vstr	s15, [r7, #32]

            in = *pSrc++;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	1d1a      	adds	r2, r3, #4
 80022e4:	60fa      	str	r2, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	61fb      	str	r3, [r7, #28]
            in = in - mean;
 80022ea:	ed97 7a07 	vldr	s14, [r7, #28]
 80022ee:	edd7 7a01 	vldr	s15, [r7, #4]
 80022f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022f6:	edc7 7a07 	vstr	s15, [r7, #28]
            square = in * in;
 80022fa:	edd7 7a07 	vldr	s15, [r7, #28]
 80022fe:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002302:	edc7 7a06 	vstr	s15, [r7, #24]
            sum += square * square;
 8002306:	edd7 7a06 	vldr	s15, [r7, #24]
 800230a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800230e:	ed97 7a08 	vldr	s14, [r7, #32]
 8002312:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002316:	edc7 7a08 	vstr	s15, [r7, #32]

            in = *pSrc++;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	1d1a      	adds	r2, r3, #4
 800231e:	60fa      	str	r2, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	61fb      	str	r3, [r7, #28]
            in = in - mean;
 8002324:	ed97 7a07 	vldr	s14, [r7, #28]
 8002328:	edd7 7a01 	vldr	s15, [r7, #4]
 800232c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002330:	edc7 7a07 	vstr	s15, [r7, #28]
            square = in * in;
 8002334:	edd7 7a07 	vldr	s15, [r7, #28]
 8002338:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800233c:	edc7 7a06 	vstr	s15, [r7, #24]
            sum += square * square;
 8002340:	edd7 7a06 	vldr	s15, [r7, #24]
 8002344:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002348:	ed97 7a08 	vldr	s14, [r7, #32]
 800234c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002350:	edc7 7a08 	vstr	s15, [r7, #32]

            /* Decrement loop counter */
            blkCnt--;
 8002354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002356:	3b01      	subs	r3, #1
 8002358:	627b      	str	r3, [r7, #36]	; 0x24
        while (blkCnt > 0U) {
 800235a:	e784      	b.n	8002266 <_ZN2ei5numpy23cmsis_arm_fourth_momentEPKfmfPf+0x1c>
        }

        /* Loop unrolling: Compute remaining outputs */
        blkCnt = blockSize % 0x4U;
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	f003 0303 	and.w	r3, r3, #3
 8002362:	627b      	str	r3, [r7, #36]	; 0x24

        while (blkCnt > 0U) {
 8002364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002366:	2b00      	cmp	r3, #0
 8002368:	d020      	beq.n	80023ac <_ZN2ei5numpy23cmsis_arm_fourth_momentEPKfmfPf+0x162>
            /* Compute Power and store result in a temporary variable, sum. */
            in = *pSrc++;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	1d1a      	adds	r2, r3, #4
 800236e:	60fa      	str	r2, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	61fb      	str	r3, [r7, #28]
            in = in - mean;
 8002374:	ed97 7a07 	vldr	s14, [r7, #28]
 8002378:	edd7 7a01 	vldr	s15, [r7, #4]
 800237c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002380:	edc7 7a07 	vstr	s15, [r7, #28]
            float square;
            square = in * in;
 8002384:	edd7 7a07 	vldr	s15, [r7, #28]
 8002388:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800238c:	edc7 7a05 	vstr	s15, [r7, #20]
            sum += square * square;
 8002390:	edd7 7a05 	vldr	s15, [r7, #20]
 8002394:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002398:	ed97 7a08 	vldr	s14, [r7, #32]
 800239c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023a0:	edc7 7a08 	vstr	s15, [r7, #32]

            /* Decrement loop counter */
            blkCnt--;
 80023a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a6:	3b01      	subs	r3, #1
 80023a8:	627b      	str	r3, [r7, #36]	; 0x24
        while (blkCnt > 0U) {
 80023aa:	e7db      	b.n	8002364 <_ZN2ei5numpy23cmsis_arm_fourth_momentEPKfmfPf+0x11a>
        }

        sum = sum / blockSize;
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	ee07 3a90 	vmov	s15, r3
 80023b2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80023b6:	edd7 6a08 	vldr	s13, [r7, #32]
 80023ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80023be:	edc7 7a08 	vstr	s15, [r7, #32]
        /* Store result to destination */
        *pResult = sum;
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	6a3a      	ldr	r2, [r7, #32]
 80023c6:	601a      	str	r2, [r3, #0]
    }
 80023c8:	bf00      	nop
 80023ca:	372c      	adds	r7, #44	; 0x2c
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr

080023d4 <_ZNSt8functionIFijjPfEED1Ev>:
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b082      	sub	sp, #8
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	4618      	mov	r0, r3
 80023e0:	f7ff f978 	bl	80016d4 <_ZNSt14_Function_baseD1Ev>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	4618      	mov	r0, r3
 80023e8:	3708      	adds	r7, #8
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}

080023ee <_ZN2ei11ei_signal_tC1Ev>:
typedef struct ei_signal_t {
 80023ee:	b580      	push	{r7, lr}
 80023f0:	b082      	sub	sp, #8
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	6078      	str	r0, [r7, #4]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4618      	mov	r0, r3
 80023fa:	f002 f86e 	bl	80044da <_ZNSt8functionIFijjPfEEC1Ev>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4618      	mov	r0, r3
 8002402:	3708      	adds	r7, #8
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}

08002408 <_ZN2ei11ei_signal_tD1Ev>:
 8002408:	b580      	push	{r7, lr}
 800240a:	b082      	sub	sp, #8
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	4618      	mov	r0, r3
 8002414:	f7ff ffde 	bl	80023d4 <_ZNSt8functionIFijjPfEED1Ev>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	4618      	mov	r0, r3
 800241c:	3708      	adds	r7, #8
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
	...

08002424 <_ZN12_GLOBAL__N_124extract_flatten_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf>:

    return EIDSP_OK;
}


__attribute__((unused)) int extract_flatten_features(signal_t *signal, matrix_t *output_matrix, void *config_ptr, const float frequency) {
 8002424:	b5b0      	push	{r4, r5, r7, lr}
 8002426:	b0b8      	sub	sp, #224	; 0xe0
 8002428:	af00      	add	r7, sp, #0
 800242a:	60f8      	str	r0, [r7, #12]
 800242c:	60b9      	str	r1, [r7, #8]
 800242e:	607a      	str	r2, [r7, #4]
 8002430:	ed87 0a00 	vstr	s0, [r7]
    ei_dsp_config_flatten_t config = *((ei_dsp_config_flatten_t*)config_ptr);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	f107 04bc 	add.w	r4, r7, #188	; 0xbc
 800243a:	461d      	mov	r5, r3
 800243c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800243e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002440:	682b      	ldr	r3, [r5, #0]
 8002442:	6023      	str	r3, [r4, #0]

    uint32_t expected_matrix_size = 0;
 8002444:	2300      	movs	r3, #0
 8002446:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    if (config.average) expected_matrix_size += config.axes;
 800244a:	f897 30c8 	ldrb.w	r3, [r7, #200]	; 0xc8
 800244e:	2b00      	cmp	r3, #0
 8002450:	d007      	beq.n	8002462 <_ZN12_GLOBAL__N_124extract_flatten_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x3e>
 8002452:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002456:	461a      	mov	r2, r3
 8002458:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800245c:	4413      	add	r3, r2
 800245e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    if (config.minimum) expected_matrix_size += config.axes;
 8002462:	f897 30c9 	ldrb.w	r3, [r7, #201]	; 0xc9
 8002466:	2b00      	cmp	r3, #0
 8002468:	d007      	beq.n	800247a <_ZN12_GLOBAL__N_124extract_flatten_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x56>
 800246a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800246e:	461a      	mov	r2, r3
 8002470:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002474:	4413      	add	r3, r2
 8002476:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    if (config.maximum) expected_matrix_size += config.axes;
 800247a:	f897 30ca 	ldrb.w	r3, [r7, #202]	; 0xca
 800247e:	2b00      	cmp	r3, #0
 8002480:	d007      	beq.n	8002492 <_ZN12_GLOBAL__N_124extract_flatten_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x6e>
 8002482:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002486:	461a      	mov	r2, r3
 8002488:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800248c:	4413      	add	r3, r2
 800248e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    if (config.rms) expected_matrix_size += config.axes;
 8002492:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 8002496:	2b00      	cmp	r3, #0
 8002498:	d007      	beq.n	80024aa <_ZN12_GLOBAL__N_124extract_flatten_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x86>
 800249a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800249e:	461a      	mov	r2, r3
 80024a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80024a4:	4413      	add	r3, r2
 80024a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    if (config.stdev) expected_matrix_size += config.axes;
 80024aa:	f897 30cc 	ldrb.w	r3, [r7, #204]	; 0xcc
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d007      	beq.n	80024c2 <_ZN12_GLOBAL__N_124extract_flatten_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x9e>
 80024b2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80024b6:	461a      	mov	r2, r3
 80024b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80024bc:	4413      	add	r3, r2
 80024be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    if (config.skewness) expected_matrix_size += config.axes;
 80024c2:	f897 30cd 	ldrb.w	r3, [r7, #205]	; 0xcd
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d007      	beq.n	80024da <_ZN12_GLOBAL__N_124extract_flatten_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xb6>
 80024ca:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80024ce:	461a      	mov	r2, r3
 80024d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80024d4:	4413      	add	r3, r2
 80024d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    if (config.kurtosis) expected_matrix_size += config.axes;
 80024da:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d007      	beq.n	80024f2 <_ZN12_GLOBAL__N_124extract_flatten_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xce>
 80024e2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80024e6:	461a      	mov	r2, r3
 80024e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80024ec:	4413      	add	r3, r2
 80024ee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

    if (output_matrix->rows * output_matrix->cols != expected_matrix_size) {
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	68ba      	ldr	r2, [r7, #8]
 80024f8:	6892      	ldr	r2, [r2, #8]
 80024fa:	fb02 f303 	mul.w	r3, r2, r3
 80024fe:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8002502:	429a      	cmp	r2, r3
 8002504:	d001      	beq.n	800250a <_ZN12_GLOBAL__N_124extract_flatten_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xe6>
        EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8002506:	4cc6      	ldr	r4, [pc, #792]	; (8002820 <_ZN12_GLOBAL__N_124extract_flatten_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x3fc>)
 8002508:	e184      	b.n	8002814 <_ZN12_GLOBAL__N_124extract_flatten_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x3f0>
    }

    int ret;

    // input matrix from the raw signal
    matrix_t input_matrix(signal->total_length / config.axes, config.axes);
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	691b      	ldr	r3, [r3, #16]
 800250e:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002512:	fbb3 f1f2 	udiv	r1, r3, r2
 8002516:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800251a:	461a      	mov	r2, r3
 800251c:	f107 00ac 	add.w	r0, r7, #172	; 0xac
 8002520:	2300      	movs	r3, #0
 8002522:	f7ff f8fb 	bl	800171c <_ZN2ei9ei_matrixC1EmmPf>
    if (!input_matrix.buffer) {
 8002526:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800252a:	2b00      	cmp	r3, #0
 800252c:	d101      	bne.n	8002532 <_ZN12_GLOBAL__N_124extract_flatten_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x10e>
        EIDSP_ERR(EIDSP_OUT_OF_MEM);
 800252e:	4cbd      	ldr	r4, [pc, #756]	; (8002824 <_ZN12_GLOBAL__N_124extract_flatten_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x400>)
 8002530:	e16b      	b.n	800280a <_ZN12_GLOBAL__N_124extract_flatten_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x3e6>
    }
    signal->get_data(0, signal->total_length, input_matrix.buffer);
 8002532:	68f8      	ldr	r0, [r7, #12]
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	691a      	ldr	r2, [r3, #16]
 8002538:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800253c:	2100      	movs	r1, #0
 800253e:	f001 ff9e 	bl	800447e <_ZNKSt8functionIFijjPfEEclEjjS0_>

    // scale the signal
    ret = numpy::scale(&input_matrix, config.scale_axes);
 8002542:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8002546:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800254a:	eeb0 0a67 	vmov.f32	s0, s15
 800254e:	4618      	mov	r0, r3
 8002550:	f7ff fa0a 	bl	8001968 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf>
 8002554:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if (ret != EIDSP_OK) {
 8002558:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d007      	beq.n	8002570 <_ZN12_GLOBAL__N_124extract_flatten_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x14c>
        ei_printf("ERR: Failed to scale signal (%d)\n", ret);
 8002560:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8002564:	48b0      	ldr	r0, [pc, #704]	; (8002828 <_ZN12_GLOBAL__N_124extract_flatten_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x404>)
 8002566:	f001 fc61 	bl	8003e2c <_Z9ei_printfPKcz>
        EIDSP_ERR(ret);
 800256a:	f8d7 40d0 	ldr.w	r4, [r7, #208]	; 0xd0
 800256e:	e14c      	b.n	800280a <_ZN12_GLOBAL__N_124extract_flatten_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x3e6>
    }

    // transpose the matrix so we have one row per axis (nifty!)
    ret = numpy::transpose(&input_matrix);
 8002570:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002574:	4618      	mov	r0, r3
 8002576:	f7ff f975 	bl	8001864 <_ZN2ei5numpy9transposeEPNS_9ei_matrixE>
 800257a:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if (ret != EIDSP_OK) {
 800257e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d007      	beq.n	8002596 <_ZN12_GLOBAL__N_124extract_flatten_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x172>
        ei_printf("ERR: Failed to transpose matrix (%d)\n", ret);
 8002586:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 800258a:	48a8      	ldr	r0, [pc, #672]	; (800282c <_ZN12_GLOBAL__N_124extract_flatten_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x408>)
 800258c:	f001 fc4e 	bl	8003e2c <_Z9ei_printfPKcz>
        EIDSP_ERR(ret);
 8002590:	f8d7 40d0 	ldr.w	r4, [r7, #208]	; 0xd0
 8002594:	e139      	b.n	800280a <_ZN12_GLOBAL__N_124extract_flatten_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x3e6>
    }

    size_t out_matrix_ix = 0;
 8002596:	2300      	movs	r3, #0
 8002598:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

    for (size_t row = 0; row < input_matrix.rows; row++) {
 800259c:	2300      	movs	r3, #0
 800259e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80025a2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80025a6:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80025aa:	429a      	cmp	r2, r3
 80025ac:	f080 8121 	bcs.w	80027f2 <_ZN12_GLOBAL__N_124extract_flatten_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x3ce>
        matrix_t row_matrix(1, input_matrix.cols, input_matrix.buffer + (row * input_matrix.cols));
 80025b0:	f8d7 40b4 	ldr.w	r4, [r7, #180]	; 0xb4
 80025b4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80025b8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80025bc:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 80025c0:	fb01 f303 	mul.w	r3, r1, r3
 80025c4:	009b      	lsls	r3, r3, #2
 80025c6:	4413      	add	r3, r2
 80025c8:	f107 009c 	add.w	r0, r7, #156	; 0x9c
 80025cc:	4622      	mov	r2, r4
 80025ce:	2101      	movs	r1, #1
 80025d0:	f7ff f8a4 	bl	800171c <_ZN2ei9ei_matrixC1EmmPf>

        if (config.average) {
 80025d4:	f897 30c8 	ldrb.w	r3, [r7, #200]	; 0xc8
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d021      	beq.n	8002620 <_ZN12_GLOBAL__N_124extract_flatten_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1fc>
            float fbuffer;
            matrix_t out_matrix(1, 1, &fbuffer);
 80025dc:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80025e0:	f107 0088 	add.w	r0, r7, #136	; 0x88
 80025e4:	2201      	movs	r2, #1
 80025e6:	2101      	movs	r1, #1
 80025e8:	f7ff f898 	bl	800171c <_ZN2ei9ei_matrixC1EmmPf>
            numpy::mean(&row_matrix, &out_matrix);
 80025ec:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80025f0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80025f4:	4611      	mov	r1, r2
 80025f6:	4618      	mov	r0, r3
 80025f8:	f7ff fa3e 	bl	8001a78 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_>
            output_matrix->buffer[out_matrix_ix++] = out_matrix.buffer[0];
 80025fc:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	6819      	ldr	r1, [r3, #0]
 8002604:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002608:	1c58      	adds	r0, r3, #1
 800260a:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	440b      	add	r3, r1
 8002612:	6812      	ldr	r2, [r2, #0]
 8002614:	601a      	str	r2, [r3, #0]
            matrix_t out_matrix(1, 1, &fbuffer);
 8002616:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800261a:	4618      	mov	r0, r3
 800261c:	f7ff f8a9 	bl	8001772 <_ZN2ei9ei_matrixD1Ev>
        }

        if (config.minimum) {
 8002620:	f897 30c9 	ldrb.w	r3, [r7, #201]	; 0xc9
 8002624:	2b00      	cmp	r3, #0
 8002626:	d020      	beq.n	800266a <_ZN12_GLOBAL__N_124extract_flatten_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x246>
            float fbuffer;
            matrix_t out_matrix(1, 1, &fbuffer);
 8002628:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800262c:	f107 0074 	add.w	r0, r7, #116	; 0x74
 8002630:	2201      	movs	r2, #1
 8002632:	2101      	movs	r1, #1
 8002634:	f7ff f872 	bl	800171c <_ZN2ei9ei_matrixC1EmmPf>
            numpy::min(&row_matrix, &out_matrix);
 8002638:	f107 0274 	add.w	r2, r7, #116	; 0x74
 800263c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002640:	4611      	mov	r1, r2
 8002642:	4618      	mov	r0, r3
 8002644:	f7ff fa54 	bl	8001af0 <_ZN2ei5numpy3minEPNS_9ei_matrixES2_>
            output_matrix->buffer[out_matrix_ix++] = out_matrix.buffer[0];
 8002648:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	6819      	ldr	r1, [r3, #0]
 800264e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002652:	1c58      	adds	r0, r3, #1
 8002654:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
 8002658:	009b      	lsls	r3, r3, #2
 800265a:	440b      	add	r3, r1
 800265c:	6812      	ldr	r2, [r2, #0]
 800265e:	601a      	str	r2, [r3, #0]
            matrix_t out_matrix(1, 1, &fbuffer);
 8002660:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002664:	4618      	mov	r0, r3
 8002666:	f7ff f884 	bl	8001772 <_ZN2ei9ei_matrixD1Ev>
        }

        if (config.maximum) {
 800266a:	f897 30ca 	ldrb.w	r3, [r7, #202]	; 0xca
 800266e:	2b00      	cmp	r3, #0
 8002670:	d020      	beq.n	80026b4 <_ZN12_GLOBAL__N_124extract_flatten_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x290>
            float fbuffer;
            matrix_t out_matrix(1, 1, &fbuffer);
 8002672:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002676:	f107 0060 	add.w	r0, r7, #96	; 0x60
 800267a:	2201      	movs	r2, #1
 800267c:	2101      	movs	r1, #1
 800267e:	f7ff f84d 	bl	800171c <_ZN2ei9ei_matrixC1EmmPf>
            numpy::max(&row_matrix, &out_matrix);
 8002682:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002686:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800268a:	4611      	mov	r1, r2
 800268c:	4618      	mov	r0, r3
 800268e:	f7ff fa6d 	bl	8001b6c <_ZN2ei5numpy3maxEPNS_9ei_matrixES2_>
            output_matrix->buffer[out_matrix_ix++] = out_matrix.buffer[0];
 8002692:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	6819      	ldr	r1, [r3, #0]
 8002698:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800269c:	1c58      	adds	r0, r3, #1
 800269e:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	440b      	add	r3, r1
 80026a6:	6812      	ldr	r2, [r2, #0]
 80026a8:	601a      	str	r2, [r3, #0]
            matrix_t out_matrix(1, 1, &fbuffer);
 80026aa:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80026ae:	4618      	mov	r0, r3
 80026b0:	f7ff f85f 	bl	8001772 <_ZN2ei9ei_matrixD1Ev>
        }

        if (config.rms) {
 80026b4:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d020      	beq.n	80026fe <_ZN12_GLOBAL__N_124extract_flatten_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x2da>
            float fbuffer;
            matrix_t out_matrix(1, 1, &fbuffer);
 80026bc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80026c0:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 80026c4:	2201      	movs	r2, #1
 80026c6:	2101      	movs	r1, #1
 80026c8:	f7ff f828 	bl	800171c <_ZN2ei9ei_matrixC1EmmPf>
            numpy::rms(&row_matrix, &out_matrix);
 80026cc:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80026d0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80026d4:	4611      	mov	r1, r2
 80026d6:	4618      	mov	r0, r3
 80026d8:	f7ff f992 	bl	8001a00 <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_>
            output_matrix->buffer[out_matrix_ix++] = out_matrix.buffer[0];
 80026dc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	6819      	ldr	r1, [r3, #0]
 80026e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80026e6:	1c58      	adds	r0, r3, #1
 80026e8:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
 80026ec:	009b      	lsls	r3, r3, #2
 80026ee:	440b      	add	r3, r1
 80026f0:	6812      	ldr	r2, [r2, #0]
 80026f2:	601a      	str	r2, [r3, #0]
            matrix_t out_matrix(1, 1, &fbuffer);
 80026f4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80026f8:	4618      	mov	r0, r3
 80026fa:	f7ff f83a 	bl	8001772 <_ZN2ei9ei_matrixD1Ev>
        }

        if (config.stdev) {
 80026fe:	f897 30cc 	ldrb.w	r3, [r7, #204]	; 0xcc
 8002702:	2b00      	cmp	r3, #0
 8002704:	d020      	beq.n	8002748 <_ZN12_GLOBAL__N_124extract_flatten_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x324>
            float fbuffer;
            matrix_t out_matrix(1, 1, &fbuffer);
 8002706:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800270a:	f107 0038 	add.w	r0, r7, #56	; 0x38
 800270e:	2201      	movs	r2, #1
 8002710:	2101      	movs	r1, #1
 8002712:	f7ff f803 	bl	800171c <_ZN2ei9ei_matrixC1EmmPf>
            numpy::stdev(&row_matrix, &out_matrix);
 8002716:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800271a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800271e:	4611      	mov	r1, r2
 8002720:	4618      	mov	r0, r3
 8002722:	f7ff fa61 	bl	8001be8 <_ZN2ei5numpy5stdevEPNS_9ei_matrixES2_>
            output_matrix->buffer[out_matrix_ix++] = out_matrix.buffer[0];
 8002726:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	6819      	ldr	r1, [r3, #0]
 800272c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002730:	1c58      	adds	r0, r3, #1
 8002732:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	440b      	add	r3, r1
 800273a:	6812      	ldr	r2, [r2, #0]
 800273c:	601a      	str	r2, [r3, #0]
            matrix_t out_matrix(1, 1, &fbuffer);
 800273e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002742:	4618      	mov	r0, r3
 8002744:	f7ff f815 	bl	8001772 <_ZN2ei9ei_matrixD1Ev>
        }

        if (config.skewness) {
 8002748:	f897 30cd 	ldrb.w	r3, [r7, #205]	; 0xcd
 800274c:	2b00      	cmp	r3, #0
 800274e:	d020      	beq.n	8002792 <_ZN12_GLOBAL__N_124extract_flatten_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x36e>
            float fbuffer;
            matrix_t out_matrix(1, 1, &fbuffer);
 8002750:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002754:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002758:	2201      	movs	r2, #1
 800275a:	2101      	movs	r1, #1
 800275c:	f7fe ffde 	bl	800171c <_ZN2ei9ei_matrixC1EmmPf>
            numpy::skew(&row_matrix, &out_matrix);
 8002760:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8002764:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002768:	4611      	mov	r1, r2
 800276a:	4618      	mov	r0, r3
 800276c:	f7ff fa94 	bl	8001c98 <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_>
            output_matrix->buffer[out_matrix_ix++] = out_matrix.buffer[0];
 8002770:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	6819      	ldr	r1, [r3, #0]
 8002776:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800277a:	1c58      	adds	r0, r3, #1
 800277c:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
 8002780:	009b      	lsls	r3, r3, #2
 8002782:	440b      	add	r3, r1
 8002784:	6812      	ldr	r2, [r2, #0]
 8002786:	601a      	str	r2, [r3, #0]
            matrix_t out_matrix(1, 1, &fbuffer);
 8002788:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800278c:	4618      	mov	r0, r3
 800278e:	f7fe fff0 	bl	8001772 <_ZN2ei9ei_matrixD1Ev>
        }

        if (config.kurtosis) {
 8002792:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 8002796:	2b00      	cmp	r3, #0
 8002798:	d020      	beq.n	80027dc <_ZN12_GLOBAL__N_124extract_flatten_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x3b8>
            float fbuffer;
            matrix_t out_matrix(1, 1, &fbuffer);
 800279a:	f107 0320 	add.w	r3, r7, #32
 800279e:	f107 0010 	add.w	r0, r7, #16
 80027a2:	2201      	movs	r2, #1
 80027a4:	2101      	movs	r1, #1
 80027a6:	f7fe ffb9 	bl	800171c <_ZN2ei9ei_matrixC1EmmPf>
            numpy::kurtosis(&row_matrix, &out_matrix);
 80027aa:	f107 0210 	add.w	r2, r7, #16
 80027ae:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80027b2:	4611      	mov	r1, r2
 80027b4:	4618      	mov	r0, r3
 80027b6:	f7ff fb0b 	bl	8001dd0 <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_>
            output_matrix->buffer[out_matrix_ix++] = out_matrix.buffer[0];
 80027ba:	693a      	ldr	r2, [r7, #16]
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	6819      	ldr	r1, [r3, #0]
 80027c0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80027c4:	1c58      	adds	r0, r3, #1
 80027c6:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	440b      	add	r3, r1
 80027ce:	6812      	ldr	r2, [r2, #0]
 80027d0:	601a      	str	r2, [r3, #0]
            matrix_t out_matrix(1, 1, &fbuffer);
 80027d2:	f107 0310 	add.w	r3, r7, #16
 80027d6:	4618      	mov	r0, r3
 80027d8:	f7fe ffcb 	bl	8001772 <_ZN2ei9ei_matrixD1Ev>
        matrix_t row_matrix(1, input_matrix.cols, input_matrix.buffer + (row * input_matrix.cols));
 80027dc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80027e0:	4618      	mov	r0, r3
 80027e2:	f7fe ffc6 	bl	8001772 <_ZN2ei9ei_matrixD1Ev>
    for (size_t row = 0; row < input_matrix.rows; row++) {
 80027e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80027ea:	3301      	adds	r3, #1
 80027ec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80027f0:	e6d7      	b.n	80025a2 <_ZN12_GLOBAL__N_124extract_flatten_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x17e>
        }
    }

    // flatten again
    output_matrix->cols = output_matrix->rows * output_matrix->cols;
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	68ba      	ldr	r2, [r7, #8]
 80027f8:	6892      	ldr	r2, [r2, #8]
 80027fa:	fb03 f202 	mul.w	r2, r3, r2
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	609a      	str	r2, [r3, #8]
    output_matrix->rows = 1;
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	2201      	movs	r2, #1
 8002806:	605a      	str	r2, [r3, #4]

    return EIDSP_OK;
 8002808:	2400      	movs	r4, #0
    matrix_t input_matrix(signal->total_length / config.axes, config.axes);
 800280a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800280e:	4618      	mov	r0, r3
 8002810:	f7fe ffaf 	bl	8001772 <_ZN2ei9ei_matrixD1Ev>
}
 8002814:	4623      	mov	r3, r4
 8002816:	4618      	mov	r0, r3
 8002818:	37e0      	adds	r7, #224	; 0xe0
 800281a:	46bd      	mov	sp, r7
 800281c:	bdb0      	pop	{r4, r5, r7, pc}
 800281e:	bf00      	nop
 8002820:	fffffc14 	.word	0xfffffc14
 8002824:	fffffc16 	.word	0xfffffc16
 8002828:	0801b930 	.word	0x0801b930
 800282c:	0801b954 	.word	0x0801b954

08002830 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf>:

    return EIDSP_OK;
#endif
}

__attribute__((unused)) int extract_image_features(signal_t *signal, matrix_t *output_matrix, void *config_ptr, const float frequency) {
 8002830:	b5b0      	push	{r4, r5, r7, lr}
 8002832:	b098      	sub	sp, #96	; 0x60
 8002834:	af00      	add	r7, sp, #0
 8002836:	60f8      	str	r0, [r7, #12]
 8002838:	60b9      	str	r1, [r7, #8]
 800283a:	607a      	str	r2, [r7, #4]
 800283c:	ed87 0a00 	vstr	s0, [r7]
    ei_dsp_config_image_t config = *((ei_dsp_config_image_t*)config_ptr);
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002846:	ca07      	ldmia	r2, {r0, r1, r2}
 8002848:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    int16_t channel_count = strcmp(config.channels, "Grayscale") == 0 ? 1 : 3;
 800284c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800284e:	4967      	ldr	r1, [pc, #412]	; (80029ec <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1bc>)
 8002850:	4618      	mov	r0, r3
 8002852:	f7fd fd0d 	bl	8000270 <strcmp>
 8002856:	4603      	mov	r3, r0
 8002858:	2b00      	cmp	r3, #0
 800285a:	d101      	bne.n	8002860 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x30>
 800285c:	2301      	movs	r3, #1
 800285e:	e000      	b.n	8002862 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x32>
 8002860:	2303      	movs	r3, #3
 8002862:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

    size_t output_ix = 0;
 8002866:	2300      	movs	r3, #0
 8002868:	65fb      	str	r3, [r7, #92]	; 0x5c

#if defined(EI_DSP_IMAGE_BUFFER_STATIC_SIZE)
    const size_t page_size = EI_DSP_IMAGE_BUFFER_STATIC_SIZE;
#else
    const size_t page_size = 1024;
 800286a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800286e:	64fb      	str	r3, [r7, #76]	; 0x4c
#endif

    // buffered read from the signal
    size_t bytes_left = signal->total_length;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	691b      	ldr	r3, [r3, #16]
 8002874:	627b      	str	r3, [r7, #36]	; 0x24
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
 8002876:	2300      	movs	r3, #0
 8002878:	65bb      	str	r3, [r7, #88]	; 0x58
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	691b      	ldr	r3, [r3, #16]
 800287e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002880:	429a      	cmp	r2, r3
 8002882:	f080 80ac 	bcs.w	80029de <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1ae>
        size_t elements_to_read = bytes_left > page_size ? page_size : bytes_left;
 8002886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002888:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800288c:	d803      	bhi.n	8002896 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x66>
 800288e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	e001      	b.n	800289a <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x6a>
 8002896:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800289a:	64bb      	str	r3, [r7, #72]	; 0x48

#if defined(EI_DSP_IMAGE_BUFFER_STATIC_SIZE)
        matrix_t input_matrix(elements_to_read, config.axes, ei_dsp_image_buffer);
#else
        matrix_t input_matrix(elements_to_read, config.axes);
 800289c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800289e:	461a      	mov	r2, r3
 80028a0:	f107 0014 	add.w	r0, r7, #20
 80028a4:	2300      	movs	r3, #0
 80028a6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80028a8:	f7fe ff38 	bl	800171c <_ZN2ei9ei_matrixC1EmmPf>
#endif
        if (!input_matrix.buffer) {
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d102      	bne.n	80028b8 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x88>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 80028b2:	4d4f      	ldr	r5, [pc, #316]	; (80029f0 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1c0>)
 80028b4:	2400      	movs	r4, #0
 80028b6:	e086      	b.n	80029c6 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x196>
        }
        signal->get_data(ix, elements_to_read, input_matrix.buffer);
 80028b8:	68f8      	ldr	r0, [r7, #12]
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80028be:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80028c0:	f001 fddd 	bl	800447e <_ZNKSt8functionIFijjPfEEclEjjS0_>

        for (size_t jx = 0; jx < elements_to_read; jx++) {
 80028c4:	2300      	movs	r3, #0
 80028c6:	657b      	str	r3, [r7, #84]	; 0x54
 80028c8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80028ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d275      	bcs.n	80029bc <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x18c>
            uint32_t pixel = static_cast<uint32_t>(input_matrix.buffer[jx]);
 80028d0:	697a      	ldr	r2, [r7, #20]
 80028d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028d4:	009b      	lsls	r3, r3, #2
 80028d6:	4413      	add	r3, r2
 80028d8:	edd3 7a00 	vldr	s15, [r3]
 80028dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80028e0:	ee17 3a90 	vmov	r3, s15
 80028e4:	647b      	str	r3, [r7, #68]	; 0x44

            // rgb to 0..1
            float r = static_cast<float>(pixel >> 16 & 0xff) / 255.0f;
 80028e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028e8:	0c1b      	lsrs	r3, r3, #16
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	ee07 3a90 	vmov	s15, r3
 80028f0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80028f4:	eddf 6a3f 	vldr	s13, [pc, #252]	; 80029f4 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1c4>
 80028f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80028fc:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
            float g = static_cast<float>(pixel >> 8 & 0xff) / 255.0f;
 8002900:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002902:	0a1b      	lsrs	r3, r3, #8
 8002904:	b2db      	uxtb	r3, r3
 8002906:	ee07 3a90 	vmov	s15, r3
 800290a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800290e:	eddf 6a39 	vldr	s13, [pc, #228]	; 80029f4 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1c4>
 8002912:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002916:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
            float b = static_cast<float>(pixel & 0xff) / 255.0f;
 800291a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800291c:	b2db      	uxtb	r3, r3
 800291e:	ee07 3a90 	vmov	s15, r3
 8002922:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002926:	eddf 6a33 	vldr	s13, [pc, #204]	; 80029f4 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1c4>
 800292a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800292e:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

            if (channel_count == 3) {
 8002932:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8002936:	2b03      	cmp	r3, #3
 8002938:	d11b      	bne.n	8002972 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x142>
                output_matrix->buffer[output_ix++] = r;
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002940:	1c59      	adds	r1, r3, #1
 8002942:	65f9      	str	r1, [r7, #92]	; 0x5c
 8002944:	009b      	lsls	r3, r3, #2
 8002946:	4413      	add	r3, r2
 8002948:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800294a:	601a      	str	r2, [r3, #0]
                output_matrix->buffer[output_ix++] = g;
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002952:	1c59      	adds	r1, r3, #1
 8002954:	65f9      	str	r1, [r7, #92]	; 0x5c
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	4413      	add	r3, r2
 800295a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800295c:	601a      	str	r2, [r3, #0]
                output_matrix->buffer[output_ix++] = b;
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002964:	1c59      	adds	r1, r3, #1
 8002966:	65f9      	str	r1, [r7, #92]	; 0x5c
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	4413      	add	r3, r2
 800296c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800296e:	601a      	str	r2, [r3, #0]
 8002970:	e020      	b.n	80029b4 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x184>
            }
            else {
                // ITU-R 601-2 luma transform
                // see: https://pillow.readthedocs.io/en/stable/reference/Image.html#PIL.Image.Image.convert
                float v = (0.299f * r) + (0.587f * g) + (0.114f * b);
 8002972:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002976:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80029f8 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1c8>
 800297a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800297e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002982:	eddf 6a1e 	vldr	s13, [pc, #120]	; 80029fc <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1cc>
 8002986:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800298a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800298e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002992:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8002a00 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1d0>
 8002996:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800299a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800299e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
                output_matrix->buffer[output_ix++] = v;
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029a8:	1c59      	adds	r1, r3, #1
 80029aa:	65f9      	str	r1, [r7, #92]	; 0x5c
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	4413      	add	r3, r2
 80029b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80029b2:	601a      	str	r2, [r3, #0]
        for (size_t jx = 0; jx < elements_to_read; jx++) {
 80029b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029b6:	3301      	adds	r3, #1
 80029b8:	657b      	str	r3, [r7, #84]	; 0x54
 80029ba:	e785      	b.n	80028c8 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x98>
            }
        }

        bytes_left -= elements_to_read;
 80029bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	627b      	str	r3, [r7, #36]	; 0x24
 80029c4:	2401      	movs	r4, #1
 80029c6:	f107 0314 	add.w	r3, r7, #20
 80029ca:	4618      	mov	r0, r3
 80029cc:	f7fe fed1 	bl	8001772 <_ZN2ei9ei_matrixD1Ev>
 80029d0:	2c01      	cmp	r4, #1
 80029d2:	d105      	bne.n	80029e0 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1b0>
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
 80029d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80029d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80029da:	65bb      	str	r3, [r7, #88]	; 0x58
 80029dc:	e74d      	b.n	800287a <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x4a>
    }

    return EIDSP_OK;
 80029de:	2500      	movs	r5, #0
}
 80029e0:	462b      	mov	r3, r5
 80029e2:	4618      	mov	r0, r3
 80029e4:	3760      	adds	r7, #96	; 0x60
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bdb0      	pop	{r4, r5, r7, pc}
 80029ea:	bf00      	nop
 80029ec:	0801bbdc 	.word	0x0801bbdc
 80029f0:	fffffc16 	.word	0xfffffc16
 80029f4:	437f0000 	.word	0x437f0000
 80029f8:	3e991687 	.word	0x3e991687
 80029fc:	3f1645a2 	.word	0x3f1645a2
 8002a00:	3de978d5 	.word	0x3de978d5

08002a04 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf>:

#endif //(EI_CLASSIFIER_TFLITE_INPUT_QUANTIZED == 1) && (EI_CLASSIFIER_INFERENCING_ENGINE == EI_CLASSIFIER_DRPAI)

#if (EI_CLASSIFIER_TFLITE_INPUT_QUANTIZED == 1) && (EI_CLASSIFIER_INFERENCING_ENGINE != EI_CLASSIFIER_DRPAI)

__attribute__((unused)) int extract_image_features_quantized(const ei_impulse_t *impulse, signal_t *signal, matrix_i8_t *output_matrix, void *config_ptr, const float frequency) {
 8002a04:	b5b0      	push	{r4, r5, r7, lr}
 8002a06:	b0a6      	sub	sp, #152	; 0x98
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6178      	str	r0, [r7, #20]
 8002a0c:	6139      	str	r1, [r7, #16]
 8002a0e:	60fa      	str	r2, [r7, #12]
 8002a10:	60bb      	str	r3, [r7, #8]
 8002a12:	ed87 0a01 	vstr	s0, [r7, #4]
    ei_dsp_config_image_t config = *((ei_dsp_config_image_t*)config_ptr);
 8002a16:	68ba      	ldr	r2, [r7, #8]
 8002a18:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a1c:	ca07      	ldmia	r2, {r0, r1, r2}
 8002a1e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    int16_t channel_count = strcmp(config.channels, "Grayscale") == 0 ? 1 : 3;
 8002a22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a24:	49ab      	ldr	r1, [pc, #684]	; (8002cd4 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2d0>)
 8002a26:	4618      	mov	r0, r3
 8002a28:	f7fd fc22 	bl	8000270 <strcmp>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d101      	bne.n	8002a36 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x32>
 8002a32:	2301      	movs	r3, #1
 8002a34:	e000      	b.n	8002a38 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x34>
 8002a36:	2303      	movs	r3, #3
 8002a38:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    size_t output_ix = 0;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    const int32_t iRedToGray = (int32_t)(0.299f * 65536.0f);
 8002a42:	f644 438b 	movw	r3, #19595	; 0x4c8b
 8002a46:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    const int32_t iGreenToGray = (int32_t)(0.587f * 65536.0f);
 8002a4a:	f249 6345 	movw	r3, #38469	; 0x9645
 8002a4e:	67fb      	str	r3, [r7, #124]	; 0x7c
    const int32_t iBlueToGray = (int32_t)(0.114f * 65536.0f);
 8002a50:	f641 532f 	movw	r3, #7471	; 0x1d2f
 8002a54:	67bb      	str	r3, [r7, #120]	; 0x78

#if defined(EI_DSP_IMAGE_BUFFER_STATIC_SIZE)
    const size_t page_size = EI_DSP_IMAGE_BUFFER_STATIC_SIZE;
#else
    const size_t page_size = 1024;
 8002a56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a5a:	677b      	str	r3, [r7, #116]	; 0x74
#endif

    // buffered read from the signal
    size_t bytes_left = signal->total_length;
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	691b      	ldr	r3, [r3, #16]
 8002a60:	62bb      	str	r3, [r7, #40]	; 0x28
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
 8002a62:	2300      	movs	r3, #0
 8002a64:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	691b      	ldr	r3, [r3, #16]
 8002a6c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8002a70:	429a      	cmp	r2, r3
 8002a72:	f080 821d 	bcs.w	8002eb0 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x4ac>
        size_t elements_to_read = bytes_left > page_size ? page_size : bytes_left;
 8002a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a7c:	d803      	bhi.n	8002a86 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x82>
 8002a7e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	e001      	b.n	8002a8a <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x86>
 8002a86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a8a:	673b      	str	r3, [r7, #112]	; 0x70

#if defined(EI_DSP_IMAGE_BUFFER_STATIC_SIZE)
        matrix_t input_matrix(elements_to_read, config.axes, ei_dsp_image_buffer);
#else
        matrix_t input_matrix(elements_to_read, config.axes);
 8002a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a8e:	461a      	mov	r2, r3
 8002a90:	f107 0018 	add.w	r0, r7, #24
 8002a94:	2300      	movs	r3, #0
 8002a96:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8002a98:	f7fe fe40 	bl	800171c <_ZN2ei9ei_matrixC1EmmPf>
#endif
        if (!input_matrix.buffer) {
 8002a9c:	69bb      	ldr	r3, [r7, #24]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d102      	bne.n	8002aa8 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0xa4>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8002aa2:	4d8d      	ldr	r5, [pc, #564]	; (8002cd8 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2d4>)
 8002aa4:	2400      	movs	r4, #0
 8002aa6:	e1f5      	b.n	8002e94 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x490>
        }
        signal->get_data(ix, elements_to_read, input_matrix.buffer);
 8002aa8:	6938      	ldr	r0, [r7, #16]
 8002aaa:	69bb      	ldr	r3, [r7, #24]
 8002aac:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002aae:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002ab2:	f001 fce4 	bl	800447e <_ZNKSt8functionIFijjPfEEclEjjS0_>

        for (size_t jx = 0; jx < elements_to_read; jx++) {
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002abc:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8002ac0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ac2:	429a      	cmp	r2, r3
 8002ac4:	f080 81e1 	bcs.w	8002e8a <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x486>
            uint32_t pixel = static_cast<uint32_t>(input_matrix.buffer[jx]);
 8002ac8:	69ba      	ldr	r2, [r7, #24]
 8002aca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ace:	009b      	lsls	r3, r3, #2
 8002ad0:	4413      	add	r3, r2
 8002ad2:	edd3 7a00 	vldr	s15, [r3]
 8002ad6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ada:	ee17 3a90 	vmov	r3, s15
 8002ade:	66fb      	str	r3, [r7, #108]	; 0x6c

            if (channel_count == 3) {
 8002ae0:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 8002ae4:	2b03      	cmp	r3, #3
 8002ae6:	f040 8105 	bne.w	8002cf4 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2f0>
                // fast code path
                if (impulse->tflite_input_scale == 0.003921568859368563f && impulse->tflite_input_zeropoint == -128) {
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8002af0:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 8002cdc <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2d8>
 8002af4:	eef4 7a47 	vcmp.f32	s15, s14
 8002af8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002afc:	d160      	bne.n	8002bc0 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x1bc>
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8002b04:	ed9f 7a76 	vldr	s14, [pc, #472]	; 8002ce0 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2dc>
 8002b08:	eef4 7a47 	vcmp.f32	s15, s14
 8002b0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b10:	d156      	bne.n	8002bc0 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x1bc>
                    int32_t r = static_cast<int32_t>(pixel >> 16 & 0xff);
 8002b12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b14:	0c1b      	lsrs	r3, r3, #16
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	64fb      	str	r3, [r7, #76]	; 0x4c
                    int32_t g = static_cast<int32_t>(pixel >> 8 & 0xff);
 8002b1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b1c:	0a1b      	lsrs	r3, r3, #8
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	64bb      	str	r3, [r7, #72]	; 0x48
                    int32_t b = static_cast<int32_t>(pixel & 0xff);
 8002b22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	647b      	str	r3, [r7, #68]	; 0x44

                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(r + impulse->tflite_input_zeropoint);
 8002b28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b2a:	ee07 3a90 	vmov	s15, r3
 8002b2e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8002b38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002b44:	1c59      	adds	r1, r3, #1
 8002b46:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8002b4a:	4413      	add	r3, r2
 8002b4c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b50:	edc7 7a00 	vstr	s15, [r7]
 8002b54:	783a      	ldrb	r2, [r7, #0]
 8002b56:	b252      	sxtb	r2, r2
 8002b58:	701a      	strb	r2, [r3, #0]
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(g + impulse->tflite_input_zeropoint);
 8002b5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b5c:	ee07 3a90 	vmov	s15, r3
 8002b60:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8002b6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002b76:	1c59      	adds	r1, r3, #1
 8002b78:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8002b7c:	4413      	add	r3, r2
 8002b7e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b82:	edc7 7a00 	vstr	s15, [r7]
 8002b86:	783a      	ldrb	r2, [r7, #0]
 8002b88:	b252      	sxtb	r2, r2
 8002b8a:	701a      	strb	r2, [r3, #0]
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(b + impulse->tflite_input_zeropoint);
 8002b8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b8e:	ee07 3a90 	vmov	s15, r3
 8002b92:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8002b9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002ba8:	1c59      	adds	r1, r3, #1
 8002baa:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8002bae:	4413      	add	r3, r2
 8002bb0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002bb4:	edc7 7a00 	vstr	s15, [r7]
 8002bb8:	783a      	ldrb	r2, [r7, #0]
 8002bba:	b252      	sxtb	r2, r2
 8002bbc:	701a      	strb	r2, [r3, #0]
 8002bbe:	e15e      	b.n	8002e7e <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x47a>
                }
                // slow code path
                else {
                    float r = static_cast<float>(pixel >> 16 & 0xff) / 255.0f;
 8002bc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bc2:	0c1b      	lsrs	r3, r3, #16
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	ee07 3a90 	vmov	s15, r3
 8002bca:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002bce:	eddf 6a45 	vldr	s13, [pc, #276]	; 8002ce4 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2e0>
 8002bd2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002bd6:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
                    float g = static_cast<float>(pixel >> 8 & 0xff) / 255.0f;
 8002bda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bdc:	0a1b      	lsrs	r3, r3, #8
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	ee07 3a90 	vmov	s15, r3
 8002be4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002be8:	eddf 6a3e 	vldr	s13, [pc, #248]	; 8002ce4 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2e0>
 8002bec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002bf0:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
                    float b = static_cast<float>(pixel & 0xff) / 255.0f;
 8002bf4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	ee07 3a90 	vmov	s15, r3
 8002bfc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002c00:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002ce4 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2e0>
 8002c04:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002c08:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(r / impulse->tflite_input_scale) + impulse->tflite_input_zeropoint);
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8002c12:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002c16:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002c1a:	eeb0 0a66 	vmov.f32	s0, s13
 8002c1e:	f7fe fe11 	bl	8001844 <_ZSt5roundf>
 8002c22:	eeb0 7a40 	vmov.f32	s14, s0
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8002c2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002c38:	1c59      	adds	r1, r3, #1
 8002c3a:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8002c3e:	4413      	add	r3, r2
 8002c40:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c44:	edc7 7a00 	vstr	s15, [r7]
 8002c48:	783a      	ldrb	r2, [r7, #0]
 8002c4a:	b252      	sxtb	r2, r2
 8002c4c:	701a      	strb	r2, [r3, #0]
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(g / impulse->tflite_input_scale) + impulse->tflite_input_zeropoint);
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8002c54:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8002c58:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002c5c:	eeb0 0a66 	vmov.f32	s0, s13
 8002c60:	f7fe fdf0 	bl	8001844 <_ZSt5roundf>
 8002c64:	eeb0 7a40 	vmov.f32	s14, s0
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8002c6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002c7a:	1c59      	adds	r1, r3, #1
 8002c7c:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8002c80:	4413      	add	r3, r2
 8002c82:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c86:	edc7 7a00 	vstr	s15, [r7]
 8002c8a:	783a      	ldrb	r2, [r7, #0]
 8002c8c:	b252      	sxtb	r2, r2
 8002c8e:	701a      	strb	r2, [r3, #0]
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(b / impulse->tflite_input_scale) + impulse->tflite_input_zeropoint);
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8002c96:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8002c9a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002c9e:	eeb0 0a66 	vmov.f32	s0, s13
 8002ca2:	f7fe fdcf 	bl	8001844 <_ZSt5roundf>
 8002ca6:	eeb0 7a40 	vmov.f32	s14, s0
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8002cb0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002cbc:	1c59      	adds	r1, r3, #1
 8002cbe:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8002cc2:	4413      	add	r3, r2
 8002cc4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002cc8:	edc7 7a00 	vstr	s15, [r7]
 8002ccc:	783a      	ldrb	r2, [r7, #0]
 8002cce:	b252      	sxtb	r2, r2
 8002cd0:	701a      	strb	r2, [r3, #0]
 8002cd2:	e0d4      	b.n	8002e7e <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x47a>
 8002cd4:	0801bbdc 	.word	0x0801bbdc
 8002cd8:	fffffc16 	.word	0xfffffc16
 8002cdc:	3b808081 	.word	0x3b808081
 8002ce0:	c3000000 	.word	0xc3000000
 8002ce4:	437f0000 	.word	0x437f0000
 8002ce8:	3e991687 	.word	0x3e991687
 8002cec:	3f1645a2 	.word	0x3f1645a2
 8002cf0:	3de978d5 	.word	0x3de978d5
                }
            }
            else {
                // fast code path
                if (impulse->tflite_input_scale == 0.003921568859368563f && impulse->tflite_input_zeropoint == -128) {
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8002cfa:	ed1f 7a08 	vldr	s14, [pc, #-32]	; 8002cdc <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2d8>
 8002cfe:	eef4 7a47 	vcmp.f32	s15, s14
 8002d02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d06:	d15b      	bne.n	8002dc0 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x3bc>
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8002d0e:	ed1f 7a0c 	vldr	s14, [pc, #-48]	; 8002ce0 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2dc>
 8002d12:	eef4 7a47 	vcmp.f32	s15, s14
 8002d16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d1a:	d151      	bne.n	8002dc0 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x3bc>
                    int32_t r = static_cast<int32_t>(pixel >> 16 & 0xff);
 8002d1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d1e:	0c1b      	lsrs	r3, r3, #16
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	66bb      	str	r3, [r7, #104]	; 0x68
                    int32_t g = static_cast<int32_t>(pixel >> 8 & 0xff);
 8002d24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d26:	0a1b      	lsrs	r3, r3, #8
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	667b      	str	r3, [r7, #100]	; 0x64
                    int32_t b = static_cast<int32_t>(pixel & 0xff);
 8002d2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	663b      	str	r3, [r7, #96]	; 0x60

                    // ITU-R 601-2 luma transform
                    // see: https://pillow.readthedocs.io/en/stable/reference/Image.html#PIL.Image.Image.convert
                    int32_t gray = (iRedToGray * r) + (iGreenToGray * g) + (iBlueToGray * b);
 8002d32:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d34:	f644 428b 	movw	r2, #19595	; 0x4c8b
 8002d38:	fb03 f202 	mul.w	r2, r3, r2
 8002d3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002d3e:	f249 6145 	movw	r1, #38469	; 0x9645
 8002d42:	fb01 f303 	mul.w	r3, r1, r3
 8002d46:	441a      	add	r2, r3
 8002d48:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d4a:	f641 512f 	movw	r1, #7471	; 0x1d2f
 8002d4e:	fb01 f303 	mul.w	r3, r1, r3
 8002d52:	4413      	add	r3, r2
 8002d54:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                    gray >>= 16; // scale down to int8_t
 8002d58:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002d5c:	141b      	asrs	r3, r3, #16
 8002d5e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                    gray += impulse->tflite_input_zeropoint;
 8002d62:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002d66:	ee07 3a90 	vmov	s15, r3
 8002d6a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8002d74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d78:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d7c:	ee17 3a90 	vmov	r3, s15
 8002d80:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                    if (gray < - 128) gray = -128;
 8002d84:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002d88:	f113 0f80 	cmn.w	r3, #128	; 0x80
 8002d8c:	da04      	bge.n	8002d98 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x394>
 8002d8e:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8002d92:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002d96:	e006      	b.n	8002da6 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x3a2>
                    else if (gray > 127) gray = 127;
 8002d98:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002d9c:	2b7f      	cmp	r3, #127	; 0x7f
 8002d9e:	dd02      	ble.n	8002da6 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x3a2>
 8002da0:	237f      	movs	r3, #127	; 0x7f
 8002da2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(gray);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002dae:	1c59      	adds	r1, r3, #1
 8002db0:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8002db4:	4413      	add	r3, r2
 8002db6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8002dba:	b252      	sxtb	r2, r2
 8002dbc:	701a      	strb	r2, [r3, #0]
 8002dbe:	e05e      	b.n	8002e7e <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x47a>
                }
                // slow code path
                else {
                    float r = static_cast<float>(pixel >> 16 & 0xff) / 255.0f;
 8002dc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dc2:	0c1b      	lsrs	r3, r3, #16
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	ee07 3a90 	vmov	s15, r3
 8002dca:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002dce:	ed5f 6a3b 	vldr	s13, [pc, #-236]	; 8002ce4 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2e0>
 8002dd2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002dd6:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
                    float g = static_cast<float>(pixel >> 8 & 0xff) / 255.0f;
 8002dda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ddc:	0a1b      	lsrs	r3, r3, #8
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	ee07 3a90 	vmov	s15, r3
 8002de4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002de8:	ed5f 6a42 	vldr	s13, [pc, #-264]	; 8002ce4 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2e0>
 8002dec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002df0:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
                    float b = static_cast<float>(pixel & 0xff) / 255.0f;
 8002df4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002df6:	b2db      	uxtb	r3, r3
 8002df8:	ee07 3a90 	vmov	s15, r3
 8002dfc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002e00:	ed5f 6a48 	vldr	s13, [pc, #-288]	; 8002ce4 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2e0>
 8002e04:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002e08:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

                    // ITU-R 601-2 luma transform
                    // see: https://pillow.readthedocs.io/en/stable/reference/Image.html#PIL.Image.Image.convert
                    float v = (0.299f * r) + (0.587f * g) + (0.114f * b);
 8002e0c:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002e10:	ed1f 7a4b 	vldr	s14, [pc, #-300]	; 8002ce8 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2e4>
 8002e14:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002e18:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002e1c:	ed5f 6a4d 	vldr	s13, [pc, #-308]	; 8002cec <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2e8>
 8002e20:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002e24:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e28:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002e2c:	ed5f 6a50 	vldr	s13, [pc, #-320]	; 8002cf0 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2ec>
 8002e30:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002e34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e38:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(v / impulse->tflite_input_scale) + impulse->tflite_input_zeropoint);
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8002e42:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8002e46:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002e4a:	eeb0 0a66 	vmov.f32	s0, s13
 8002e4e:	f7fe fcf9 	bl	8001844 <_ZSt5roundf>
 8002e52:	eeb0 7a40 	vmov.f32	s14, s0
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8002e5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002e68:	1c59      	adds	r1, r3, #1
 8002e6a:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8002e6e:	4413      	add	r3, r2
 8002e70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002e74:	edc7 7a00 	vstr	s15, [r7]
 8002e78:	783a      	ldrb	r2, [r7, #0]
 8002e7a:	b252      	sxtb	r2, r2
 8002e7c:	701a      	strb	r2, [r3, #0]
        for (size_t jx = 0; jx < elements_to_read; jx++) {
 8002e7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e82:	3301      	adds	r3, #1
 8002e84:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002e88:	e618      	b.n	8002abc <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0xb8>
                }
            }
        }

        bytes_left -= elements_to_read;
 8002e8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e8c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e8e:	1ad3      	subs	r3, r2, r3
 8002e90:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e92:	2401      	movs	r4, #1
 8002e94:	f107 0318 	add.w	r3, r7, #24
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f7fe fc6a 	bl	8001772 <_ZN2ei9ei_matrixD1Ev>
 8002e9e:	2c01      	cmp	r4, #1
 8002ea0:	d107      	bne.n	8002eb2 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x4ae>
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
 8002ea2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002ea6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002eaa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002eae:	e5db      	b.n	8002a68 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x64>
    }

    return EIDSP_OK;
 8002eb0:	2500      	movs	r5, #0
}
 8002eb2:	462b      	mov	r3, r5
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	3798      	adds	r7, #152	; 0x98
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bdb0      	pop	{r4, r5, r7, pc}

08002ebc <_ZN14SignalWithAxesC1EPN2ei11ei_signal_tEPhjPK10ei_impulse>:

using namespace ei;

class SignalWithAxes {
public:
    SignalWithAxes(signal_t *original_signal, uint8_t *axes, size_t axes_count, const ei_impulse_t *impulse):
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b084      	sub	sp, #16
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	60f8      	str	r0, [r7, #12]
 8002ec4:	60b9      	str	r1, [r7, #8]
 8002ec6:	607a      	str	r2, [r7, #4]
 8002ec8:	603b      	str	r3, [r7, #0]
        _original_signal(original_signal), _axes(axes), _axes_count(axes_count), _impulse(impulse)
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	68ba      	ldr	r2, [r7, #8]
 8002ece:	601a      	str	r2, [r3, #0]
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	687a      	ldr	r2, [r7, #4]
 8002ed4:	605a      	str	r2, [r3, #4]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	683a      	ldr	r2, [r7, #0]
 8002eda:	609a      	str	r2, [r3, #8]
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	69ba      	ldr	r2, [r7, #24]
 8002ee0:	60da      	str	r2, [r3, #12]
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	3310      	adds	r3, #16
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f7ff fa81 	bl	80023ee <_ZN2ei11ei_signal_tC1Ev>
    {

    }
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3710      	adds	r7, #16
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}

08002ef6 <_ZZN14SignalWithAxes10get_signalEvENKUljjPfE_clEjjS0_>:

        wrapped_signal.total_length = _original_signal->total_length / _impulse->raw_samples_per_frame * _axes_count;
#ifdef __MBED__
        wrapped_signal.get_data = mbed::callback(this, &SignalWithAxes::get_data);
#else
        wrapped_signal.get_data = [this](size_t offset, size_t length, float *out_ptr) {
 8002ef6:	b580      	push	{r7, lr}
 8002ef8:	b084      	sub	sp, #16
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	60f8      	str	r0, [r7, #12]
 8002efe:	60b9      	str	r1, [r7, #8]
 8002f00:	607a      	str	r2, [r7, #4]
 8002f02:	603b      	str	r3, [r7, #0]
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	6818      	ldr	r0, [r3, #0]
            return this->get_data(offset, length, out_ptr);
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	687a      	ldr	r2, [r7, #4]
 8002f0c:	68b9      	ldr	r1, [r7, #8]
 8002f0e:	f000 f832 	bl	8002f76 <_ZN14SignalWithAxes8get_dataEjjPf>
 8002f12:	4603      	mov	r3, r0
        };
 8002f14:	4618      	mov	r0, r3
 8002f16:	3710      	adds	r7, #16
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}

08002f1c <_ZN14SignalWithAxes10get_signalEv>:
    signal_t * get_signal() {
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b084      	sub	sp, #16
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
        if (this->_axes_count == _impulse->raw_samples_per_frame) {
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	689a      	ldr	r2, [r3, #8]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	699b      	ldr	r3, [r3, #24]
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	d102      	bne.n	8002f38 <_ZN14SignalWithAxes10get_signalEv+0x1c>
            return this->_original_signal;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	e01a      	b.n	8002f6e <_ZN14SignalWithAxes10get_signalEv+0x52>
        wrapped_signal.total_length = _original_signal->total_length / _impulse->raw_samples_per_frame * _axes_count;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	691a      	ldr	r2, [r3, #16]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	68db      	ldr	r3, [r3, #12]
 8002f42:	699b      	ldr	r3, [r3, #24]
 8002f44:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f48:	687a      	ldr	r2, [r7, #4]
 8002f4a:	6892      	ldr	r2, [r2, #8]
 8002f4c:	fb03 f202 	mul.w	r2, r3, r2
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	621a      	str	r2, [r3, #32]
        };
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	f103 0210 	add.w	r2, r3, #16
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	60fb      	str	r3, [r7, #12]
 8002f5e:	f107 030c 	add.w	r3, r7, #12
 8002f62:	4619      	mov	r1, r3
 8002f64:	4610      	mov	r0, r2
 8002f66:	f001 fae5 	bl	8004534 <_ZNSt8functionIFijjPfEEaSIZN14SignalWithAxes10get_signalEvEUljjS0_E_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSB_JjjS0_EEEE5valueERS2_E4typeEOS9_>
#endif
        return &wrapped_signal;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	3310      	adds	r3, #16
    }
 8002f6e:	4618      	mov	r0, r3
 8002f70:	3710      	adds	r7, #16
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}

08002f76 <_ZN14SignalWithAxes8get_dataEjjPf>:

    int get_data(size_t offset, size_t length, float *out_ptr) {
 8002f76:	b580      	push	{r7, lr}
 8002f78:	b08a      	sub	sp, #40	; 0x28
 8002f7a:	af00      	add	r7, sp, #0
 8002f7c:	60f8      	str	r0, [r7, #12]
 8002f7e:	60b9      	str	r1, [r7, #8]
 8002f80:	607a      	str	r2, [r7, #4]
 8002f82:	603b      	str	r3, [r7, #0]
        size_t offset_on_original_signal = offset / _axes_count * _impulse->raw_samples_per_frame;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	68ba      	ldr	r2, [r7, #8]
 8002f8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f8e:	68fa      	ldr	r2, [r7, #12]
 8002f90:	68d2      	ldr	r2, [r2, #12]
 8002f92:	6992      	ldr	r2, [r2, #24]
 8002f94:	fb02 f303 	mul.w	r3, r2, r3
 8002f98:	61bb      	str	r3, [r7, #24]
        size_t length_on_original_signal = length / _axes_count * _impulse->raw_samples_per_frame;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	687a      	ldr	r2, [r7, #4]
 8002fa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fa4:	68fa      	ldr	r2, [r7, #12]
 8002fa6:	68d2      	ldr	r2, [r2, #12]
 8002fa8:	6992      	ldr	r2, [r2, #24]
 8002faa:	fb02 f303 	mul.w	r3, r2, r3
 8002fae:	617b      	str	r3, [r7, #20]

        size_t out_ptr_ix = 0;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	627b      	str	r3, [r7, #36]	; 0x24

        for (size_t ix = offset_on_original_signal; ix < offset_on_original_signal + length_on_original_signal; ix += _impulse->raw_samples_per_frame) {
 8002fb4:	69bb      	ldr	r3, [r7, #24]
 8002fb6:	623b      	str	r3, [r7, #32]
 8002fb8:	69ba      	ldr	r2, [r7, #24]
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	4413      	add	r3, r2
 8002fbe:	6a3a      	ldr	r2, [r7, #32]
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d22b      	bcs.n	800301c <_ZN14SignalWithAxes8get_dataEjjPf+0xa6>
            for (size_t axis_ix = 0; axis_ix < this->_axes_count; axis_ix++) {
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	61fb      	str	r3, [r7, #28]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	69fa      	ldr	r2, [r7, #28]
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	d21d      	bcs.n	800300e <_ZN14SignalWithAxes8get_dataEjjPf+0x98>
                int r = _original_signal->get_data(ix + _axes[axis_ix], 1, &out_ptr[out_ptr_ix++]);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	685a      	ldr	r2, [r3, #4]
 8002fdc:	69fb      	ldr	r3, [r7, #28]
 8002fde:	4413      	add	r3, r2
 8002fe0:	781b      	ldrb	r3, [r3, #0]
 8002fe2:	461a      	mov	r2, r3
 8002fe4:	6a3b      	ldr	r3, [r7, #32]
 8002fe6:	18d1      	adds	r1, r2, r3
 8002fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fea:	1c5a      	adds	r2, r3, #1
 8002fec:	627a      	str	r2, [r7, #36]	; 0x24
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	683a      	ldr	r2, [r7, #0]
 8002ff2:	4413      	add	r3, r2
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	f001 fa42 	bl	800447e <_ZNKSt8functionIFijjPfEEclEjjS0_>
 8002ffa:	6138      	str	r0, [r7, #16]
                if (r != 0) {
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d001      	beq.n	8003006 <_ZN14SignalWithAxes8get_dataEjjPf+0x90>
                    return r;
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	e00b      	b.n	800301e <_ZN14SignalWithAxes8get_dataEjjPf+0xa8>
            for (size_t axis_ix = 0; axis_ix < this->_axes_count; axis_ix++) {
 8003006:	69fb      	ldr	r3, [r7, #28]
 8003008:	3301      	adds	r3, #1
 800300a:	61fb      	str	r3, [r7, #28]
 800300c:	e7dc      	b.n	8002fc8 <_ZN14SignalWithAxes8get_dataEjjPf+0x52>
        for (size_t ix = offset_on_original_signal; ix < offset_on_original_signal + length_on_original_signal; ix += _impulse->raw_samples_per_frame) {
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	68db      	ldr	r3, [r3, #12]
 8003012:	699b      	ldr	r3, [r3, #24]
 8003014:	6a3a      	ldr	r2, [r7, #32]
 8003016:	4413      	add	r3, r2
 8003018:	623b      	str	r3, [r7, #32]
 800301a:	e7cd      	b.n	8002fb8 <_ZN14SignalWithAxes8get_dataEjjPf+0x42>
                }
            }
        }

        return 0;
 800301c:	2300      	movs	r3, #0
    }
 800301e:	4618      	mov	r0, r3
 8003020:	3728      	adds	r7, #40	; 0x28
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}

08003026 <_ZL27fill_result_struct_f32_fomoPK10ei_impulseP19ei_impulse_result_tPfii>:

__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_f32_fomo(const ei_impulse_t *impulse,
                                                                            ei_impulse_result_t *result,
                                                                            float *data,
                                                                            int out_width,
                                                                            int out_height) {
 8003026:	b480      	push	{r7}
 8003028:	b085      	sub	sp, #20
 800302a:	af00      	add	r7, sp, #0
 800302c:	60f8      	str	r0, [r7, #12]
 800302e:	60b9      	str	r1, [r7, #8]
 8003030:	607a      	str	r2, [r7, #4]
 8003032:	603b      	str	r3, [r7, #0]

    fill_result_struct_from_cubes(result, &cubes, out_width_factor, impulse->object_detection_count);

    return EI_IMPULSE_OK;
#else
    return EI_IMPULSE_LAST_LAYER_NOT_AVAILABLE;
 8003034:	f06f 0314 	mvn.w	r3, #20
#endif
}
 8003038:	4618      	mov	r0, r3
 800303a:	3714      	adds	r7, #20
 800303c:	46bd      	mov	sp, r7
 800303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003042:	4770      	bx	lr

08003044 <_ZL26fill_result_struct_i8_fomoPK10ei_impulseP19ei_impulse_result_tPaffii>:
                                                                           ei_impulse_result_t *result,
                                                                           int8_t *data,
                                                                           float zero_point,
                                                                           float scale,
                                                                           int out_width,
                                                                           int out_height) {
 8003044:	b480      	push	{r7}
 8003046:	b087      	sub	sp, #28
 8003048:	af00      	add	r7, sp, #0
 800304a:	6178      	str	r0, [r7, #20]
 800304c:	6139      	str	r1, [r7, #16]
 800304e:	60fa      	str	r2, [r7, #12]
 8003050:	ed87 0a02 	vstr	s0, [r7, #8]
 8003054:	edc7 0a01 	vstr	s1, [r7, #4]
 8003058:	603b      	str	r3, [r7, #0]

    fill_result_struct_from_cubes(result, &cubes, out_width_factor, impulse->object_detection_count);

    return EI_IMPULSE_OK;
#else
    return EI_IMPULSE_LAST_LAYER_NOT_AVAILABLE;
 800305a:	f06f 0314 	mvn.w	r3, #20
#endif
}
 800305e:	4618      	mov	r0, r3
 8003060:	371c      	adds	r7, #28
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr
	...

0800306c <_ZL21fill_result_struct_i8PK10ei_impulseP19ei_impulse_result_tPaffb>:
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_i8(const ei_impulse_t *impulse,
                                                                      ei_impulse_result_t *result,
                                                                      int8_t *data,
                                                                      float zero_point,
                                                                      float scale,
                                                                      bool debug) {
 800306c:	b580      	push	{r7, lr}
 800306e:	b088      	sub	sp, #32
 8003070:	af00      	add	r7, sp, #0
 8003072:	6178      	str	r0, [r7, #20]
 8003074:	6139      	str	r1, [r7, #16]
 8003076:	60fa      	str	r2, [r7, #12]
 8003078:	ed87 0a02 	vstr	s0, [r7, #8]
 800307c:	edc7 0a01 	vstr	s1, [r7, #4]
 8003080:	70fb      	strb	r3, [r7, #3]
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
 8003082:	2300      	movs	r3, #0
 8003084:	61fb      	str	r3, [r7, #28]
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800308a:	461a      	mov	r2, r3
 800308c:	69fb      	ldr	r3, [r7, #28]
 800308e:	4293      	cmp	r3, r2
 8003090:	d23f      	bcs.n	8003112 <_ZL21fill_result_struct_i8PK10ei_impulseP19ei_impulse_result_tPaffb+0xa6>
        float value = static_cast<float>(data[ix] - zero_point) * scale;
 8003092:	68fa      	ldr	r2, [r7, #12]
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	4413      	add	r3, r2
 8003098:	f993 3000 	ldrsb.w	r3, [r3]
 800309c:	ee07 3a90 	vmov	s15, r3
 80030a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80030a4:	edd7 7a02 	vldr	s15, [r7, #8]
 80030a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030ac:	ed97 7a01 	vldr	s14, [r7, #4]
 80030b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030b4:	edc7 7a06 	vstr	s15, [r7, #24]

        if (debug) {
 80030b8:	78fb      	ldrb	r3, [r7, #3]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d011      	beq.n	80030e2 <_ZL21fill_result_struct_i8PK10ei_impulseP19ei_impulse_result_tPaffb+0x76>
            ei_printf("%s:\t", impulse->categories[ix]);
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80030c4:	69fb      	ldr	r3, [r7, #28]
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	4413      	add	r3, r2
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4619      	mov	r1, r3
 80030ce:	4813      	ldr	r0, [pc, #76]	; (800311c <_ZL21fill_result_struct_i8PK10ei_impulseP19ei_impulse_result_tPaffb+0xb0>)
 80030d0:	f000 feac 	bl	8003e2c <_Z9ei_printfPKcz>
            ei_printf_float(value);
 80030d4:	ed97 0a06 	vldr	s0, [r7, #24]
 80030d8:	f00f fe6a 	bl	8012db0 <_Z15ei_printf_floatf>
            ei_printf("\n");
 80030dc:	4810      	ldr	r0, [pc, #64]	; (8003120 <_ZL21fill_result_struct_i8PK10ei_impulseP19ei_impulse_result_tPaffb+0xb4>)
 80030de:	f000 fea5 	bl	8003e2c <_Z9ei_printfPKcz>
        }
        result->classification[ix].label = impulse->categories[ix];
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80030e8:	69fb      	ldr	r3, [r7, #28]
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	4413      	add	r3, r2
 80030ee:	6819      	ldr	r1, [r3, #0]
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	69fa      	ldr	r2, [r7, #28]
 80030f4:	3201      	adds	r2, #1
 80030f6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
        result->classification[ix].value = value;
 80030fa:	693a      	ldr	r2, [r7, #16]
 80030fc:	69fb      	ldr	r3, [r7, #28]
 80030fe:	3301      	adds	r3, #1
 8003100:	00db      	lsls	r3, r3, #3
 8003102:	4413      	add	r3, r2
 8003104:	3304      	adds	r3, #4
 8003106:	69ba      	ldr	r2, [r7, #24]
 8003108:	601a      	str	r2, [r3, #0]
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
 800310a:	69fb      	ldr	r3, [r7, #28]
 800310c:	3301      	adds	r3, #1
 800310e:	61fb      	str	r3, [r7, #28]
 8003110:	e7b9      	b.n	8003086 <_ZL21fill_result_struct_i8PK10ei_impulseP19ei_impulse_result_tPaffb+0x1a>
    }

    return EI_IMPULSE_OK;
 8003112:	2300      	movs	r3, #0
}
 8003114:	4618      	mov	r0, r3
 8003116:	3720      	adds	r7, #32
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}
 800311c:	0801bbe8 	.word	0x0801bbe8
 8003120:	0801bbf0 	.word	0x0801bbf0

08003124 <_ZL22fill_result_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb>:
 * Fill the result structure from an unquantized output tensor
 */
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_f32(const ei_impulse_t *impulse,
                                                                       ei_impulse_result_t *result,
                                                                       float *data,
                                                                       bool debug) {
 8003124:	b580      	push	{r7, lr}
 8003126:	b086      	sub	sp, #24
 8003128:	af00      	add	r7, sp, #0
 800312a:	60f8      	str	r0, [r7, #12]
 800312c:	60b9      	str	r1, [r7, #8]
 800312e:	607a      	str	r2, [r7, #4]
 8003130:	70fb      	strb	r3, [r7, #3]
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
 8003132:	2300      	movs	r3, #0
 8003134:	617b      	str	r3, [r7, #20]
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800313a:	461a      	mov	r2, r3
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	4293      	cmp	r3, r2
 8003140:	d232      	bcs.n	80031a8 <_ZL22fill_result_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb+0x84>
        float value = data[ix];
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	009b      	lsls	r3, r3, #2
 8003146:	687a      	ldr	r2, [r7, #4]
 8003148:	4413      	add	r3, r2
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	613b      	str	r3, [r7, #16]

        if (debug) {
 800314e:	78fb      	ldrb	r3, [r7, #3]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d011      	beq.n	8003178 <_ZL22fill_result_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb+0x54>
            ei_printf("%s:\t", impulse->categories[ix]);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	009b      	lsls	r3, r3, #2
 800315e:	4413      	add	r3, r2
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4619      	mov	r1, r3
 8003164:	4813      	ldr	r0, [pc, #76]	; (80031b4 <_ZL22fill_result_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb+0x90>)
 8003166:	f000 fe61 	bl	8003e2c <_Z9ei_printfPKcz>
            ei_printf_float(value);
 800316a:	ed97 0a04 	vldr	s0, [r7, #16]
 800316e:	f00f fe1f 	bl	8012db0 <_Z15ei_printf_floatf>
            ei_printf("\n");
 8003172:	4811      	ldr	r0, [pc, #68]	; (80031b8 <_ZL22fill_result_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb+0x94>)
 8003174:	f000 fe5a 	bl	8003e2c <_Z9ei_printfPKcz>
        }
        result->classification[ix].label = impulse->categories[ix];
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	4413      	add	r3, r2
 8003184:	6819      	ldr	r1, [r3, #0]
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	697a      	ldr	r2, [r7, #20]
 800318a:	3201      	adds	r2, #1
 800318c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
        result->classification[ix].value = value;
 8003190:	68ba      	ldr	r2, [r7, #8]
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	3301      	adds	r3, #1
 8003196:	00db      	lsls	r3, r3, #3
 8003198:	4413      	add	r3, r2
 800319a:	3304      	adds	r3, #4
 800319c:	693a      	ldr	r2, [r7, #16]
 800319e:	601a      	str	r2, [r3, #0]
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	3301      	adds	r3, #1
 80031a4:	617b      	str	r3, [r7, #20]
 80031a6:	e7c6      	b.n	8003136 <_ZL22fill_result_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb+0x12>
    }

    return EI_IMPULSE_OK;
 80031a8:	2300      	movs	r3, #0
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	3718      	adds	r7, #24
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}
 80031b2:	bf00      	nop
 80031b4:	0801bbe8 	.word	0x0801bbe8
 80031b8:	0801bbf0 	.word	0x0801bbf0

080031bc <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE>:
 * @return  EI_IMPULSE_OK if successful
 */
static EI_IMPULSE_ERROR inference_tflite_setup(const ei_impulse_t *impulse, uint64_t *ctx_start_us, TfLiteTensor** input, TfLiteTensor** output,
    TfLiteTensor** output_labels,
    TfLiteTensor** output_scores,
    ei_unique_ptr_t& p_tensor_arena) {
 80031bc:	b580      	push	{r7, lr}
 80031be:	b086      	sub	sp, #24
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	60f8      	str	r0, [r7, #12]
 80031c4:	60b9      	str	r1, [r7, #8]
 80031c6:	607a      	str	r2, [r7, #4]
 80031c8:	603b      	str	r3, [r7, #0]

    *ctx_start_us = ei_read_timer_us();
 80031ca:	f00f fddf 	bl	8012d8c <_Z16ei_read_timer_usv>
 80031ce:	4602      	mov	r2, r0
 80031d0:	460b      	mov	r3, r1
 80031d2:	68b9      	ldr	r1, [r7, #8]
 80031d4:	e9c1 2300 	strd	r2, r3, [r1]

    TfLiteStatus init_status = trained_model_init(ei_aligned_calloc);
 80031d8:	486e      	ldr	r0, [pc, #440]	; (8003394 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1d8>)
 80031da:	f014 fd8f 	bl	8017cfc <_Z18trained_model_initPFPvjjE>
 80031de:	4603      	mov	r3, r0
 80031e0:	75fb      	strb	r3, [r7, #23]
    if (init_status != kTfLiteOk) {
 80031e2:	7dfb      	ldrb	r3, [r7, #23]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d007      	beq.n	80031f8 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x3c>
        ei_printf("Failed to allocate TFLite arena (error code %d)\n", init_status);
 80031e8:	7dfb      	ldrb	r3, [r7, #23]
 80031ea:	4619      	mov	r1, r3
 80031ec:	486a      	ldr	r0, [pc, #424]	; (8003398 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1dc>)
 80031ee:	f000 fe1d 	bl	8003e2c <_Z9ei_printfPKcz>
        return EI_IMPULSE_TFLITE_ARENA_ALLOC_FAILED;
 80031f2:	f06f 0305 	mvn.w	r3, #5
 80031f6:	e0c8      	b.n	800338a <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1ce>
    }

    static bool tflite_first_run = true;

    *input = impulse->model_input(0);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031fe:	2000      	movs	r0, #0
 8003200:	4798      	blx	r3
 8003202:	4602      	mov	r2, r0
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	601a      	str	r2, [r3, #0]
    *output = impulse->model_output(0);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800320e:	2000      	movs	r0, #0
 8003210:	4798      	blx	r3
 8003212:	4602      	mov	r2, r0
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	601a      	str	r2, [r3, #0]

    if (impulse->object_detection_last_layer == EI_CLASSIFIER_LAST_LAYER_SSD) {
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	f993 3048 	ldrsb.w	r3, [r3, #72]	; 0x48
 800321e:	2b01      	cmp	r3, #1
 8003220:	d115      	bne.n	800324e <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x92>
        *output_scores = impulse->model_output(impulse->tflite_output_score_tensor);
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003228:	68fa      	ldr	r2, [r7, #12]
 800322a:	f892 204a 	ldrb.w	r2, [r2, #74]	; 0x4a
 800322e:	4610      	mov	r0, r2
 8003230:	4798      	blx	r3
 8003232:	4602      	mov	r2, r0
 8003234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003236:	601a      	str	r2, [r3, #0]
        *output_labels = impulse->model_output(impulse->tflite_output_labels_tensor);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800323e:	68fa      	ldr	r2, [r7, #12]
 8003240:	f892 2049 	ldrb.w	r2, [r2, #73]	; 0x49
 8003244:	4610      	mov	r0, r2
 8003246:	4798      	blx	r3
 8003248:	4602      	mov	r2, r0
 800324a:	6a3b      	ldr	r3, [r7, #32]
 800324c:	601a      	str	r2, [r3, #0]
    }

    // Assert that our quantization parameters match the model
    if (tflite_first_run) {
 800324e:	4b53      	ldr	r3, [pc, #332]	; (800339c <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1e0>)
 8003250:	781b      	ldrb	r3, [r3, #0]
 8003252:	2b00      	cmp	r3, #0
 8003254:	f000 8098 	beq.w	8003388 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1cc>
        assert((*input)->type == impulse->tflite_input_datatype);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	781a      	ldrb	r2, [r3, #0]
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003264:	429a      	cmp	r2, r3
 8003266:	d005      	beq.n	8003274 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0xb8>
 8003268:	4b4d      	ldr	r3, [pc, #308]	; (80033a0 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1e4>)
 800326a:	4a4e      	ldr	r2, [pc, #312]	; (80033a4 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1e8>)
 800326c:	2159      	movs	r1, #89	; 0x59
 800326e:	484e      	ldr	r0, [pc, #312]	; (80033a8 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1ec>)
 8003270:	f017 f898 	bl	801a3a4 <__assert_func>
        assert((*output)->type == impulse->tflite_output_datatype);
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	781a      	ldrb	r2, [r3, #0]
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8003280:	429a      	cmp	r2, r3
 8003282:	d005      	beq.n	8003290 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0xd4>
 8003284:	4b49      	ldr	r3, [pc, #292]	; (80033ac <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1f0>)
 8003286:	4a47      	ldr	r2, [pc, #284]	; (80033a4 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1e8>)
 8003288:	215a      	movs	r1, #90	; 0x5a
 800328a:	4847      	ldr	r0, [pc, #284]	; (80033a8 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1ec>)
 800328c:	f017 f88a 	bl	801a3a4 <__assert_func>
        if (impulse->object_detection_last_layer == EI_CLASSIFIER_LAST_LAYER_SSD) {
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	f993 3048 	ldrsb.w	r3, [r3, #72]	; 0x48
 8003296:	2b01      	cmp	r3, #1
 8003298:	d11b      	bne.n	80032d2 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x116>
            assert((*output_scores)->type == impulse->tflite_output_datatype);
 800329a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	781a      	ldrb	r2, [r3, #0]
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 80032a6:	429a      	cmp	r2, r3
 80032a8:	d005      	beq.n	80032b6 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0xfa>
 80032aa:	4b41      	ldr	r3, [pc, #260]	; (80033b0 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1f4>)
 80032ac:	4a3d      	ldr	r2, [pc, #244]	; (80033a4 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1e8>)
 80032ae:	215c      	movs	r1, #92	; 0x5c
 80032b0:	483d      	ldr	r0, [pc, #244]	; (80033a8 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1ec>)
 80032b2:	f017 f877 	bl	801a3a4 <__assert_func>
            assert((*output_labels)->type == impulse->tflite_output_datatype);
 80032b6:	6a3b      	ldr	r3, [r7, #32]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	781a      	ldrb	r2, [r3, #0]
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 80032c2:	429a      	cmp	r2, r3
 80032c4:	d005      	beq.n	80032d2 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x116>
 80032c6:	4b3b      	ldr	r3, [pc, #236]	; (80033b4 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1f8>)
 80032c8:	4a36      	ldr	r2, [pc, #216]	; (80033a4 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1e8>)
 80032ca:	215d      	movs	r1, #93	; 0x5d
 80032cc:	4836      	ldr	r0, [pc, #216]	; (80033a8 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1ec>)
 80032ce:	f017 f869 	bl	801a3a4 <__assert_func>
        }
        if (impulse->tflite_input_quantized) {
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d026      	beq.n	800332a <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x16e>
            assert((*input)->params.scale == impulse->tflite_input_scale);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	ed93 7a03 	vldr	s14, [r3, #12]
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 80032ea:	eeb4 7a67 	vcmp.f32	s14, s15
 80032ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032f2:	d005      	beq.n	8003300 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x144>
 80032f4:	4b30      	ldr	r3, [pc, #192]	; (80033b8 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1fc>)
 80032f6:	4a2b      	ldr	r2, [pc, #172]	; (80033a4 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1e8>)
 80032f8:	2160      	movs	r1, #96	; 0x60
 80032fa:	482b      	ldr	r0, [pc, #172]	; (80033a8 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1ec>)
 80032fc:	f017 f852 	bl	801a3a4 <__assert_func>
            assert((*input)->params.zero_point == impulse->tflite_input_zeropoint);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	691b      	ldr	r3, [r3, #16]
 8003306:	ee07 3a90 	vmov	s15, r3
 800330a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8003314:	eeb4 7a67 	vcmp.f32	s14, s15
 8003318:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800331c:	d005      	beq.n	800332a <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x16e>
 800331e:	4b27      	ldr	r3, [pc, #156]	; (80033bc <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x200>)
 8003320:	4a20      	ldr	r2, [pc, #128]	; (80033a4 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1e8>)
 8003322:	2161      	movs	r1, #97	; 0x61
 8003324:	4820      	ldr	r0, [pc, #128]	; (80033a8 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1ec>)
 8003326:	f017 f83d 	bl	801a3a4 <__assert_func>
        }
        if (impulse->tflite_output_quantized) {
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8003330:	2b00      	cmp	r3, #0
 8003332:	d026      	beq.n	8003382 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1c6>
            assert((*output)->params.scale == impulse->tflite_output_scale);
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	ed93 7a03 	vldr	s14, [r3, #12]
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8003342:	eeb4 7a67 	vcmp.f32	s14, s15
 8003346:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800334a:	d005      	beq.n	8003358 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x19c>
 800334c:	4b1c      	ldr	r3, [pc, #112]	; (80033c0 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x204>)
 800334e:	4a15      	ldr	r2, [pc, #84]	; (80033a4 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1e8>)
 8003350:	2164      	movs	r1, #100	; 0x64
 8003352:	4815      	ldr	r0, [pc, #84]	; (80033a8 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1ec>)
 8003354:	f017 f826 	bl	801a3a4 <__assert_func>
            assert((*output)->params.zero_point == impulse->tflite_output_zeropoint);
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	691b      	ldr	r3, [r3, #16]
 800335e:	ee07 3a90 	vmov	s15, r3
 8003362:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 800336c:	eeb4 7a67 	vcmp.f32	s14, s15
 8003370:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003374:	d005      	beq.n	8003382 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1c6>
 8003376:	4b13      	ldr	r3, [pc, #76]	; (80033c4 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x208>)
 8003378:	4a0a      	ldr	r2, [pc, #40]	; (80033a4 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1e8>)
 800337a:	2165      	movs	r1, #101	; 0x65
 800337c:	480a      	ldr	r0, [pc, #40]	; (80033a8 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1ec>)
 800337e:	f017 f811 	bl	801a3a4 <__assert_func>
        }
        tflite_first_run = false;
 8003382:	4b06      	ldr	r3, [pc, #24]	; (800339c <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1e0>)
 8003384:	2200      	movs	r2, #0
 8003386:	701a      	strb	r2, [r3, #0]
    }
    return EI_IMPULSE_OK;
 8003388:	2300      	movs	r3, #0
}
 800338a:	4618      	mov	r0, r3
 800338c:	3718      	adds	r7, #24
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}
 8003392:	bf00      	nop
 8003394:	080015c1 	.word	0x080015c1
 8003398:	0801bbf4 	.word	0x0801bbf4
 800339c:	20000044 	.word	0x20000044
 80033a0:	0801bc28 	.word	0x0801bc28
 80033a4:	0801bc5c 	.word	0x0801bc5c
 80033a8:	0801bcf8 	.word	0x0801bcf8
 80033ac:	0801bd84 	.word	0x0801bd84
 80033b0:	0801bdb8 	.word	0x0801bdb8
 80033b4:	0801bdf4 	.word	0x0801bdf4
 80033b8:	0801be30 	.word	0x0801be30
 80033bc:	0801be68 	.word	0x0801be68
 80033c0:	0801bea8 	.word	0x0801bea8
 80033c4:	0801bee0 	.word	0x0801bee0

080033c8 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb>:
    TfLiteTensor* output,
    TfLiteTensor* labels_tensor,
    TfLiteTensor* scores_tensor,
    uint8_t* tensor_arena,
    ei_impulse_result_t *result,
    bool debug) {
 80033c8:	b5b0      	push	{r4, r5, r7, lr}
 80033ca:	b08c      	sub	sp, #48	; 0x30
 80033cc:	af02      	add	r7, sp, #8
 80033ce:	60f8      	str	r0, [r7, #12]
 80033d0:	e9c7 2300 	strd	r2, r3, [r7]

    if(trained_model_invoke() != kTfLiteOk) {
 80033d4:	f014 fef6 	bl	80181c4 <_Z20trained_model_invokev>
 80033d8:	4603      	mov	r3, r0
 80033da:	2b00      	cmp	r3, #0
 80033dc:	bf14      	ite	ne
 80033de:	2301      	movne	r3, #1
 80033e0:	2300      	moveq	r3, #0
 80033e2:	b2db      	uxtb	r3, r3
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d002      	beq.n	80033ee <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x26>
        return EI_IMPULSE_TFLITE_ERROR;
 80033e8:	f06f 0302 	mvn.w	r3, #2
 80033ec:	e0ea      	b.n	80035c4 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1fc>
    }

    uint64_t ctx_end_us = ei_read_timer_us();
 80033ee:	f00f fccd 	bl	8012d8c <_Z16ei_read_timer_usv>
 80033f2:	e9c7 0106 	strd	r0, r1, [r7, #24]

    result->timing.classification_us = ctx_end_us - ctx_start_us;
 80033f6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80033fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80033fe:	1a84      	subs	r4, r0, r2
 8003400:	eb61 0503 	sbc.w	r5, r1, r3
 8003404:	4622      	mov	r2, r4
 8003406:	462b      	mov	r3, r5
 8003408:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800340a:	e9c1 233c 	strd	r2, r3, [r1, #240]	; 0xf0
    result->timing.classification = (int)(result->timing.classification_us / 1000);
 800340e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003410:	e9d3 013c 	ldrd	r0, r1, [r3, #240]	; 0xf0
 8003414:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003418:	f04f 0300 	mov.w	r3, #0
 800341c:	f7fd fc3e 	bl	8000c9c <__aeabi_ldivmod>
 8003420:	4602      	mov	r2, r0
 8003422:	460b      	mov	r3, r1
 8003424:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003426:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0

    // Read the predicted y value from the model's output tensor
    if (debug) {
 800342a:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800342e:	2b00      	cmp	r3, #0
 8003430:	d006      	beq.n	8003440 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x78>
        ei_printf("Predictions (time: %d ms.):\n", result->timing.classification);
 8003432:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003434:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003438:	4619      	mov	r1, r3
 800343a:	4864      	ldr	r0, [pc, #400]	; (80035cc <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x204>)
 800343c:	f000 fcf6 	bl	8003e2c <_Z9ei_printfPKcz>
    }

    EI_IMPULSE_ERROR fill_res = EI_IMPULSE_OK;
 8003440:	2300      	movs	r3, #0
 8003442:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if (impulse->object_detection) {
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800344c:	2b00      	cmp	r3, #0
 800344e:	d072      	beq.n	8003536 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x16e>
        switch (impulse->object_detection_last_layer) {
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	f993 3048 	ldrsb.w	r3, [r3, #72]	; 0x48
 8003456:	3b01      	subs	r3, #1
 8003458:	2b04      	cmp	r3, #4
 800345a:	d862      	bhi.n	8003522 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x15a>
 800345c:	a201      	add	r2, pc, #4	; (adr r2, 8003464 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x9c>)
 800345e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003462:	bf00      	nop
 8003464:	080034ef 	.word	0x080034ef
 8003468:	08003479 	.word	0x08003479
 800346c:	080034fb 	.word	0x080034fb
 8003470:	0800350f 	.word	0x0800350f
 8003474:	080034fb 	.word	0x080034fb
            case EI_CLASSIFIER_LAST_LAYER_FOMO: {
                bool int8_output = output->type == TfLiteType::kTfLiteInt8;
 8003478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800347a:	781b      	ldrb	r3, [r3, #0]
 800347c:	2b09      	cmp	r3, #9
 800347e:	bf0c      	ite	eq
 8003480:	2301      	moveq	r3, #1
 8003482:	2300      	movne	r3, #0
 8003484:	75bb      	strb	r3, [r7, #22]
                if (int8_output) {
 8003486:	7dbb      	ldrb	r3, [r7, #22]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d01e      	beq.n	80034ca <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x102>
                    fill_res = fill_result_struct_i8_fomo(impulse, result, output->data.int8, output->params.zero_point, output->params.scale,
 800348c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800348e:	685a      	ldr	r2, [r3, #4]
 8003490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003492:	691b      	ldr	r3, [r3, #16]
 8003494:	ee07 3a90 	vmov	s15, r3
 8003498:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800349c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800349e:	ed93 7a03 	vldr	s14, [r3, #12]
                        (int)output->dims->data[1], (int)output->dims->data[2]);
 80034a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	6899      	ldr	r1, [r3, #8]
 80034a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	68db      	ldr	r3, [r3, #12]
                    fill_res = fill_result_struct_i8_fomo(impulse, result, output->data.int8, output->params.zero_point, output->params.scale,
 80034ae:	9300      	str	r3, [sp, #0]
 80034b0:	460b      	mov	r3, r1
 80034b2:	eef0 0a47 	vmov.f32	s1, s14
 80034b6:	eeb0 0a67 	vmov.f32	s0, s15
 80034ba:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80034bc:	68f8      	ldr	r0, [r7, #12]
 80034be:	f7ff fdc1 	bl	8003044 <_ZL26fill_result_struct_i8_fomoPK10ei_impulseP19ei_impulse_result_tPaffii>
 80034c2:	4603      	mov	r3, r0
 80034c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                }
                else {
                    fill_res = fill_result_struct_f32_fomo(impulse, result, output->data.f, (int)output->dims->data[1], (int)output->dims->data[2]);
                }
                break;
 80034c8:	e063      	b.n	8003592 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1ca>
                    fill_res = fill_result_struct_f32_fomo(impulse, result, output->data.f, (int)output->dims->data[1], (int)output->dims->data[2]);
 80034ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034cc:	685a      	ldr	r2, [r3, #4]
 80034ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	6899      	ldr	r1, [r3, #8]
 80034d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	68db      	ldr	r3, [r3, #12]
 80034da:	9300      	str	r3, [sp, #0]
 80034dc:	460b      	mov	r3, r1
 80034de:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80034e0:	68f8      	ldr	r0, [r7, #12]
 80034e2:	f7ff fda0 	bl	8003026 <_ZL27fill_result_struct_f32_fomoPK10ei_impulseP19ei_impulse_result_tPfii>
 80034e6:	4603      	mov	r3, r0
 80034e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                break;
 80034ec:	e051      	b.n	8003592 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1ca>
            }
            case EI_CLASSIFIER_LAST_LAYER_SSD: {
                #if EI_CLASSIFIER_ENABLE_DETECTION_POSTPROCESS_OP
                    fill_res = fill_result_struct_f32_object_detection(impulse, result, tflite::post_process_boxes, tflite::post_process_scores, tflite::post_process_classes, debug);
                #else
                    ei_printf("ERR: Cannot run SSD model, EI_CLASSIFIER_ENABLE_DETECTION_POSTPROCESS_OP is disabled\n");
 80034ee:	4838      	ldr	r0, [pc, #224]	; (80035d0 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x208>)
 80034f0:	f000 fc9c 	bl	8003e2c <_Z9ei_printfPKcz>
                    return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
 80034f4:	f06f 0309 	mvn.w	r3, #9
 80034f8:	e064      	b.n	80035c4 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1fc>
                break;
            }
            case EI_CLASSIFIER_LAST_LAYER_YOLOV5:
            case EI_CLASSIFIER_LAST_LAYER_YOLOV5_V5_DRPAI: {
                ei_printf("ERR: YOLOv5 models are not supported using EON Compiler, use full TFLite (%d)\n",
                    impulse->object_detection_last_layer);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	f993 3048 	ldrsb.w	r3, [r3, #72]	; 0x48
                ei_printf("ERR: YOLOv5 models are not supported using EON Compiler, use full TFLite (%d)\n",
 8003500:	4619      	mov	r1, r3
 8003502:	4834      	ldr	r0, [pc, #208]	; (80035d4 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x20c>)
 8003504:	f000 fc92 	bl	8003e2c <_Z9ei_printfPKcz>
                return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
 8003508:	f06f 0309 	mvn.w	r3, #9
 800350c:	e05a      	b.n	80035c4 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1fc>
            }
            case EI_CLASSIFIER_LAST_LAYER_YOLOX: {
                ei_printf("ERR: YOLOX models are not supported using EON Compiler, use full TFLite (%d)\n",
                    impulse->object_detection_last_layer);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	f993 3048 	ldrsb.w	r3, [r3, #72]	; 0x48
                ei_printf("ERR: YOLOX models are not supported using EON Compiler, use full TFLite (%d)\n",
 8003514:	4619      	mov	r1, r3
 8003516:	4830      	ldr	r0, [pc, #192]	; (80035d8 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x210>)
 8003518:	f000 fc88 	bl	8003e2c <_Z9ei_printfPKcz>
                return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
 800351c:	f06f 0309 	mvn.w	r3, #9
 8003520:	e050      	b.n	80035c4 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1fc>
            }
            default: {
                ei_printf("ERR: Unsupported object detection last layer (%d)\n",
                    impulse->object_detection_last_layer);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	f993 3048 	ldrsb.w	r3, [r3, #72]	; 0x48
                ei_printf("ERR: Unsupported object detection last layer (%d)\n",
 8003528:	4619      	mov	r1, r3
 800352a:	482c      	ldr	r0, [pc, #176]	; (80035dc <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x214>)
 800352c:	f000 fc7e 	bl	8003e2c <_Z9ei_printfPKcz>
                return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
 8003530:	f06f 0309 	mvn.w	r3, #9
 8003534:	e046      	b.n	80035c4 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1fc>
            }
        }
    }
    else {
        bool int8_output = output->type == TfLiteType::kTfLiteInt8;
 8003536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003538:	781b      	ldrb	r3, [r3, #0]
 800353a:	2b09      	cmp	r3, #9
 800353c:	bf0c      	ite	eq
 800353e:	2301      	moveq	r3, #1
 8003540:	2300      	movne	r3, #0
 8003542:	75fb      	strb	r3, [r7, #23]
        if (int8_output) {
 8003544:	7dfb      	ldrb	r3, [r7, #23]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d018      	beq.n	800357c <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1b4>
            fill_res = fill_result_struct_i8(impulse, result, output->data.int8, output->params.zero_point, output->params.scale, debug);
 800354a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800354c:	685a      	ldr	r2, [r3, #4]
 800354e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003550:	691b      	ldr	r3, [r3, #16]
 8003552:	ee07 3a90 	vmov	s15, r3
 8003556:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800355a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800355c:	ed93 7a03 	vldr	s14, [r3, #12]
 8003560:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8003564:	eef0 0a47 	vmov.f32	s1, s14
 8003568:	eeb0 0a67 	vmov.f32	s0, s15
 800356c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800356e:	68f8      	ldr	r0, [r7, #12]
 8003570:	f7ff fd7c 	bl	800306c <_ZL21fill_result_struct_i8PK10ei_impulseP19ei_impulse_result_tPaffb>
 8003574:	4603      	mov	r3, r0
 8003576:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800357a:	e00a      	b.n	8003592 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1ca>
        }
        else {
            fill_res = fill_result_struct_f32(impulse, result, output->data.f, debug);
 800357c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800357e:	685a      	ldr	r2, [r3, #4]
 8003580:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8003584:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003586:	68f8      	ldr	r0, [r7, #12]
 8003588:	f7ff fdcc 	bl	8003124 <_ZL22fill_result_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb>
 800358c:	4603      	mov	r3, r0
 800358e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
    }

    trained_model_reset(ei_aligned_free);
 8003592:	4813      	ldr	r0, [pc, #76]	; (80035e0 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x218>)
 8003594:	f014 fe4c 	bl	8018230 <_Z19trained_model_resetPFvPvE>

    if (fill_res != EI_IMPULSE_OK) {
 8003598:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800359c:	2b00      	cmp	r3, #0
 800359e:	d002      	beq.n	80035a6 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1de>
        return fill_res;
 80035a0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80035a4:	e00e      	b.n	80035c4 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1fc>
    }

    if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
 80035a6:	f00f fbe9 	bl	8012d7c <_Z29ei_run_impulse_check_canceledv>
 80035aa:	4603      	mov	r3, r0
 80035ac:	f113 0f02 	cmn.w	r3, #2
 80035b0:	bf0c      	ite	eq
 80035b2:	2301      	moveq	r3, #1
 80035b4:	2300      	movne	r3, #0
 80035b6:	b2db      	uxtb	r3, r3
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d002      	beq.n	80035c2 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1fa>
        return EI_IMPULSE_CANCELED;
 80035bc:	f06f 0301 	mvn.w	r3, #1
 80035c0:	e000      	b.n	80035c4 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1fc>
    }

    return EI_IMPULSE_OK;
 80035c2:	2300      	movs	r3, #0
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	3728      	adds	r7, #40	; 0x28
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bdb0      	pop	{r4, r5, r7, pc}
 80035cc:	0801bf24 	.word	0x0801bf24
 80035d0:	0801bf44 	.word	0x0801bf44
 80035d4:	0801bf9c 	.word	0x0801bf9c
 80035d8:	0801bfec 	.word	0x0801bfec
 80035dc:	0801c03c 	.word	0x0801c03c
 80035e0:	08001645 	.word	0x08001645

080035e4 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb>:
EI_IMPULSE_ERROR run_nn_inference(
    const ei_impulse_t *impulse,
    ei::matrix_t *fmatrix,
    ei_impulse_result_t *result,
    bool debug = false)
{
 80035e4:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 80035e8:	b09e      	sub	sp, #120	; 0x78
 80035ea:	af06      	add	r7, sp, #24
 80035ec:	6178      	str	r0, [r7, #20]
 80035ee:	6139      	str	r1, [r7, #16]
 80035f0:	60fa      	str	r2, [r7, #12]
 80035f2:	72fb      	strb	r3, [r7, #11]
    TfLiteTensor* input;
    TfLiteTensor* output;
    TfLiteTensor* output_scores;
    TfLiteTensor* output_labels;

    uint64_t ctx_start_us = ei_read_timer_us();
 80035f4:	f00f fbca 	bl	8012d8c <_Z16ei_read_timer_usv>
 80035f8:	4602      	mov	r2, r0
 80035fa:	460b      	mov	r3, r1
 80035fc:	e9c7 2308 	strd	r2, r3, [r7, #32]
    ei_unique_ptr_t p_tensor_arena(nullptr, ei_aligned_free);
 8003600:	4b7b      	ldr	r3, [pc, #492]	; (80037f0 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x20c>)
 8003602:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003604:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003608:	f107 0318 	add.w	r3, r7, #24
 800360c:	2100      	movs	r1, #0
 800360e:	4618      	mov	r0, r3
 8003610:	f000 fee6 	bl	80043e0 <_ZNSt10unique_ptrIvPFvPvEEC1IS2_vEES0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOS7_E4typeE>

    EI_IMPULSE_ERROR init_res = inference_tflite_setup(impulse,
 8003614:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8003618:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800361c:	f107 0120 	add.w	r1, r7, #32
 8003620:	f107 0318 	add.w	r3, r7, #24
 8003624:	9302      	str	r3, [sp, #8]
 8003626:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800362a:	9301      	str	r3, [sp, #4]
 800362c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003630:	9300      	str	r3, [sp, #0]
 8003632:	4603      	mov	r3, r0
 8003634:	6978      	ldr	r0, [r7, #20]
 8003636:	f7ff fdc1 	bl	80031bc <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE>
 800363a:	4603      	mov	r3, r0
 800363c:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
        &input, &output,
        &output_labels,
        &output_scores,
        p_tensor_arena);

    if (init_res != EI_IMPULSE_OK) {
 8003640:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 8003644:	2b00      	cmp	r3, #0
 8003646:	d002      	beq.n	800364e <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x6a>
        return init_res;
 8003648:	f997 4053 	ldrsb.w	r4, [r7, #83]	; 0x53
 800364c:	e0c5      	b.n	80037da <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x1f6>
    }

    uint8_t* tensor_arena = static_cast<uint8_t*>(p_tensor_arena.get());
 800364e:	f107 0318 	add.w	r3, r7, #24
 8003652:	4618      	mov	r0, r3
 8003654:	f000 ff8d 	bl	8004572 <_ZNKSt10unique_ptrIvPFvPvEE3getEv>
 8003658:	64f8      	str	r0, [r7, #76]	; 0x4c

    switch (input->type) {
 800365a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800365c:	781b      	ldrb	r3, [r3, #0]
 800365e:	2b09      	cmp	r3, #9
 8003660:	d022      	beq.n	80036a8 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0xc4>
 8003662:	2b09      	cmp	r3, #9
 8003664:	f300 8083 	bgt.w	800376e <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x18a>
 8003668:	2b01      	cmp	r3, #1
 800366a:	d002      	beq.n	8003672 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x8e>
 800366c:	2b03      	cmp	r3, #3
 800366e:	d051      	beq.n	8003714 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x130>
 8003670:	e07d      	b.n	800376e <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x18a>
        case kTfLiteFloat32: {
            for (size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++) {
 8003672:	2300      	movs	r3, #0
 8003674:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	693a      	ldr	r2, [r7, #16]
 800367c:	6892      	ldr	r2, [r2, #8]
 800367e:	fb02 f303 	mul.w	r3, r2, r3
 8003682:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003684:	429a      	cmp	r2, r3
 8003686:	d27b      	bcs.n	8003780 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x19c>
                input->data.f[ix] = fmatrix->buffer[ix];
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	441a      	add	r2, r3
 8003692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003694:	6859      	ldr	r1, [r3, #4]
 8003696:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003698:	009b      	lsls	r3, r3, #2
 800369a:	440b      	add	r3, r1
 800369c:	6812      	ldr	r2, [r2, #0]
 800369e:	601a      	str	r2, [r3, #0]
            for (size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++) {
 80036a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036a2:	3301      	adds	r3, #1
 80036a4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80036a6:	e7e6      	b.n	8003676 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x92>
            }
            break;
        }
        case kTfLiteInt8: {
            for (size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++) {
 80036a8:	2300      	movs	r3, #0
 80036aa:	65bb      	str	r3, [r7, #88]	; 0x58
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	693a      	ldr	r2, [r7, #16]
 80036b2:	6892      	ldr	r2, [r2, #8]
 80036b4:	fb02 f303 	mul.w	r3, r2, r3
 80036b8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80036ba:	429a      	cmp	r2, r3
 80036bc:	d262      	bcs.n	8003784 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x1a0>
                float pixel = (float)fmatrix->buffer[ix];
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80036c4:	009b      	lsls	r3, r3, #2
 80036c6:	4413      	add	r3, r2
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	64bb      	str	r3, [r7, #72]	; 0x48
                input->data.int8[ix] = static_cast<int8_t>(round(pixel / input->params.scale) + input->params.zero_point);
 80036cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036ce:	edd3 7a03 	vldr	s15, [r3, #12]
 80036d2:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80036d6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80036da:	eeb0 0a66 	vmov.f32	s0, s13
 80036de:	f7fe f8b1 	bl	8001844 <_ZSt5roundf>
 80036e2:	eeb0 7a40 	vmov.f32	s14, s0
 80036e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036e8:	691b      	ldr	r3, [r3, #16]
 80036ea:	ee07 3a90 	vmov	s15, r3
 80036ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036f8:	685a      	ldr	r2, [r3, #4]
 80036fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80036fc:	4413      	add	r3, r2
 80036fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003702:	edc7 7a01 	vstr	s15, [r7, #4]
 8003706:	793a      	ldrb	r2, [r7, #4]
 8003708:	b252      	sxtb	r2, r2
 800370a:	701a      	strb	r2, [r3, #0]
            for (size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++) {
 800370c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800370e:	3301      	adds	r3, #1
 8003710:	65bb      	str	r3, [r7, #88]	; 0x58
 8003712:	e7cb      	b.n	80036ac <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0xc8>
            }
            break;
        }
        case kTfLiteUInt8: {
            for (size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++) {
 8003714:	2300      	movs	r3, #0
 8003716:	657b      	str	r3, [r7, #84]	; 0x54
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	693a      	ldr	r2, [r7, #16]
 800371e:	6892      	ldr	r2, [r2, #8]
 8003720:	fb02 f303 	mul.w	r3, r2, r3
 8003724:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003726:	429a      	cmp	r2, r3
 8003728:	d221      	bcs.n	800376e <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x18a>
                float pixel = (float)fmatrix->buffer[ix];
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003730:	009b      	lsls	r3, r3, #2
 8003732:	4413      	add	r3, r2
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	647b      	str	r3, [r7, #68]	; 0x44
                input->data.uint8[ix] = static_cast<uint8_t>((pixel / impulse->tflite_input_scale) + impulse->tflite_input_zeropoint);
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 800373e:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 8003742:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 800374c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003752:	685a      	ldr	r2, [r3, #4]
 8003754:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003756:	4413      	add	r3, r2
 8003758:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800375c:	edc7 7a01 	vstr	s15, [r7, #4]
 8003760:	793a      	ldrb	r2, [r7, #4]
 8003762:	b2d2      	uxtb	r2, r2
 8003764:	701a      	strb	r2, [r3, #0]
            for (size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++) {
 8003766:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003768:	3301      	adds	r3, #1
 800376a:	657b      	str	r3, [r7, #84]	; 0x54
 800376c:	e7d4      	b.n	8003718 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x134>
            }
        }
        default: {
            ei_printf("ERR: Cannot handle input type (%d)\n", input->type);
 800376e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003770:	781b      	ldrb	r3, [r3, #0]
 8003772:	4619      	mov	r1, r3
 8003774:	481f      	ldr	r0, [pc, #124]	; (80037f4 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x210>)
 8003776:	f000 fb59 	bl	8003e2c <_Z9ei_printfPKcz>
            return EI_IMPULSE_INPUT_TENSOR_WAS_NULL;
 800377a:	f06f 040c 	mvn.w	r4, #12
 800377e:	e02c      	b.n	80037da <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x1f6>
            break;
 8003780:	bf00      	nop
 8003782:	e000      	b.n	8003786 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x1a2>
            break;
 8003784:	bf00      	nop
        }
    }

    EI_IMPULSE_ERROR run_res = inference_tflite_run(impulse, ctx_start_us,
 8003786:	e9d7 bc08 	ldrd	fp, ip, [r7, #32]
 800378a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800378c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800378e:	6b3e      	ldr	r6, [r7, #48]	; 0x30
 8003790:	7afb      	ldrb	r3, [r7, #11]
 8003792:	9305      	str	r3, [sp, #20]
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	9304      	str	r3, [sp, #16]
 8003798:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800379a:	9303      	str	r3, [sp, #12]
 800379c:	9602      	str	r6, [sp, #8]
 800379e:	9001      	str	r0, [sp, #4]
 80037a0:	9100      	str	r1, [sp, #0]
 80037a2:	465a      	mov	r2, fp
 80037a4:	4663      	mov	r3, ip
 80037a6:	6978      	ldr	r0, [r7, #20]
 80037a8:	f7ff fe0e 	bl	80033c8 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb>
 80037ac:	4603      	mov	r3, r0
 80037ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
                                                    output, output_labels, output_scores,
                                                    tensor_arena, result, debug);

    result->timing.classification_us = ei_read_timer_us() - ctx_start_us;
 80037b2:	f00f faeb 	bl	8012d8c <_Z16ei_read_timer_usv>
 80037b6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80037ba:	1a84      	subs	r4, r0, r2
 80037bc:	eb61 0503 	sbc.w	r5, r1, r3
 80037c0:	4622      	mov	r2, r4
 80037c2:	462b      	mov	r3, r5
 80037c4:	68f9      	ldr	r1, [r7, #12]
 80037c6:	e9c1 233c 	strd	r2, r3, [r1, #240]	; 0xf0

    if (run_res != EI_IMPULSE_OK) {
 80037ca:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d002      	beq.n	80037d8 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x1f4>
        return run_res;
 80037d2:	f997 4043 	ldrsb.w	r4, [r7, #67]	; 0x43
 80037d6:	e000      	b.n	80037da <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x1f6>
    }

    return EI_IMPULSE_OK;
 80037d8:	2400      	movs	r4, #0
    ei_unique_ptr_t p_tensor_arena(nullptr, ei_aligned_free);
 80037da:	f107 0318 	add.w	r3, r7, #24
 80037de:	4618      	mov	r0, r3
 80037e0:	f000 fe13 	bl	800440a <_ZNSt10unique_ptrIvPFvPvEED1Ev>
}
 80037e4:	4623      	mov	r3, r4
 80037e6:	4618      	mov	r0, r3
 80037e8:	3760      	adds	r7, #96	; 0x60
 80037ea:	46bd      	mov	sp, r7
 80037ec:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 80037f0:	08001645 	.word	0x08001645
 80037f4:	0801c070 	.word	0x0801c070

080037f8 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb>:
 */
EI_IMPULSE_ERROR run_nn_inference_image_quantized(
    const ei_impulse_t *impulse,
    signal_t *signal,
    ei_impulse_result_t *result,
    bool debug = false) {
 80037f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80037fc:	b0a1      	sub	sp, #132	; 0x84
 80037fe:	af06      	add	r7, sp, #24
 8003800:	6178      	str	r0, [r7, #20]
 8003802:	6139      	str	r1, [r7, #16]
 8003804:	60fa      	str	r2, [r7, #12]
 8003806:	72fb      	strb	r3, [r7, #11]

    memset(result, 0, sizeof(ei_impulse_result_t));
 8003808:	f44f 7280 	mov.w	r2, #256	; 0x100
 800380c:	2100      	movs	r1, #0
 800380e:	68f8      	ldr	r0, [r7, #12]
 8003810:	f016 fe66 	bl	801a4e0 <memset>
    TfLiteTensor* input;
    TfLiteTensor* output;
    TfLiteTensor* output_scores;
    TfLiteTensor* output_labels;

    ei_unique_ptr_t p_tensor_arena(nullptr, ei_aligned_free);
 8003814:	4b7b      	ldr	r3, [pc, #492]	; (8003a04 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x20c>)
 8003816:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003818:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800381c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003820:	2100      	movs	r1, #0
 8003822:	4618      	mov	r0, r3
 8003824:	f000 fddc 	bl	80043e0 <_ZNSt10unique_ptrIvPFvPvEEC1IS2_vEES0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOS7_E4typeE>

    EI_IMPULSE_ERROR init_res = inference_tflite_setup(impulse,
 8003828:	f107 0038 	add.w	r0, r7, #56	; 0x38
 800382c:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003830:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8003834:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003838:	9302      	str	r3, [sp, #8]
 800383a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800383e:	9301      	str	r3, [sp, #4]
 8003840:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003844:	9300      	str	r3, [sp, #0]
 8003846:	4603      	mov	r3, r0
 8003848:	6978      	ldr	r0, [r7, #20]
 800384a:	f7ff fcb7 	bl	80031bc <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE>
 800384e:	4603      	mov	r3, r0
 8003850:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
        &ctx_start_us, &input, &output,
        &output_labels,
        &output_scores,
        p_tensor_arena);
    if (init_res != EI_IMPULSE_OK) {
 8003854:	f997 3063 	ldrsb.w	r3, [r7, #99]	; 0x63
 8003858:	2b00      	cmp	r3, #0
 800385a:	d002      	beq.n	8003862 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x6a>
        return init_res;
 800385c:	f997 4063 	ldrsb.w	r4, [r7, #99]	; 0x63
 8003860:	e0c4      	b.n	80039ec <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x1f4>
    }

    if (input->type != TfLiteType::kTfLiteInt8) {
 8003862:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003864:	781b      	ldrb	r3, [r3, #0]
 8003866:	2b09      	cmp	r3, #9
 8003868:	d002      	beq.n	8003870 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x78>
        return EI_IMPULSE_ONLY_SUPPORTED_FOR_IMAGES;
 800386a:	f06f 0408 	mvn.w	r4, #8
 800386e:	e0bd      	b.n	80039ec <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x1f4>
    }

    uint64_t dsp_start_us = ei_read_timer_us();
 8003870:	f00f fa8c 	bl	8012d8c <_Z16ei_read_timer_usv>
 8003874:	e9c7 0116 	strd	r0, r1, [r7, #88]	; 0x58

    // features matrix maps around the input tensor to not allocate any memory
    ei::matrix_i8_t features_matrix(1, impulse->nn_input_frame_size, input->data.int8);
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	691a      	ldr	r2, [r3, #16]
 800387c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	f107 0018 	add.w	r0, r7, #24
 8003884:	2101      	movs	r1, #1
 8003886:	f7fd ff8a 	bl	800179e <_ZN2ei12ei_matrix_i8C1EmmPa>

    // run DSP process and quantize automatically
    int ret = extract_image_features_quantized(impulse, signal, &features_matrix, ei_dsp_blocks[0].config, impulse->frequency);
 800388a:	4b5f      	ldr	r3, [pc, #380]	; (8003a08 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x210>)
 800388c:	6899      	ldr	r1, [r3, #8]
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8003894:	f107 0218 	add.w	r2, r7, #24
 8003898:	eeb0 0a67 	vmov.f32	s0, s15
 800389c:	460b      	mov	r3, r1
 800389e:	6939      	ldr	r1, [r7, #16]
 80038a0:	6978      	ldr	r0, [r7, #20]
 80038a2:	f7ff f8af 	bl	8002a04 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf>
 80038a6:	6578      	str	r0, [r7, #84]	; 0x54
    if (ret != EIDSP_OK) {
 80038a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d006      	beq.n	80038bc <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0xc4>
        ei_printf("ERR: Failed to run DSP process (%d)\n", ret);
 80038ae:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80038b0:	4856      	ldr	r0, [pc, #344]	; (8003a0c <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x214>)
 80038b2:	f000 fabb 	bl	8003e2c <_Z9ei_printfPKcz>
        return EI_IMPULSE_DSP_ERROR;
 80038b6:	f06f 0404 	mvn.w	r4, #4
 80038ba:	e092      	b.n	80039e2 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x1ea>
    }

    if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
 80038bc:	f00f fa5e 	bl	8012d7c <_Z29ei_run_impulse_check_canceledv>
 80038c0:	4603      	mov	r3, r0
 80038c2:	f113 0f02 	cmn.w	r3, #2
 80038c6:	bf0c      	ite	eq
 80038c8:	2301      	moveq	r3, #1
 80038ca:	2300      	movne	r3, #0
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d002      	beq.n	80038d8 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0xe0>
        return EI_IMPULSE_CANCELED;
 80038d2:	f06f 0401 	mvn.w	r4, #1
 80038d6:	e084      	b.n	80039e2 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x1ea>
    }

    result->timing.dsp_us = ei_read_timer_us() - dsp_start_us;
 80038d8:	f00f fa58 	bl	8012d8c <_Z16ei_read_timer_usv>
 80038dc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80038e0:	ebb0 0802 	subs.w	r8, r0, r2
 80038e4:	eb61 0903 	sbc.w	r9, r1, r3
 80038e8:	4642      	mov	r2, r8
 80038ea:	464b      	mov	r3, r9
 80038ec:	68f9      	ldr	r1, [r7, #12]
 80038ee:	e9c1 233a 	strd	r2, r3, [r1, #232]	; 0xe8
    result->timing.dsp = (int)(result->timing.dsp_us / 1000);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	e9d3 013a 	ldrd	r0, r1, [r3, #232]	; 0xe8
 80038f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80038fc:	f04f 0300 	mov.w	r3, #0
 8003900:	f7fd f9cc 	bl	8000c9c <__aeabi_ldivmod>
 8003904:	4602      	mov	r2, r0
 8003906:	460b      	mov	r3, r1
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

    if (debug) {
 800390e:	7afb      	ldrb	r3, [r7, #11]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d02d      	beq.n	8003970 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x178>
        ei_printf("Features (%d ms.): ", result->timing.dsp);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800391a:	4619      	mov	r1, r3
 800391c:	483c      	ldr	r0, [pc, #240]	; (8003a10 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x218>)
 800391e:	f000 fa85 	bl	8003e2c <_Z9ei_printfPKcz>
        for (size_t ix = 0; ix < features_matrix.cols; ix++) {
 8003922:	2300      	movs	r3, #0
 8003924:	667b      	str	r3, [r7, #100]	; 0x64
 8003926:	6a3b      	ldr	r3, [r7, #32]
 8003928:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800392a:	429a      	cmp	r2, r3
 800392c:	d21d      	bcs.n	800396a <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x172>
            ei_printf_float((features_matrix.buffer[ix] - impulse->tflite_input_zeropoint) * impulse->tflite_input_scale);
 800392e:	69ba      	ldr	r2, [r7, #24]
 8003930:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003932:	4413      	add	r3, r2
 8003934:	f993 3000 	ldrsb.w	r3, [r3]
 8003938:	ee07 3a90 	vmov	s15, r3
 800393c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8003946:	ee37 7a67 	vsub.f32	s14, s14, s15
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8003950:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003954:	eeb0 0a67 	vmov.f32	s0, s15
 8003958:	f00f fa2a 	bl	8012db0 <_Z15ei_printf_floatf>
            ei_printf(" ");
 800395c:	482d      	ldr	r0, [pc, #180]	; (8003a14 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x21c>)
 800395e:	f000 fa65 	bl	8003e2c <_Z9ei_printfPKcz>
        for (size_t ix = 0; ix < features_matrix.cols; ix++) {
 8003962:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003964:	3301      	adds	r3, #1
 8003966:	667b      	str	r3, [r7, #100]	; 0x64
 8003968:	e7dd      	b.n	8003926 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x12e>
        }
        ei_printf("\n");
 800396a:	482b      	ldr	r0, [pc, #172]	; (8003a18 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x220>)
 800396c:	f000 fa5e 	bl	8003e2c <_Z9ei_printfPKcz>
    }

    ctx_start_us = ei_read_timer_us();
 8003970:	f00f fa0c 	bl	8012d8c <_Z16ei_read_timer_usv>
 8003974:	4602      	mov	r2, r0
 8003976:	460b      	mov	r3, r1
 8003978:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

    EI_IMPULSE_ERROR run_res = inference_tflite_run(impulse,
 800397c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003980:	6bbe      	ldr	r6, [r7, #56]	; 0x38
 8003982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003984:	607b      	str	r3, [r7, #4]
 8003986:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003988:	603a      	str	r2, [r7, #0]
        ctx_start_us,
        output,
        output_labels,
        output_scores,
        static_cast<uint8_t*>(p_tensor_arena.get()),
 800398a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800398e:	4618      	mov	r0, r3
 8003990:	f000 fdef 	bl	8004572 <_ZNKSt10unique_ptrIvPFvPvEE3getEv>
 8003994:	4602      	mov	r2, r0
    EI_IMPULSE_ERROR run_res = inference_tflite_run(impulse,
 8003996:	7afb      	ldrb	r3, [r7, #11]
 8003998:	9305      	str	r3, [sp, #20]
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	9304      	str	r3, [sp, #16]
 800399e:	9203      	str	r2, [sp, #12]
 80039a0:	683a      	ldr	r2, [r7, #0]
 80039a2:	9202      	str	r2, [sp, #8]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	9301      	str	r3, [sp, #4]
 80039a8:	9600      	str	r6, [sp, #0]
 80039aa:	4642      	mov	r2, r8
 80039ac:	464b      	mov	r3, r9
 80039ae:	6978      	ldr	r0, [r7, #20]
 80039b0:	f7ff fd0a 	bl	80033c8 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb>
 80039b4:	4603      	mov	r3, r0
 80039b6:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
        result, debug);

    if (run_res != EI_IMPULSE_OK) {
 80039ba:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d002      	beq.n	80039c8 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x1d0>
        return run_res;
 80039c2:	f997 4053 	ldrsb.w	r4, [r7, #83]	; 0x53
 80039c6:	e00c      	b.n	80039e2 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x1ea>
    }

    result->timing.classification_us = ei_read_timer_us() - ctx_start_us;
 80039c8:	f00f f9e0 	bl	8012d8c <_Z16ei_read_timer_usv>
 80039cc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80039d0:	1a84      	subs	r4, r0, r2
 80039d2:	eb61 0503 	sbc.w	r5, r1, r3
 80039d6:	4622      	mov	r2, r4
 80039d8:	462b      	mov	r3, r5
 80039da:	68f9      	ldr	r1, [r7, #12]
 80039dc:	e9c1 233c 	strd	r2, r3, [r1, #240]	; 0xf0

    return EI_IMPULSE_OK;
 80039e0:	2400      	movs	r4, #0
    ei::matrix_i8_t features_matrix(1, impulse->nn_input_frame_size, input->data.int8);
 80039e2:	f107 0318 	add.w	r3, r7, #24
 80039e6:	4618      	mov	r0, r3
 80039e8:	f7fd ff03 	bl	80017f2 <_ZN2ei12ei_matrix_i8D1Ev>
    ei_unique_ptr_t p_tensor_arena(nullptr, ei_aligned_free);
 80039ec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80039f0:	4618      	mov	r0, r3
 80039f2:	f000 fd0a 	bl	800440a <_ZNSt10unique_ptrIvPFvPvEED1Ev>
}
 80039f6:	4623      	mov	r3, r4
 80039f8:	4618      	mov	r0, r3
 80039fa:	376c      	adds	r7, #108	; 0x6c
 80039fc:	46bd      	mov	sp, r7
 80039fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003a02:	bf00      	nop
 8003a04:	08001645 	.word	0x08001645
 8003a08:	20000030 	.word	0x20000030
 8003a0c:	0801c094 	.word	0x0801c094
 8003a10:	0801c0bc 	.word	0x0801c0bc
 8003a14:	0801c0d0 	.word	0x0801c0d0
 8003a18:	0801bbf0 	.word	0x0801bbf0

08003a1c <run_inference>:
extern "C" EI_IMPULSE_ERROR run_inference(
    const ei_impulse_t *impulse,
    ei::matrix_t *fmatrix,
    ei_impulse_result_t *result,
    bool debug = false)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b086      	sub	sp, #24
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	60f8      	str	r0, [r7, #12]
 8003a24:	60b9      	str	r1, [r7, #8]
 8003a26:	607a      	str	r2, [r7, #4]
 8003a28:	70fb      	strb	r3, [r7, #3]
#if (EI_CLASSIFIER_INFERENCING_ENGINE != EI_CLASSIFIER_NONE && EI_CLASSIFIER_INFERENCING_ENGINE != EI_CLASSIFIER_DRPAI)
    EI_IMPULSE_ERROR nn_res = run_nn_inference(impulse, fmatrix, result, debug);
 8003a2a:	78fb      	ldrb	r3, [r7, #3]
 8003a2c:	687a      	ldr	r2, [r7, #4]
 8003a2e:	68b9      	ldr	r1, [r7, #8]
 8003a30:	68f8      	ldr	r0, [r7, #12]
 8003a32:	f7ff fdd7 	bl	80035e4 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb>
 8003a36:	4603      	mov	r3, r0
 8003a38:	75fb      	strb	r3, [r7, #23]
    if (nn_res != EI_IMPULSE_OK) {
 8003a3a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d002      	beq.n	8003a48 <run_inference+0x2c>
        return nn_res;
 8003a42:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003a46:	e00e      	b.n	8003a66 <run_inference+0x4a>
            return anomaly_res;
        }
    }
#endif

    if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
 8003a48:	f00f f998 	bl	8012d7c <_Z29ei_run_impulse_check_canceledv>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	f113 0f02 	cmn.w	r3, #2
 8003a52:	bf0c      	ite	eq
 8003a54:	2301      	moveq	r3, #1
 8003a56:	2300      	movne	r3, #0
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d002      	beq.n	8003a64 <run_inference+0x48>
        return EI_IMPULSE_CANCELED;
 8003a5e:	f06f 0301 	mvn.w	r3, #1
 8003a62:	e000      	b.n	8003a66 <run_inference+0x4a>
    }

    return EI_IMPULSE_OK;
 8003a64:	2300      	movs	r3, #0
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3718      	adds	r7, #24
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}

08003a6e <_ZN14SignalWithAxesD1Ev>:
class SignalWithAxes {
 8003a6e:	b580      	push	{r7, lr}
 8003a70:	b082      	sub	sp, #8
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	6078      	str	r0, [r7, #4]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	3310      	adds	r3, #16
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f7fe fcc4 	bl	8002408 <_ZN2ei11ei_signal_tD1Ev>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	4618      	mov	r0, r3
 8003a84:	3708      	adds	r7, #8
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}
	...

08003a8c <process_impulse>:
 */
extern "C" EI_IMPULSE_ERROR process_impulse(const ei_impulse_t *impulse,
                                            signal_t *signal,
                                            ei_impulse_result_t *result,
                                            bool debug = false)
{
 8003a8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003a90:	b0a5      	sub	sp, #148	; 0x94
 8003a92:	af02      	add	r7, sp, #8
 8003a94:	60f8      	str	r0, [r7, #12]
 8003a96:	60b9      	str	r1, [r7, #8]
 8003a98:	607a      	str	r2, [r7, #4]
 8003a9a:	70fb      	strb	r3, [r7, #3]
 8003a9c:	2600      	movs	r6, #0

#if (EI_CLASSIFIER_TFLITE_INPUT_QUANTIZED == 1 && (EI_CLASSIFIER_INFERENCING_ENGINE == EI_CLASSIFIER_TFLITE || EI_CLASSIFIER_INFERENCING_ENGINE == EI_CLASSIFIER_TENSAIFLOW)) || EI_CLASSIFIER_INFERENCING_ENGINE == EI_CLASSIFIER_DRPAI
    // Shortcut for quantized image models
    if (can_run_classifier_image_quantized(impulse) == EI_IMPULSE_OK) {
 8003a9e:	68f8      	ldr	r0, [r7, #12]
 8003aa0:	f000 f928 	bl	8003cf4 <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	bf0c      	ite	eq
 8003aaa:	2301      	moveq	r3, #1
 8003aac:	2300      	movne	r3, #0
 8003aae:	b2db      	uxtb	r3, r3
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d008      	beq.n	8003ac6 <process_impulse+0x3a>
        return run_classifier_image_quantized(impulse, signal, result, debug);
 8003ab4:	78fb      	ldrb	r3, [r7, #3]
 8003ab6:	687a      	ldr	r2, [r7, #4]
 8003ab8:	68b9      	ldr	r1, [r7, #8]
 8003aba:	68f8      	ldr	r0, [r7, #12]
 8003abc:	f000 f954 	bl	8003d68 <run_classifier_image_quantized>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	461e      	mov	r6, r3
 8003ac4:	e0ef      	b.n	8003ca6 <process_impulse+0x21a>
    }
#endif

    memset(result, 0, sizeof(ei_impulse_result_t));
 8003ac6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003aca:	2100      	movs	r1, #0
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	f016 fd07 	bl	801a4e0 <memset>

    ei::matrix_t features_matrix(1, impulse->nn_input_frame_size);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	691a      	ldr	r2, [r3, #16]
 8003ad6:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 8003ada:	2300      	movs	r3, #0
 8003adc:	2101      	movs	r1, #1
 8003ade:	f7fd fe1d 	bl	800171c <_ZN2ei9ei_matrixC1EmmPf>

    uint64_t dsp_start_us = ei_read_timer_us();
 8003ae2:	f00f f953 	bl	8012d8c <_Z16ei_read_timer_usv>
 8003ae6:	e9c7 011c 	strd	r0, r1, [r7, #112]	; 0x70

    size_t out_features_index = 0;
 8003aea:	2300      	movs	r3, #0
 8003aec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

    for (size_t ix = 0; ix < impulse->dsp_blocks_size; ix++) {
 8003af0:	2300      	movs	r3, #0
 8003af2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003afa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003afe:	429a      	cmp	r2, r3
 8003b00:	d27c      	bcs.n	8003bfc <process_impulse+0x170>
        ei_model_dsp_t block = impulse->dsp_blocks[ix];
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8003b06:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003b0a:	4613      	mov	r3, r2
 8003b0c:	009b      	lsls	r3, r3, #2
 8003b0e:	4413      	add	r3, r2
 8003b10:	009b      	lsls	r3, r3, #2
 8003b12:	440b      	add	r3, r1
 8003b14:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8003b18:	461d      	mov	r5, r3
 8003b1a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003b1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003b1e:	682b      	ldr	r3, [r5, #0]
 8003b20:	6023      	str	r3, [r4, #0]

        if (out_features_index + block.n_output_features > impulse->nn_input_frame_size) {
 8003b22:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b24:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003b28:	441a      	add	r2, r3
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	691b      	ldr	r3, [r3, #16]
 8003b2e:	429a      	cmp	r2, r3
 8003b30:	d905      	bls.n	8003b3e <process_impulse+0xb2>
            ei_printf("ERR: Would write outside feature buffer\n");
 8003b32:	4860      	ldr	r0, [pc, #384]	; (8003cb4 <process_impulse+0x228>)
 8003b34:	f000 f97a 	bl	8003e2c <_Z9ei_printfPKcz>
            return EI_IMPULSE_DSP_ERROR;
 8003b38:	f06f 0604 	mvn.w	r6, #4
 8003b3c:	e0ad      	b.n	8003c9a <process_impulse+0x20e>
        }

        ei::matrix_t fm(1, block.n_output_features, features_matrix.buffer + out_features_index);
 8003b3e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003b40:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003b42:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003b46:	009b      	lsls	r3, r3, #2
 8003b48:	4413      	add	r3, r2
 8003b4a:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8003b4e:	460a      	mov	r2, r1
 8003b50:	2101      	movs	r1, #1
 8003b52:	f7fd fde3 	bl	800171c <_ZN2ei9ei_matrixC1EmmPf>
            ei_printf("ERR: EIDSP_SIGNAL_C_FN_POINTER can only be used when all axes are selected for DSP blocks\n");
            return EI_IMPULSE_DSP_ERROR;
        }
        int ret = block.extract_fn(signal, &fm, block.config, impulse->frequency);
#else
        SignalWithAxes swa(signal, block.axes, block.axes_size, impulse);
 8003b56:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003b58:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003b5a:	f107 0014 	add.w	r0, r7, #20
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	9300      	str	r3, [sp, #0]
 8003b62:	460b      	mov	r3, r1
 8003b64:	68b9      	ldr	r1, [r7, #8]
 8003b66:	f7ff f9a9 	bl	8002ebc <_ZN14SignalWithAxesC1EPN2ei11ei_signal_tEPhjPK10ei_impulse>
        int ret = block.extract_fn(swa.get_signal(), &fm, block.config, impulse->frequency);
 8003b6a:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 8003b6c:	f107 0314 	add.w	r3, r7, #20
 8003b70:	4618      	mov	r0, r3
 8003b72:	f7ff f9d3 	bl	8002f1c <_ZN14SignalWithAxes10get_signalEv>
 8003b76:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8003b7e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003b82:	eeb0 0a67 	vmov.f32	s0, s15
 8003b86:	4619      	mov	r1, r3
 8003b88:	47a0      	blx	r4
 8003b8a:	66f8      	str	r0, [r7, #108]	; 0x6c
#endif

        if (ret != EIDSP_OK) {
 8003b8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d007      	beq.n	8003ba2 <process_impulse+0x116>
            ei_printf("ERR: Failed to run DSP process (%d)\n", ret);
 8003b92:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8003b94:	4848      	ldr	r0, [pc, #288]	; (8003cb8 <process_impulse+0x22c>)
 8003b96:	f000 f949 	bl	8003e2c <_Z9ei_printfPKcz>
            return EI_IMPULSE_DSP_ERROR;
 8003b9a:	f06f 0604 	mvn.w	r6, #4
 8003b9e:	2400      	movs	r4, #0
 8003ba0:	e015      	b.n	8003bce <process_impulse+0x142>
        }

        if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
 8003ba2:	f00f f8eb 	bl	8012d7c <_Z29ei_run_impulse_check_canceledv>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	f113 0f02 	cmn.w	r3, #2
 8003bac:	bf0c      	ite	eq
 8003bae:	2301      	moveq	r3, #1
 8003bb0:	2300      	movne	r3, #0
 8003bb2:	b2db      	uxtb	r3, r3
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d003      	beq.n	8003bc0 <process_impulse+0x134>
            return EI_IMPULSE_CANCELED;
 8003bb8:	f06f 0601 	mvn.w	r6, #1
 8003bbc:	2400      	movs	r4, #0
 8003bbe:	e006      	b.n	8003bce <process_impulse+0x142>
        }

        out_features_index += block.n_output_features;
 8003bc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bc2:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8003bc6:	4413      	add	r3, r2
 8003bc8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003bcc:	2401      	movs	r4, #1
 8003bce:	f107 0314 	add.w	r3, r7, #20
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f7ff ff4b 	bl	8003a6e <_ZN14SignalWithAxesD1Ev>
 8003bd8:	2c01      	cmp	r4, #1
 8003bda:	d001      	beq.n	8003be0 <process_impulse+0x154>
 8003bdc:	2400      	movs	r4, #0
 8003bde:	e000      	b.n	8003be2 <process_impulse+0x156>
 8003be0:	2401      	movs	r4, #1
 8003be2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003be6:	4618      	mov	r0, r3
 8003be8:	f7fd fdc3 	bl	8001772 <_ZN2ei9ei_matrixD1Ev>
 8003bec:	2c01      	cmp	r4, #1
 8003bee:	d154      	bne.n	8003c9a <process_impulse+0x20e>
    for (size_t ix = 0; ix < impulse->dsp_blocks_size; ix++) {
 8003bf0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003bf4:	3301      	adds	r3, #1
 8003bf6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003bfa:	e77c      	b.n	8003af6 <process_impulse+0x6a>
    }

    result->timing.dsp_us = ei_read_timer_us() - dsp_start_us;
 8003bfc:	f00f f8c6 	bl	8012d8c <_Z16ei_read_timer_usv>
 8003c00:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003c04:	ebb0 0802 	subs.w	r8, r0, r2
 8003c08:	eb61 0903 	sbc.w	r9, r1, r3
 8003c0c:	4642      	mov	r2, r8
 8003c0e:	464b      	mov	r3, r9
 8003c10:	6879      	ldr	r1, [r7, #4]
 8003c12:	e9c1 233a 	strd	r2, r3, [r1, #232]	; 0xe8
    result->timing.dsp = (int)(result->timing.dsp_us / 1000);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	e9d3 013a 	ldrd	r0, r1, [r3, #232]	; 0xe8
 8003c1c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003c20:	f04f 0300 	mov.w	r3, #0
 8003c24:	f7fd f83a 	bl	8000c9c <__aeabi_ldivmod>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	460b      	mov	r3, r1
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

    if (debug) {
 8003c32:	78fb      	ldrb	r3, [r7, #3]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d020      	beq.n	8003c7a <process_impulse+0x1ee>
        ei_printf("Features (%d ms.): ", result->timing.dsp);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003c3e:	4619      	mov	r1, r3
 8003c40:	481e      	ldr	r0, [pc, #120]	; (8003cbc <process_impulse+0x230>)
 8003c42:	f000 f8f3 	bl	8003e2c <_Z9ei_printfPKcz>
        for (size_t ix = 0; ix < features_matrix.cols; ix++) {
 8003c46:	2300      	movs	r3, #0
 8003c48:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003c4a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c4c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003c4e:	429a      	cmp	r2, r3
 8003c50:	d210      	bcs.n	8003c74 <process_impulse+0x1e8>
            ei_printf_float(features_matrix.buffer[ix]);
 8003c52:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003c54:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	4413      	add	r3, r2
 8003c5a:	edd3 7a00 	vldr	s15, [r3]
 8003c5e:	eeb0 0a67 	vmov.f32	s0, s15
 8003c62:	f00f f8a5 	bl	8012db0 <_Z15ei_printf_floatf>
            ei_printf(" ");
 8003c66:	4816      	ldr	r0, [pc, #88]	; (8003cc0 <process_impulse+0x234>)
 8003c68:	f000 f8e0 	bl	8003e2c <_Z9ei_printfPKcz>
        for (size_t ix = 0; ix < features_matrix.cols; ix++) {
 8003c6c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003c6e:	3301      	adds	r3, #1
 8003c70:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003c72:	e7ea      	b.n	8003c4a <process_impulse+0x1be>
        }
        ei_printf("\n");
 8003c74:	4813      	ldr	r0, [pc, #76]	; (8003cc4 <process_impulse+0x238>)
 8003c76:	f000 f8d9 	bl	8003e2c <_Z9ei_printfPKcz>
    }

    if (debug) {
 8003c7a:	78fb      	ldrb	r3, [r7, #3]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d002      	beq.n	8003c86 <process_impulse+0x1fa>
        ei_printf("Running impulse...\n");
 8003c80:	4811      	ldr	r0, [pc, #68]	; (8003cc8 <process_impulse+0x23c>)
 8003c82:	f000 f8d3 	bl	8003e2c <_Z9ei_printfPKcz>
    }

    return run_inference(impulse, &features_matrix, result, debug);
 8003c86:	78fb      	ldrb	r3, [r7, #3]
 8003c88:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8003c8c:	687a      	ldr	r2, [r7, #4]
 8003c8e:	68f8      	ldr	r0, [r7, #12]
 8003c90:	f7ff fec4 	bl	8003a1c <run_inference>
 8003c94:	4603      	mov	r3, r0
 8003c96:	461e      	mov	r6, r3
 8003c98:	e000      	b.n	8003c9c <process_impulse+0x210>
            return EI_IMPULSE_DSP_ERROR;
 8003c9a:	bf00      	nop
    ei::matrix_t features_matrix(1, impulse->nn_input_frame_size);
 8003c9c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f7fd fd66 	bl	8001772 <_ZN2ei9ei_matrixD1Ev>

}
 8003ca6:	4633      	mov	r3, r6
 8003ca8:	4618      	mov	r0, r3
 8003caa:	378c      	adds	r7, #140	; 0x8c
 8003cac:	46bd      	mov	sp, r7
 8003cae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003cb2:	bf00      	nop
 8003cb4:	0801c0d4 	.word	0x0801c0d4
 8003cb8:	0801c094 	.word	0x0801c094
 8003cbc:	0801c0bc 	.word	0x0801c0bc
 8003cc0:	0801c0d0 	.word	0x0801c0d0
 8003cc4:	0801bbf0 	.word	0x0801bbf0
 8003cc8:	0801c100 	.word	0x0801c100

08003ccc <ei_construct_impulse>:
#if EI_CLASSIFIER_STUDIO_VERSION < 3
/**
 * @brief      Construct impulse from macros - for run_classifer compatibility
 */
extern "C" const ei_impulse_t ei_construct_impulse()
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b082      	sub	sp, #8
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]

const ei_impulse_t impulse =
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	4a06      	ldr	r2, [pc, #24]	; (8003cf0 <ei_construct_impulse+0x24>)
 8003cd8:	4618      	mov	r0, r3
 8003cda:	4611      	mov	r1, r2
 8003cdc:	23a4      	movs	r3, #164	; 0xa4
 8003cde:	461a      	mov	r2, r3
 8003ce0:	f016 fbd6 	bl	801a490 <memcpy>
    .model_reset = NULL,
#endif
    .categories = ei_classifier_inferencing_categories
    };

    return impulse;
 8003ce4:	bf00      	nop
}
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	3708      	adds	r7, #8
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}
 8003cee:	bf00      	nop
 8003cf0:	0801c178 	.word	0x0801c178

08003cf4 <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse>:
#endif

/**
 * Check if the current impulse could be used by 'run_classifier_image_quantized'
 */
__attribute__((unused)) static EI_IMPULSE_ERROR can_run_classifier_image_quantized(const ei_impulse_t *impulse) {
 8003cf4:	b480      	push	{r7}
 8003cf6:	b083      	sub	sp, #12
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]

    if (impulse->inferencing_engine != EI_CLASSIFIER_TFLITE
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d00:	2b02      	cmp	r3, #2
 8003d02:	d00a      	beq.n	8003d1a <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse+0x26>
        && impulse->inferencing_engine != EI_CLASSIFIER_TENSAIFLOW
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d08:	2b05      	cmp	r3, #5
 8003d0a:	d006      	beq.n	8003d1a <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse+0x26>
        && impulse->inferencing_engine != EI_CLASSIFIER_DRPAI) // check later
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d10:	2b07      	cmp	r3, #7
 8003d12:	d002      	beq.n	8003d1a <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse+0x26>
    {
        return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
 8003d14:	f06f 0309 	mvn.w	r3, #9
 8003d18:	e01d      	b.n	8003d56 <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse+0x62>
    }

    if (impulse->has_anomaly == 1){
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d102      	bne.n	8003d2a <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse+0x36>
        return EI_IMPULSE_ONLY_SUPPORTED_FOR_IMAGES;
 8003d24:	f06f 0308 	mvn.w	r3, #8
 8003d28:	e015      	b.n	8003d56 <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse+0x62>
    }

        // Check if we have a quantized NN Input layer (input is always quantized for DRP-AI)
    if (impulse->tflite_input_quantized != 1) {
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d002      	beq.n	8003d3a <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse+0x46>
        return EI_IMPULSE_ONLY_SUPPORTED_FOR_IMAGES;
 8003d34:	f06f 0308 	mvn.w	r3, #8
 8003d38:	e00d      	b.n	8003d56 <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse+0x62>
    }

    // And if we have one DSP block which operates on images...
    if (impulse->dsp_blocks_size != 1 || impulse->dsp_blocks[0].extract_fn != extract_image_features) {
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	d105      	bne.n	8003d4e <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse+0x5a>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	4a06      	ldr	r2, [pc, #24]	; (8003d64 <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse+0x70>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d002      	beq.n	8003d54 <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse+0x60>
        return EI_IMPULSE_ONLY_SUPPORTED_FOR_IMAGES;
 8003d4e:	f06f 0308 	mvn.w	r3, #8
 8003d52:	e000      	b.n	8003d56 <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse+0x62>
    }

    return EI_IMPULSE_OK;
 8003d54:	2300      	movs	r3, #0
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	370c      	adds	r7, #12
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d60:	4770      	bx	lr
 8003d62:	bf00      	nop
 8003d64:	08002831 	.word	0x08002831

08003d68 <run_classifier_image_quantized>:
extern "C" EI_IMPULSE_ERROR run_classifier_image_quantized(
    const ei_impulse_t *impulse,
    signal_t *signal,
    ei_impulse_result_t *result,
    bool debug = false)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b086      	sub	sp, #24
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	60f8      	str	r0, [r7, #12]
 8003d70:	60b9      	str	r1, [r7, #8]
 8003d72:	607a      	str	r2, [r7, #4]
 8003d74:	70fb      	strb	r3, [r7, #3]
    EI_IMPULSE_ERROR verify_res = can_run_classifier_image_quantized(impulse);
 8003d76:	68f8      	ldr	r0, [r7, #12]
 8003d78:	f7ff ffbc 	bl	8003cf4 <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	75fb      	strb	r3, [r7, #23]
    if (verify_res != EI_IMPULSE_OK) {
 8003d80:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d002      	beq.n	8003d8e <run_classifier_image_quantized+0x26>
        return verify_res;
 8003d88:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003d8c:	e00d      	b.n	8003daa <run_classifier_image_quantized+0x42>
    }

    memset(result, 0, sizeof(ei_impulse_result_t));
 8003d8e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d92:	2100      	movs	r1, #0
 8003d94:	6878      	ldr	r0, [r7, #4]
 8003d96:	f016 fba3 	bl	801a4e0 <memset>

    return run_nn_inference_image_quantized(impulse, signal, result, debug);
 8003d9a:	78fb      	ldrb	r3, [r7, #3]
 8003d9c:	687a      	ldr	r2, [r7, #4]
 8003d9e:	68b9      	ldr	r1, [r7, #8]
 8003da0:	68f8      	ldr	r0, [r7, #12]
 8003da2:	f7ff fd29 	bl	80037f8 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb>
 8003da6:	4603      	mov	r3, r0
 8003da8:	bf00      	nop

}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3718      	adds	r7, #24
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}

08003db2 <run_classifier>:
 */
extern "C" EI_IMPULSE_ERROR run_classifier(
    signal_t *signal,
    ei_impulse_result_t *result,
    bool debug = false)
{
 8003db2:	b580      	push	{r7, lr}
 8003db4:	b0ae      	sub	sp, #184	; 0xb8
 8003db6:	af00      	add	r7, sp, #0
 8003db8:	60f8      	str	r0, [r7, #12]
 8003dba:	60b9      	str	r1, [r7, #8]
 8003dbc:	4613      	mov	r3, r2
 8003dbe:	71fb      	strb	r3, [r7, #7]
#if EI_CLASSIFIER_STUDIO_VERSION < 3
        const ei_impulse_t impulse = ei_construct_impulse();
 8003dc0:	f107 0314 	add.w	r3, r7, #20
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f7ff ff81 	bl	8003ccc <ei_construct_impulse>
#else
       const ei_impulse_t impulse = ei_default_impulse;
#endif
    return process_impulse(&impulse, signal, result, debug);
 8003dca:	79fb      	ldrb	r3, [r7, #7]
 8003dcc:	f107 0014 	add.w	r0, r7, #20
 8003dd0:	68ba      	ldr	r2, [r7, #8]
 8003dd2:	68f9      	ldr	r1, [r7, #12]
 8003dd4:	f7ff fe5a 	bl	8003a8c <process_impulse>
 8003dd8:	4603      	mov	r3, r0
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	37b8      	adds	r7, #184	; 0xb8
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}

08003de2 <_Z6vprintPKcSt9__va_list>:
SPI_HandleTypeDef hspi1;

/* USER CODE BEGIN PV */
/* Private variables ---------------------------------------------------------*/
void vprint(const char *fmt, va_list argp)
{
 8003de2:	b580      	push	{r7, lr}
 8003de4:	b0b4      	sub	sp, #208	; 0xd0
 8003de6:	af00      	add	r7, sp, #0
 8003de8:	6078      	str	r0, [r7, #4]
 8003dea:	6039      	str	r1, [r7, #0]
    char string[200];
    if(0 < vsprintf(string, fmt, argp)) // build string
 8003dec:	f107 0308 	add.w	r3, r7, #8
 8003df0:	683a      	ldr	r2, [r7, #0]
 8003df2:	6879      	ldr	r1, [r7, #4]
 8003df4:	4618      	mov	r0, r3
 8003df6:	f016 ffc9 	bl	801ad8c <vsiprintf>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	bfcc      	ite	gt
 8003e00:	2301      	movgt	r3, #1
 8003e02:	2300      	movle	r3, #0
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d00c      	beq.n	8003e24 <_Z6vprintPKcSt9__va_list+0x42>
    {
        //HAL_UART_Transmit(&huart1, (uint8_t*)string, strlen(string), 0xffffff); // send message via UART
    	 CDC_Transmit_FS((uint8_t*)string, strlen(string));
 8003e0a:	f107 0308 	add.w	r3, r7, #8
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f7fc fa38 	bl	8000284 <strlen>
 8003e14:	4603      	mov	r3, r0
 8003e16:	b29a      	uxth	r2, r3
 8003e18:	f107 0308 	add.w	r3, r7, #8
 8003e1c:	4611      	mov	r1, r2
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f014 fb2c 	bl	801847c <CDC_Transmit_FS>
    }
}
 8003e24:	bf00      	nop
 8003e26:	37d0      	adds	r7, #208	; 0xd0
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}

08003e2c <_Z9ei_printfPKcz>:

void ei_printf(const char *format, ...) {
 8003e2c:	b40f      	push	{r0, r1, r2, r3}
 8003e2e:	b580      	push	{r7, lr}
 8003e30:	b082      	sub	sp, #8
 8003e32:	af00      	add	r7, sp, #0
    va_list myargs;
    va_start(myargs, format);
 8003e34:	f107 0314 	add.w	r3, r7, #20
 8003e38:	607b      	str	r3, [r7, #4]
    vprint(format, myargs);
 8003e3a:	6879      	ldr	r1, [r7, #4]
 8003e3c:	6938      	ldr	r0, [r7, #16]
 8003e3e:	f7ff ffd0 	bl	8003de2 <_Z6vprintPKcSt9__va_list>
    va_end(myargs);
}
 8003e42:	bf00      	nop
 8003e44:	3708      	adds	r7, #8
 8003e46:	46bd      	mov	sp, r7
 8003e48:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003e4c:	b004      	add	sp, #16
 8003e4e:	4770      	bx	lr

08003e50 <_Z16get_feature_datajjPf>:
using namespace ei;

static float features[EI_CLASSIFIER_DSP_INPUT_FRAME_SIZE];

int get_feature_data(size_t offset, size_t length, float *out_ptr) {
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b084      	sub	sp, #16
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	60f8      	str	r0, [r7, #12]
 8003e58:	60b9      	str	r1, [r7, #8]
 8003e5a:	607a      	str	r2, [r7, #4]
    memcpy(out_ptr, features + offset, length * sizeof(float));
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	009b      	lsls	r3, r3, #2
 8003e60:	4a06      	ldr	r2, [pc, #24]	; (8003e7c <_Z16get_feature_datajjPf+0x2c>)
 8003e62:	1899      	adds	r1, r3, r2
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	461a      	mov	r2, r3
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f016 fb10 	bl	801a490 <memcpy>
    return 0;
 8003e70:	2300      	movs	r3, #0
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	3710      	adds	r7, #16
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}
 8003e7a:	bf00      	nop
 8003e7c:	2000039c 	.word	0x2000039c

08003e80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b0ca      	sub	sp, #296	; 0x128
 8003e84:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003e86:	f001 fac1 	bl	800540c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003e8a:	f000 f915 	bl	80040b8 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003e8e:	f000 f9dd 	bl	800424c <_ZL12MX_GPIO_Initv>
  MX_SPI1_Init();
 8003e92:	f000 f99f 	bl	80041d4 <_ZL12MX_SPI1_Initv>
  MX_USB_DEVICE_Init();
 8003e96:	f014 fa33 	bl	8018300 <MX_USB_DEVICE_Init>
  MX_CRC_Init();
 8003e9a:	f000 f983 	bl	80041a4 <_ZL11MX_CRC_Initv>
  /* USER CODE BEGIN 2 */
	myAccConfigDef.dataRate = LIS3DSH_DATARATE_800;
 8003e9e:	2380      	movs	r3, #128	; 0x80
 8003ea0:	f887 3114 	strb.w	r3, [r7, #276]	; 0x114
	myAccConfigDef.fullScale = LIS3DSH_FULLSCALE_4;
 8003ea4:	2308      	movs	r3, #8
 8003ea6:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
	myAccConfigDef.enableAxes = LIS3DSH_XYZ_ENABLE;
 8003eaa:	2307      	movs	r3, #7
 8003eac:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	myAccConfigDef.interruptEnable = true;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	f887 3118 	strb.w	r3, [r7, #280]	; 0x118
	myAccConfigDef.antiAliasingBW = LIS3DSH_FILTER_BW_50;
 8003eb6:	23c0      	movs	r3, #192	; 0xc0
 8003eb8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
	LIS3DSH_Init(&hspi1, &myAccConfigDef);
 8003ebc:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8003ec0:	4619      	mov	r1, r3
 8003ec2:	486c      	ldr	r0, [pc, #432]	; (8004074 <main+0x1f4>)
 8003ec4:	f7fd f960 	bl	8001188 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef>

	LIS3DSH_X_calibrate(-1000.0, 980.0);
 8003ec8:	eddf 0a6b 	vldr	s1, [pc, #428]	; 8004078 <main+0x1f8>
 8003ecc:	ed9f 0a6b 	vldr	s0, [pc, #428]	; 800407c <main+0x1fc>
 8003ed0:	f7fd fae0 	bl	8001494 <_Z19LIS3DSH_X_calibrateff>
	LIS3DSH_Y_calibrate(-1020.0, 1040.0);
 8003ed4:	eddf 0a6a 	vldr	s1, [pc, #424]	; 8004080 <main+0x200>
 8003ed8:	ed9f 0a6a 	vldr	s0, [pc, #424]	; 8004084 <main+0x204>
 8003edc:	f7fd fb08 	bl	80014f0 <_Z19LIS3DSH_Y_calibrateff>
	LIS3DSH_Z_calibrate(-920.0, 1040.0);
 8003ee0:	eddf 0a67 	vldr	s1, [pc, #412]	; 8004080 <main+0x200>
 8003ee4:	ed9f 0a68 	vldr	s0, [pc, #416]	; 8004088 <main+0x208>
 8003ee8:	f7fd fb30 	bl	800154c <_Z19LIS3DSH_Z_calibrateff>
	signal_t signal;
 8003eec:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f7fe fa7c 	bl	80023ee <_ZN2ei11ei_signal_tC1Ev>
	  	signal.total_length = sizeof(features) / sizeof(features[0]);
 8003ef6:	f640 139c 	movw	r3, #2460	; 0x99c
 8003efa:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	  	signal.get_data = &get_feature_data;
 8003efe:	4b63      	ldr	r3, [pc, #396]	; (800408c <main+0x20c>)
 8003f00:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003f04:	f507 728e 	add.w	r2, r7, #284	; 0x11c
 8003f08:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003f0c:	4611      	mov	r1, r2
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f000 faf0 	bl	80044f4 <_ZNSt8functionIFijjPfEEaSIPS1_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSA_JjjS0_EEEE5valueERS2_E4typeEOS8_>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  do {
	    if (drdyFlag == 1) {
 8003f14:	4b5e      	ldr	r3, [pc, #376]	; (8004090 <main+0x210>)
 8003f16:	781b      	ldrb	r3, [r3, #0]
 8003f18:	2b01      	cmp	r3, #1
 8003f1a:	d144      	bne.n	8003fa6 <main+0x126>
	      drdyFlag = 0;
 8003f1c:	4b5c      	ldr	r3, [pc, #368]	; (8004090 <main+0x210>)
 8003f1e:	2200      	movs	r2, #0
 8003f20:	701a      	strb	r2, [r3, #0]
	      myData = LIS3DSH_GetDataScaled();
 8003f22:	f7fd fa35 	bl	8001390 <_Z21LIS3DSH_GetDataScaledv>
 8003f26:	eef0 6a40 	vmov.f32	s13, s0
 8003f2a:	eeb0 7a60 	vmov.f32	s14, s1
 8003f2e:	eef0 7a41 	vmov.f32	s15, s2
 8003f32:	4b58      	ldr	r3, [pc, #352]	; (8004094 <main+0x214>)
 8003f34:	edc3 6a00 	vstr	s13, [r3]
 8003f38:	ed83 7a01 	vstr	s14, [r3, #4]
 8003f3c:	edc3 7a02 	vstr	s15, [r3, #8]
	      features[3 * countt] = myData.x;
 8003f40:	4b55      	ldr	r3, [pc, #340]	; (8004098 <main+0x218>)
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	4613      	mov	r3, r2
 8003f46:	005b      	lsls	r3, r3, #1
 8003f48:	4413      	add	r3, r2
 8003f4a:	4a52      	ldr	r2, [pc, #328]	; (8004094 <main+0x214>)
 8003f4c:	6812      	ldr	r2, [r2, #0]
 8003f4e:	4953      	ldr	r1, [pc, #332]	; (800409c <main+0x21c>)
 8003f50:	009b      	lsls	r3, r3, #2
 8003f52:	440b      	add	r3, r1
 8003f54:	601a      	str	r2, [r3, #0]
	      features[3 * countt + 1] = myData.y;
 8003f56:	4b50      	ldr	r3, [pc, #320]	; (8004098 <main+0x218>)
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	4613      	mov	r3, r2
 8003f5c:	005b      	lsls	r3, r3, #1
 8003f5e:	4413      	add	r3, r2
 8003f60:	3301      	adds	r3, #1
 8003f62:	4a4c      	ldr	r2, [pc, #304]	; (8004094 <main+0x214>)
 8003f64:	6852      	ldr	r2, [r2, #4]
 8003f66:	494d      	ldr	r1, [pc, #308]	; (800409c <main+0x21c>)
 8003f68:	009b      	lsls	r3, r3, #2
 8003f6a:	440b      	add	r3, r1
 8003f6c:	601a      	str	r2, [r3, #0]
	      features[3 * countt + 2] = myData.z;
 8003f6e:	4b4a      	ldr	r3, [pc, #296]	; (8004098 <main+0x218>)
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	4613      	mov	r3, r2
 8003f74:	005b      	lsls	r3, r3, #1
 8003f76:	4413      	add	r3, r2
 8003f78:	3302      	adds	r3, #2
 8003f7a:	4a46      	ldr	r2, [pc, #280]	; (8004094 <main+0x214>)
 8003f7c:	6892      	ldr	r2, [r2, #8]
 8003f7e:	4947      	ldr	r1, [pc, #284]	; (800409c <main+0x21c>)
 8003f80:	009b      	lsls	r3, r3, #2
 8003f82:	440b      	add	r3, r1
 8003f84:	601a      	str	r2, [r3, #0]
	      countt++;
 8003f86:	4b44      	ldr	r3, [pc, #272]	; (8004098 <main+0x218>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	3301      	adds	r3, #1
 8003f8c:	4a42      	ldr	r2, [pc, #264]	; (8004098 <main+0x218>)
 8003f8e:	6013      	str	r3, [r2, #0]
	      if (countt == EI_CLASSIFIER_RAW_SAMPLE_COUNT) {
 8003f90:	4b41      	ldr	r3, [pc, #260]	; (8004098 <main+0x218>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f5b3 7f4d 	cmp.w	r3, #820	; 0x334
 8003f98:	d105      	bne.n	8003fa6 <main+0x126>
	        countt = 0;
 8003f9a:	4b3f      	ldr	r3, [pc, #252]	; (8004098 <main+0x218>)
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	601a      	str	r2, [r3, #0]
	        featurestate = true;
 8003fa0:	4b3f      	ldr	r3, [pc, #252]	; (80040a0 <main+0x220>)
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	701a      	strb	r2, [r3, #0]
	      }
	    }
	  } while (featurestate == false);// must do at least once
 8003fa6:	4b3e      	ldr	r3, [pc, #248]	; (80040a0 <main+0x220>)
 8003fa8:	781b      	ldrb	r3, [r3, #0]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d100      	bne.n	8003fb0 <main+0x130>
	  do {
 8003fae:	e7b1      	b.n	8003f14 <main+0x94>
	  ei_impulse_result_t result = { 0 };
 8003fb0:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8003fb4:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003fbe:	461a      	mov	r2, r3
 8003fc0:	2100      	movs	r1, #0
 8003fc2:	f016 fa8d 	bl	801a4e0 <memset>
	  	      EI_IMPULSE_ERROR res = run_classifier(&signal, &result, true);
 8003fc6:	4639      	mov	r1, r7
 8003fc8:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003fcc:	2201      	movs	r2, #1
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f7ff feef 	bl	8003db2 <run_classifier>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
	  	      ei_printf("run_classifier returned: %d\n", res);
 8003fda:	f997 3123 	ldrsb.w	r3, [r7, #291]	; 0x123
 8003fde:	4619      	mov	r1, r3
 8003fe0:	4830      	ldr	r0, [pc, #192]	; (80040a4 <main+0x224>)
 8003fe2:	f7ff ff23 	bl	8003e2c <_Z9ei_printfPKcz>

	  	      ei_printf("Predictions (DSP: %d ms., Classification: %d ms., Anomaly: %d ms.): \n",
 8003fe6:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8003fea:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003fee:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 8003ff2:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8003ff6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003ffa:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003ffe:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8004002:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004006:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800400a:	4827      	ldr	r0, [pc, #156]	; (80040a8 <main+0x228>)
 800400c:	f7ff ff0e 	bl	8003e2c <_Z9ei_printfPKcz>
	  	          result.timing.dsp, result.timing.classification, result.timing.anomaly);

	  	      // print the predictions
	  	      ei_printf("[");
 8004010:	4826      	ldr	r0, [pc, #152]	; (80040ac <main+0x22c>)
 8004012:	f7ff ff0b 	bl	8003e2c <_Z9ei_printfPKcz>
	  	      for (size_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
 8004016:	2300      	movs	r3, #0
 8004018:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800401c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004020:	2b01      	cmp	r3, #1
 8004022:	d81c      	bhi.n	800405e <main+0x1de>
	  	    	  ei_printf_float(result.classification[ix].value);
 8004024:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8004028:	f5a3 7294 	sub.w	r2, r3, #296	; 0x128
 800402c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004030:	3301      	adds	r3, #1
 8004032:	00db      	lsls	r3, r3, #3
 8004034:	4413      	add	r3, r2
 8004036:	3304      	adds	r3, #4
 8004038:	edd3 7a00 	vldr	s15, [r3]
 800403c:	eeb0 0a67 	vmov.f32	s0, s15
 8004040:	f00e feb6 	bl	8012db0 <_Z15ei_printf_floatf>
	  	  #if EI_CLASSIFIER_HAS_ANOMALY == 1
	  	          ei_printf(", ");
	  	  #else
	  	          if (ix != EI_CLASSIFIER_LABEL_COUNT - 1) {
 8004044:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004048:	2b01      	cmp	r3, #1
 800404a:	d002      	beq.n	8004052 <main+0x1d2>
	  	              ei_printf(", ");
 800404c:	4818      	ldr	r0, [pc, #96]	; (80040b0 <main+0x230>)
 800404e:	f7ff feed 	bl	8003e2c <_Z9ei_printfPKcz>
	  	      for (size_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
 8004052:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004056:	3301      	adds	r3, #1
 8004058:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800405c:	e7de      	b.n	800401c <main+0x19c>
	  	  #endif
	  	      }
	  	  #if EI_CLASSIFIER_HAS_ANOMALY == 1
	  	      ei_printf_float(result.anomaly);
	  	  #endif
	  	      ei_printf("]\n\n\n");
 800405e:	4815      	ldr	r0, [pc, #84]	; (80040b4 <main+0x234>)
 8004060:	f7ff fee4 	bl	8003e2c <_Z9ei_printfPKcz>

	  HAL_Delay(1500);
 8004064:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8004068:	f001 fa42 	bl	80054f0 <HAL_Delay>
	  featurestate=false;
 800406c:	4b0c      	ldr	r3, [pc, #48]	; (80040a0 <main+0x220>)
 800406e:	2200      	movs	r2, #0
 8004070:	701a      	strb	r2, [r3, #0]

  }
 8004072:	e74f      	b.n	8003f14 <main+0x94>
 8004074:	20000344 	.word	0x20000344
 8004078:	44750000 	.word	0x44750000
 800407c:	c47a0000 	.word	0xc47a0000
 8004080:	44820000 	.word	0x44820000
 8004084:	c47f0000 	.word	0xc47f0000
 8004088:	c4660000 	.word	0xc4660000
 800408c:	08003e51 	.word	0x08003e51
 8004090:	20002a18 	.word	0x20002a18
 8004094:	20002a0c 	.word	0x20002a0c
 8004098:	20002a1c 	.word	0x20002a1c
 800409c:	2000039c 	.word	0x2000039c
 80040a0:	20002a19 	.word	0x20002a19
 80040a4:	0801c248 	.word	0x0801c248
 80040a8:	0801c268 	.word	0x0801c268
 80040ac:	0801c2b0 	.word	0x0801c2b0
 80040b0:	0801c2b4 	.word	0x0801c2b4
 80040b4:	0801c2b8 	.word	0x0801c2b8

080040b8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b094      	sub	sp, #80	; 0x50
 80040bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80040be:	f107 0320 	add.w	r3, r7, #32
 80040c2:	2230      	movs	r2, #48	; 0x30
 80040c4:	2100      	movs	r1, #0
 80040c6:	4618      	mov	r0, r3
 80040c8:	f016 fa0a 	bl	801a4e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80040cc:	f107 030c 	add.w	r3, r7, #12
 80040d0:	2200      	movs	r2, #0
 80040d2:	601a      	str	r2, [r3, #0]
 80040d4:	605a      	str	r2, [r3, #4]
 80040d6:	609a      	str	r2, [r3, #8]
 80040d8:	60da      	str	r2, [r3, #12]
 80040da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80040dc:	2300      	movs	r3, #0
 80040de:	60bb      	str	r3, [r7, #8]
 80040e0:	4b2e      	ldr	r3, [pc, #184]	; (800419c <_Z18SystemClock_Configv+0xe4>)
 80040e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e4:	4a2d      	ldr	r2, [pc, #180]	; (800419c <_Z18SystemClock_Configv+0xe4>)
 80040e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040ea:	6413      	str	r3, [r2, #64]	; 0x40
 80040ec:	4b2b      	ldr	r3, [pc, #172]	; (800419c <_Z18SystemClock_Configv+0xe4>)
 80040ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040f4:	60bb      	str	r3, [r7, #8]
 80040f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80040f8:	2300      	movs	r3, #0
 80040fa:	607b      	str	r3, [r7, #4]
 80040fc:	4b28      	ldr	r3, [pc, #160]	; (80041a0 <_Z18SystemClock_Configv+0xe8>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a27      	ldr	r2, [pc, #156]	; (80041a0 <_Z18SystemClock_Configv+0xe8>)
 8004102:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004106:	6013      	str	r3, [r2, #0]
 8004108:	4b25      	ldr	r3, [pc, #148]	; (80041a0 <_Z18SystemClock_Configv+0xe8>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004110:	607b      	str	r3, [r7, #4]
 8004112:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8004114:	2303      	movs	r3, #3
 8004116:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004118:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800411c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800411e:	2301      	movs	r3, #1
 8004120:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004122:	2310      	movs	r3, #16
 8004124:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004126:	2302      	movs	r3, #2
 8004128:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800412a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800412e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8004130:	2304      	movs	r3, #4
 8004132:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8004134:	2348      	movs	r3, #72	; 0x48
 8004136:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004138:	2302      	movs	r3, #2
 800413a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800413c:	2303      	movs	r3, #3
 800413e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004140:	f107 0320 	add.w	r3, r7, #32
 8004144:	4618      	mov	r0, r3
 8004146:	f002 ff71 	bl	800702c <HAL_RCC_OscConfig>
 800414a:	4603      	mov	r3, r0
 800414c:	2b00      	cmp	r3, #0
 800414e:	bf14      	ite	ne
 8004150:	2301      	movne	r3, #1
 8004152:	2300      	moveq	r3, #0
 8004154:	b2db      	uxtb	r3, r3
 8004156:	2b00      	cmp	r3, #0
 8004158:	d001      	beq.n	800415e <_Z18SystemClock_Configv+0xa6>
  {
    Error_Handler();
 800415a:	f000 f92d 	bl	80043b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800415e:	230f      	movs	r3, #15
 8004160:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8004162:	2300      	movs	r3, #0
 8004164:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004166:	2300      	movs	r3, #0
 8004168:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800416a:	2300      	movs	r3, #0
 800416c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800416e:	2300      	movs	r3, #0
 8004170:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8004172:	f107 030c 	add.w	r3, r7, #12
 8004176:	2100      	movs	r1, #0
 8004178:	4618      	mov	r0, r3
 800417a:	f003 f9cf 	bl	800751c <HAL_RCC_ClockConfig>
 800417e:	4603      	mov	r3, r0
 8004180:	2b00      	cmp	r3, #0
 8004182:	bf14      	ite	ne
 8004184:	2301      	movne	r3, #1
 8004186:	2300      	moveq	r3, #0
 8004188:	b2db      	uxtb	r3, r3
 800418a:	2b00      	cmp	r3, #0
 800418c:	d001      	beq.n	8004192 <_Z18SystemClock_Configv+0xda>
  {
    Error_Handler();
 800418e:	f000 f913 	bl	80043b8 <Error_Handler>
  }
}
 8004192:	bf00      	nop
 8004194:	3750      	adds	r7, #80	; 0x50
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}
 800419a:	bf00      	nop
 800419c:	40023800 	.word	0x40023800
 80041a0:	40007000 	.word	0x40007000

080041a4 <_ZL11MX_CRC_Initv>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80041a8:	4b08      	ldr	r3, [pc, #32]	; (80041cc <_ZL11MX_CRC_Initv+0x28>)
 80041aa:	4a09      	ldr	r2, [pc, #36]	; (80041d0 <_ZL11MX_CRC_Initv+0x2c>)
 80041ac:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80041ae:	4807      	ldr	r0, [pc, #28]	; (80041cc <_ZL11MX_CRC_Initv+0x28>)
 80041b0:	f001 fad3 	bl	800575a <HAL_CRC_Init>
 80041b4:	4603      	mov	r3, r0
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	bf14      	ite	ne
 80041ba:	2301      	movne	r3, #1
 80041bc:	2300      	moveq	r3, #0
 80041be:	b2db      	uxtb	r3, r3
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d001      	beq.n	80041c8 <_ZL11MX_CRC_Initv+0x24>
  {
    Error_Handler();
 80041c4:	f000 f8f8 	bl	80043b8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80041c8:	bf00      	nop
 80041ca:	bd80      	pop	{r7, pc}
 80041cc:	2000033c 	.word	0x2000033c
 80041d0:	40023000 	.word	0x40023000

080041d4 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80041d8:	4b1a      	ldr	r3, [pc, #104]	; (8004244 <_ZL12MX_SPI1_Initv+0x70>)
 80041da:	4a1b      	ldr	r2, [pc, #108]	; (8004248 <_ZL12MX_SPI1_Initv+0x74>)
 80041dc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80041de:	4b19      	ldr	r3, [pc, #100]	; (8004244 <_ZL12MX_SPI1_Initv+0x70>)
 80041e0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80041e4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80041e6:	4b17      	ldr	r3, [pc, #92]	; (8004244 <_ZL12MX_SPI1_Initv+0x70>)
 80041e8:	2200      	movs	r2, #0
 80041ea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80041ec:	4b15      	ldr	r3, [pc, #84]	; (8004244 <_ZL12MX_SPI1_Initv+0x70>)
 80041ee:	2200      	movs	r2, #0
 80041f0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80041f2:	4b14      	ldr	r3, [pc, #80]	; (8004244 <_ZL12MX_SPI1_Initv+0x70>)
 80041f4:	2200      	movs	r2, #0
 80041f6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80041f8:	4b12      	ldr	r3, [pc, #72]	; (8004244 <_ZL12MX_SPI1_Initv+0x70>)
 80041fa:	2200      	movs	r2, #0
 80041fc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80041fe:	4b11      	ldr	r3, [pc, #68]	; (8004244 <_ZL12MX_SPI1_Initv+0x70>)
 8004200:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004204:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8004206:	4b0f      	ldr	r3, [pc, #60]	; (8004244 <_ZL12MX_SPI1_Initv+0x70>)
 8004208:	2210      	movs	r2, #16
 800420a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800420c:	4b0d      	ldr	r3, [pc, #52]	; (8004244 <_ZL12MX_SPI1_Initv+0x70>)
 800420e:	2200      	movs	r2, #0
 8004210:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004212:	4b0c      	ldr	r3, [pc, #48]	; (8004244 <_ZL12MX_SPI1_Initv+0x70>)
 8004214:	2200      	movs	r2, #0
 8004216:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004218:	4b0a      	ldr	r3, [pc, #40]	; (8004244 <_ZL12MX_SPI1_Initv+0x70>)
 800421a:	2200      	movs	r2, #0
 800421c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800421e:	4b09      	ldr	r3, [pc, #36]	; (8004244 <_ZL12MX_SPI1_Initv+0x70>)
 8004220:	220a      	movs	r2, #10
 8004222:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004224:	4807      	ldr	r0, [pc, #28]	; (8004244 <_ZL12MX_SPI1_Initv+0x70>)
 8004226:	f003 fb71 	bl	800790c <HAL_SPI_Init>
 800422a:	4603      	mov	r3, r0
 800422c:	2b00      	cmp	r3, #0
 800422e:	bf14      	ite	ne
 8004230:	2301      	movne	r3, #1
 8004232:	2300      	moveq	r3, #0
 8004234:	b2db      	uxtb	r3, r3
 8004236:	2b00      	cmp	r3, #0
 8004238:	d001      	beq.n	800423e <_ZL12MX_SPI1_Initv+0x6a>
  {
    Error_Handler();
 800423a:	f000 f8bd 	bl	80043b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800423e:	bf00      	nop
 8004240:	bd80      	pop	{r7, pc}
 8004242:	bf00      	nop
 8004244:	20000344 	.word	0x20000344
 8004248:	40013000 	.word	0x40013000

0800424c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b08a      	sub	sp, #40	; 0x28
 8004250:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004252:	f107 0314 	add.w	r3, r7, #20
 8004256:	2200      	movs	r2, #0
 8004258:	601a      	str	r2, [r3, #0]
 800425a:	605a      	str	r2, [r3, #4]
 800425c:	609a      	str	r2, [r3, #8]
 800425e:	60da      	str	r2, [r3, #12]
 8004260:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004262:	2300      	movs	r3, #0
 8004264:	613b      	str	r3, [r7, #16]
 8004266:	4b48      	ldr	r3, [pc, #288]	; (8004388 <_ZL12MX_GPIO_Initv+0x13c>)
 8004268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800426a:	4a47      	ldr	r2, [pc, #284]	; (8004388 <_ZL12MX_GPIO_Initv+0x13c>)
 800426c:	f043 0310 	orr.w	r3, r3, #16
 8004270:	6313      	str	r3, [r2, #48]	; 0x30
 8004272:	4b45      	ldr	r3, [pc, #276]	; (8004388 <_ZL12MX_GPIO_Initv+0x13c>)
 8004274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004276:	f003 0310 	and.w	r3, r3, #16
 800427a:	613b      	str	r3, [r7, #16]
 800427c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800427e:	2300      	movs	r3, #0
 8004280:	60fb      	str	r3, [r7, #12]
 8004282:	4b41      	ldr	r3, [pc, #260]	; (8004388 <_ZL12MX_GPIO_Initv+0x13c>)
 8004284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004286:	4a40      	ldr	r2, [pc, #256]	; (8004388 <_ZL12MX_GPIO_Initv+0x13c>)
 8004288:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800428c:	6313      	str	r3, [r2, #48]	; 0x30
 800428e:	4b3e      	ldr	r3, [pc, #248]	; (8004388 <_ZL12MX_GPIO_Initv+0x13c>)
 8004290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004292:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004296:	60fb      	str	r3, [r7, #12]
 8004298:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800429a:	2300      	movs	r3, #0
 800429c:	60bb      	str	r3, [r7, #8]
 800429e:	4b3a      	ldr	r3, [pc, #232]	; (8004388 <_ZL12MX_GPIO_Initv+0x13c>)
 80042a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042a2:	4a39      	ldr	r2, [pc, #228]	; (8004388 <_ZL12MX_GPIO_Initv+0x13c>)
 80042a4:	f043 0301 	orr.w	r3, r3, #1
 80042a8:	6313      	str	r3, [r2, #48]	; 0x30
 80042aa:	4b37      	ldr	r3, [pc, #220]	; (8004388 <_ZL12MX_GPIO_Initv+0x13c>)
 80042ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ae:	f003 0301 	and.w	r3, r3, #1
 80042b2:	60bb      	str	r3, [r7, #8]
 80042b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80042b6:	2300      	movs	r3, #0
 80042b8:	607b      	str	r3, [r7, #4]
 80042ba:	4b33      	ldr	r3, [pc, #204]	; (8004388 <_ZL12MX_GPIO_Initv+0x13c>)
 80042bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042be:	4a32      	ldr	r2, [pc, #200]	; (8004388 <_ZL12MX_GPIO_Initv+0x13c>)
 80042c0:	f043 0308 	orr.w	r3, r3, #8
 80042c4:	6313      	str	r3, [r2, #48]	; 0x30
 80042c6:	4b30      	ldr	r3, [pc, #192]	; (8004388 <_ZL12MX_GPIO_Initv+0x13c>)
 80042c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ca:	f003 0308 	and.w	r3, r3, #8
 80042ce:	607b      	str	r3, [r7, #4]
 80042d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80042d2:	2300      	movs	r3, #0
 80042d4:	603b      	str	r3, [r7, #0]
 80042d6:	4b2c      	ldr	r3, [pc, #176]	; (8004388 <_ZL12MX_GPIO_Initv+0x13c>)
 80042d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042da:	4a2b      	ldr	r2, [pc, #172]	; (8004388 <_ZL12MX_GPIO_Initv+0x13c>)
 80042dc:	f043 0302 	orr.w	r3, r3, #2
 80042e0:	6313      	str	r3, [r2, #48]	; 0x30
 80042e2:	4b29      	ldr	r3, [pc, #164]	; (8004388 <_ZL12MX_GPIO_Initv+0x13c>)
 80042e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042e6:	f003 0302 	and.w	r3, r3, #2
 80042ea:	603b      	str	r3, [r7, #0]
 80042ec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MEMS_CS_GPIO_Port, MEMS_CS_Pin, GPIO_PIN_RESET);
 80042ee:	2200      	movs	r2, #0
 80042f0:	2108      	movs	r1, #8
 80042f2:	4826      	ldr	r0, [pc, #152]	; (800438c <_ZL12MX_GPIO_Initv+0x140>)
 80042f4:	f001 fbea 	bl	8005acc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80042f8:	2200      	movs	r2, #0
 80042fa:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80042fe:	4824      	ldr	r0, [pc, #144]	; (8004390 <_ZL12MX_GPIO_Initv+0x144>)
 8004300:	f001 fbe4 	bl	8005acc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : MEMS_CS_Pin */
  GPIO_InitStruct.Pin = MEMS_CS_Pin;
 8004304:	2308      	movs	r3, #8
 8004306:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004308:	2301      	movs	r3, #1
 800430a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800430c:	2300      	movs	r3, #0
 800430e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004310:	2300      	movs	r3, #0
 8004312:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MEMS_CS_GPIO_Port, &GPIO_InitStruct);
 8004314:	f107 0314 	add.w	r3, r7, #20
 8004318:	4619      	mov	r1, r3
 800431a:	481c      	ldr	r0, [pc, #112]	; (800438c <_ZL12MX_GPIO_Initv+0x140>)
 800431c:	f001 fa3a 	bl	8005794 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004320:	2301      	movs	r3, #1
 8004322:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004324:	2300      	movs	r3, #0
 8004326:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004328:	2300      	movs	r3, #0
 800432a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800432c:	f107 0314 	add.w	r3, r7, #20
 8004330:	4619      	mov	r1, r3
 8004332:	4818      	ldr	r0, [pc, #96]	; (8004394 <_ZL12MX_GPIO_Initv+0x148>)
 8004334:	f001 fa2e 	bl	8005794 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8004338:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800433c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800433e:	2301      	movs	r3, #1
 8004340:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004342:	2300      	movs	r3, #0
 8004344:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004346:	2300      	movs	r3, #0
 8004348:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800434a:	f107 0314 	add.w	r3, r7, #20
 800434e:	4619      	mov	r1, r3
 8004350:	480f      	ldr	r0, [pc, #60]	; (8004390 <_ZL12MX_GPIO_Initv+0x144>)
 8004352:	f001 fa1f 	bl	8005794 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004356:	2301      	movs	r3, #1
 8004358:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800435a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800435e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004360:	2300      	movs	r3, #0
 8004362:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004364:	f107 0314 	add.w	r3, r7, #20
 8004368:	4619      	mov	r1, r3
 800436a:	4808      	ldr	r0, [pc, #32]	; (800438c <_ZL12MX_GPIO_Initv+0x140>)
 800436c:	f001 fa12 	bl	8005794 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8004370:	2200      	movs	r2, #0
 8004372:	2100      	movs	r1, #0
 8004374:	2006      	movs	r0, #6
 8004376:	f001 f9ba 	bl	80056ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800437a:	2006      	movs	r0, #6
 800437c:	f001 f9d3 	bl	8005726 <HAL_NVIC_EnableIRQ>

}
 8004380:	bf00      	nop
 8004382:	3728      	adds	r7, #40	; 0x28
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}
 8004388:	40023800 	.word	0x40023800
 800438c:	40021000 	.word	0x40021000
 8004390:	40020c00 	.word	0x40020c00
 8004394:	40020000 	.word	0x40020000

08004398 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004398:	b480      	push	{r7}
 800439a:	b083      	sub	sp, #12
 800439c:	af00      	add	r7, sp, #0
 800439e:	4603      	mov	r3, r0
 80043a0:	80fb      	strh	r3, [r7, #6]
  drdyFlag = 1;
 80043a2:	4b04      	ldr	r3, [pc, #16]	; (80043b4 <HAL_GPIO_EXTI_Callback+0x1c>)
 80043a4:	2201      	movs	r2, #1
 80043a6:	701a      	strb	r2, [r3, #0]
}
 80043a8:	bf00      	nop
 80043aa:	370c      	adds	r7, #12
 80043ac:	46bd      	mov	sp, r7
 80043ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b2:	4770      	bx	lr
 80043b4:	20002a18 	.word	0x20002a18

080043b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80043b8:	b480      	push	{r7}
 80043ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 80043bc:	e7fe      	b.n	80043bc <Error_Handler+0x4>

080043be <_ZNSt15__uniq_ptr_dataIvPFvPvELb1ELb1EECI1St15__uniq_ptr_implIvS2_EIS2_EES0_OT_>:
  template <typename _Tp, typename _Dp,
	    bool = is_move_constructible<_Dp>::value,
	    bool = is_move_assignable<_Dp>::value>
    struct __uniq_ptr_data : __uniq_ptr_impl<_Tp, _Dp>
    {
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 80043be:	b580      	push	{r7, lr}
 80043c0:	b084      	sub	sp, #16
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	60f8      	str	r0, [r7, #12]
 80043c6:	60b9      	str	r1, [r7, #8]
 80043c8:	607a      	str	r2, [r7, #4]
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	68b9      	ldr	r1, [r7, #8]
 80043ce:	687a      	ldr	r2, [r7, #4]
 80043d0:	4618      	mov	r0, r3
 80043d2:	f000 f907 	bl	80045e4 <_ZNSt15__uniq_ptr_implIvPFvPvEEC1IS2_EES0_OT_>
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	4618      	mov	r0, r3
 80043da:	3710      	adds	r7, #16
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}

080043e0 <_ZNSt10unique_ptrIvPFvPvEEC1IS2_vEES0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOS7_E4typeE>:
       *
       * The deleter will be initialized with @p std::move(__d)
       */
      template<typename _Del = deleter_type,
	       typename = _Require<is_move_constructible<_Del>>>
	unique_ptr(pointer __p,
 80043e0:	b590      	push	{r4, r7, lr}
 80043e2:	b085      	sub	sp, #20
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	60f8      	str	r0, [r7, #12]
 80043e8:	60b9      	str	r1, [r7, #8]
 80043ea:	607a      	str	r2, [r7, #4]
		   __enable_if_t<!is_lvalue_reference<_Del>::value,
				 _Del&&> __d) noexcept
	: _M_t(__p, std::move(__d))
 80043ec:	68fc      	ldr	r4, [r7, #12]
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f000 f8ed 	bl	80045ce <_ZSt4moveIRPFvPvEEONSt16remove_referenceIT_E4typeEOS5_>
 80043f4:	4603      	mov	r3, r0
 80043f6:	461a      	mov	r2, r3
 80043f8:	68b9      	ldr	r1, [r7, #8]
 80043fa:	4620      	mov	r0, r4
 80043fc:	f7ff ffdf 	bl	80043be <_ZNSt15__uniq_ptr_dataIvPFvPvELb1ELb1EECI1St15__uniq_ptr_implIvS2_EIS2_EES0_OT_>
	{ }
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	4618      	mov	r0, r3
 8004404:	3714      	adds	r7, #20
 8004406:	46bd      	mov	sp, r7
 8004408:	bd90      	pop	{r4, r7, pc}

0800440a <_ZNSt10unique_ptrIvPFvPvEED1Ev>:
	unique_ptr(auto_ptr<_Up>&& __u) noexcept;
#pragma GCC diagnostic pop
#endif

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
 800440a:	b590      	push	{r4, r7, lr}
 800440c:	b085      	sub	sp, #20
 800440e:	af00      	add	r7, sp, #0
 8004410:	6078      	str	r0, [r7, #4]
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	auto& __ptr = _M_t._M_ptr();
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	4618      	mov	r0, r3
 8004416:	f000 f8fb 	bl	8004610 <_ZNSt15__uniq_ptr_implIvPFvPvEE6_M_ptrEv>
 800441a:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d00b      	beq.n	800443c <_ZNSt10unique_ptrIvPFvPvEED1Ev+0x32>
	  get_deleter()(std::move(__ptr));
 8004424:	6878      	ldr	r0, [r7, #4]
 8004426:	f000 f900 	bl	800462a <_ZNSt10unique_ptrIvPFvPvEE11get_deleterEv>
 800442a:	4603      	mov	r3, r0
 800442c:	681c      	ldr	r4, [r3, #0]
 800442e:	68f8      	ldr	r0, [r7, #12]
 8004430:	f000 f908 	bl	8004644 <_ZSt4moveIRPvEONSt16remove_referenceIT_E4typeEOS3_>
 8004434:	4603      	mov	r3, r0
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4618      	mov	r0, r3
 800443a:	47a0      	blx	r4
	__ptr = pointer();
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2200      	movs	r2, #0
 8004440:	601a      	str	r2, [r3, #0]
      }
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	4618      	mov	r0, r3
 8004446:	3714      	adds	r7, #20
 8004448:	46bd      	mov	sp, r7
 800444a:	bd90      	pop	{r4, r7, pc}

0800444c <_ZSt3maxIfERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 800444c:	b480      	push	{r7}
 800444e:	b083      	sub	sp, #12
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
 8004454:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	ed93 7a00 	vldr	s14, [r3]
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	edd3 7a00 	vldr	s15, [r3]
 8004462:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004466:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800446a:	d501      	bpl.n	8004470 <_ZSt3maxIfERKT_S2_S2_+0x24>
	return __b;
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	e000      	b.n	8004472 <_ZSt3maxIfERKT_S2_S2_+0x26>
      return __a;
 8004470:	687b      	ldr	r3, [r7, #4]
    }
 8004472:	4618      	mov	r0, r3
 8004474:	370c      	adds	r7, #12
 8004476:	46bd      	mov	sp, r7
 8004478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447c:	4770      	bx	lr

0800447e <_ZNKSt8functionIFijjPfEEclEjjS0_>:
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 800447e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004482:	b084      	sub	sp, #16
 8004484:	af00      	add	r7, sp, #0
 8004486:	60f8      	str	r0, [r7, #12]
 8004488:	60b9      	str	r1, [r7, #8]
 800448a:	607a      	str	r2, [r7, #4]
 800448c:	603b      	str	r3, [r7, #0]
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	4618      	mov	r0, r3
 8004492:	f7fd f932 	bl	80016fa <_ZNKSt14_Function_base8_M_emptyEv>
 8004496:	4603      	mov	r3, r0
 8004498:	2b00      	cmp	r3, #0
 800449a:	d001      	beq.n	80044a0 <_ZNKSt8functionIFijjPfEEclEjjS0_+0x22>
	__throw_bad_function_call();
 800449c:	f7fd f9bf 	bl	800181e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	68dc      	ldr	r4, [r3, #12]
 80044a4:	68fd      	ldr	r5, [r7, #12]
 80044a6:	f107 0308 	add.w	r3, r7, #8
 80044aa:	4618      	mov	r0, r3
 80044ac:	f000 f8d5 	bl	800465a <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 80044b0:	4606      	mov	r6, r0
 80044b2:	1d3b      	adds	r3, r7, #4
 80044b4:	4618      	mov	r0, r3
 80044b6:	f000 f8d0 	bl	800465a <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 80044ba:	4680      	mov	r8, r0
 80044bc:	463b      	mov	r3, r7
 80044be:	4618      	mov	r0, r3
 80044c0:	f000 f8d6 	bl	8004670 <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 80044c4:	4603      	mov	r3, r0
 80044c6:	4642      	mov	r2, r8
 80044c8:	4631      	mov	r1, r6
 80044ca:	4628      	mov	r0, r5
 80044cc:	47a0      	blx	r4
 80044ce:	4603      	mov	r3, r0
    }
 80044d0:	4618      	mov	r0, r3
 80044d2:	3710      	adds	r7, #16
 80044d4:	46bd      	mov	sp, r7
 80044d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080044da <_ZNSt8functionIFijjPfEEC1Ev>:
      function() noexcept
 80044da:	b580      	push	{r7, lr}
 80044dc:	b082      	sub	sp, #8
 80044de:	af00      	add	r7, sp, #0
 80044e0:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	4618      	mov	r0, r3
 80044e6:	f7fd f8e7 	bl	80016b8 <_ZNSt14_Function_baseC1Ev>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	4618      	mov	r0, r3
 80044ee:	3708      	adds	r7, #8
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}

080044f4 <_ZNSt8functionIFijjPfEEaSIPS1_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSA_JjjS0_EEEE5valueERS2_E4typeEOS8_>:
	operator=(_Functor&& __f)
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b086      	sub	sp, #24
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
 80044fc:	6039      	str	r1, [r7, #0]
	  function(std::forward<_Functor>(__f)).swap(*this);
 80044fe:	6838      	ldr	r0, [r7, #0]
 8004500:	f000 f8c1 	bl	8004686 <_ZSt7forwardIPFijjPfEEOT_RNSt16remove_referenceIS3_E4typeE>
 8004504:	4603      	mov	r3, r0
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	f107 0308 	add.w	r3, r7, #8
 800450c:	4611      	mov	r1, r2
 800450e:	4618      	mov	r0, r3
 8004510:	f000 f8c4 	bl	800469c <_ZNSt8functionIFijjPfEEC1IPS1_vvEET_>
 8004514:	f107 0308 	add.w	r3, r7, #8
 8004518:	6879      	ldr	r1, [r7, #4]
 800451a:	4618      	mov	r0, r3
 800451c:	f000 f836 	bl	800458c <_ZNSt8functionIFijjPfEE4swapERS2_>
 8004520:	f107 0308 	add.w	r3, r7, #8
 8004524:	4618      	mov	r0, r3
 8004526:	f7fd ff55 	bl	80023d4 <_ZNSt8functionIFijjPfEED1Ev>
	  return *this;
 800452a:	687b      	ldr	r3, [r7, #4]
	}
 800452c:	4618      	mov	r0, r3
 800452e:	3718      	adds	r7, #24
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}

08004534 <_ZNSt8functionIFijjPfEEaSIZN14SignalWithAxes10get_signalEvEUljjS0_E_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSB_JjjS0_EEEE5valueERS2_E4typeEOS9_>:
	operator=(_Functor&& __f)
 8004534:	b580      	push	{r7, lr}
 8004536:	b086      	sub	sp, #24
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
 800453c:	6039      	str	r1, [r7, #0]
	  function(std::forward<_Functor>(__f)).swap(*this);
 800453e:	6838      	ldr	r0, [r7, #0]
 8004540:	f000 f8d6 	bl	80046f0 <_ZSt7forwardIZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS3_E4typeE>
 8004544:	4602      	mov	r2, r0
 8004546:	f107 0308 	add.w	r3, r7, #8
 800454a:	6811      	ldr	r1, [r2, #0]
 800454c:	4618      	mov	r0, r3
 800454e:	f000 f8db 	bl	8004708 <_ZNSt8functionIFijjPfEEC1IZN14SignalWithAxes10get_signalEvEUljjS0_E_vvEET_>
 8004552:	f107 0308 	add.w	r3, r7, #8
 8004556:	6879      	ldr	r1, [r7, #4]
 8004558:	4618      	mov	r0, r3
 800455a:	f000 f817 	bl	800458c <_ZNSt8functionIFijjPfEE4swapERS2_>
 800455e:	f107 0308 	add.w	r3, r7, #8
 8004562:	4618      	mov	r0, r3
 8004564:	f7fd ff36 	bl	80023d4 <_ZNSt8functionIFijjPfEED1Ev>
	  return *this;
 8004568:	687b      	ldr	r3, [r7, #4]
	}
 800456a:	4618      	mov	r0, r3
 800456c:	3718      	adds	r7, #24
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}

08004572 <_ZNKSt10unique_ptrIvPFvPvEE3getEv>:
	return get();
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
 8004572:	b580      	push	{r7, lr}
 8004574:	b082      	sub	sp, #8
 8004576:	af00      	add	r7, sp, #0
 8004578:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	4618      	mov	r0, r3
 800457e:	f000 f8ed 	bl	800475c <_ZNKSt15__uniq_ptr_implIvPFvPvEE6_M_ptrEv>
 8004582:	4603      	mov	r3, r0
 8004584:	4618      	mov	r0, r3
 8004586:	3708      	adds	r7, #8
 8004588:	46bd      	mov	sp, r7
 800458a:	bd80      	pop	{r7, pc}

0800458c <_ZNSt8functionIFijjPfEE4swapERS2_>:
      void swap(function& __x) noexcept
 800458c:	b580      	push	{r7, lr}
 800458e:	b082      	sub	sp, #8
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
 8004594:	6039      	str	r1, [r7, #0]
	std::swap(_M_functor, __x._M_functor);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	683a      	ldr	r2, [r7, #0]
 800459a:	4611      	mov	r1, r2
 800459c:	4618      	mov	r0, r3
 800459e:	f000 f8f6 	bl	800478e <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	std::swap(_M_manager, __x._M_manager);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	f103 0208 	add.w	r2, r3, #8
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	3308      	adds	r3, #8
 80045ac:	4619      	mov	r1, r3
 80045ae:	4610      	mov	r0, r2
 80045b0:	f000 f91f 	bl	80047f2 <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
	std::swap(_M_invoker, __x._M_invoker);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	f103 020c 	add.w	r2, r3, #12
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	330c      	adds	r3, #12
 80045be:	4619      	mov	r1, r3
 80045c0:	4610      	mov	r0, r2
 80045c2:	f000 f940 	bl	8004846 <_ZSt4swapIPFiRKSt9_Any_dataOjS3_OPfEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISC_ESt18is_move_assignableISC_EEE5valueEvE4typeERSC_SM_>
      }
 80045c6:	bf00      	nop
 80045c8:	3708      	adds	r7, #8
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}

080045ce <_ZSt4moveIRPFvPvEEONSt16remove_referenceIT_E4typeEOS5_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 80045ce:	b480      	push	{r7}
 80045d0:	b083      	sub	sp, #12
 80045d2:	af00      	add	r7, sp, #0
 80045d4:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	4618      	mov	r0, r3
 80045da:	370c      	adds	r7, #12
 80045dc:	46bd      	mov	sp, r7
 80045de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e2:	4770      	bx	lr

080045e4 <_ZNSt15__uniq_ptr_implIvPFvPvEEC1IS2_EES0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 80045e4:	b590      	push	{r4, r7, lr}
 80045e6:	b085      	sub	sp, #20
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	60f8      	str	r0, [r7, #12]
 80045ec:	60b9      	str	r1, [r7, #8]
 80045ee:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 80045f0:	68fc      	ldr	r4, [r7, #12]
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	f000 f946 	bl	8004884 <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>
 80045f8:	4602      	mov	r2, r0
 80045fa:	f107 0308 	add.w	r3, r7, #8
 80045fe:	4619      	mov	r1, r3
 8004600:	4620      	mov	r0, r4
 8004602:	f000 f94a 	bl	800489a <_ZNSt5tupleIJPvPFvS0_EEEC1IRS0_S2_Lb1EEEOT_OT0_>
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	4618      	mov	r0, r3
 800460a:	3714      	adds	r7, #20
 800460c:	46bd      	mov	sp, r7
 800460e:	bd90      	pop	{r4, r7, pc}

08004610 <_ZNSt15__uniq_ptr_implIvPFvPvEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8004610:	b580      	push	{r7, lr}
 8004612:	b082      	sub	sp, #8
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	4618      	mov	r0, r3
 800461c:	f000 f956 	bl	80048cc <_ZSt3getILj0EJPvPFvS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS7_>
 8004620:	4603      	mov	r3, r0
 8004622:	4618      	mov	r0, r3
 8004624:	3708      	adds	r7, #8
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}

0800462a <_ZNSt10unique_ptrIvPFvPvEE11get_deleterEv>:

      /// Return a reference to the stored deleter.
      deleter_type&
      get_deleter() noexcept
 800462a:	b580      	push	{r7, lr}
 800462c:	b082      	sub	sp, #8
 800462e:	af00      	add	r7, sp, #0
 8004630:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	4618      	mov	r0, r3
 8004636:	f000 f956 	bl	80048e6 <_ZNSt15__uniq_ptr_implIvPFvPvEE10_M_deleterEv>
 800463a:	4603      	mov	r3, r0
 800463c:	4618      	mov	r0, r3
 800463e:	3708      	adds	r7, #8
 8004640:	46bd      	mov	sp, r7
 8004642:	bd80      	pop	{r7, pc}

08004644 <_ZSt4moveIRPvEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8004644:	b480      	push	{r7}
 8004646:	b083      	sub	sp, #12
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	4618      	mov	r0, r3
 8004650:	370c      	adds	r7, #12
 8004652:	46bd      	mov	sp, r7
 8004654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004658:	4770      	bx	lr

0800465a <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800465a:	b480      	push	{r7}
 800465c:	b083      	sub	sp, #12
 800465e:	af00      	add	r7, sp, #0
 8004660:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	4618      	mov	r0, r3
 8004666:	370c      	adds	r7, #12
 8004668:	46bd      	mov	sp, r7
 800466a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466e:	4770      	bx	lr

08004670 <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8004670:	b480      	push	{r7}
 8004672:	b083      	sub	sp, #12
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	4618      	mov	r0, r3
 800467c:	370c      	adds	r7, #12
 800467e:	46bd      	mov	sp, r7
 8004680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004684:	4770      	bx	lr

08004686 <_ZSt7forwardIPFijjPfEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8004686:	b480      	push	{r7}
 8004688:	b083      	sub	sp, #12
 800468a:	af00      	add	r7, sp, #0
 800468c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	4618      	mov	r0, r3
 8004692:	370c      	adds	r7, #12
 8004694:	46bd      	mov	sp, r7
 8004696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469a:	4770      	bx	lr

0800469c <_ZNSt8functionIFijjPfEEC1IPS1_vvEET_>:
      function<_Res(_ArgTypes...)>::
 800469c:	b590      	push	{r4, r7, lr}
 800469e:	b083      	sub	sp, #12
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
 80046a4:	6039      	str	r1, [r7, #0]
      : _Function_base()
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	4618      	mov	r0, r3
 80046aa:	f7fd f805 	bl	80016b8 <_ZNSt14_Function_baseC1Ev>
	if (_My_handler::_M_not_empty_function(__f))
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	4618      	mov	r0, r3
 80046b2:	f000 f925 	bl	8004900 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE21_M_not_empty_functionIS2_EEbPT_>
 80046b6:	4603      	mov	r3, r0
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d00f      	beq.n	80046dc <_ZNSt8functionIFijjPfEEC1IPS1_vvEET_+0x40>
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 80046bc:	687c      	ldr	r4, [r7, #4]
 80046be:	463b      	mov	r3, r7
 80046c0:	4618      	mov	r0, r3
 80046c2:	f000 f92d 	bl	8004920 <_ZSt4moveIRPFijjPfEEONSt16remove_referenceIT_E4typeEOS5_>
 80046c6:	4603      	mov	r3, r0
 80046c8:	4619      	mov	r1, r3
 80046ca:	4620      	mov	r0, r4
 80046cc:	f000 f933 	bl	8004936 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE15_M_init_functorERSt9_Any_dataOS3_>
	    _M_invoker = &_My_handler::_M_invoke;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	4a05      	ldr	r2, [pc, #20]	; (80046e8 <_ZNSt8functionIFijjPfEEC1IPS1_vvEET_+0x4c>)
 80046d4:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	4a04      	ldr	r2, [pc, #16]	; (80046ec <_ZNSt8functionIFijjPfEEC1IPS1_vvEET_+0x50>)
 80046da:	609a      	str	r2, [r3, #8]
      }
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	4618      	mov	r0, r3
 80046e0:	370c      	adds	r7, #12
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd90      	pop	{r4, r7, pc}
 80046e6:	bf00      	nop
 80046e8:	0800495b 	.word	0x0800495b
 80046ec:	0800499d 	.word	0x0800499d

080046f0 <_ZSt7forwardIZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80046f0:	b480      	push	{r7}
 80046f2:	b083      	sub	sp, #12
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	4618      	mov	r0, r3
 80046fc:	370c      	adds	r7, #12
 80046fe:	46bd      	mov	sp, r7
 8004700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004704:	4770      	bx	lr
	...

08004708 <_ZNSt8functionIFijjPfEEC1IZN14SignalWithAxes10get_signalEvEUljjS0_E_vvEET_>:
      function<_Res(_ArgTypes...)>::
 8004708:	b590      	push	{r4, r7, lr}
 800470a:	b083      	sub	sp, #12
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
 8004710:	6039      	str	r1, [r7, #0]
      : _Function_base()
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	4618      	mov	r0, r3
 8004716:	f7fc ffcf 	bl	80016b8 <_ZNSt14_Function_baseC1Ev>
	if (_My_handler::_M_not_empty_function(__f))
 800471a:	463b      	mov	r3, r7
 800471c:	4618      	mov	r0, r3
 800471e:	f000 f95c 	bl	80049da <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E21_M_not_empty_functionIS3_EEbRKT_>
 8004722:	4603      	mov	r3, r0
 8004724:	2b00      	cmp	r3, #0
 8004726:	d00f      	beq.n	8004748 <_ZNSt8functionIFijjPfEEC1IZN14SignalWithAxes10get_signalEvEUljjS0_E_vvEET_+0x40>
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 8004728:	687c      	ldr	r4, [r7, #4]
 800472a:	463b      	mov	r3, r7
 800472c:	4618      	mov	r0, r3
 800472e:	f000 f95f 	bl	80049f0 <_ZSt4moveIRZN14SignalWithAxes10get_signalEvEUljjPfE_EONSt16remove_referenceIT_E4typeEOS5_>
 8004732:	4603      	mov	r3, r0
 8004734:	4619      	mov	r1, r3
 8004736:	4620      	mov	r0, r4
 8004738:	f000 f965 	bl	8004a06 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E15_M_init_functorERSt9_Any_dataOS3_>
	    _M_invoker = &_My_handler::_M_invoke;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	4a05      	ldr	r2, [pc, #20]	; (8004754 <_ZNSt8functionIFijjPfEEC1IZN14SignalWithAxes10get_signalEvEUljjS0_E_vvEET_+0x4c>)
 8004740:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	4a04      	ldr	r2, [pc, #16]	; (8004758 <_ZNSt8functionIFijjPfEEC1IZN14SignalWithAxes10get_signalEvEUljjS0_E_vvEET_+0x50>)
 8004746:	609a      	str	r2, [r3, #8]
      }
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	4618      	mov	r0, r3
 800474c:	370c      	adds	r7, #12
 800474e:	46bd      	mov	sp, r7
 8004750:	bd90      	pop	{r4, r7, pc}
 8004752:	bf00      	nop
 8004754:	08004a2b 	.word	0x08004a2b
 8004758:	08004a6d 	.word	0x08004a6d

0800475c <_ZNKSt15__uniq_ptr_implIvPFvPvEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 800475c:	b580      	push	{r7, lr}
 800475e:	b082      	sub	sp, #8
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	4618      	mov	r0, r3
 8004768:	f000 f99f 	bl	8004aaa <_ZSt3getILj0EJPvPFvS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS7_>
 800476c:	4603      	mov	r3, r0
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4618      	mov	r0, r3
 8004772:	3708      	adds	r7, #8
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}

08004778 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8004778:	b480      	push	{r7}
 800477a:	b083      	sub	sp, #12
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	4618      	mov	r0, r3
 8004784:	370c      	adds	r7, #12
 8004786:	46bd      	mov	sp, r7
 8004788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478c:	4770      	bx	lr

0800478e <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 800478e:	b580      	push	{r7, lr}
 8004790:	b084      	sub	sp, #16
 8004792:	af00      	add	r7, sp, #0
 8004794:	6078      	str	r0, [r7, #4]
 8004796:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	f7ff ffed 	bl	8004778 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 800479e:	4602      	mov	r2, r0
 80047a0:	f107 0308 	add.w	r3, r7, #8
 80047a4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80047a8:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 80047ac:	6838      	ldr	r0, [r7, #0]
 80047ae:	f7ff ffe3 	bl	8004778 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 80047b2:	4602      	mov	r2, r0
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80047ba:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80047be:	f107 0308 	add.w	r3, r7, #8
 80047c2:	4618      	mov	r0, r3
 80047c4:	f7ff ffd8 	bl	8004778 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 80047c8:	4602      	mov	r2, r0
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80047d0:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80047d4:	bf00      	nop
 80047d6:	3710      	adds	r7, #16
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd80      	pop	{r7, pc}

080047dc <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
 80047dc:	b480      	push	{r7}
 80047de:	b083      	sub	sp, #12
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	4618      	mov	r0, r3
 80047e8:	370c      	adds	r7, #12
 80047ea:	46bd      	mov	sp, r7
 80047ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f0:	4770      	bx	lr

080047f2 <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>:
    swap(_Tp& __a, _Tp& __b)
 80047f2:	b580      	push	{r7, lr}
 80047f4:	b084      	sub	sp, #16
 80047f6:	af00      	add	r7, sp, #0
 80047f8:	6078      	str	r0, [r7, #4]
 80047fa:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80047fc:	6878      	ldr	r0, [r7, #4]
 80047fe:	f7ff ffed 	bl	80047dc <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 8004802:	4603      	mov	r3, r0
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8004808:	6838      	ldr	r0, [r7, #0]
 800480a:	f7ff ffe7 	bl	80047dc <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 800480e:	4603      	mov	r3, r0
 8004810:	681a      	ldr	r2, [r3, #0]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8004816:	f107 030c 	add.w	r3, r7, #12
 800481a:	4618      	mov	r0, r3
 800481c:	f7ff ffde 	bl	80047dc <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 8004820:	4603      	mov	r3, r0
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	601a      	str	r2, [r3, #0]
    }
 8004828:	bf00      	nop
 800482a:	3710      	adds	r7, #16
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}

08004830 <_ZSt4moveIRPFiRKSt9_Any_dataOjS3_OPfEEONSt16remove_referenceIT_E4typeEOSA_>:
    move(_Tp&& __t) noexcept
 8004830:	b480      	push	{r7}
 8004832:	b083      	sub	sp, #12
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	4618      	mov	r0, r3
 800483c:	370c      	adds	r7, #12
 800483e:	46bd      	mov	sp, r7
 8004840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004844:	4770      	bx	lr

08004846 <_ZSt4swapIPFiRKSt9_Any_dataOjS3_OPfEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISC_ESt18is_move_assignableISC_EEE5valueEvE4typeERSC_SM_>:
    swap(_Tp& __a, _Tp& __b)
 8004846:	b580      	push	{r7, lr}
 8004848:	b084      	sub	sp, #16
 800484a:	af00      	add	r7, sp, #0
 800484c:	6078      	str	r0, [r7, #4]
 800484e:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8004850:	6878      	ldr	r0, [r7, #4]
 8004852:	f7ff ffed 	bl	8004830 <_ZSt4moveIRPFiRKSt9_Any_dataOjS3_OPfEEONSt16remove_referenceIT_E4typeEOSA_>
 8004856:	4603      	mov	r3, r0
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 800485c:	6838      	ldr	r0, [r7, #0]
 800485e:	f7ff ffe7 	bl	8004830 <_ZSt4moveIRPFiRKSt9_Any_dataOjS3_OPfEEONSt16remove_referenceIT_E4typeEOSA_>
 8004862:	4603      	mov	r3, r0
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 800486a:	f107 030c 	add.w	r3, r7, #12
 800486e:	4618      	mov	r0, r3
 8004870:	f7ff ffde 	bl	8004830 <_ZSt4moveIRPFiRKSt9_Any_dataOjS3_OPfEEONSt16remove_referenceIT_E4typeEOSA_>
 8004874:	4603      	mov	r3, r0
 8004876:	681a      	ldr	r2, [r3, #0]
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	601a      	str	r2, [r3, #0]
    }
 800487c:	bf00      	nop
 800487e:	3710      	adds	r7, #16
 8004880:	46bd      	mov	sp, r7
 8004882:	bd80      	pop	{r7, pc}

08004884 <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8004884:	b480      	push	{r7}
 8004886:	b083      	sub	sp, #12
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	4618      	mov	r0, r3
 8004890:	370c      	adds	r7, #12
 8004892:	46bd      	mov	sp, r7
 8004894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004898:	4770      	bx	lr

0800489a <_ZNSt5tupleIJPvPFvS0_EEEC1IRS0_S2_Lb1EEEOT_OT0_>:
	: _Inherited(__a1, __a2) { }

      template<typename _U1, typename _U2,
	       _ImplicitCtor<!__is_alloc_arg<_U1>(), _U1, _U2> = true>
	constexpr
	tuple(_U1&& __a1, _U2&& __a2)
 800489a:	b5b0      	push	{r4, r5, r7, lr}
 800489c:	b084      	sub	sp, #16
 800489e:	af00      	add	r7, sp, #0
 80048a0:	60f8      	str	r0, [r7, #12]
 80048a2:	60b9      	str	r1, [r7, #8]
 80048a4:	607a      	str	r2, [r7, #4]
	noexcept(__nothrow_constructible<_U1, _U2>())
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 80048a6:	68fc      	ldr	r4, [r7, #12]
 80048a8:	68b8      	ldr	r0, [r7, #8]
 80048aa:	f000 f90b 	bl	8004ac4 <_ZSt7forwardIRPvEOT_RNSt16remove_referenceIS2_E4typeE>
 80048ae:	4605      	mov	r5, r0
 80048b0:	6878      	ldr	r0, [r7, #4]
 80048b2:	f7ff ffe7 	bl	8004884 <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>
 80048b6:	4603      	mov	r3, r0
 80048b8:	461a      	mov	r2, r3
 80048ba:	4629      	mov	r1, r5
 80048bc:	4620      	mov	r0, r4
 80048be:	f000 f90c 	bl	8004ada <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEEC1IRS0_JS2_EvEEOT_DpOT0_>
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	4618      	mov	r0, r3
 80048c6:	3710      	adds	r7, #16
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bdb0      	pop	{r4, r5, r7, pc}

080048cc <_ZSt3getILj0EJPvPFvS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS7_>:
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }

  /// Return a reference to the ith element of a tuple.
  template<std::size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&
    get(tuple<_Elements...>& __t) noexcept
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b082      	sub	sp, #8
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	4618      	mov	r0, r3
 80048d8:	f000 f91d 	bl	8004b16 <_ZSt12__get_helperILj0EPvJPFvS0_EEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 80048dc:	4603      	mov	r3, r0
 80048de:	4618      	mov	r0, r3
 80048e0:	3708      	adds	r7, #8
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}

080048e6 <_ZNSt15__uniq_ptr_implIvPFvPvEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 80048e6:	b580      	push	{r7, lr}
 80048e8:	b082      	sub	sp, #8
 80048ea:	af00      	add	r7, sp, #0
 80048ec:	6078      	str	r0, [r7, #4]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	4618      	mov	r0, r3
 80048f2:	f000 f91c 	bl	8004b2e <_ZSt3getILj1EJPvPFvS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS7_>
 80048f6:	4603      	mov	r3, r0
 80048f8:	4618      	mov	r0, r3
 80048fa:	3708      	adds	r7, #8
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bd80      	pop	{r7, pc}

08004900 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE21_M_not_empty_functionIS2_EEbPT_>:
	  _M_not_empty_function(_Tp* __fp)
 8004900:	b480      	push	{r7}
 8004902:	b083      	sub	sp, #12
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
	  { return __fp != nullptr; }
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2b00      	cmp	r3, #0
 800490c:	bf14      	ite	ne
 800490e:	2301      	movne	r3, #1
 8004910:	2300      	moveq	r3, #0
 8004912:	b2db      	uxtb	r3, r3
 8004914:	4618      	mov	r0, r3
 8004916:	370c      	adds	r7, #12
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr

08004920 <_ZSt4moveIRPFijjPfEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8004920:	b480      	push	{r7}
 8004922:	b083      	sub	sp, #12
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	4618      	mov	r0, r3
 800492c:	370c      	adds	r7, #12
 800492e:	46bd      	mov	sp, r7
 8004930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004934:	4770      	bx	lr

08004936 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE15_M_init_functorERSt9_Any_dataOS3_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 8004936:	b590      	push	{r4, r7, lr}
 8004938:	b083      	sub	sp, #12
 800493a:	af00      	add	r7, sp, #0
 800493c:	6078      	str	r0, [r7, #4]
 800493e:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 8004940:	6838      	ldr	r0, [r7, #0]
 8004942:	f7ff ffed 	bl	8004920 <_ZSt4moveIRPFijjPfEEONSt16remove_referenceIT_E4typeEOS5_>
 8004946:	4603      	mov	r3, r0
 8004948:	4622      	mov	r2, r4
 800494a:	4619      	mov	r1, r3
 800494c:	6878      	ldr	r0, [r7, #4]
 800494e:	f000 f8fb 	bl	8004b48 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE15_M_init_functorERSt9_Any_dataOS3_St17integral_constantIbLb1EE>
 8004952:	bf00      	nop
 8004954:	370c      	adds	r7, #12
 8004956:	46bd      	mov	sp, r7
 8004958:	bd90      	pop	{r4, r7, pc}

0800495a <_ZNSt17_Function_handlerIFijjPfEPS1_E9_M_invokeERKSt9_Any_dataOjS7_OS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 800495a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800495c:	b085      	sub	sp, #20
 800495e:	af00      	add	r7, sp, #0
 8004960:	60f8      	str	r0, [r7, #12]
 8004962:	60b9      	str	r1, [r7, #8]
 8004964:	607a      	str	r2, [r7, #4]
 8004966:	603b      	str	r3, [r7, #0]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 8004968:	68f8      	ldr	r0, [r7, #12]
 800496a:	f000 f906 	bl	8004b7a <_ZNSt14_Function_base13_Base_managerIPFijjPfEE14_M_get_pointerERKSt9_Any_data>
 800496e:	4604      	mov	r4, r0
 8004970:	68b8      	ldr	r0, [r7, #8]
 8004972:	f7ff fe72 	bl	800465a <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8004976:	4605      	mov	r5, r0
 8004978:	6878      	ldr	r0, [r7, #4]
 800497a:	f7ff fe6e 	bl	800465a <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800497e:	4606      	mov	r6, r0
 8004980:	6838      	ldr	r0, [r7, #0]
 8004982:	f7ff fe75 	bl	8004670 <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 8004986:	4603      	mov	r3, r0
 8004988:	4632      	mov	r2, r6
 800498a:	4629      	mov	r1, r5
 800498c:	4620      	mov	r0, r4
 800498e:	f000 f905 	bl	8004b9c <_ZSt10__invoke_rIiRPFijjPfEJjjS0_EENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt7is_voidIT_EESt14is_convertibleINSt15__invoke_resultIT0_JDpT1_EE4typeES8_EEE5valueES8_E4typeEOSD_DpOSE_>
 8004992:	4603      	mov	r3, r0
      }
 8004994:	4618      	mov	r0, r3
 8004996:	3714      	adds	r7, #20
 8004998:	46bd      	mov	sp, r7
 800499a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800499c <_ZNSt17_Function_handlerIFijjPfEPS1_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 800499c:	b590      	push	{r4, r7, lr}
 800499e:	b085      	sub	sp, #20
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	60f8      	str	r0, [r7, #12]
 80049a4:	60b9      	str	r1, [r7, #8]
 80049a6:	4613      	mov	r3, r2
 80049a8:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 80049aa:	79fb      	ldrb	r3, [r7, #7]
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	d109      	bne.n	80049c4 <_ZNSt17_Function_handlerIFijjPfEPS1_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 80049b0:	68f8      	ldr	r0, [r7, #12]
 80049b2:	f000 f918 	bl	8004be6 <_ZNSt9_Any_data9_M_accessIPPFijjPfEEERT_v>
 80049b6:	4604      	mov	r4, r0
 80049b8:	68b8      	ldr	r0, [r7, #8]
 80049ba:	f000 f8de 	bl	8004b7a <_ZNSt14_Function_base13_Base_managerIPFijjPfEE14_M_get_pointerERKSt9_Any_data>
 80049be:	4603      	mov	r3, r0
 80049c0:	6023      	str	r3, [r4, #0]
	    break;
 80049c2:	e005      	b.n	80049d0 <_ZNSt17_Function_handlerIFijjPfEPS1_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 80049c4:	79fb      	ldrb	r3, [r7, #7]
 80049c6:	461a      	mov	r2, r3
 80049c8:	68b9      	ldr	r1, [r7, #8]
 80049ca:	68f8      	ldr	r0, [r7, #12]
 80049cc:	f000 f917 	bl	8004bfe <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>
	return false;
 80049d0:	2300      	movs	r3, #0
      }
 80049d2:	4618      	mov	r0, r3
 80049d4:	3714      	adds	r7, #20
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd90      	pop	{r4, r7, pc}

080049da <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E21_M_not_empty_functionIS3_EEbRKT_>:
	  _M_not_empty_function(const _Tp&)
 80049da:	b480      	push	{r7}
 80049dc:	b083      	sub	sp, #12
 80049de:	af00      	add	r7, sp, #0
 80049e0:	6078      	str	r0, [r7, #4]
	  { return true; }
 80049e2:	2301      	movs	r3, #1
 80049e4:	4618      	mov	r0, r3
 80049e6:	370c      	adds	r7, #12
 80049e8:	46bd      	mov	sp, r7
 80049ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ee:	4770      	bx	lr

080049f0 <_ZSt4moveIRZN14SignalWithAxes10get_signalEvEUljjPfE_EONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 80049f0:	b480      	push	{r7}
 80049f2:	b083      	sub	sp, #12
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	4618      	mov	r0, r3
 80049fc:	370c      	adds	r7, #12
 80049fe:	46bd      	mov	sp, r7
 8004a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a04:	4770      	bx	lr

08004a06 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E15_M_init_functorERSt9_Any_dataOS3_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 8004a06:	b590      	push	{r4, r7, lr}
 8004a08:	b083      	sub	sp, #12
 8004a0a:	af00      	add	r7, sp, #0
 8004a0c:	6078      	str	r0, [r7, #4]
 8004a0e:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 8004a10:	6838      	ldr	r0, [r7, #0]
 8004a12:	f7ff ffed 	bl	80049f0 <_ZSt4moveIRZN14SignalWithAxes10get_signalEvEUljjPfE_EONSt16remove_referenceIT_E4typeEOS5_>
 8004a16:	4603      	mov	r3, r0
 8004a18:	4622      	mov	r2, r4
 8004a1a:	4619      	mov	r1, r3
 8004a1c:	6878      	ldr	r0, [r7, #4]
 8004a1e:	f000 f919 	bl	8004c54 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E15_M_init_functorERSt9_Any_dataOS3_St17integral_constantIbLb1EE>
 8004a22:	bf00      	nop
 8004a24:	370c      	adds	r7, #12
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd90      	pop	{r4, r7, pc}

08004a2a <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E9_M_invokeERKSt9_Any_dataOjS8_OS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8004a2a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a2c:	b085      	sub	sp, #20
 8004a2e:	af00      	add	r7, sp, #0
 8004a30:	60f8      	str	r0, [r7, #12]
 8004a32:	60b9      	str	r1, [r7, #8]
 8004a34:	607a      	str	r2, [r7, #4]
 8004a36:	603b      	str	r3, [r7, #0]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 8004a38:	68f8      	ldr	r0, [r7, #12]
 8004a3a:	f000 f924 	bl	8004c86 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E14_M_get_pointerERKSt9_Any_data>
 8004a3e:	4604      	mov	r4, r0
 8004a40:	68b8      	ldr	r0, [r7, #8]
 8004a42:	f7ff fe0a 	bl	800465a <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8004a46:	4605      	mov	r5, r0
 8004a48:	6878      	ldr	r0, [r7, #4]
 8004a4a:	f7ff fe06 	bl	800465a <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8004a4e:	4606      	mov	r6, r0
 8004a50:	6838      	ldr	r0, [r7, #0]
 8004a52:	f7ff fe0d 	bl	8004670 <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 8004a56:	4603      	mov	r3, r0
 8004a58:	4632      	mov	r2, r6
 8004a5a:	4629      	mov	r1, r5
 8004a5c:	4620      	mov	r0, r4
 8004a5e:	f000 f923 	bl	8004ca8 <_ZSt10__invoke_rIiRZN14SignalWithAxes10get_signalEvEUljjPfE_JjjS1_EENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt7is_voidIT_EESt14is_convertibleINSt15__invoke_resultIT0_JDpT1_EE4typeES8_EEE5valueES8_E4typeEOSD_DpOSE_>
 8004a62:	4603      	mov	r3, r0
      }
 8004a64:	4618      	mov	r0, r3
 8004a66:	3714      	adds	r7, #20
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004a6c <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 8004a6c:	b590      	push	{r4, r7, lr}
 8004a6e:	b085      	sub	sp, #20
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	60f8      	str	r0, [r7, #12]
 8004a74:	60b9      	str	r1, [r7, #8]
 8004a76:	4613      	mov	r3, r2
 8004a78:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 8004a7a:	79fb      	ldrb	r3, [r7, #7]
 8004a7c:	2b01      	cmp	r3, #1
 8004a7e:	d109      	bne.n	8004a94 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8004a80:	68f8      	ldr	r0, [r7, #12]
 8004a82:	f000 f936 	bl	8004cf2 <_ZNSt9_Any_data9_M_accessIPZN14SignalWithAxes10get_signalEvEUljjPfE_EERT_v>
 8004a86:	4604      	mov	r4, r0
 8004a88:	68b8      	ldr	r0, [r7, #8]
 8004a8a:	f000 f8fc 	bl	8004c86 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E14_M_get_pointerERKSt9_Any_data>
 8004a8e:	4603      	mov	r3, r0
 8004a90:	6023      	str	r3, [r4, #0]
	    break;
 8004a92:	e005      	b.n	8004aa0 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 8004a94:	79fb      	ldrb	r3, [r7, #7]
 8004a96:	461a      	mov	r2, r3
 8004a98:	68b9      	ldr	r1, [r7, #8]
 8004a9a:	68f8      	ldr	r0, [r7, #12]
 8004a9c:	f000 f935 	bl	8004d0a <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>
	return false;
 8004aa0:	2300      	movs	r3, #0
      }
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3714      	adds	r7, #20
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd90      	pop	{r4, r7, pc}

08004aaa <_ZSt3getILj0EJPvPFvS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS7_>:

  /// Return a const reference to the ith element of a const tuple.
  template<std::size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
    get(const tuple<_Elements...>& __t) noexcept
 8004aaa:	b580      	push	{r7, lr}
 8004aac:	b082      	sub	sp, #8
 8004aae:	af00      	add	r7, sp, #0
 8004ab0:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	f000 f953 	bl	8004d60 <_ZSt12__get_helperILj0EPvJPFvS0_EEERKT0_RKSt11_Tuple_implIXT_EJS3_DpT1_EE>
 8004aba:	4603      	mov	r3, r0
 8004abc:	4618      	mov	r0, r3
 8004abe:	3708      	adds	r7, #8
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}

08004ac4 <_ZSt7forwardIRPvEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8004ac4:	b480      	push	{r7}
 8004ac6:	b083      	sub	sp, #12
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	4618      	mov	r0, r3
 8004ad0:	370c      	adds	r7, #12
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad8:	4770      	bx	lr

08004ada <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEEC1IRS0_JS2_EvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 8004ada:	b590      	push	{r4, r7, lr}
 8004adc:	b085      	sub	sp, #20
 8004ade:	af00      	add	r7, sp, #0
 8004ae0:	60f8      	str	r0, [r7, #12]
 8004ae2:	60b9      	str	r1, [r7, #8]
 8004ae4:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head)) { }
 8004ae6:	68fc      	ldr	r4, [r7, #12]
 8004ae8:	6878      	ldr	r0, [r7, #4]
 8004aea:	f7ff fecb 	bl	8004884 <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>
 8004aee:	4603      	mov	r3, r0
 8004af0:	4619      	mov	r1, r3
 8004af2:	4620      	mov	r0, r4
 8004af4:	f000 f940 	bl	8004d78 <_ZNSt11_Tuple_implILj1EJPFvPvEEEC1IS2_EEOT_>
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	1d1c      	adds	r4, r3, #4
 8004afc:	68b8      	ldr	r0, [r7, #8]
 8004afe:	f7ff ffe1 	bl	8004ac4 <_ZSt7forwardIRPvEOT_RNSt16remove_referenceIS2_E4typeE>
 8004b02:	4603      	mov	r3, r0
 8004b04:	4619      	mov	r1, r3
 8004b06:	4620      	mov	r0, r4
 8004b08:	f000 f949 	bl	8004d9e <_ZNSt10_Head_baseILj0EPvLb0EEC1IRS0_EEOT_>
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	4618      	mov	r0, r3
 8004b10:	3714      	adds	r7, #20
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd90      	pop	{r4, r7, pc}

08004b16 <_ZSt12__get_helperILj0EPvJPFvS0_EEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8004b16:	b580      	push	{r7, lr}
 8004b18:	b082      	sub	sp, #8
 8004b1a:	af00      	add	r7, sp, #0
 8004b1c:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f000 f94e 	bl	8004dc0 <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEE7_M_headERS3_>
 8004b24:	4603      	mov	r3, r0
 8004b26:	4618      	mov	r0, r3
 8004b28:	3708      	adds	r7, #8
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}

08004b2e <_ZSt3getILj1EJPvPFvS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS7_>:
    get(tuple<_Elements...>& __t) noexcept
 8004b2e:	b580      	push	{r7, lr}
 8004b30:	b082      	sub	sp, #8
 8004b32:	af00      	add	r7, sp, #0
 8004b34:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	4618      	mov	r0, r3
 8004b3a:	f000 f94f 	bl	8004ddc <_ZSt12__get_helperILj1EPFvPvEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 8004b3e:	4603      	mov	r3, r0
 8004b40:	4618      	mov	r0, r3
 8004b42:	3708      	adds	r7, #8
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}

08004b48 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE15_M_init_functorERSt9_Any_dataOS3_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 8004b48:	b590      	push	{r4, r7, lr}
 8004b4a:	b085      	sub	sp, #20
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	60f8      	str	r0, [r7, #12]
 8004b50:	60b9      	str	r1, [r7, #8]
 8004b52:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 8004b54:	68b8      	ldr	r0, [r7, #8]
 8004b56:	f7ff fee3 	bl	8004920 <_ZSt4moveIRPFijjPfEEONSt16remove_referenceIT_E4typeEOS5_>
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	681c      	ldr	r4, [r3, #0]
 8004b5e:	68f8      	ldr	r0, [r7, #12]
 8004b60:	f7fc fd94 	bl	800168c <_ZNSt9_Any_data9_M_accessEv>
 8004b64:	4603      	mov	r3, r0
 8004b66:	4619      	mov	r1, r3
 8004b68:	2004      	movs	r0, #4
 8004b6a:	f7fc fd1d 	bl	80015a8 <_ZnwjPv>
 8004b6e:	4603      	mov	r3, r0
 8004b70:	601c      	str	r4, [r3, #0]
 8004b72:	bf00      	nop
 8004b74:	3714      	adds	r7, #20
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd90      	pop	{r4, r7, pc}

08004b7a <_ZNSt14_Function_base13_Base_managerIPFijjPfEE14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 8004b7a:	b580      	push	{r7, lr}
 8004b7c:	b084      	sub	sp, #16
 8004b7e:	af00      	add	r7, sp, #0
 8004b80:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f000 f936 	bl	8004df4 <_ZNKSt9_Any_data9_M_accessIPFijjPfEEERKT_v>
 8004b88:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 8004b8a:	68f8      	ldr	r0, [r7, #12]
 8004b8c:	f000 f93e 	bl	8004e0c <_ZSt11__addressofIKPFijjPfEEPT_RS4_>
 8004b90:	4603      	mov	r3, r0
 8004b92:	bf00      	nop
	}
 8004b94:	4618      	mov	r0, r3
 8004b96:	3710      	adds	r7, #16
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}

08004b9c <_ZSt10__invoke_rIiRPFijjPfEJjjS0_EENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt7is_voidIT_EESt14is_convertibleINSt15__invoke_resultIT0_JDpT1_EE4typeES8_EEE5valueES8_E4typeEOSD_DpOSE_>:
    >;

  // INVOKE<R>: Invoke a callable object and convert the result to R.
  template<typename _Res, typename _Callable, typename... _Args>
    constexpr __can_invoke_as_nonvoid<_Res, _Callable, _Args...>
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 8004b9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ba0:	b086      	sub	sp, #24
 8004ba2:	af02      	add	r7, sp, #8
 8004ba4:	60f8      	str	r0, [r7, #12]
 8004ba6:	60b9      	str	r1, [r7, #8]
 8004ba8:	607a      	str	r2, [r7, #4]
 8004baa:	603b      	str	r3, [r7, #0]
    {
      using __result = __invoke_result<_Callable, _Args...>;
      using __type = typename __result::type;
      using __tag = typename __result::__invoke_type;
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8004bac:	68f8      	ldr	r0, [r7, #12]
 8004bae:	f000 f938 	bl	8004e22 <_ZSt7forwardIRPFijjPfEEOT_RNSt16remove_referenceIS4_E4typeE>
 8004bb2:	4604      	mov	r4, r0
 8004bb4:	68b8      	ldr	r0, [r7, #8]
 8004bb6:	f7ff fd50 	bl	800465a <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8004bba:	4605      	mov	r5, r0
 8004bbc:	6878      	ldr	r0, [r7, #4]
 8004bbe:	f7ff fd4c 	bl	800465a <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8004bc2:	4606      	mov	r6, r0
 8004bc4:	6838      	ldr	r0, [r7, #0]
 8004bc6:	f7ff fd53 	bl	8004670 <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	9300      	str	r3, [sp, #0]
 8004bce:	4633      	mov	r3, r6
 8004bd0:	462a      	mov	r2, r5
 8004bd2:	4621      	mov	r1, r4
 8004bd4:	4640      	mov	r0, r8
 8004bd6:	f000 f92f 	bl	8004e38 <_ZSt13__invoke_implIiRPFijjPfEJjjS0_EET_St14__invoke_otherOT0_DpOT1_>
 8004bda:	4603      	mov	r3, r0
					std::forward<_Args>(__args)...);
    }
 8004bdc:	4618      	mov	r0, r3
 8004bde:	3710      	adds	r7, #16
 8004be0:	46bd      	mov	sp, r7
 8004be2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004be6 <_ZNSt9_Any_data9_M_accessIPPFijjPfEEERT_v>:
      _M_access()
 8004be6:	b580      	push	{r7, lr}
 8004be8:	b082      	sub	sp, #8
 8004bea:	af00      	add	r7, sp, #0
 8004bec:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f7fc fd4c 	bl	800168c <_ZNSt9_Any_data9_M_accessEv>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	3708      	adds	r7, #8
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}

08004bfe <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8004bfe:	b5b0      	push	{r4, r5, r7, lr}
 8004c00:	b084      	sub	sp, #16
 8004c02:	af00      	add	r7, sp, #0
 8004c04:	60f8      	str	r0, [r7, #12]
 8004c06:	60b9      	str	r1, [r7, #8]
 8004c08:	4613      	mov	r3, r2
 8004c0a:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 8004c0c:	79fb      	ldrb	r3, [r7, #7]
 8004c0e:	2b03      	cmp	r3, #3
 8004c10:	d016      	beq.n	8004c40 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x42>
 8004c12:	2b03      	cmp	r3, #3
 8004c14:	dc19      	bgt.n	8004c4a <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
 8004c16:	2b01      	cmp	r3, #1
 8004c18:	d002      	beq.n	8004c20 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x22>
 8004c1a:	2b02      	cmp	r3, #2
 8004c1c:	d00a      	beq.n	8004c34 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x36>
 8004c1e:	e014      	b.n	8004c4a <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8004c20:	68f8      	ldr	r0, [r7, #12]
 8004c22:	f7ff ffe0 	bl	8004be6 <_ZNSt9_Any_data9_M_accessIPPFijjPfEEERT_v>
 8004c26:	4604      	mov	r4, r0
 8004c28:	68b8      	ldr	r0, [r7, #8]
 8004c2a:	f7ff ffa6 	bl	8004b7a <_ZNSt14_Function_base13_Base_managerIPFijjPfEE14_M_get_pointerERKSt9_Any_data>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	6023      	str	r3, [r4, #0]
	      break;
 8004c32:	e00a      	b.n	8004c4a <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
	      _M_clone(__dest, __source, _Local_storage());
 8004c34:	462a      	mov	r2, r5
 8004c36:	68b9      	ldr	r1, [r7, #8]
 8004c38:	68f8      	ldr	r0, [r7, #12]
 8004c3a:	f000 f921 	bl	8004e80 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE8_M_cloneERSt9_Any_dataRKS5_St17integral_constantIbLb1EE>
	      break;
 8004c3e:	e004      	b.n	8004c4a <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
	      _M_destroy(__dest, _Local_storage());
 8004c40:	4621      	mov	r1, r4
 8004c42:	68f8      	ldr	r0, [r7, #12]
 8004c44:	f000 f935 	bl	8004eb2 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 8004c48:	bf00      	nop
	  return false;
 8004c4a:	2300      	movs	r3, #0
	}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	3710      	adds	r7, #16
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bdb0      	pop	{r4, r5, r7, pc}

08004c54 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E15_M_init_functorERSt9_Any_dataOS3_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 8004c54:	b590      	push	{r4, r7, lr}
 8004c56:	b085      	sub	sp, #20
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	60f8      	str	r0, [r7, #12]
 8004c5c:	60b9      	str	r1, [r7, #8]
 8004c5e:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 8004c60:	68b8      	ldr	r0, [r7, #8]
 8004c62:	f7ff fec5 	bl	80049f0 <_ZSt4moveIRZN14SignalWithAxes10get_signalEvEUljjPfE_EONSt16remove_referenceIT_E4typeEOS5_>
 8004c66:	4604      	mov	r4, r0
 8004c68:	68f8      	ldr	r0, [r7, #12]
 8004c6a:	f7fc fd0f 	bl	800168c <_ZNSt9_Any_data9_M_accessEv>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	4619      	mov	r1, r3
 8004c72:	2004      	movs	r0, #4
 8004c74:	f7fc fc98 	bl	80015a8 <_ZnwjPv>
 8004c78:	4602      	mov	r2, r0
 8004c7a:	6823      	ldr	r3, [r4, #0]
 8004c7c:	6013      	str	r3, [r2, #0]
 8004c7e:	bf00      	nop
 8004c80:	3714      	adds	r7, #20
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd90      	pop	{r4, r7, pc}

08004c86 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 8004c86:	b580      	push	{r7, lr}
 8004c88:	b084      	sub	sp, #16
 8004c8a:	af00      	add	r7, sp, #0
 8004c8c:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f000 f91b 	bl	8004eca <_ZNKSt9_Any_data9_M_accessIZN14SignalWithAxes10get_signalEvEUljjPfE_EERKT_v>
 8004c94:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 8004c96:	68f8      	ldr	r0, [r7, #12]
 8004c98:	f000 f923 	bl	8004ee2 <_ZSt11__addressofIKZN14SignalWithAxes10get_signalEvEUljjPfE_EPT_RS4_>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	bf00      	nop
	}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	3710      	adds	r7, #16
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}

08004ca8 <_ZSt10__invoke_rIiRZN14SignalWithAxes10get_signalEvEUljjPfE_JjjS1_EENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt7is_voidIT_EESt14is_convertibleINSt15__invoke_resultIT0_JDpT1_EE4typeES8_EEE5valueES8_E4typeEOSD_DpOSE_>:
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 8004ca8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004cac:	b086      	sub	sp, #24
 8004cae:	af02      	add	r7, sp, #8
 8004cb0:	60f8      	str	r0, [r7, #12]
 8004cb2:	60b9      	str	r1, [r7, #8]
 8004cb4:	607a      	str	r2, [r7, #4]
 8004cb6:	603b      	str	r3, [r7, #0]
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8004cb8:	68f8      	ldr	r0, [r7, #12]
 8004cba:	f000 f91d 	bl	8004ef8 <_ZSt7forwardIRZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS4_E4typeE>
 8004cbe:	4604      	mov	r4, r0
 8004cc0:	68b8      	ldr	r0, [r7, #8]
 8004cc2:	f7ff fcca 	bl	800465a <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8004cc6:	4605      	mov	r5, r0
 8004cc8:	6878      	ldr	r0, [r7, #4]
 8004cca:	f7ff fcc6 	bl	800465a <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8004cce:	4606      	mov	r6, r0
 8004cd0:	6838      	ldr	r0, [r7, #0]
 8004cd2:	f7ff fccd 	bl	8004670 <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	9300      	str	r3, [sp, #0]
 8004cda:	4633      	mov	r3, r6
 8004cdc:	462a      	mov	r2, r5
 8004cde:	4621      	mov	r1, r4
 8004ce0:	4640      	mov	r0, r8
 8004ce2:	f000 f914 	bl	8004f0e <_ZSt13__invoke_implIiRZN14SignalWithAxes10get_signalEvEUljjPfE_JjjS1_EET_St14__invoke_otherOT0_DpOT1_>
 8004ce6:	4603      	mov	r3, r0
    }
 8004ce8:	4618      	mov	r0, r3
 8004cea:	3710      	adds	r7, #16
 8004cec:	46bd      	mov	sp, r7
 8004cee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004cf2 <_ZNSt9_Any_data9_M_accessIPZN14SignalWithAxes10get_signalEvEUljjPfE_EERT_v>:
      _M_access()
 8004cf2:	b580      	push	{r7, lr}
 8004cf4:	b082      	sub	sp, #8
 8004cf6:	af00      	add	r7, sp, #0
 8004cf8:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f7fc fcc6 	bl	800168c <_ZNSt9_Any_data9_M_accessEv>
 8004d00:	4603      	mov	r3, r0
 8004d02:	4618      	mov	r0, r3
 8004d04:	3708      	adds	r7, #8
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}

08004d0a <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8004d0a:	b5b0      	push	{r4, r5, r7, lr}
 8004d0c:	b084      	sub	sp, #16
 8004d0e:	af00      	add	r7, sp, #0
 8004d10:	60f8      	str	r0, [r7, #12]
 8004d12:	60b9      	str	r1, [r7, #8]
 8004d14:	4613      	mov	r3, r2
 8004d16:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 8004d18:	79fb      	ldrb	r3, [r7, #7]
 8004d1a:	2b03      	cmp	r3, #3
 8004d1c:	d016      	beq.n	8004d4c <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x42>
 8004d1e:	2b03      	cmp	r3, #3
 8004d20:	dc19      	bgt.n	8004d56 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
 8004d22:	2b01      	cmp	r3, #1
 8004d24:	d002      	beq.n	8004d2c <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x22>
 8004d26:	2b02      	cmp	r3, #2
 8004d28:	d00a      	beq.n	8004d40 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x36>
 8004d2a:	e014      	b.n	8004d56 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8004d2c:	68f8      	ldr	r0, [r7, #12]
 8004d2e:	f7ff ffe0 	bl	8004cf2 <_ZNSt9_Any_data9_M_accessIPZN14SignalWithAxes10get_signalEvEUljjPfE_EERT_v>
 8004d32:	4604      	mov	r4, r0
 8004d34:	68b8      	ldr	r0, [r7, #8]
 8004d36:	f7ff ffa6 	bl	8004c86 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E14_M_get_pointerERKSt9_Any_data>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	6023      	str	r3, [r4, #0]
	      break;
 8004d3e:	e00a      	b.n	8004d56 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
	      _M_clone(__dest, __source, _Local_storage());
 8004d40:	462a      	mov	r2, r5
 8004d42:	68b9      	ldr	r1, [r7, #8]
 8004d44:	68f8      	ldr	r0, [r7, #12]
 8004d46:	f000 f906 	bl	8004f56 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E8_M_cloneERSt9_Any_dataRKS5_St17integral_constantIbLb1EE>
	      break;
 8004d4a:	e004      	b.n	8004d56 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
	      _M_destroy(__dest, _Local_storage());
 8004d4c:	4621      	mov	r1, r4
 8004d4e:	68f8      	ldr	r0, [r7, #12]
 8004d50:	f000 f91a 	bl	8004f88 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 8004d54:	bf00      	nop
	  return false;
 8004d56:	2300      	movs	r3, #0
	}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	3710      	adds	r7, #16
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bdb0      	pop	{r4, r5, r7, pc}

08004d60 <_ZSt12__get_helperILj0EPvJPFvS0_EEERKT0_RKSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b082      	sub	sp, #8
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8004d68:	6878      	ldr	r0, [r7, #4]
 8004d6a:	f000 f919 	bl	8004fa0 <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEE7_M_headERKS3_>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	4618      	mov	r0, r3
 8004d72:	3708      	adds	r7, #8
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}

08004d78 <_ZNSt11_Tuple_implILj1EJPFvPvEEEC1IS2_EEOT_>:
        constexpr _Tuple_impl(_UHead&& __head)
 8004d78:	b590      	push	{r4, r7, lr}
 8004d7a:	b083      	sub	sp, #12
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
 8004d80:	6039      	str	r1, [r7, #0]
	: _Base(std::forward<_UHead>(__head)) { }
 8004d82:	687c      	ldr	r4, [r7, #4]
 8004d84:	6838      	ldr	r0, [r7, #0]
 8004d86:	f7ff fd7d 	bl	8004884 <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	4619      	mov	r1, r3
 8004d8e:	4620      	mov	r0, r4
 8004d90:	f000 f914 	bl	8004fbc <_ZNSt10_Head_baseILj1EPFvPvELb0EEC1IS2_EEOT_>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	4618      	mov	r0, r3
 8004d98:	370c      	adds	r7, #12
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd90      	pop	{r4, r7, pc}

08004d9e <_ZNSt10_Head_baseILj0EPvLb0EEC1IRS0_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8004d9e:	b580      	push	{r7, lr}
 8004da0:	b082      	sub	sp, #8
 8004da2:	af00      	add	r7, sp, #0
 8004da4:	6078      	str	r0, [r7, #4]
 8004da6:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8004da8:	6838      	ldr	r0, [r7, #0]
 8004daa:	f7ff fe8b 	bl	8004ac4 <_ZSt7forwardIRPvEOT_RNSt16remove_referenceIS2_E4typeE>
 8004dae:	4603      	mov	r3, r0
 8004db0:	681a      	ldr	r2, [r3, #0]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	601a      	str	r2, [r3, #0]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	4618      	mov	r0, r3
 8004dba:	3708      	adds	r7, #8
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd80      	pop	{r7, pc}

08004dc0 <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b082      	sub	sp, #8
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	3304      	adds	r3, #4
 8004dcc:	4618      	mov	r0, r3
 8004dce:	f000 f906 	bl	8004fde <_ZNSt10_Head_baseILj0EPvLb0EE7_M_headERS1_>
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	3708      	adds	r7, #8
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}

08004ddc <_ZSt12__get_helperILj1EPFvPvEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b082      	sub	sp, #8
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8004de4:	6878      	ldr	r0, [r7, #4]
 8004de6:	f000 f905 	bl	8004ff4 <_ZNSt11_Tuple_implILj1EJPFvPvEEE7_M_headERS3_>
 8004dea:	4603      	mov	r3, r0
 8004dec:	4618      	mov	r0, r3
 8004dee:	3708      	adds	r7, #8
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}

08004df4 <_ZNKSt9_Any_data9_M_accessIPFijjPfEEERKT_v>:
      _M_access() const
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b082      	sub	sp, #8
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 8004dfc:	6878      	ldr	r0, [r7, #4]
 8004dfe:	f7fc fc50 	bl	80016a2 <_ZNKSt9_Any_data9_M_accessEv>
 8004e02:	4603      	mov	r3, r0
 8004e04:	4618      	mov	r0, r3
 8004e06:	3708      	adds	r7, #8
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bd80      	pop	{r7, pc}

08004e0c <_ZSt11__addressofIKPFijjPfEEPT_RS4_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8004e0c:	b480      	push	{r7}
 8004e0e:	b083      	sub	sp, #12
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	4618      	mov	r0, r3
 8004e18:	370c      	adds	r7, #12
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e20:	4770      	bx	lr

08004e22 <_ZSt7forwardIRPFijjPfEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8004e22:	b480      	push	{r7}
 8004e24:	b083      	sub	sp, #12
 8004e26:	af00      	add	r7, sp, #0
 8004e28:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	370c      	adds	r7, #12
 8004e30:	46bd      	mov	sp, r7
 8004e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e36:	4770      	bx	lr

08004e38 <_ZSt13__invoke_implIiRPFijjPfEJjjS0_EET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8004e38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e3a:	b085      	sub	sp, #20
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	7338      	strb	r0, [r7, #12]
 8004e40:	60b9      	str	r1, [r7, #8]
 8004e42:	607a      	str	r2, [r7, #4]
 8004e44:	603b      	str	r3, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8004e46:	68b8      	ldr	r0, [r7, #8]
 8004e48:	f7ff ffeb 	bl	8004e22 <_ZSt7forwardIRPFijjPfEEOT_RNSt16remove_referenceIS4_E4typeE>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	681c      	ldr	r4, [r3, #0]
 8004e50:	6878      	ldr	r0, [r7, #4]
 8004e52:	f7ff fc02 	bl	800465a <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8004e56:	4603      	mov	r3, r0
 8004e58:	681d      	ldr	r5, [r3, #0]
 8004e5a:	6838      	ldr	r0, [r7, #0]
 8004e5c:	f7ff fbfd 	bl	800465a <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8004e60:	4603      	mov	r3, r0
 8004e62:	681e      	ldr	r6, [r3, #0]
 8004e64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e66:	f7ff fc03 	bl	8004670 <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	461a      	mov	r2, r3
 8004e70:	4631      	mov	r1, r6
 8004e72:	4628      	mov	r0, r5
 8004e74:	47a0      	blx	r4
 8004e76:	4603      	mov	r3, r0
 8004e78:	4618      	mov	r0, r3
 8004e7a:	3714      	adds	r7, #20
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004e80 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE8_M_cloneERSt9_Any_dataRKS5_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 8004e80:	b590      	push	{r4, r7, lr}
 8004e82:	b085      	sub	sp, #20
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	60f8      	str	r0, [r7, #12]
 8004e88:	60b9      	str	r1, [r7, #8]
 8004e8a:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 8004e8c:	68b8      	ldr	r0, [r7, #8]
 8004e8e:	f7ff ffb1 	bl	8004df4 <_ZNKSt9_Any_data9_M_accessIPFijjPfEEERKT_v>
 8004e92:	4603      	mov	r3, r0
 8004e94:	681c      	ldr	r4, [r3, #0]
 8004e96:	68f8      	ldr	r0, [r7, #12]
 8004e98:	f7fc fbf8 	bl	800168c <_ZNSt9_Any_data9_M_accessEv>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	4619      	mov	r1, r3
 8004ea0:	2004      	movs	r0, #4
 8004ea2:	f7fc fb81 	bl	80015a8 <_ZnwjPv>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	601c      	str	r4, [r3, #0]
	}
 8004eaa:	bf00      	nop
 8004eac:	3714      	adds	r7, #20
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd90      	pop	{r4, r7, pc}

08004eb2 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 8004eb2:	b580      	push	{r7, lr}
 8004eb4:	b082      	sub	sp, #8
 8004eb6:	af00      	add	r7, sp, #0
 8004eb8:	6078      	str	r0, [r7, #4]
 8004eba:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 8004ebc:	6878      	ldr	r0, [r7, #4]
 8004ebe:	f000 f8a6 	bl	800500e <_ZNSt9_Any_data9_M_accessIPFijjPfEEERT_v>
	}
 8004ec2:	bf00      	nop
 8004ec4:	3708      	adds	r7, #8
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}

08004eca <_ZNKSt9_Any_data9_M_accessIZN14SignalWithAxes10get_signalEvEUljjPfE_EERKT_v>:
      _M_access() const
 8004eca:	b580      	push	{r7, lr}
 8004ecc:	b082      	sub	sp, #8
 8004ece:	af00      	add	r7, sp, #0
 8004ed0:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	f7fc fbe5 	bl	80016a2 <_ZNKSt9_Any_data9_M_accessEv>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	4618      	mov	r0, r3
 8004edc:	3708      	adds	r7, #8
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}

08004ee2 <_ZSt11__addressofIKZN14SignalWithAxes10get_signalEvEUljjPfE_EPT_RS4_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8004ee2:	b480      	push	{r7}
 8004ee4:	b083      	sub	sp, #12
 8004ee6:	af00      	add	r7, sp, #0
 8004ee8:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	4618      	mov	r0, r3
 8004eee:	370c      	adds	r7, #12
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef6:	4770      	bx	lr

08004ef8 <_ZSt7forwardIRZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8004ef8:	b480      	push	{r7}
 8004efa:	b083      	sub	sp, #12
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	4618      	mov	r0, r3
 8004f04:	370c      	adds	r7, #12
 8004f06:	46bd      	mov	sp, r7
 8004f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0c:	4770      	bx	lr

08004f0e <_ZSt13__invoke_implIiRZN14SignalWithAxes10get_signalEvEUljjPfE_JjjS1_EET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8004f0e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f10:	b085      	sub	sp, #20
 8004f12:	af00      	add	r7, sp, #0
 8004f14:	7338      	strb	r0, [r7, #12]
 8004f16:	60b9      	str	r1, [r7, #8]
 8004f18:	607a      	str	r2, [r7, #4]
 8004f1a:	603b      	str	r3, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8004f1c:	68b8      	ldr	r0, [r7, #8]
 8004f1e:	f7ff ffeb 	bl	8004ef8 <_ZSt7forwardIRZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS4_E4typeE>
 8004f22:	4606      	mov	r6, r0
 8004f24:	6878      	ldr	r0, [r7, #4]
 8004f26:	f7ff fb98 	bl	800465a <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	681c      	ldr	r4, [r3, #0]
 8004f2e:	6838      	ldr	r0, [r7, #0]
 8004f30:	f7ff fb93 	bl	800465a <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8004f34:	4603      	mov	r3, r0
 8004f36:	681d      	ldr	r5, [r3, #0]
 8004f38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f3a:	f7ff fb99 	bl	8004670 <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 8004f3e:	4603      	mov	r3, r0
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	462a      	mov	r2, r5
 8004f44:	4621      	mov	r1, r4
 8004f46:	4630      	mov	r0, r6
 8004f48:	f7fd ffd5 	bl	8002ef6 <_ZZN14SignalWithAxes10get_signalEvENKUljjPfE_clEjjS0_>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	4618      	mov	r0, r3
 8004f50:	3714      	adds	r7, #20
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004f56 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E8_M_cloneERSt9_Any_dataRKS5_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 8004f56:	b590      	push	{r4, r7, lr}
 8004f58:	b085      	sub	sp, #20
 8004f5a:	af00      	add	r7, sp, #0
 8004f5c:	60f8      	str	r0, [r7, #12]
 8004f5e:	60b9      	str	r1, [r7, #8]
 8004f60:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 8004f62:	68b8      	ldr	r0, [r7, #8]
 8004f64:	f7ff ffb1 	bl	8004eca <_ZNKSt9_Any_data9_M_accessIZN14SignalWithAxes10get_signalEvEUljjPfE_EERKT_v>
 8004f68:	4604      	mov	r4, r0
 8004f6a:	68f8      	ldr	r0, [r7, #12]
 8004f6c:	f7fc fb8e 	bl	800168c <_ZNSt9_Any_data9_M_accessEv>
 8004f70:	4603      	mov	r3, r0
 8004f72:	4619      	mov	r1, r3
 8004f74:	2004      	movs	r0, #4
 8004f76:	f7fc fb17 	bl	80015a8 <_ZnwjPv>
 8004f7a:	4602      	mov	r2, r0
 8004f7c:	6823      	ldr	r3, [r4, #0]
 8004f7e:	6013      	str	r3, [r2, #0]
	}
 8004f80:	bf00      	nop
 8004f82:	3714      	adds	r7, #20
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd90      	pop	{r4, r7, pc}

08004f88 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b082      	sub	sp, #8
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
 8004f90:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	f000 f847 	bl	8005026 <_ZNSt9_Any_data9_M_accessIZN14SignalWithAxes10get_signalEvEUljjPfE_EERT_v>
	}
 8004f98:	bf00      	nop
 8004f9a:	3708      	adds	r7, #8
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}

08004fa0 <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEE7_M_headERKS3_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b082      	sub	sp, #8
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	3304      	adds	r3, #4
 8004fac:	4618      	mov	r0, r3
 8004fae:	f000 f846 	bl	800503e <_ZNSt10_Head_baseILj0EPvLb0EE7_M_headERKS1_>
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	3708      	adds	r7, #8
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bd80      	pop	{r7, pc}

08004fbc <_ZNSt10_Head_baseILj1EPFvPvELb0EEC1IS2_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b082      	sub	sp, #8
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
 8004fc4:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8004fc6:	6838      	ldr	r0, [r7, #0]
 8004fc8:	f7ff fc5c 	bl	8004884 <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	681a      	ldr	r2, [r3, #0]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	601a      	str	r2, [r3, #0]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3708      	adds	r7, #8
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}

08004fde <_ZNSt10_Head_baseILj0EPvLb0EE7_M_headERS1_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8004fde:	b480      	push	{r7}
 8004fe0:	b083      	sub	sp, #12
 8004fe2:	af00      	add	r7, sp, #0
 8004fe4:	6078      	str	r0, [r7, #4]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	4618      	mov	r0, r3
 8004fea:	370c      	adds	r7, #12
 8004fec:	46bd      	mov	sp, r7
 8004fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff2:	4770      	bx	lr

08004ff4 <_ZNSt11_Tuple_implILj1EJPFvPvEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b082      	sub	sp, #8
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	4618      	mov	r0, r3
 8005000:	f000 f828 	bl	8005054 <_ZNSt10_Head_baseILj1EPFvPvELb0EE7_M_headERS3_>
 8005004:	4603      	mov	r3, r0
 8005006:	4618      	mov	r0, r3
 8005008:	3708      	adds	r7, #8
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}

0800500e <_ZNSt9_Any_data9_M_accessIPFijjPfEEERT_v>:
      _M_access()
 800500e:	b580      	push	{r7, lr}
 8005010:	b082      	sub	sp, #8
 8005012:	af00      	add	r7, sp, #0
 8005014:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f7fc fb38 	bl	800168c <_ZNSt9_Any_data9_M_accessEv>
 800501c:	4603      	mov	r3, r0
 800501e:	4618      	mov	r0, r3
 8005020:	3708      	adds	r7, #8
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}

08005026 <_ZNSt9_Any_data9_M_accessIZN14SignalWithAxes10get_signalEvEUljjPfE_EERT_v>:
      _M_access()
 8005026:	b580      	push	{r7, lr}
 8005028:	b082      	sub	sp, #8
 800502a:	af00      	add	r7, sp, #0
 800502c:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f7fc fb2c 	bl	800168c <_ZNSt9_Any_data9_M_accessEv>
 8005034:	4603      	mov	r3, r0
 8005036:	4618      	mov	r0, r3
 8005038:	3708      	adds	r7, #8
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}

0800503e <_ZNSt10_Head_baseILj0EPvLb0EE7_M_headERKS1_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 800503e:	b480      	push	{r7}
 8005040:	b083      	sub	sp, #12
 8005042:	af00      	add	r7, sp, #0
 8005044:	6078      	str	r0, [r7, #4]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	4618      	mov	r0, r3
 800504a:	370c      	adds	r7, #12
 800504c:	46bd      	mov	sp, r7
 800504e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005052:	4770      	bx	lr

08005054 <_ZNSt10_Head_baseILj1EPFvPvELb0EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8005054:	b480      	push	{r7}
 8005056:	b083      	sub	sp, #12
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	4618      	mov	r0, r3
 8005060:	370c      	adds	r7, #12
 8005062:	46bd      	mov	sp, r7
 8005064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005068:	4770      	bx	lr
	...

0800506c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b082      	sub	sp, #8
 8005070:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005072:	2300      	movs	r3, #0
 8005074:	607b      	str	r3, [r7, #4]
 8005076:	4b10      	ldr	r3, [pc, #64]	; (80050b8 <HAL_MspInit+0x4c>)
 8005078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800507a:	4a0f      	ldr	r2, [pc, #60]	; (80050b8 <HAL_MspInit+0x4c>)
 800507c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005080:	6453      	str	r3, [r2, #68]	; 0x44
 8005082:	4b0d      	ldr	r3, [pc, #52]	; (80050b8 <HAL_MspInit+0x4c>)
 8005084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005086:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800508a:	607b      	str	r3, [r7, #4]
 800508c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800508e:	2300      	movs	r3, #0
 8005090:	603b      	str	r3, [r7, #0]
 8005092:	4b09      	ldr	r3, [pc, #36]	; (80050b8 <HAL_MspInit+0x4c>)
 8005094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005096:	4a08      	ldr	r2, [pc, #32]	; (80050b8 <HAL_MspInit+0x4c>)
 8005098:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800509c:	6413      	str	r3, [r2, #64]	; 0x40
 800509e:	4b06      	ldr	r3, [pc, #24]	; (80050b8 <HAL_MspInit+0x4c>)
 80050a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050a6:	603b      	str	r3, [r7, #0]
 80050a8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80050aa:	2007      	movs	r0, #7
 80050ac:	f000 fb14 	bl	80056d8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80050b0:	bf00      	nop
 80050b2:	3708      	adds	r7, #8
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd80      	pop	{r7, pc}
 80050b8:	40023800 	.word	0x40023800

080050bc <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80050bc:	b480      	push	{r7}
 80050be:	b085      	sub	sp, #20
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a0b      	ldr	r2, [pc, #44]	; (80050f8 <HAL_CRC_MspInit+0x3c>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d10d      	bne.n	80050ea <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80050ce:	2300      	movs	r3, #0
 80050d0:	60fb      	str	r3, [r7, #12]
 80050d2:	4b0a      	ldr	r3, [pc, #40]	; (80050fc <HAL_CRC_MspInit+0x40>)
 80050d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050d6:	4a09      	ldr	r2, [pc, #36]	; (80050fc <HAL_CRC_MspInit+0x40>)
 80050d8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80050dc:	6313      	str	r3, [r2, #48]	; 0x30
 80050de:	4b07      	ldr	r3, [pc, #28]	; (80050fc <HAL_CRC_MspInit+0x40>)
 80050e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80050e6:	60fb      	str	r3, [r7, #12]
 80050e8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80050ea:	bf00      	nop
 80050ec:	3714      	adds	r7, #20
 80050ee:	46bd      	mov	sp, r7
 80050f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f4:	4770      	bx	lr
 80050f6:	bf00      	nop
 80050f8:	40023000 	.word	0x40023000
 80050fc:	40023800 	.word	0x40023800

08005100 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b08a      	sub	sp, #40	; 0x28
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005108:	f107 0314 	add.w	r3, r7, #20
 800510c:	2200      	movs	r2, #0
 800510e:	601a      	str	r2, [r3, #0]
 8005110:	605a      	str	r2, [r3, #4]
 8005112:	609a      	str	r2, [r3, #8]
 8005114:	60da      	str	r2, [r3, #12]
 8005116:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a19      	ldr	r2, [pc, #100]	; (8005184 <HAL_SPI_MspInit+0x84>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d12b      	bne.n	800517a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005122:	2300      	movs	r3, #0
 8005124:	613b      	str	r3, [r7, #16]
 8005126:	4b18      	ldr	r3, [pc, #96]	; (8005188 <HAL_SPI_MspInit+0x88>)
 8005128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800512a:	4a17      	ldr	r2, [pc, #92]	; (8005188 <HAL_SPI_MspInit+0x88>)
 800512c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005130:	6453      	str	r3, [r2, #68]	; 0x44
 8005132:	4b15      	ldr	r3, [pc, #84]	; (8005188 <HAL_SPI_MspInit+0x88>)
 8005134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005136:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800513a:	613b      	str	r3, [r7, #16]
 800513c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800513e:	2300      	movs	r3, #0
 8005140:	60fb      	str	r3, [r7, #12]
 8005142:	4b11      	ldr	r3, [pc, #68]	; (8005188 <HAL_SPI_MspInit+0x88>)
 8005144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005146:	4a10      	ldr	r2, [pc, #64]	; (8005188 <HAL_SPI_MspInit+0x88>)
 8005148:	f043 0301 	orr.w	r3, r3, #1
 800514c:	6313      	str	r3, [r2, #48]	; 0x30
 800514e:	4b0e      	ldr	r3, [pc, #56]	; (8005188 <HAL_SPI_MspInit+0x88>)
 8005150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005152:	f003 0301 	and.w	r3, r3, #1
 8005156:	60fb      	str	r3, [r7, #12]
 8005158:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800515a:	23e0      	movs	r3, #224	; 0xe0
 800515c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800515e:	2302      	movs	r3, #2
 8005160:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005162:	2300      	movs	r3, #0
 8005164:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005166:	2303      	movs	r3, #3
 8005168:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800516a:	2305      	movs	r3, #5
 800516c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800516e:	f107 0314 	add.w	r3, r7, #20
 8005172:	4619      	mov	r1, r3
 8005174:	4805      	ldr	r0, [pc, #20]	; (800518c <HAL_SPI_MspInit+0x8c>)
 8005176:	f000 fb0d 	bl	8005794 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800517a:	bf00      	nop
 800517c:	3728      	adds	r7, #40	; 0x28
 800517e:	46bd      	mov	sp, r7
 8005180:	bd80      	pop	{r7, pc}
 8005182:	bf00      	nop
 8005184:	40013000 	.word	0x40013000
 8005188:	40023800 	.word	0x40023800
 800518c:	40020000 	.word	0x40020000

08005190 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005190:	b480      	push	{r7}
 8005192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005194:	e7fe      	b.n	8005194 <NMI_Handler+0x4>

08005196 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005196:	b480      	push	{r7}
 8005198:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800519a:	e7fe      	b.n	800519a <HardFault_Handler+0x4>

0800519c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800519c:	b480      	push	{r7}
 800519e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80051a0:	e7fe      	b.n	80051a0 <MemManage_Handler+0x4>

080051a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80051a2:	b480      	push	{r7}
 80051a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80051a6:	e7fe      	b.n	80051a6 <BusFault_Handler+0x4>

080051a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80051a8:	b480      	push	{r7}
 80051aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80051ac:	e7fe      	b.n	80051ac <UsageFault_Handler+0x4>

080051ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80051ae:	b480      	push	{r7}
 80051b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80051b2:	bf00      	nop
 80051b4:	46bd      	mov	sp, r7
 80051b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ba:	4770      	bx	lr

080051bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80051bc:	b480      	push	{r7}
 80051be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80051c0:	bf00      	nop
 80051c2:	46bd      	mov	sp, r7
 80051c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c8:	4770      	bx	lr

080051ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80051ca:	b480      	push	{r7}
 80051cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80051ce:	bf00      	nop
 80051d0:	46bd      	mov	sp, r7
 80051d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d6:	4770      	bx	lr

080051d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80051dc:	f000 f968 	bl	80054b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80051e0:	bf00      	nop
 80051e2:	bd80      	pop	{r7, pc}

080051e4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80051e8:	2001      	movs	r0, #1
 80051ea:	f000 fc89 	bl	8005b00 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80051ee:	bf00      	nop
 80051f0:	bd80      	pop	{r7, pc}
	...

080051f4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80051f8:	4802      	ldr	r0, [pc, #8]	; (8005204 <OTG_FS_IRQHandler+0x10>)
 80051fa:	f000 fde9 	bl	8005dd0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80051fe:	bf00      	nop
 8005200:	bd80      	pop	{r7, pc}
 8005202:	bf00      	nop
 8005204:	200043f0 	.word	0x200043f0

08005208 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005208:	b480      	push	{r7}
 800520a:	af00      	add	r7, sp, #0
  return 1;
 800520c:	2301      	movs	r3, #1
}
 800520e:	4618      	mov	r0, r3
 8005210:	46bd      	mov	sp, r7
 8005212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005216:	4770      	bx	lr

08005218 <_kill>:

int _kill(int pid, int sig)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b082      	sub	sp, #8
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
 8005220:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005222:	f015 f8e5 	bl	801a3f0 <__errno>
 8005226:	4603      	mov	r3, r0
 8005228:	2216      	movs	r2, #22
 800522a:	601a      	str	r2, [r3, #0]
  return -1;
 800522c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005230:	4618      	mov	r0, r3
 8005232:	3708      	adds	r7, #8
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}

08005238 <_exit>:

void _exit (int status)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b082      	sub	sp, #8
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005240:	f04f 31ff 	mov.w	r1, #4294967295
 8005244:	6878      	ldr	r0, [r7, #4]
 8005246:	f7ff ffe7 	bl	8005218 <_kill>
  while (1) {}    /* Make sure we hang here */
 800524a:	e7fe      	b.n	800524a <_exit+0x12>

0800524c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b086      	sub	sp, #24
 8005250:	af00      	add	r7, sp, #0
 8005252:	60f8      	str	r0, [r7, #12]
 8005254:	60b9      	str	r1, [r7, #8]
 8005256:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005258:	2300      	movs	r3, #0
 800525a:	617b      	str	r3, [r7, #20]
 800525c:	e00a      	b.n	8005274 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800525e:	f3af 8000 	nop.w
 8005262:	4601      	mov	r1, r0
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	1c5a      	adds	r2, r3, #1
 8005268:	60ba      	str	r2, [r7, #8]
 800526a:	b2ca      	uxtb	r2, r1
 800526c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	3301      	adds	r3, #1
 8005272:	617b      	str	r3, [r7, #20]
 8005274:	697a      	ldr	r2, [r7, #20]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	429a      	cmp	r2, r3
 800527a:	dbf0      	blt.n	800525e <_read+0x12>
  }

  return len;
 800527c:	687b      	ldr	r3, [r7, #4]
}
 800527e:	4618      	mov	r0, r3
 8005280:	3718      	adds	r7, #24
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}

08005286 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005286:	b580      	push	{r7, lr}
 8005288:	b086      	sub	sp, #24
 800528a:	af00      	add	r7, sp, #0
 800528c:	60f8      	str	r0, [r7, #12]
 800528e:	60b9      	str	r1, [r7, #8]
 8005290:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005292:	2300      	movs	r3, #0
 8005294:	617b      	str	r3, [r7, #20]
 8005296:	e009      	b.n	80052ac <_write+0x26>
  {
    __io_putchar(*ptr++);
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	1c5a      	adds	r2, r3, #1
 800529c:	60ba      	str	r2, [r7, #8]
 800529e:	781b      	ldrb	r3, [r3, #0]
 80052a0:	4618      	mov	r0, r3
 80052a2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	3301      	adds	r3, #1
 80052aa:	617b      	str	r3, [r7, #20]
 80052ac:	697a      	ldr	r2, [r7, #20]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	429a      	cmp	r2, r3
 80052b2:	dbf1      	blt.n	8005298 <_write+0x12>
  }
  return len;
 80052b4:	687b      	ldr	r3, [r7, #4]
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3718      	adds	r7, #24
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}

080052be <_close>:

int _close(int file)
{
 80052be:	b480      	push	{r7}
 80052c0:	b083      	sub	sp, #12
 80052c2:	af00      	add	r7, sp, #0
 80052c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80052c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	370c      	adds	r7, #12
 80052ce:	46bd      	mov	sp, r7
 80052d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d4:	4770      	bx	lr

080052d6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80052d6:	b480      	push	{r7}
 80052d8:	b083      	sub	sp, #12
 80052da:	af00      	add	r7, sp, #0
 80052dc:	6078      	str	r0, [r7, #4]
 80052de:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80052e6:	605a      	str	r2, [r3, #4]
  return 0;
 80052e8:	2300      	movs	r3, #0
}
 80052ea:	4618      	mov	r0, r3
 80052ec:	370c      	adds	r7, #12
 80052ee:	46bd      	mov	sp, r7
 80052f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f4:	4770      	bx	lr

080052f6 <_isatty>:

int _isatty(int file)
{
 80052f6:	b480      	push	{r7}
 80052f8:	b083      	sub	sp, #12
 80052fa:	af00      	add	r7, sp, #0
 80052fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80052fe:	2301      	movs	r3, #1
}
 8005300:	4618      	mov	r0, r3
 8005302:	370c      	adds	r7, #12
 8005304:	46bd      	mov	sp, r7
 8005306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530a:	4770      	bx	lr

0800530c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800530c:	b480      	push	{r7}
 800530e:	b085      	sub	sp, #20
 8005310:	af00      	add	r7, sp, #0
 8005312:	60f8      	str	r0, [r7, #12]
 8005314:	60b9      	str	r1, [r7, #8]
 8005316:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005318:	2300      	movs	r3, #0
}
 800531a:	4618      	mov	r0, r3
 800531c:	3714      	adds	r7, #20
 800531e:	46bd      	mov	sp, r7
 8005320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005324:	4770      	bx	lr
	...

08005328 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b086      	sub	sp, #24
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005330:	4a14      	ldr	r2, [pc, #80]	; (8005384 <_sbrk+0x5c>)
 8005332:	4b15      	ldr	r3, [pc, #84]	; (8005388 <_sbrk+0x60>)
 8005334:	1ad3      	subs	r3, r2, r3
 8005336:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800533c:	4b13      	ldr	r3, [pc, #76]	; (800538c <_sbrk+0x64>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d102      	bne.n	800534a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005344:	4b11      	ldr	r3, [pc, #68]	; (800538c <_sbrk+0x64>)
 8005346:	4a12      	ldr	r2, [pc, #72]	; (8005390 <_sbrk+0x68>)
 8005348:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800534a:	4b10      	ldr	r3, [pc, #64]	; (800538c <_sbrk+0x64>)
 800534c:	681a      	ldr	r2, [r3, #0]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	4413      	add	r3, r2
 8005352:	693a      	ldr	r2, [r7, #16]
 8005354:	429a      	cmp	r2, r3
 8005356:	d207      	bcs.n	8005368 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005358:	f015 f84a 	bl	801a3f0 <__errno>
 800535c:	4603      	mov	r3, r0
 800535e:	220c      	movs	r2, #12
 8005360:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005362:	f04f 33ff 	mov.w	r3, #4294967295
 8005366:	e009      	b.n	800537c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005368:	4b08      	ldr	r3, [pc, #32]	; (800538c <_sbrk+0x64>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800536e:	4b07      	ldr	r3, [pc, #28]	; (800538c <_sbrk+0x64>)
 8005370:	681a      	ldr	r2, [r3, #0]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	4413      	add	r3, r2
 8005376:	4a05      	ldr	r2, [pc, #20]	; (800538c <_sbrk+0x64>)
 8005378:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800537a:	68fb      	ldr	r3, [r7, #12]
}
 800537c:	4618      	mov	r0, r3
 800537e:	3718      	adds	r7, #24
 8005380:	46bd      	mov	sp, r7
 8005382:	bd80      	pop	{r7, pc}
 8005384:	20020000 	.word	0x20020000
 8005388:	00000400 	.word	0x00000400
 800538c:	20002a20 	.word	0x20002a20
 8005390:	20004b30 	.word	0x20004b30

08005394 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005394:	b480      	push	{r7}
 8005396:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005398:	4b06      	ldr	r3, [pc, #24]	; (80053b4 <SystemInit+0x20>)
 800539a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800539e:	4a05      	ldr	r2, [pc, #20]	; (80053b4 <SystemInit+0x20>)
 80053a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80053a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80053a8:	bf00      	nop
 80053aa:	46bd      	mov	sp, r7
 80053ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b0:	4770      	bx	lr
 80053b2:	bf00      	nop
 80053b4:	e000ed00 	.word	0xe000ed00

080053b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80053b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80053f0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80053bc:	480d      	ldr	r0, [pc, #52]	; (80053f4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80053be:	490e      	ldr	r1, [pc, #56]	; (80053f8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80053c0:	4a0e      	ldr	r2, [pc, #56]	; (80053fc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80053c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80053c4:	e002      	b.n	80053cc <LoopCopyDataInit>

080053c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80053c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80053c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80053ca:	3304      	adds	r3, #4

080053cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80053cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80053ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80053d0:	d3f9      	bcc.n	80053c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80053d2:	4a0b      	ldr	r2, [pc, #44]	; (8005400 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80053d4:	4c0b      	ldr	r4, [pc, #44]	; (8005404 <LoopFillZerobss+0x26>)
  movs r3, #0
 80053d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80053d8:	e001      	b.n	80053de <LoopFillZerobss>

080053da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80053da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80053dc:	3204      	adds	r2, #4

080053de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80053de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80053e0:	d3fb      	bcc.n	80053da <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80053e2:	f7ff ffd7 	bl	8005394 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80053e6:	f015 f81b 	bl	801a420 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80053ea:	f7fe fd49 	bl	8003e80 <main>
  bx  lr    
 80053ee:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80053f0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80053f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80053f8:	200002bc 	.word	0x200002bc
  ldr r2, =_sidata
 80053fc:	0801da68 	.word	0x0801da68
  ldr r2, =_sbss
 8005400:	200002bc 	.word	0x200002bc
  ldr r4, =_ebss
 8005404:	20004b30 	.word	0x20004b30

08005408 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005408:	e7fe      	b.n	8005408 <ADC_IRQHandler>
	...

0800540c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005410:	4b0e      	ldr	r3, [pc, #56]	; (800544c <HAL_Init+0x40>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a0d      	ldr	r2, [pc, #52]	; (800544c <HAL_Init+0x40>)
 8005416:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800541a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800541c:	4b0b      	ldr	r3, [pc, #44]	; (800544c <HAL_Init+0x40>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a0a      	ldr	r2, [pc, #40]	; (800544c <HAL_Init+0x40>)
 8005422:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005426:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005428:	4b08      	ldr	r3, [pc, #32]	; (800544c <HAL_Init+0x40>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a07      	ldr	r2, [pc, #28]	; (800544c <HAL_Init+0x40>)
 800542e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005432:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005434:	2003      	movs	r0, #3
 8005436:	f000 f94f 	bl	80056d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800543a:	2000      	movs	r0, #0
 800543c:	f000 f808 	bl	8005450 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005440:	f7ff fe14 	bl	800506c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005444:	2300      	movs	r3, #0
}
 8005446:	4618      	mov	r0, r3
 8005448:	bd80      	pop	{r7, pc}
 800544a:	bf00      	nop
 800544c:	40023c00 	.word	0x40023c00

08005450 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b082      	sub	sp, #8
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005458:	4b12      	ldr	r3, [pc, #72]	; (80054a4 <HAL_InitTick+0x54>)
 800545a:	681a      	ldr	r2, [r3, #0]
 800545c:	4b12      	ldr	r3, [pc, #72]	; (80054a8 <HAL_InitTick+0x58>)
 800545e:	781b      	ldrb	r3, [r3, #0]
 8005460:	4619      	mov	r1, r3
 8005462:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005466:	fbb3 f3f1 	udiv	r3, r3, r1
 800546a:	fbb2 f3f3 	udiv	r3, r2, r3
 800546e:	4618      	mov	r0, r3
 8005470:	f000 f967 	bl	8005742 <HAL_SYSTICK_Config>
 8005474:	4603      	mov	r3, r0
 8005476:	2b00      	cmp	r3, #0
 8005478:	d001      	beq.n	800547e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800547a:	2301      	movs	r3, #1
 800547c:	e00e      	b.n	800549c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2b0f      	cmp	r3, #15
 8005482:	d80a      	bhi.n	800549a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005484:	2200      	movs	r2, #0
 8005486:	6879      	ldr	r1, [r7, #4]
 8005488:	f04f 30ff 	mov.w	r0, #4294967295
 800548c:	f000 f92f 	bl	80056ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005490:	4a06      	ldr	r2, [pc, #24]	; (80054ac <HAL_InitTick+0x5c>)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005496:	2300      	movs	r3, #0
 8005498:	e000      	b.n	800549c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800549a:	2301      	movs	r3, #1
}
 800549c:	4618      	mov	r0, r3
 800549e:	3708      	adds	r7, #8
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bd80      	pop	{r7, pc}
 80054a4:	20000048 	.word	0x20000048
 80054a8:	20000050 	.word	0x20000050
 80054ac:	2000004c 	.word	0x2000004c

080054b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80054b0:	b480      	push	{r7}
 80054b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80054b4:	4b06      	ldr	r3, [pc, #24]	; (80054d0 <HAL_IncTick+0x20>)
 80054b6:	781b      	ldrb	r3, [r3, #0]
 80054b8:	461a      	mov	r2, r3
 80054ba:	4b06      	ldr	r3, [pc, #24]	; (80054d4 <HAL_IncTick+0x24>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4413      	add	r3, r2
 80054c0:	4a04      	ldr	r2, [pc, #16]	; (80054d4 <HAL_IncTick+0x24>)
 80054c2:	6013      	str	r3, [r2, #0]
}
 80054c4:	bf00      	nop
 80054c6:	46bd      	mov	sp, r7
 80054c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054cc:	4770      	bx	lr
 80054ce:	bf00      	nop
 80054d0:	20000050 	.word	0x20000050
 80054d4:	20002a24 	.word	0x20002a24

080054d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80054d8:	b480      	push	{r7}
 80054da:	af00      	add	r7, sp, #0
  return uwTick;
 80054dc:	4b03      	ldr	r3, [pc, #12]	; (80054ec <HAL_GetTick+0x14>)
 80054de:	681b      	ldr	r3, [r3, #0]
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	46bd      	mov	sp, r7
 80054e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e8:	4770      	bx	lr
 80054ea:	bf00      	nop
 80054ec:	20002a24 	.word	0x20002a24

080054f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b084      	sub	sp, #16
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80054f8:	f7ff ffee 	bl	80054d8 <HAL_GetTick>
 80054fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005508:	d005      	beq.n	8005516 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800550a:	4b0a      	ldr	r3, [pc, #40]	; (8005534 <HAL_Delay+0x44>)
 800550c:	781b      	ldrb	r3, [r3, #0]
 800550e:	461a      	mov	r2, r3
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	4413      	add	r3, r2
 8005514:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005516:	bf00      	nop
 8005518:	f7ff ffde 	bl	80054d8 <HAL_GetTick>
 800551c:	4602      	mov	r2, r0
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	1ad3      	subs	r3, r2, r3
 8005522:	68fa      	ldr	r2, [r7, #12]
 8005524:	429a      	cmp	r2, r3
 8005526:	d8f7      	bhi.n	8005518 <HAL_Delay+0x28>
  {
  }
}
 8005528:	bf00      	nop
 800552a:	bf00      	nop
 800552c:	3710      	adds	r7, #16
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}
 8005532:	bf00      	nop
 8005534:	20000050 	.word	0x20000050

08005538 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005538:	b480      	push	{r7}
 800553a:	b085      	sub	sp, #20
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	f003 0307 	and.w	r3, r3, #7
 8005546:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005548:	4b0c      	ldr	r3, [pc, #48]	; (800557c <__NVIC_SetPriorityGrouping+0x44>)
 800554a:	68db      	ldr	r3, [r3, #12]
 800554c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800554e:	68ba      	ldr	r2, [r7, #8]
 8005550:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005554:	4013      	ands	r3, r2
 8005556:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005560:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005564:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005568:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800556a:	4a04      	ldr	r2, [pc, #16]	; (800557c <__NVIC_SetPriorityGrouping+0x44>)
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	60d3      	str	r3, [r2, #12]
}
 8005570:	bf00      	nop
 8005572:	3714      	adds	r7, #20
 8005574:	46bd      	mov	sp, r7
 8005576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557a:	4770      	bx	lr
 800557c:	e000ed00 	.word	0xe000ed00

08005580 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005580:	b480      	push	{r7}
 8005582:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005584:	4b04      	ldr	r3, [pc, #16]	; (8005598 <__NVIC_GetPriorityGrouping+0x18>)
 8005586:	68db      	ldr	r3, [r3, #12]
 8005588:	0a1b      	lsrs	r3, r3, #8
 800558a:	f003 0307 	and.w	r3, r3, #7
}
 800558e:	4618      	mov	r0, r3
 8005590:	46bd      	mov	sp, r7
 8005592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005596:	4770      	bx	lr
 8005598:	e000ed00 	.word	0xe000ed00

0800559c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800559c:	b480      	push	{r7}
 800559e:	b083      	sub	sp, #12
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	4603      	mov	r3, r0
 80055a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80055a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	db0b      	blt.n	80055c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80055ae:	79fb      	ldrb	r3, [r7, #7]
 80055b0:	f003 021f 	and.w	r2, r3, #31
 80055b4:	4907      	ldr	r1, [pc, #28]	; (80055d4 <__NVIC_EnableIRQ+0x38>)
 80055b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055ba:	095b      	lsrs	r3, r3, #5
 80055bc:	2001      	movs	r0, #1
 80055be:	fa00 f202 	lsl.w	r2, r0, r2
 80055c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80055c6:	bf00      	nop
 80055c8:	370c      	adds	r7, #12
 80055ca:	46bd      	mov	sp, r7
 80055cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d0:	4770      	bx	lr
 80055d2:	bf00      	nop
 80055d4:	e000e100 	.word	0xe000e100

080055d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80055d8:	b480      	push	{r7}
 80055da:	b083      	sub	sp, #12
 80055dc:	af00      	add	r7, sp, #0
 80055de:	4603      	mov	r3, r0
 80055e0:	6039      	str	r1, [r7, #0]
 80055e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80055e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	db0a      	blt.n	8005602 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	b2da      	uxtb	r2, r3
 80055f0:	490c      	ldr	r1, [pc, #48]	; (8005624 <__NVIC_SetPriority+0x4c>)
 80055f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055f6:	0112      	lsls	r2, r2, #4
 80055f8:	b2d2      	uxtb	r2, r2
 80055fa:	440b      	add	r3, r1
 80055fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005600:	e00a      	b.n	8005618 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	b2da      	uxtb	r2, r3
 8005606:	4908      	ldr	r1, [pc, #32]	; (8005628 <__NVIC_SetPriority+0x50>)
 8005608:	79fb      	ldrb	r3, [r7, #7]
 800560a:	f003 030f 	and.w	r3, r3, #15
 800560e:	3b04      	subs	r3, #4
 8005610:	0112      	lsls	r2, r2, #4
 8005612:	b2d2      	uxtb	r2, r2
 8005614:	440b      	add	r3, r1
 8005616:	761a      	strb	r2, [r3, #24]
}
 8005618:	bf00      	nop
 800561a:	370c      	adds	r7, #12
 800561c:	46bd      	mov	sp, r7
 800561e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005622:	4770      	bx	lr
 8005624:	e000e100 	.word	0xe000e100
 8005628:	e000ed00 	.word	0xe000ed00

0800562c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800562c:	b480      	push	{r7}
 800562e:	b089      	sub	sp, #36	; 0x24
 8005630:	af00      	add	r7, sp, #0
 8005632:	60f8      	str	r0, [r7, #12]
 8005634:	60b9      	str	r1, [r7, #8]
 8005636:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	f003 0307 	and.w	r3, r3, #7
 800563e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005640:	69fb      	ldr	r3, [r7, #28]
 8005642:	f1c3 0307 	rsb	r3, r3, #7
 8005646:	2b04      	cmp	r3, #4
 8005648:	bf28      	it	cs
 800564a:	2304      	movcs	r3, #4
 800564c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800564e:	69fb      	ldr	r3, [r7, #28]
 8005650:	3304      	adds	r3, #4
 8005652:	2b06      	cmp	r3, #6
 8005654:	d902      	bls.n	800565c <NVIC_EncodePriority+0x30>
 8005656:	69fb      	ldr	r3, [r7, #28]
 8005658:	3b03      	subs	r3, #3
 800565a:	e000      	b.n	800565e <NVIC_EncodePriority+0x32>
 800565c:	2300      	movs	r3, #0
 800565e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005660:	f04f 32ff 	mov.w	r2, #4294967295
 8005664:	69bb      	ldr	r3, [r7, #24]
 8005666:	fa02 f303 	lsl.w	r3, r2, r3
 800566a:	43da      	mvns	r2, r3
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	401a      	ands	r2, r3
 8005670:	697b      	ldr	r3, [r7, #20]
 8005672:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005674:	f04f 31ff 	mov.w	r1, #4294967295
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	fa01 f303 	lsl.w	r3, r1, r3
 800567e:	43d9      	mvns	r1, r3
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005684:	4313      	orrs	r3, r2
         );
}
 8005686:	4618      	mov	r0, r3
 8005688:	3724      	adds	r7, #36	; 0x24
 800568a:	46bd      	mov	sp, r7
 800568c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005690:	4770      	bx	lr
	...

08005694 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b082      	sub	sp, #8
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	3b01      	subs	r3, #1
 80056a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80056a4:	d301      	bcc.n	80056aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80056a6:	2301      	movs	r3, #1
 80056a8:	e00f      	b.n	80056ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80056aa:	4a0a      	ldr	r2, [pc, #40]	; (80056d4 <SysTick_Config+0x40>)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	3b01      	subs	r3, #1
 80056b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80056b2:	210f      	movs	r1, #15
 80056b4:	f04f 30ff 	mov.w	r0, #4294967295
 80056b8:	f7ff ff8e 	bl	80055d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80056bc:	4b05      	ldr	r3, [pc, #20]	; (80056d4 <SysTick_Config+0x40>)
 80056be:	2200      	movs	r2, #0
 80056c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80056c2:	4b04      	ldr	r3, [pc, #16]	; (80056d4 <SysTick_Config+0x40>)
 80056c4:	2207      	movs	r2, #7
 80056c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80056c8:	2300      	movs	r3, #0
}
 80056ca:	4618      	mov	r0, r3
 80056cc:	3708      	adds	r7, #8
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bd80      	pop	{r7, pc}
 80056d2:	bf00      	nop
 80056d4:	e000e010 	.word	0xe000e010

080056d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b082      	sub	sp, #8
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80056e0:	6878      	ldr	r0, [r7, #4]
 80056e2:	f7ff ff29 	bl	8005538 <__NVIC_SetPriorityGrouping>
}
 80056e6:	bf00      	nop
 80056e8:	3708      	adds	r7, #8
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}

080056ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80056ee:	b580      	push	{r7, lr}
 80056f0:	b086      	sub	sp, #24
 80056f2:	af00      	add	r7, sp, #0
 80056f4:	4603      	mov	r3, r0
 80056f6:	60b9      	str	r1, [r7, #8]
 80056f8:	607a      	str	r2, [r7, #4]
 80056fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80056fc:	2300      	movs	r3, #0
 80056fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005700:	f7ff ff3e 	bl	8005580 <__NVIC_GetPriorityGrouping>
 8005704:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005706:	687a      	ldr	r2, [r7, #4]
 8005708:	68b9      	ldr	r1, [r7, #8]
 800570a:	6978      	ldr	r0, [r7, #20]
 800570c:	f7ff ff8e 	bl	800562c <NVIC_EncodePriority>
 8005710:	4602      	mov	r2, r0
 8005712:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005716:	4611      	mov	r1, r2
 8005718:	4618      	mov	r0, r3
 800571a:	f7ff ff5d 	bl	80055d8 <__NVIC_SetPriority>
}
 800571e:	bf00      	nop
 8005720:	3718      	adds	r7, #24
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}

08005726 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005726:	b580      	push	{r7, lr}
 8005728:	b082      	sub	sp, #8
 800572a:	af00      	add	r7, sp, #0
 800572c:	4603      	mov	r3, r0
 800572e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005730:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005734:	4618      	mov	r0, r3
 8005736:	f7ff ff31 	bl	800559c <__NVIC_EnableIRQ>
}
 800573a:	bf00      	nop
 800573c:	3708      	adds	r7, #8
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}

08005742 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005742:	b580      	push	{r7, lr}
 8005744:	b082      	sub	sp, #8
 8005746:	af00      	add	r7, sp, #0
 8005748:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	f7ff ffa2 	bl	8005694 <SysTick_Config>
 8005750:	4603      	mov	r3, r0
}
 8005752:	4618      	mov	r0, r3
 8005754:	3708      	adds	r7, #8
 8005756:	46bd      	mov	sp, r7
 8005758:	bd80      	pop	{r7, pc}

0800575a <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800575a:	b580      	push	{r7, lr}
 800575c:	b082      	sub	sp, #8
 800575e:	af00      	add	r7, sp, #0
 8005760:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d101      	bne.n	800576c <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8005768:	2301      	movs	r3, #1
 800576a:	e00e      	b.n	800578a <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	795b      	ldrb	r3, [r3, #5]
 8005770:	b2db      	uxtb	r3, r3
 8005772:	2b00      	cmp	r3, #0
 8005774:	d105      	bne.n	8005782 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2200      	movs	r2, #0
 800577a:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800577c:	6878      	ldr	r0, [r7, #4]
 800577e:	f7ff fc9d 	bl	80050bc <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2201      	movs	r2, #1
 8005786:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005788:	2300      	movs	r3, #0
}
 800578a:	4618      	mov	r0, r3
 800578c:	3708      	adds	r7, #8
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}
	...

08005794 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005794:	b480      	push	{r7}
 8005796:	b089      	sub	sp, #36	; 0x24
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
 800579c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800579e:	2300      	movs	r3, #0
 80057a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80057a2:	2300      	movs	r3, #0
 80057a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80057a6:	2300      	movs	r3, #0
 80057a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80057aa:	2300      	movs	r3, #0
 80057ac:	61fb      	str	r3, [r7, #28]
 80057ae:	e16b      	b.n	8005a88 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80057b0:	2201      	movs	r2, #1
 80057b2:	69fb      	ldr	r3, [r7, #28]
 80057b4:	fa02 f303 	lsl.w	r3, r2, r3
 80057b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	697a      	ldr	r2, [r7, #20]
 80057c0:	4013      	ands	r3, r2
 80057c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80057c4:	693a      	ldr	r2, [r7, #16]
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	429a      	cmp	r2, r3
 80057ca:	f040 815a 	bne.w	8005a82 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	685b      	ldr	r3, [r3, #4]
 80057d2:	f003 0303 	and.w	r3, r3, #3
 80057d6:	2b01      	cmp	r3, #1
 80057d8:	d005      	beq.n	80057e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80057e2:	2b02      	cmp	r3, #2
 80057e4:	d130      	bne.n	8005848 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	689b      	ldr	r3, [r3, #8]
 80057ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80057ec:	69fb      	ldr	r3, [r7, #28]
 80057ee:	005b      	lsls	r3, r3, #1
 80057f0:	2203      	movs	r2, #3
 80057f2:	fa02 f303 	lsl.w	r3, r2, r3
 80057f6:	43db      	mvns	r3, r3
 80057f8:	69ba      	ldr	r2, [r7, #24]
 80057fa:	4013      	ands	r3, r2
 80057fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	68da      	ldr	r2, [r3, #12]
 8005802:	69fb      	ldr	r3, [r7, #28]
 8005804:	005b      	lsls	r3, r3, #1
 8005806:	fa02 f303 	lsl.w	r3, r2, r3
 800580a:	69ba      	ldr	r2, [r7, #24]
 800580c:	4313      	orrs	r3, r2
 800580e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	69ba      	ldr	r2, [r7, #24]
 8005814:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800581c:	2201      	movs	r2, #1
 800581e:	69fb      	ldr	r3, [r7, #28]
 8005820:	fa02 f303 	lsl.w	r3, r2, r3
 8005824:	43db      	mvns	r3, r3
 8005826:	69ba      	ldr	r2, [r7, #24]
 8005828:	4013      	ands	r3, r2
 800582a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	091b      	lsrs	r3, r3, #4
 8005832:	f003 0201 	and.w	r2, r3, #1
 8005836:	69fb      	ldr	r3, [r7, #28]
 8005838:	fa02 f303 	lsl.w	r3, r2, r3
 800583c:	69ba      	ldr	r2, [r7, #24]
 800583e:	4313      	orrs	r3, r2
 8005840:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	69ba      	ldr	r2, [r7, #24]
 8005846:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	f003 0303 	and.w	r3, r3, #3
 8005850:	2b03      	cmp	r3, #3
 8005852:	d017      	beq.n	8005884 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	68db      	ldr	r3, [r3, #12]
 8005858:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800585a:	69fb      	ldr	r3, [r7, #28]
 800585c:	005b      	lsls	r3, r3, #1
 800585e:	2203      	movs	r2, #3
 8005860:	fa02 f303 	lsl.w	r3, r2, r3
 8005864:	43db      	mvns	r3, r3
 8005866:	69ba      	ldr	r2, [r7, #24]
 8005868:	4013      	ands	r3, r2
 800586a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	689a      	ldr	r2, [r3, #8]
 8005870:	69fb      	ldr	r3, [r7, #28]
 8005872:	005b      	lsls	r3, r3, #1
 8005874:	fa02 f303 	lsl.w	r3, r2, r3
 8005878:	69ba      	ldr	r2, [r7, #24]
 800587a:	4313      	orrs	r3, r2
 800587c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	69ba      	ldr	r2, [r7, #24]
 8005882:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	685b      	ldr	r3, [r3, #4]
 8005888:	f003 0303 	and.w	r3, r3, #3
 800588c:	2b02      	cmp	r3, #2
 800588e:	d123      	bne.n	80058d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005890:	69fb      	ldr	r3, [r7, #28]
 8005892:	08da      	lsrs	r2, r3, #3
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	3208      	adds	r2, #8
 8005898:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800589c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800589e:	69fb      	ldr	r3, [r7, #28]
 80058a0:	f003 0307 	and.w	r3, r3, #7
 80058a4:	009b      	lsls	r3, r3, #2
 80058a6:	220f      	movs	r2, #15
 80058a8:	fa02 f303 	lsl.w	r3, r2, r3
 80058ac:	43db      	mvns	r3, r3
 80058ae:	69ba      	ldr	r2, [r7, #24]
 80058b0:	4013      	ands	r3, r2
 80058b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	691a      	ldr	r2, [r3, #16]
 80058b8:	69fb      	ldr	r3, [r7, #28]
 80058ba:	f003 0307 	and.w	r3, r3, #7
 80058be:	009b      	lsls	r3, r3, #2
 80058c0:	fa02 f303 	lsl.w	r3, r2, r3
 80058c4:	69ba      	ldr	r2, [r7, #24]
 80058c6:	4313      	orrs	r3, r2
 80058c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80058ca:	69fb      	ldr	r3, [r7, #28]
 80058cc:	08da      	lsrs	r2, r3, #3
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	3208      	adds	r2, #8
 80058d2:	69b9      	ldr	r1, [r7, #24]
 80058d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80058de:	69fb      	ldr	r3, [r7, #28]
 80058e0:	005b      	lsls	r3, r3, #1
 80058e2:	2203      	movs	r2, #3
 80058e4:	fa02 f303 	lsl.w	r3, r2, r3
 80058e8:	43db      	mvns	r3, r3
 80058ea:	69ba      	ldr	r2, [r7, #24]
 80058ec:	4013      	ands	r3, r2
 80058ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	f003 0203 	and.w	r2, r3, #3
 80058f8:	69fb      	ldr	r3, [r7, #28]
 80058fa:	005b      	lsls	r3, r3, #1
 80058fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005900:	69ba      	ldr	r2, [r7, #24]
 8005902:	4313      	orrs	r3, r2
 8005904:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	69ba      	ldr	r2, [r7, #24]
 800590a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	685b      	ldr	r3, [r3, #4]
 8005910:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005914:	2b00      	cmp	r3, #0
 8005916:	f000 80b4 	beq.w	8005a82 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800591a:	2300      	movs	r3, #0
 800591c:	60fb      	str	r3, [r7, #12]
 800591e:	4b60      	ldr	r3, [pc, #384]	; (8005aa0 <HAL_GPIO_Init+0x30c>)
 8005920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005922:	4a5f      	ldr	r2, [pc, #380]	; (8005aa0 <HAL_GPIO_Init+0x30c>)
 8005924:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005928:	6453      	str	r3, [r2, #68]	; 0x44
 800592a:	4b5d      	ldr	r3, [pc, #372]	; (8005aa0 <HAL_GPIO_Init+0x30c>)
 800592c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800592e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005932:	60fb      	str	r3, [r7, #12]
 8005934:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005936:	4a5b      	ldr	r2, [pc, #364]	; (8005aa4 <HAL_GPIO_Init+0x310>)
 8005938:	69fb      	ldr	r3, [r7, #28]
 800593a:	089b      	lsrs	r3, r3, #2
 800593c:	3302      	adds	r3, #2
 800593e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005942:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005944:	69fb      	ldr	r3, [r7, #28]
 8005946:	f003 0303 	and.w	r3, r3, #3
 800594a:	009b      	lsls	r3, r3, #2
 800594c:	220f      	movs	r2, #15
 800594e:	fa02 f303 	lsl.w	r3, r2, r3
 8005952:	43db      	mvns	r3, r3
 8005954:	69ba      	ldr	r2, [r7, #24]
 8005956:	4013      	ands	r3, r2
 8005958:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	4a52      	ldr	r2, [pc, #328]	; (8005aa8 <HAL_GPIO_Init+0x314>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d02b      	beq.n	80059ba <HAL_GPIO_Init+0x226>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	4a51      	ldr	r2, [pc, #324]	; (8005aac <HAL_GPIO_Init+0x318>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d025      	beq.n	80059b6 <HAL_GPIO_Init+0x222>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	4a50      	ldr	r2, [pc, #320]	; (8005ab0 <HAL_GPIO_Init+0x31c>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d01f      	beq.n	80059b2 <HAL_GPIO_Init+0x21e>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	4a4f      	ldr	r2, [pc, #316]	; (8005ab4 <HAL_GPIO_Init+0x320>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d019      	beq.n	80059ae <HAL_GPIO_Init+0x21a>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	4a4e      	ldr	r2, [pc, #312]	; (8005ab8 <HAL_GPIO_Init+0x324>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d013      	beq.n	80059aa <HAL_GPIO_Init+0x216>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	4a4d      	ldr	r2, [pc, #308]	; (8005abc <HAL_GPIO_Init+0x328>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d00d      	beq.n	80059a6 <HAL_GPIO_Init+0x212>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	4a4c      	ldr	r2, [pc, #304]	; (8005ac0 <HAL_GPIO_Init+0x32c>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d007      	beq.n	80059a2 <HAL_GPIO_Init+0x20e>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	4a4b      	ldr	r2, [pc, #300]	; (8005ac4 <HAL_GPIO_Init+0x330>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d101      	bne.n	800599e <HAL_GPIO_Init+0x20a>
 800599a:	2307      	movs	r3, #7
 800599c:	e00e      	b.n	80059bc <HAL_GPIO_Init+0x228>
 800599e:	2308      	movs	r3, #8
 80059a0:	e00c      	b.n	80059bc <HAL_GPIO_Init+0x228>
 80059a2:	2306      	movs	r3, #6
 80059a4:	e00a      	b.n	80059bc <HAL_GPIO_Init+0x228>
 80059a6:	2305      	movs	r3, #5
 80059a8:	e008      	b.n	80059bc <HAL_GPIO_Init+0x228>
 80059aa:	2304      	movs	r3, #4
 80059ac:	e006      	b.n	80059bc <HAL_GPIO_Init+0x228>
 80059ae:	2303      	movs	r3, #3
 80059b0:	e004      	b.n	80059bc <HAL_GPIO_Init+0x228>
 80059b2:	2302      	movs	r3, #2
 80059b4:	e002      	b.n	80059bc <HAL_GPIO_Init+0x228>
 80059b6:	2301      	movs	r3, #1
 80059b8:	e000      	b.n	80059bc <HAL_GPIO_Init+0x228>
 80059ba:	2300      	movs	r3, #0
 80059bc:	69fa      	ldr	r2, [r7, #28]
 80059be:	f002 0203 	and.w	r2, r2, #3
 80059c2:	0092      	lsls	r2, r2, #2
 80059c4:	4093      	lsls	r3, r2
 80059c6:	69ba      	ldr	r2, [r7, #24]
 80059c8:	4313      	orrs	r3, r2
 80059ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80059cc:	4935      	ldr	r1, [pc, #212]	; (8005aa4 <HAL_GPIO_Init+0x310>)
 80059ce:	69fb      	ldr	r3, [r7, #28]
 80059d0:	089b      	lsrs	r3, r3, #2
 80059d2:	3302      	adds	r3, #2
 80059d4:	69ba      	ldr	r2, [r7, #24]
 80059d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80059da:	4b3b      	ldr	r3, [pc, #236]	; (8005ac8 <HAL_GPIO_Init+0x334>)
 80059dc:	689b      	ldr	r3, [r3, #8]
 80059de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	43db      	mvns	r3, r3
 80059e4:	69ba      	ldr	r2, [r7, #24]
 80059e6:	4013      	ands	r3, r2
 80059e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d003      	beq.n	80059fe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80059f6:	69ba      	ldr	r2, [r7, #24]
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	4313      	orrs	r3, r2
 80059fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80059fe:	4a32      	ldr	r2, [pc, #200]	; (8005ac8 <HAL_GPIO_Init+0x334>)
 8005a00:	69bb      	ldr	r3, [r7, #24]
 8005a02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005a04:	4b30      	ldr	r3, [pc, #192]	; (8005ac8 <HAL_GPIO_Init+0x334>)
 8005a06:	68db      	ldr	r3, [r3, #12]
 8005a08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a0a:	693b      	ldr	r3, [r7, #16]
 8005a0c:	43db      	mvns	r3, r3
 8005a0e:	69ba      	ldr	r2, [r7, #24]
 8005a10:	4013      	ands	r3, r2
 8005a12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d003      	beq.n	8005a28 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005a20:	69ba      	ldr	r2, [r7, #24]
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	4313      	orrs	r3, r2
 8005a26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005a28:	4a27      	ldr	r2, [pc, #156]	; (8005ac8 <HAL_GPIO_Init+0x334>)
 8005a2a:	69bb      	ldr	r3, [r7, #24]
 8005a2c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005a2e:	4b26      	ldr	r3, [pc, #152]	; (8005ac8 <HAL_GPIO_Init+0x334>)
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	43db      	mvns	r3, r3
 8005a38:	69ba      	ldr	r2, [r7, #24]
 8005a3a:	4013      	ands	r3, r2
 8005a3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	685b      	ldr	r3, [r3, #4]
 8005a42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d003      	beq.n	8005a52 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005a4a:	69ba      	ldr	r2, [r7, #24]
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005a52:	4a1d      	ldr	r2, [pc, #116]	; (8005ac8 <HAL_GPIO_Init+0x334>)
 8005a54:	69bb      	ldr	r3, [r7, #24]
 8005a56:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005a58:	4b1b      	ldr	r3, [pc, #108]	; (8005ac8 <HAL_GPIO_Init+0x334>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	43db      	mvns	r3, r3
 8005a62:	69ba      	ldr	r2, [r7, #24]
 8005a64:	4013      	ands	r3, r2
 8005a66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	685b      	ldr	r3, [r3, #4]
 8005a6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d003      	beq.n	8005a7c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005a74:	69ba      	ldr	r2, [r7, #24]
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005a7c:	4a12      	ldr	r2, [pc, #72]	; (8005ac8 <HAL_GPIO_Init+0x334>)
 8005a7e:	69bb      	ldr	r3, [r7, #24]
 8005a80:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005a82:	69fb      	ldr	r3, [r7, #28]
 8005a84:	3301      	adds	r3, #1
 8005a86:	61fb      	str	r3, [r7, #28]
 8005a88:	69fb      	ldr	r3, [r7, #28]
 8005a8a:	2b0f      	cmp	r3, #15
 8005a8c:	f67f ae90 	bls.w	80057b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005a90:	bf00      	nop
 8005a92:	bf00      	nop
 8005a94:	3724      	adds	r7, #36	; 0x24
 8005a96:	46bd      	mov	sp, r7
 8005a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9c:	4770      	bx	lr
 8005a9e:	bf00      	nop
 8005aa0:	40023800 	.word	0x40023800
 8005aa4:	40013800 	.word	0x40013800
 8005aa8:	40020000 	.word	0x40020000
 8005aac:	40020400 	.word	0x40020400
 8005ab0:	40020800 	.word	0x40020800
 8005ab4:	40020c00 	.word	0x40020c00
 8005ab8:	40021000 	.word	0x40021000
 8005abc:	40021400 	.word	0x40021400
 8005ac0:	40021800 	.word	0x40021800
 8005ac4:	40021c00 	.word	0x40021c00
 8005ac8:	40013c00 	.word	0x40013c00

08005acc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005acc:	b480      	push	{r7}
 8005ace:	b083      	sub	sp, #12
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
 8005ad4:	460b      	mov	r3, r1
 8005ad6:	807b      	strh	r3, [r7, #2]
 8005ad8:	4613      	mov	r3, r2
 8005ada:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005adc:	787b      	ldrb	r3, [r7, #1]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d003      	beq.n	8005aea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005ae2:	887a      	ldrh	r2, [r7, #2]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005ae8:	e003      	b.n	8005af2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005aea:	887b      	ldrh	r3, [r7, #2]
 8005aec:	041a      	lsls	r2, r3, #16
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	619a      	str	r2, [r3, #24]
}
 8005af2:	bf00      	nop
 8005af4:	370c      	adds	r7, #12
 8005af6:	46bd      	mov	sp, r7
 8005af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afc:	4770      	bx	lr
	...

08005b00 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b082      	sub	sp, #8
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	4603      	mov	r3, r0
 8005b08:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005b0a:	4b08      	ldr	r3, [pc, #32]	; (8005b2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005b0c:	695a      	ldr	r2, [r3, #20]
 8005b0e:	88fb      	ldrh	r3, [r7, #6]
 8005b10:	4013      	ands	r3, r2
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d006      	beq.n	8005b24 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005b16:	4a05      	ldr	r2, [pc, #20]	; (8005b2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005b18:	88fb      	ldrh	r3, [r7, #6]
 8005b1a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005b1c:	88fb      	ldrh	r3, [r7, #6]
 8005b1e:	4618      	mov	r0, r3
 8005b20:	f7fe fc3a 	bl	8004398 <HAL_GPIO_EXTI_Callback>
  }
}
 8005b24:	bf00      	nop
 8005b26:	3708      	adds	r7, #8
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	bd80      	pop	{r7, pc}
 8005b2c:	40013c00 	.word	0x40013c00

08005b30 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005b30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b32:	b08f      	sub	sp, #60	; 0x3c
 8005b34:	af0a      	add	r7, sp, #40	; 0x28
 8005b36:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d101      	bne.n	8005b42 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005b3e:	2301      	movs	r3, #1
 8005b40:	e10f      	b.n	8005d62 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8005b4e:	b2db      	uxtb	r3, r3
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d106      	bne.n	8005b62 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2200      	movs	r2, #0
 8005b58:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005b5c:	6878      	ldr	r0, [r7, #4]
 8005b5e:	f012 fdd5 	bl	801870c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2203      	movs	r2, #3
 8005b66:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d102      	bne.n	8005b7c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4618      	mov	r0, r3
 8005b82:	f002 fd80 	bl	8008686 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	603b      	str	r3, [r7, #0]
 8005b8c:	687e      	ldr	r6, [r7, #4]
 8005b8e:	466d      	mov	r5, sp
 8005b90:	f106 0410 	add.w	r4, r6, #16
 8005b94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005b96:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005b98:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005b9a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005b9c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005ba0:	e885 0003 	stmia.w	r5, {r0, r1}
 8005ba4:	1d33      	adds	r3, r6, #4
 8005ba6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005ba8:	6838      	ldr	r0, [r7, #0]
 8005baa:	f002 fc57 	bl	800845c <USB_CoreInit>
 8005bae:	4603      	mov	r3, r0
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d005      	beq.n	8005bc0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2202      	movs	r2, #2
 8005bb8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	e0d0      	b.n	8005d62 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	2100      	movs	r1, #0
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	f002 fd6e 	bl	80086a8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005bcc:	2300      	movs	r3, #0
 8005bce:	73fb      	strb	r3, [r7, #15]
 8005bd0:	e04a      	b.n	8005c68 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005bd2:	7bfa      	ldrb	r2, [r7, #15]
 8005bd4:	6879      	ldr	r1, [r7, #4]
 8005bd6:	4613      	mov	r3, r2
 8005bd8:	00db      	lsls	r3, r3, #3
 8005bda:	4413      	add	r3, r2
 8005bdc:	009b      	lsls	r3, r3, #2
 8005bde:	440b      	add	r3, r1
 8005be0:	333d      	adds	r3, #61	; 0x3d
 8005be2:	2201      	movs	r2, #1
 8005be4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005be6:	7bfa      	ldrb	r2, [r7, #15]
 8005be8:	6879      	ldr	r1, [r7, #4]
 8005bea:	4613      	mov	r3, r2
 8005bec:	00db      	lsls	r3, r3, #3
 8005bee:	4413      	add	r3, r2
 8005bf0:	009b      	lsls	r3, r3, #2
 8005bf2:	440b      	add	r3, r1
 8005bf4:	333c      	adds	r3, #60	; 0x3c
 8005bf6:	7bfa      	ldrb	r2, [r7, #15]
 8005bf8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005bfa:	7bfa      	ldrb	r2, [r7, #15]
 8005bfc:	7bfb      	ldrb	r3, [r7, #15]
 8005bfe:	b298      	uxth	r0, r3
 8005c00:	6879      	ldr	r1, [r7, #4]
 8005c02:	4613      	mov	r3, r2
 8005c04:	00db      	lsls	r3, r3, #3
 8005c06:	4413      	add	r3, r2
 8005c08:	009b      	lsls	r3, r3, #2
 8005c0a:	440b      	add	r3, r1
 8005c0c:	3344      	adds	r3, #68	; 0x44
 8005c0e:	4602      	mov	r2, r0
 8005c10:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005c12:	7bfa      	ldrb	r2, [r7, #15]
 8005c14:	6879      	ldr	r1, [r7, #4]
 8005c16:	4613      	mov	r3, r2
 8005c18:	00db      	lsls	r3, r3, #3
 8005c1a:	4413      	add	r3, r2
 8005c1c:	009b      	lsls	r3, r3, #2
 8005c1e:	440b      	add	r3, r1
 8005c20:	3340      	adds	r3, #64	; 0x40
 8005c22:	2200      	movs	r2, #0
 8005c24:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005c26:	7bfa      	ldrb	r2, [r7, #15]
 8005c28:	6879      	ldr	r1, [r7, #4]
 8005c2a:	4613      	mov	r3, r2
 8005c2c:	00db      	lsls	r3, r3, #3
 8005c2e:	4413      	add	r3, r2
 8005c30:	009b      	lsls	r3, r3, #2
 8005c32:	440b      	add	r3, r1
 8005c34:	3348      	adds	r3, #72	; 0x48
 8005c36:	2200      	movs	r2, #0
 8005c38:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005c3a:	7bfa      	ldrb	r2, [r7, #15]
 8005c3c:	6879      	ldr	r1, [r7, #4]
 8005c3e:	4613      	mov	r3, r2
 8005c40:	00db      	lsls	r3, r3, #3
 8005c42:	4413      	add	r3, r2
 8005c44:	009b      	lsls	r3, r3, #2
 8005c46:	440b      	add	r3, r1
 8005c48:	334c      	adds	r3, #76	; 0x4c
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005c4e:	7bfa      	ldrb	r2, [r7, #15]
 8005c50:	6879      	ldr	r1, [r7, #4]
 8005c52:	4613      	mov	r3, r2
 8005c54:	00db      	lsls	r3, r3, #3
 8005c56:	4413      	add	r3, r2
 8005c58:	009b      	lsls	r3, r3, #2
 8005c5a:	440b      	add	r3, r1
 8005c5c:	3354      	adds	r3, #84	; 0x54
 8005c5e:	2200      	movs	r2, #0
 8005c60:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005c62:	7bfb      	ldrb	r3, [r7, #15]
 8005c64:	3301      	adds	r3, #1
 8005c66:	73fb      	strb	r3, [r7, #15]
 8005c68:	7bfa      	ldrb	r2, [r7, #15]
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	429a      	cmp	r2, r3
 8005c70:	d3af      	bcc.n	8005bd2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005c72:	2300      	movs	r3, #0
 8005c74:	73fb      	strb	r3, [r7, #15]
 8005c76:	e044      	b.n	8005d02 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005c78:	7bfa      	ldrb	r2, [r7, #15]
 8005c7a:	6879      	ldr	r1, [r7, #4]
 8005c7c:	4613      	mov	r3, r2
 8005c7e:	00db      	lsls	r3, r3, #3
 8005c80:	4413      	add	r3, r2
 8005c82:	009b      	lsls	r3, r3, #2
 8005c84:	440b      	add	r3, r1
 8005c86:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005c8e:	7bfa      	ldrb	r2, [r7, #15]
 8005c90:	6879      	ldr	r1, [r7, #4]
 8005c92:	4613      	mov	r3, r2
 8005c94:	00db      	lsls	r3, r3, #3
 8005c96:	4413      	add	r3, r2
 8005c98:	009b      	lsls	r3, r3, #2
 8005c9a:	440b      	add	r3, r1
 8005c9c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8005ca0:	7bfa      	ldrb	r2, [r7, #15]
 8005ca2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005ca4:	7bfa      	ldrb	r2, [r7, #15]
 8005ca6:	6879      	ldr	r1, [r7, #4]
 8005ca8:	4613      	mov	r3, r2
 8005caa:	00db      	lsls	r3, r3, #3
 8005cac:	4413      	add	r3, r2
 8005cae:	009b      	lsls	r3, r3, #2
 8005cb0:	440b      	add	r3, r1
 8005cb2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005cba:	7bfa      	ldrb	r2, [r7, #15]
 8005cbc:	6879      	ldr	r1, [r7, #4]
 8005cbe:	4613      	mov	r3, r2
 8005cc0:	00db      	lsls	r3, r3, #3
 8005cc2:	4413      	add	r3, r2
 8005cc4:	009b      	lsls	r3, r3, #2
 8005cc6:	440b      	add	r3, r1
 8005cc8:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8005ccc:	2200      	movs	r2, #0
 8005cce:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005cd0:	7bfa      	ldrb	r2, [r7, #15]
 8005cd2:	6879      	ldr	r1, [r7, #4]
 8005cd4:	4613      	mov	r3, r2
 8005cd6:	00db      	lsls	r3, r3, #3
 8005cd8:	4413      	add	r3, r2
 8005cda:	009b      	lsls	r3, r3, #2
 8005cdc:	440b      	add	r3, r1
 8005cde:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005ce6:	7bfa      	ldrb	r2, [r7, #15]
 8005ce8:	6879      	ldr	r1, [r7, #4]
 8005cea:	4613      	mov	r3, r2
 8005cec:	00db      	lsls	r3, r3, #3
 8005cee:	4413      	add	r3, r2
 8005cf0:	009b      	lsls	r3, r3, #2
 8005cf2:	440b      	add	r3, r1
 8005cf4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005cfc:	7bfb      	ldrb	r3, [r7, #15]
 8005cfe:	3301      	adds	r3, #1
 8005d00:	73fb      	strb	r3, [r7, #15]
 8005d02:	7bfa      	ldrb	r2, [r7, #15]
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	429a      	cmp	r2, r3
 8005d0a:	d3b5      	bcc.n	8005c78 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	603b      	str	r3, [r7, #0]
 8005d12:	687e      	ldr	r6, [r7, #4]
 8005d14:	466d      	mov	r5, sp
 8005d16:	f106 0410 	add.w	r4, r6, #16
 8005d1a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005d1c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005d1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005d20:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005d22:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005d26:	e885 0003 	stmia.w	r5, {r0, r1}
 8005d2a:	1d33      	adds	r3, r6, #4
 8005d2c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005d2e:	6838      	ldr	r0, [r7, #0]
 8005d30:	f002 fd06 	bl	8008740 <USB_DevInit>
 8005d34:	4603      	mov	r3, r0
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d005      	beq.n	8005d46 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2202      	movs	r2, #2
 8005d3e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005d42:	2301      	movs	r3, #1
 8005d44:	e00d      	b.n	8005d62 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2201      	movs	r2, #1
 8005d52:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	f003 fe55 	bl	8009a0a <USB_DevDisconnect>

  return HAL_OK;
 8005d60:	2300      	movs	r3, #0
}
 8005d62:	4618      	mov	r0, r3
 8005d64:	3714      	adds	r7, #20
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005d6a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005d6a:	b580      	push	{r7, lr}
 8005d6c:	b084      	sub	sp, #16
 8005d6e:	af00      	add	r7, sp, #0
 8005d70:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005d7e:	2b01      	cmp	r3, #1
 8005d80:	d101      	bne.n	8005d86 <HAL_PCD_Start+0x1c>
 8005d82:	2302      	movs	r3, #2
 8005d84:	e020      	b.n	8005dc8 <HAL_PCD_Start+0x5e>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2201      	movs	r2, #1
 8005d8a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d92:	2b01      	cmp	r3, #1
 8005d94:	d109      	bne.n	8005daa <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005d9a:	2b01      	cmp	r3, #1
 8005d9c:	d005      	beq.n	8005daa <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005da2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4618      	mov	r0, r3
 8005db0:	f002 fc58 	bl	8008664 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4618      	mov	r0, r3
 8005dba:	f003 fe05 	bl	80099c8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005dc6:	2300      	movs	r3, #0
}
 8005dc8:	4618      	mov	r0, r3
 8005dca:	3710      	adds	r7, #16
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	bd80      	pop	{r7, pc}

08005dd0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005dd0:	b590      	push	{r4, r7, lr}
 8005dd2:	b08d      	sub	sp, #52	; 0x34
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dde:	6a3b      	ldr	r3, [r7, #32]
 8005de0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4618      	mov	r0, r3
 8005de8:	f003 fec3 	bl	8009b72 <USB_GetMode>
 8005dec:	4603      	mov	r3, r0
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	f040 848a 	bne.w	8006708 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4618      	mov	r0, r3
 8005dfa:	f003 fe27 	bl	8009a4c <USB_ReadInterrupts>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	f000 8480 	beq.w	8006706 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8005e06:	69fb      	ldr	r3, [r7, #28]
 8005e08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e0c:	689b      	ldr	r3, [r3, #8]
 8005e0e:	0a1b      	lsrs	r3, r3, #8
 8005e10:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4618      	mov	r0, r3
 8005e20:	f003 fe14 	bl	8009a4c <USB_ReadInterrupts>
 8005e24:	4603      	mov	r3, r0
 8005e26:	f003 0302 	and.w	r3, r3, #2
 8005e2a:	2b02      	cmp	r3, #2
 8005e2c:	d107      	bne.n	8005e3e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	695a      	ldr	r2, [r3, #20]
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f002 0202 	and.w	r2, r2, #2
 8005e3c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4618      	mov	r0, r3
 8005e44:	f003 fe02 	bl	8009a4c <USB_ReadInterrupts>
 8005e48:	4603      	mov	r3, r0
 8005e4a:	f003 0310 	and.w	r3, r3, #16
 8005e4e:	2b10      	cmp	r3, #16
 8005e50:	d161      	bne.n	8005f16 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	699a      	ldr	r2, [r3, #24]
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f022 0210 	bic.w	r2, r2, #16
 8005e60:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8005e62:	6a3b      	ldr	r3, [r7, #32]
 8005e64:	6a1b      	ldr	r3, [r3, #32]
 8005e66:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8005e68:	69bb      	ldr	r3, [r7, #24]
 8005e6a:	f003 020f 	and.w	r2, r3, #15
 8005e6e:	4613      	mov	r3, r2
 8005e70:	00db      	lsls	r3, r3, #3
 8005e72:	4413      	add	r3, r2
 8005e74:	009b      	lsls	r3, r3, #2
 8005e76:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005e7a:	687a      	ldr	r2, [r7, #4]
 8005e7c:	4413      	add	r3, r2
 8005e7e:	3304      	adds	r3, #4
 8005e80:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005e82:	69bb      	ldr	r3, [r7, #24]
 8005e84:	0c5b      	lsrs	r3, r3, #17
 8005e86:	f003 030f 	and.w	r3, r3, #15
 8005e8a:	2b02      	cmp	r3, #2
 8005e8c:	d124      	bne.n	8005ed8 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005e8e:	69ba      	ldr	r2, [r7, #24]
 8005e90:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8005e94:	4013      	ands	r3, r2
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d035      	beq.n	8005f06 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005e9e:	69bb      	ldr	r3, [r7, #24]
 8005ea0:	091b      	lsrs	r3, r3, #4
 8005ea2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005ea4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005ea8:	b29b      	uxth	r3, r3
 8005eaa:	461a      	mov	r2, r3
 8005eac:	6a38      	ldr	r0, [r7, #32]
 8005eae:	f003 fc39 	bl	8009724 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005eb2:	697b      	ldr	r3, [r7, #20]
 8005eb4:	691a      	ldr	r2, [r3, #16]
 8005eb6:	69bb      	ldr	r3, [r7, #24]
 8005eb8:	091b      	lsrs	r3, r3, #4
 8005eba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005ebe:	441a      	add	r2, r3
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	6a1a      	ldr	r2, [r3, #32]
 8005ec8:	69bb      	ldr	r3, [r7, #24]
 8005eca:	091b      	lsrs	r3, r3, #4
 8005ecc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005ed0:	441a      	add	r2, r3
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	621a      	str	r2, [r3, #32]
 8005ed6:	e016      	b.n	8005f06 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8005ed8:	69bb      	ldr	r3, [r7, #24]
 8005eda:	0c5b      	lsrs	r3, r3, #17
 8005edc:	f003 030f 	and.w	r3, r3, #15
 8005ee0:	2b06      	cmp	r3, #6
 8005ee2:	d110      	bne.n	8005f06 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005eea:	2208      	movs	r2, #8
 8005eec:	4619      	mov	r1, r3
 8005eee:	6a38      	ldr	r0, [r7, #32]
 8005ef0:	f003 fc18 	bl	8009724 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005ef4:	697b      	ldr	r3, [r7, #20]
 8005ef6:	6a1a      	ldr	r2, [r3, #32]
 8005ef8:	69bb      	ldr	r3, [r7, #24]
 8005efa:	091b      	lsrs	r3, r3, #4
 8005efc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005f00:	441a      	add	r2, r3
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	699a      	ldr	r2, [r3, #24]
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f042 0210 	orr.w	r2, r2, #16
 8005f14:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	f003 fd96 	bl	8009a4c <USB_ReadInterrupts>
 8005f20:	4603      	mov	r3, r0
 8005f22:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005f26:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005f2a:	f040 80a7 	bne.w	800607c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8005f2e:	2300      	movs	r3, #0
 8005f30:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4618      	mov	r0, r3
 8005f38:	f003 fd9b 	bl	8009a72 <USB_ReadDevAllOutEpInterrupt>
 8005f3c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8005f3e:	e099      	b.n	8006074 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f42:	f003 0301 	and.w	r3, r3, #1
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	f000 808e 	beq.w	8006068 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f52:	b2d2      	uxtb	r2, r2
 8005f54:	4611      	mov	r1, r2
 8005f56:	4618      	mov	r0, r3
 8005f58:	f003 fdbf 	bl	8009ada <USB_ReadDevOutEPInterrupt>
 8005f5c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005f5e:	693b      	ldr	r3, [r7, #16]
 8005f60:	f003 0301 	and.w	r3, r3, #1
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d00c      	beq.n	8005f82 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f6a:	015a      	lsls	r2, r3, #5
 8005f6c:	69fb      	ldr	r3, [r7, #28]
 8005f6e:	4413      	add	r3, r2
 8005f70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f74:	461a      	mov	r2, r3
 8005f76:	2301      	movs	r3, #1
 8005f78:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005f7a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005f7c:	6878      	ldr	r0, [r7, #4]
 8005f7e:	f000 fec3 	bl	8006d08 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005f82:	693b      	ldr	r3, [r7, #16]
 8005f84:	f003 0308 	and.w	r3, r3, #8
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d00c      	beq.n	8005fa6 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f8e:	015a      	lsls	r2, r3, #5
 8005f90:	69fb      	ldr	r3, [r7, #28]
 8005f92:	4413      	add	r3, r2
 8005f94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f98:	461a      	mov	r2, r3
 8005f9a:	2308      	movs	r3, #8
 8005f9c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005f9e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005fa0:	6878      	ldr	r0, [r7, #4]
 8005fa2:	f000 ff99 	bl	8006ed8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005fa6:	693b      	ldr	r3, [r7, #16]
 8005fa8:	f003 0310 	and.w	r3, r3, #16
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d008      	beq.n	8005fc2 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb2:	015a      	lsls	r2, r3, #5
 8005fb4:	69fb      	ldr	r3, [r7, #28]
 8005fb6:	4413      	add	r3, r2
 8005fb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fbc:	461a      	mov	r2, r3
 8005fbe:	2310      	movs	r3, #16
 8005fc0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	f003 0302 	and.w	r3, r3, #2
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d030      	beq.n	800602e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8005fcc:	6a3b      	ldr	r3, [r7, #32]
 8005fce:	695b      	ldr	r3, [r3, #20]
 8005fd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fd4:	2b80      	cmp	r3, #128	; 0x80
 8005fd6:	d109      	bne.n	8005fec <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8005fd8:	69fb      	ldr	r3, [r7, #28]
 8005fda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fde:	685b      	ldr	r3, [r3, #4]
 8005fe0:	69fa      	ldr	r2, [r7, #28]
 8005fe2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005fe6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005fea:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8005fec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fee:	4613      	mov	r3, r2
 8005ff0:	00db      	lsls	r3, r3, #3
 8005ff2:	4413      	add	r3, r2
 8005ff4:	009b      	lsls	r3, r3, #2
 8005ff6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005ffa:	687a      	ldr	r2, [r7, #4]
 8005ffc:	4413      	add	r3, r2
 8005ffe:	3304      	adds	r3, #4
 8006000:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	78db      	ldrb	r3, [r3, #3]
 8006006:	2b01      	cmp	r3, #1
 8006008:	d108      	bne.n	800601c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	2200      	movs	r2, #0
 800600e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8006010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006012:	b2db      	uxtb	r3, r3
 8006014:	4619      	mov	r1, r3
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	f012 fc7e 	bl	8018918 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800601c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800601e:	015a      	lsls	r2, r3, #5
 8006020:	69fb      	ldr	r3, [r7, #28]
 8006022:	4413      	add	r3, r2
 8006024:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006028:	461a      	mov	r2, r3
 800602a:	2302      	movs	r3, #2
 800602c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800602e:	693b      	ldr	r3, [r7, #16]
 8006030:	f003 0320 	and.w	r3, r3, #32
 8006034:	2b00      	cmp	r3, #0
 8006036:	d008      	beq.n	800604a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800603a:	015a      	lsls	r2, r3, #5
 800603c:	69fb      	ldr	r3, [r7, #28]
 800603e:	4413      	add	r3, r2
 8006040:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006044:	461a      	mov	r2, r3
 8006046:	2320      	movs	r3, #32
 8006048:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800604a:	693b      	ldr	r3, [r7, #16]
 800604c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006050:	2b00      	cmp	r3, #0
 8006052:	d009      	beq.n	8006068 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8006054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006056:	015a      	lsls	r2, r3, #5
 8006058:	69fb      	ldr	r3, [r7, #28]
 800605a:	4413      	add	r3, r2
 800605c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006060:	461a      	mov	r2, r3
 8006062:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006066:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8006068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800606a:	3301      	adds	r3, #1
 800606c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800606e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006070:	085b      	lsrs	r3, r3, #1
 8006072:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006076:	2b00      	cmp	r3, #0
 8006078:	f47f af62 	bne.w	8005f40 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4618      	mov	r0, r3
 8006082:	f003 fce3 	bl	8009a4c <USB_ReadInterrupts>
 8006086:	4603      	mov	r3, r0
 8006088:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800608c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006090:	f040 80db 	bne.w	800624a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4618      	mov	r0, r3
 800609a:	f003 fd04 	bl	8009aa6 <USB_ReadDevAllInEpInterrupt>
 800609e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80060a0:	2300      	movs	r3, #0
 80060a2:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80060a4:	e0cd      	b.n	8006242 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80060a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060a8:	f003 0301 	and.w	r3, r3, #1
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	f000 80c2 	beq.w	8006236 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060b8:	b2d2      	uxtb	r2, r2
 80060ba:	4611      	mov	r1, r2
 80060bc:	4618      	mov	r0, r3
 80060be:	f003 fd2a 	bl	8009b16 <USB_ReadDevInEPInterrupt>
 80060c2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80060c4:	693b      	ldr	r3, [r7, #16]
 80060c6:	f003 0301 	and.w	r3, r3, #1
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d057      	beq.n	800617e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80060ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d0:	f003 030f 	and.w	r3, r3, #15
 80060d4:	2201      	movs	r2, #1
 80060d6:	fa02 f303 	lsl.w	r3, r2, r3
 80060da:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80060dc:	69fb      	ldr	r3, [r7, #28]
 80060de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	43db      	mvns	r3, r3
 80060e8:	69f9      	ldr	r1, [r7, #28]
 80060ea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80060ee:	4013      	ands	r3, r2
 80060f0:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80060f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f4:	015a      	lsls	r2, r3, #5
 80060f6:	69fb      	ldr	r3, [r7, #28]
 80060f8:	4413      	add	r3, r2
 80060fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060fe:	461a      	mov	r2, r3
 8006100:	2301      	movs	r3, #1
 8006102:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	691b      	ldr	r3, [r3, #16]
 8006108:	2b01      	cmp	r3, #1
 800610a:	d132      	bne.n	8006172 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800610c:	6879      	ldr	r1, [r7, #4]
 800610e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006110:	4613      	mov	r3, r2
 8006112:	00db      	lsls	r3, r3, #3
 8006114:	4413      	add	r3, r2
 8006116:	009b      	lsls	r3, r3, #2
 8006118:	440b      	add	r3, r1
 800611a:	334c      	adds	r3, #76	; 0x4c
 800611c:	6819      	ldr	r1, [r3, #0]
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006122:	4613      	mov	r3, r2
 8006124:	00db      	lsls	r3, r3, #3
 8006126:	4413      	add	r3, r2
 8006128:	009b      	lsls	r3, r3, #2
 800612a:	4403      	add	r3, r0
 800612c:	3348      	adds	r3, #72	; 0x48
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4419      	add	r1, r3
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006136:	4613      	mov	r3, r2
 8006138:	00db      	lsls	r3, r3, #3
 800613a:	4413      	add	r3, r2
 800613c:	009b      	lsls	r3, r3, #2
 800613e:	4403      	add	r3, r0
 8006140:	334c      	adds	r3, #76	; 0x4c
 8006142:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8006144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006146:	2b00      	cmp	r3, #0
 8006148:	d113      	bne.n	8006172 <HAL_PCD_IRQHandler+0x3a2>
 800614a:	6879      	ldr	r1, [r7, #4]
 800614c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800614e:	4613      	mov	r3, r2
 8006150:	00db      	lsls	r3, r3, #3
 8006152:	4413      	add	r3, r2
 8006154:	009b      	lsls	r3, r3, #2
 8006156:	440b      	add	r3, r1
 8006158:	3354      	adds	r3, #84	; 0x54
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d108      	bne.n	8006172 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6818      	ldr	r0, [r3, #0]
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800616a:	461a      	mov	r2, r3
 800616c:	2101      	movs	r1, #1
 800616e:	f003 fd31 	bl	8009bd4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8006172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006174:	b2db      	uxtb	r3, r3
 8006176:	4619      	mov	r1, r3
 8006178:	6878      	ldr	r0, [r7, #4]
 800617a:	f012 fb48 	bl	801880e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800617e:	693b      	ldr	r3, [r7, #16]
 8006180:	f003 0308 	and.w	r3, r3, #8
 8006184:	2b00      	cmp	r3, #0
 8006186:	d008      	beq.n	800619a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8006188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800618a:	015a      	lsls	r2, r3, #5
 800618c:	69fb      	ldr	r3, [r7, #28]
 800618e:	4413      	add	r3, r2
 8006190:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006194:	461a      	mov	r2, r3
 8006196:	2308      	movs	r3, #8
 8006198:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800619a:	693b      	ldr	r3, [r7, #16]
 800619c:	f003 0310 	and.w	r3, r3, #16
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d008      	beq.n	80061b6 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80061a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a6:	015a      	lsls	r2, r3, #5
 80061a8:	69fb      	ldr	r3, [r7, #28]
 80061aa:	4413      	add	r3, r2
 80061ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061b0:	461a      	mov	r2, r3
 80061b2:	2310      	movs	r3, #16
 80061b4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80061b6:	693b      	ldr	r3, [r7, #16]
 80061b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d008      	beq.n	80061d2 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80061c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c2:	015a      	lsls	r2, r3, #5
 80061c4:	69fb      	ldr	r3, [r7, #28]
 80061c6:	4413      	add	r3, r2
 80061c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061cc:	461a      	mov	r2, r3
 80061ce:	2340      	movs	r3, #64	; 0x40
 80061d0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80061d2:	693b      	ldr	r3, [r7, #16]
 80061d4:	f003 0302 	and.w	r3, r3, #2
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d023      	beq.n	8006224 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80061dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80061de:	6a38      	ldr	r0, [r7, #32]
 80061e0:	f002 fc12 	bl	8008a08 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80061e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061e6:	4613      	mov	r3, r2
 80061e8:	00db      	lsls	r3, r3, #3
 80061ea:	4413      	add	r3, r2
 80061ec:	009b      	lsls	r3, r3, #2
 80061ee:	3338      	adds	r3, #56	; 0x38
 80061f0:	687a      	ldr	r2, [r7, #4]
 80061f2:	4413      	add	r3, r2
 80061f4:	3304      	adds	r3, #4
 80061f6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80061f8:	697b      	ldr	r3, [r7, #20]
 80061fa:	78db      	ldrb	r3, [r3, #3]
 80061fc:	2b01      	cmp	r3, #1
 80061fe:	d108      	bne.n	8006212 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	2200      	movs	r2, #0
 8006204:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8006206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006208:	b2db      	uxtb	r3, r3
 800620a:	4619      	mov	r1, r3
 800620c:	6878      	ldr	r0, [r7, #4]
 800620e:	f012 fb95 	bl	801893c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8006212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006214:	015a      	lsls	r2, r3, #5
 8006216:	69fb      	ldr	r3, [r7, #28]
 8006218:	4413      	add	r3, r2
 800621a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800621e:	461a      	mov	r2, r3
 8006220:	2302      	movs	r3, #2
 8006222:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8006224:	693b      	ldr	r3, [r7, #16]
 8006226:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800622a:	2b00      	cmp	r3, #0
 800622c:	d003      	beq.n	8006236 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800622e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006230:	6878      	ldr	r0, [r7, #4]
 8006232:	f000 fcdb 	bl	8006bec <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8006236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006238:	3301      	adds	r3, #1
 800623a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800623c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800623e:	085b      	lsrs	r3, r3, #1
 8006240:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006244:	2b00      	cmp	r3, #0
 8006246:	f47f af2e 	bne.w	80060a6 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4618      	mov	r0, r3
 8006250:	f003 fbfc 	bl	8009a4c <USB_ReadInterrupts>
 8006254:	4603      	mov	r3, r0
 8006256:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800625a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800625e:	d122      	bne.n	80062a6 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006260:	69fb      	ldr	r3, [r7, #28]
 8006262:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006266:	685b      	ldr	r3, [r3, #4]
 8006268:	69fa      	ldr	r2, [r7, #28]
 800626a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800626e:	f023 0301 	bic.w	r3, r3, #1
 8006272:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800627a:	2b01      	cmp	r3, #1
 800627c:	d108      	bne.n	8006290 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2200      	movs	r2, #0
 8006282:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006286:	2100      	movs	r1, #0
 8006288:	6878      	ldr	r0, [r7, #4]
 800628a:	f000 fec3 	bl	8007014 <HAL_PCDEx_LPM_Callback>
 800628e:	e002      	b.n	8006296 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8006290:	6878      	ldr	r0, [r7, #4]
 8006292:	f012 fb33 	bl	80188fc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	695a      	ldr	r2, [r3, #20]
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80062a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4618      	mov	r0, r3
 80062ac:	f003 fbce 	bl	8009a4c <USB_ReadInterrupts>
 80062b0:	4603      	mov	r3, r0
 80062b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80062b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80062ba:	d112      	bne.n	80062e2 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80062bc:	69fb      	ldr	r3, [r7, #28]
 80062be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062c2:	689b      	ldr	r3, [r3, #8]
 80062c4:	f003 0301 	and.w	r3, r3, #1
 80062c8:	2b01      	cmp	r3, #1
 80062ca:	d102      	bne.n	80062d2 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80062cc:	6878      	ldr	r0, [r7, #4]
 80062ce:	f012 faef 	bl	80188b0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	695a      	ldr	r2, [r3, #20]
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80062e0:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4618      	mov	r0, r3
 80062e8:	f003 fbb0 	bl	8009a4c <USB_ReadInterrupts>
 80062ec:	4603      	mov	r3, r0
 80062ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80062f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062f6:	f040 80b7 	bne.w	8006468 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80062fa:	69fb      	ldr	r3, [r7, #28]
 80062fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006300:	685b      	ldr	r3, [r3, #4]
 8006302:	69fa      	ldr	r2, [r7, #28]
 8006304:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006308:	f023 0301 	bic.w	r3, r3, #1
 800630c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	2110      	movs	r1, #16
 8006314:	4618      	mov	r0, r3
 8006316:	f002 fb77 	bl	8008a08 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800631a:	2300      	movs	r3, #0
 800631c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800631e:	e046      	b.n	80063ae <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8006320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006322:	015a      	lsls	r2, r3, #5
 8006324:	69fb      	ldr	r3, [r7, #28]
 8006326:	4413      	add	r3, r2
 8006328:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800632c:	461a      	mov	r2, r3
 800632e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006332:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006336:	015a      	lsls	r2, r3, #5
 8006338:	69fb      	ldr	r3, [r7, #28]
 800633a:	4413      	add	r3, r2
 800633c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006344:	0151      	lsls	r1, r2, #5
 8006346:	69fa      	ldr	r2, [r7, #28]
 8006348:	440a      	add	r2, r1
 800634a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800634e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006352:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8006354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006356:	015a      	lsls	r2, r3, #5
 8006358:	69fb      	ldr	r3, [r7, #28]
 800635a:	4413      	add	r3, r2
 800635c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006360:	461a      	mov	r2, r3
 8006362:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006366:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800636a:	015a      	lsls	r2, r3, #5
 800636c:	69fb      	ldr	r3, [r7, #28]
 800636e:	4413      	add	r3, r2
 8006370:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006378:	0151      	lsls	r1, r2, #5
 800637a:	69fa      	ldr	r2, [r7, #28]
 800637c:	440a      	add	r2, r1
 800637e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006382:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006386:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800638a:	015a      	lsls	r2, r3, #5
 800638c:	69fb      	ldr	r3, [r7, #28]
 800638e:	4413      	add	r3, r2
 8006390:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006398:	0151      	lsls	r1, r2, #5
 800639a:	69fa      	ldr	r2, [r7, #28]
 800639c:	440a      	add	r2, r1
 800639e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063a2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80063a6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80063a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063aa:	3301      	adds	r3, #1
 80063ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	685b      	ldr	r3, [r3, #4]
 80063b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80063b4:	429a      	cmp	r2, r3
 80063b6:	d3b3      	bcc.n	8006320 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80063b8:	69fb      	ldr	r3, [r7, #28]
 80063ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063be:	69db      	ldr	r3, [r3, #28]
 80063c0:	69fa      	ldr	r2, [r7, #28]
 80063c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80063c6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80063ca:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d016      	beq.n	8006402 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80063d4:	69fb      	ldr	r3, [r7, #28]
 80063d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80063de:	69fa      	ldr	r2, [r7, #28]
 80063e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80063e4:	f043 030b 	orr.w	r3, r3, #11
 80063e8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80063ec:	69fb      	ldr	r3, [r7, #28]
 80063ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063f4:	69fa      	ldr	r2, [r7, #28]
 80063f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80063fa:	f043 030b 	orr.w	r3, r3, #11
 80063fe:	6453      	str	r3, [r2, #68]	; 0x44
 8006400:	e015      	b.n	800642e <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8006402:	69fb      	ldr	r3, [r7, #28]
 8006404:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006408:	695b      	ldr	r3, [r3, #20]
 800640a:	69fa      	ldr	r2, [r7, #28]
 800640c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006410:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006414:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8006418:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800641a:	69fb      	ldr	r3, [r7, #28]
 800641c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006420:	691b      	ldr	r3, [r3, #16]
 8006422:	69fa      	ldr	r2, [r7, #28]
 8006424:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006428:	f043 030b 	orr.w	r3, r3, #11
 800642c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800642e:	69fb      	ldr	r3, [r7, #28]
 8006430:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	69fa      	ldr	r2, [r7, #28]
 8006438:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800643c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006440:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6818      	ldr	r0, [r3, #0]
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	691b      	ldr	r3, [r3, #16]
 800644a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006452:	461a      	mov	r2, r3
 8006454:	f003 fbbe 	bl	8009bd4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	695a      	ldr	r2, [r3, #20]
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8006466:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4618      	mov	r0, r3
 800646e:	f003 faed 	bl	8009a4c <USB_ReadInterrupts>
 8006472:	4603      	mov	r3, r0
 8006474:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006478:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800647c:	d124      	bne.n	80064c8 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4618      	mov	r0, r3
 8006484:	f003 fb83 	bl	8009b8e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	4618      	mov	r0, r3
 800648e:	f002 fb38 	bl	8008b02 <USB_GetDevSpeed>
 8006492:	4603      	mov	r3, r0
 8006494:	461a      	mov	r2, r3
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681c      	ldr	r4, [r3, #0]
 800649e:	f001 fa29 	bl	80078f4 <HAL_RCC_GetHCLKFreq>
 80064a2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80064a8:	b2db      	uxtb	r3, r3
 80064aa:	461a      	mov	r2, r3
 80064ac:	4620      	mov	r0, r4
 80064ae:	f002 f837 	bl	8008520 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f012 f9d3 	bl	801885e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	695a      	ldr	r2, [r3, #20]
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80064c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4618      	mov	r0, r3
 80064ce:	f003 fabd 	bl	8009a4c <USB_ReadInterrupts>
 80064d2:	4603      	mov	r3, r0
 80064d4:	f003 0308 	and.w	r3, r3, #8
 80064d8:	2b08      	cmp	r3, #8
 80064da:	d10a      	bne.n	80064f2 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80064dc:	6878      	ldr	r0, [r7, #4]
 80064de:	f012 f9b0 	bl	8018842 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	695a      	ldr	r2, [r3, #20]
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f002 0208 	and.w	r2, r2, #8
 80064f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	4618      	mov	r0, r3
 80064f8:	f003 faa8 	bl	8009a4c <USB_ReadInterrupts>
 80064fc:	4603      	mov	r3, r0
 80064fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006502:	2b80      	cmp	r3, #128	; 0x80
 8006504:	d122      	bne.n	800654c <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8006506:	6a3b      	ldr	r3, [r7, #32]
 8006508:	699b      	ldr	r3, [r3, #24]
 800650a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800650e:	6a3b      	ldr	r3, [r7, #32]
 8006510:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006512:	2301      	movs	r3, #1
 8006514:	627b      	str	r3, [r7, #36]	; 0x24
 8006516:	e014      	b.n	8006542 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8006518:	6879      	ldr	r1, [r7, #4]
 800651a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800651c:	4613      	mov	r3, r2
 800651e:	00db      	lsls	r3, r3, #3
 8006520:	4413      	add	r3, r2
 8006522:	009b      	lsls	r3, r3, #2
 8006524:	440b      	add	r3, r1
 8006526:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800652a:	781b      	ldrb	r3, [r3, #0]
 800652c:	2b01      	cmp	r3, #1
 800652e:	d105      	bne.n	800653c <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8006530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006532:	b2db      	uxtb	r3, r3
 8006534:	4619      	mov	r1, r3
 8006536:	6878      	ldr	r0, [r7, #4]
 8006538:	f000 fb27 	bl	8006b8a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800653c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800653e:	3301      	adds	r3, #1
 8006540:	627b      	str	r3, [r7, #36]	; 0x24
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	685b      	ldr	r3, [r3, #4]
 8006546:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006548:	429a      	cmp	r2, r3
 800654a:	d3e5      	bcc.n	8006518 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4618      	mov	r0, r3
 8006552:	f003 fa7b 	bl	8009a4c <USB_ReadInterrupts>
 8006556:	4603      	mov	r3, r0
 8006558:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800655c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006560:	d13b      	bne.n	80065da <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006562:	2301      	movs	r3, #1
 8006564:	627b      	str	r3, [r7, #36]	; 0x24
 8006566:	e02b      	b.n	80065c0 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8006568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800656a:	015a      	lsls	r2, r3, #5
 800656c:	69fb      	ldr	r3, [r7, #28]
 800656e:	4413      	add	r3, r2
 8006570:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006578:	6879      	ldr	r1, [r7, #4]
 800657a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800657c:	4613      	mov	r3, r2
 800657e:	00db      	lsls	r3, r3, #3
 8006580:	4413      	add	r3, r2
 8006582:	009b      	lsls	r3, r3, #2
 8006584:	440b      	add	r3, r1
 8006586:	3340      	adds	r3, #64	; 0x40
 8006588:	781b      	ldrb	r3, [r3, #0]
 800658a:	2b01      	cmp	r3, #1
 800658c:	d115      	bne.n	80065ba <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800658e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006590:	2b00      	cmp	r3, #0
 8006592:	da12      	bge.n	80065ba <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8006594:	6879      	ldr	r1, [r7, #4]
 8006596:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006598:	4613      	mov	r3, r2
 800659a:	00db      	lsls	r3, r3, #3
 800659c:	4413      	add	r3, r2
 800659e:	009b      	lsls	r3, r3, #2
 80065a0:	440b      	add	r3, r1
 80065a2:	333f      	adds	r3, #63	; 0x3f
 80065a4:	2201      	movs	r2, #1
 80065a6:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80065a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065aa:	b2db      	uxtb	r3, r3
 80065ac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80065b0:	b2db      	uxtb	r3, r3
 80065b2:	4619      	mov	r1, r3
 80065b4:	6878      	ldr	r0, [r7, #4]
 80065b6:	f000 fae8 	bl	8006b8a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80065ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065bc:	3301      	adds	r3, #1
 80065be:	627b      	str	r3, [r7, #36]	; 0x24
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	685b      	ldr	r3, [r3, #4]
 80065c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065c6:	429a      	cmp	r2, r3
 80065c8:	d3ce      	bcc.n	8006568 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	695a      	ldr	r2, [r3, #20]
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80065d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4618      	mov	r0, r3
 80065e0:	f003 fa34 	bl	8009a4c <USB_ReadInterrupts>
 80065e4:	4603      	mov	r3, r0
 80065e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80065ea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80065ee:	d155      	bne.n	800669c <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80065f0:	2301      	movs	r3, #1
 80065f2:	627b      	str	r3, [r7, #36]	; 0x24
 80065f4:	e045      	b.n	8006682 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80065f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f8:	015a      	lsls	r2, r3, #5
 80065fa:	69fb      	ldr	r3, [r7, #28]
 80065fc:	4413      	add	r3, r2
 80065fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006606:	6879      	ldr	r1, [r7, #4]
 8006608:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800660a:	4613      	mov	r3, r2
 800660c:	00db      	lsls	r3, r3, #3
 800660e:	4413      	add	r3, r2
 8006610:	009b      	lsls	r3, r3, #2
 8006612:	440b      	add	r3, r1
 8006614:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006618:	781b      	ldrb	r3, [r3, #0]
 800661a:	2b01      	cmp	r3, #1
 800661c:	d12e      	bne.n	800667c <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800661e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006620:	2b00      	cmp	r3, #0
 8006622:	da2b      	bge.n	800667c <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8006624:	69bb      	ldr	r3, [r7, #24]
 8006626:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8006630:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006634:	429a      	cmp	r2, r3
 8006636:	d121      	bne.n	800667c <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8006638:	6879      	ldr	r1, [r7, #4]
 800663a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800663c:	4613      	mov	r3, r2
 800663e:	00db      	lsls	r3, r3, #3
 8006640:	4413      	add	r3, r2
 8006642:	009b      	lsls	r3, r3, #2
 8006644:	440b      	add	r3, r1
 8006646:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800664a:	2201      	movs	r2, #1
 800664c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800664e:	6a3b      	ldr	r3, [r7, #32]
 8006650:	699b      	ldr	r3, [r3, #24]
 8006652:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006656:	6a3b      	ldr	r3, [r7, #32]
 8006658:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800665a:	6a3b      	ldr	r3, [r7, #32]
 800665c:	695b      	ldr	r3, [r3, #20]
 800665e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006662:	2b00      	cmp	r3, #0
 8006664:	d10a      	bne.n	800667c <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8006666:	69fb      	ldr	r3, [r7, #28]
 8006668:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	69fa      	ldr	r2, [r7, #28]
 8006670:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006674:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006678:	6053      	str	r3, [r2, #4]
            break;
 800667a:	e007      	b.n	800668c <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800667c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800667e:	3301      	adds	r3, #1
 8006680:	627b      	str	r3, [r7, #36]	; 0x24
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	685b      	ldr	r3, [r3, #4]
 8006686:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006688:	429a      	cmp	r2, r3
 800668a:	d3b4      	bcc.n	80065f6 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	695a      	ldr	r2, [r3, #20]
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800669a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4618      	mov	r0, r3
 80066a2:	f003 f9d3 	bl	8009a4c <USB_ReadInterrupts>
 80066a6:	4603      	mov	r3, r0
 80066a8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80066ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066b0:	d10a      	bne.n	80066c8 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	f012 f954 	bl	8018960 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	695a      	ldr	r2, [r3, #20]
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80066c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4618      	mov	r0, r3
 80066ce:	f003 f9bd 	bl	8009a4c <USB_ReadInterrupts>
 80066d2:	4603      	mov	r3, r0
 80066d4:	f003 0304 	and.w	r3, r3, #4
 80066d8:	2b04      	cmp	r3, #4
 80066da:	d115      	bne.n	8006708 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	685b      	ldr	r3, [r3, #4]
 80066e2:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80066e4:	69bb      	ldr	r3, [r7, #24]
 80066e6:	f003 0304 	and.w	r3, r3, #4
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d002      	beq.n	80066f4 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	f012 f944 	bl	801897c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	6859      	ldr	r1, [r3, #4]
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	69ba      	ldr	r2, [r7, #24]
 8006700:	430a      	orrs	r2, r1
 8006702:	605a      	str	r2, [r3, #4]
 8006704:	e000      	b.n	8006708 <HAL_PCD_IRQHandler+0x938>
      return;
 8006706:	bf00      	nop
    }
  }
}
 8006708:	3734      	adds	r7, #52	; 0x34
 800670a:	46bd      	mov	sp, r7
 800670c:	bd90      	pop	{r4, r7, pc}

0800670e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800670e:	b580      	push	{r7, lr}
 8006710:	b082      	sub	sp, #8
 8006712:	af00      	add	r7, sp, #0
 8006714:	6078      	str	r0, [r7, #4]
 8006716:	460b      	mov	r3, r1
 8006718:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006720:	2b01      	cmp	r3, #1
 8006722:	d101      	bne.n	8006728 <HAL_PCD_SetAddress+0x1a>
 8006724:	2302      	movs	r3, #2
 8006726:	e013      	b.n	8006750 <HAL_PCD_SetAddress+0x42>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2201      	movs	r2, #1
 800672c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	78fa      	ldrb	r2, [r7, #3]
 8006734:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	78fa      	ldrb	r2, [r7, #3]
 800673e:	4611      	mov	r1, r2
 8006740:	4618      	mov	r0, r3
 8006742:	f003 f91b 	bl	800997c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2200      	movs	r2, #0
 800674a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800674e:	2300      	movs	r3, #0
}
 8006750:	4618      	mov	r0, r3
 8006752:	3708      	adds	r7, #8
 8006754:	46bd      	mov	sp, r7
 8006756:	bd80      	pop	{r7, pc}

08006758 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b084      	sub	sp, #16
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
 8006760:	4608      	mov	r0, r1
 8006762:	4611      	mov	r1, r2
 8006764:	461a      	mov	r2, r3
 8006766:	4603      	mov	r3, r0
 8006768:	70fb      	strb	r3, [r7, #3]
 800676a:	460b      	mov	r3, r1
 800676c:	803b      	strh	r3, [r7, #0]
 800676e:	4613      	mov	r3, r2
 8006770:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8006772:	2300      	movs	r3, #0
 8006774:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006776:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800677a:	2b00      	cmp	r3, #0
 800677c:	da0f      	bge.n	800679e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800677e:	78fb      	ldrb	r3, [r7, #3]
 8006780:	f003 020f 	and.w	r2, r3, #15
 8006784:	4613      	mov	r3, r2
 8006786:	00db      	lsls	r3, r3, #3
 8006788:	4413      	add	r3, r2
 800678a:	009b      	lsls	r3, r3, #2
 800678c:	3338      	adds	r3, #56	; 0x38
 800678e:	687a      	ldr	r2, [r7, #4]
 8006790:	4413      	add	r3, r2
 8006792:	3304      	adds	r3, #4
 8006794:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	2201      	movs	r2, #1
 800679a:	705a      	strb	r2, [r3, #1]
 800679c:	e00f      	b.n	80067be <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800679e:	78fb      	ldrb	r3, [r7, #3]
 80067a0:	f003 020f 	and.w	r2, r3, #15
 80067a4:	4613      	mov	r3, r2
 80067a6:	00db      	lsls	r3, r3, #3
 80067a8:	4413      	add	r3, r2
 80067aa:	009b      	lsls	r3, r3, #2
 80067ac:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80067b0:	687a      	ldr	r2, [r7, #4]
 80067b2:	4413      	add	r3, r2
 80067b4:	3304      	adds	r3, #4
 80067b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	2200      	movs	r2, #0
 80067bc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80067be:	78fb      	ldrb	r3, [r7, #3]
 80067c0:	f003 030f 	and.w	r3, r3, #15
 80067c4:	b2da      	uxtb	r2, r3
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80067ca:	883a      	ldrh	r2, [r7, #0]
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	78ba      	ldrb	r2, [r7, #2]
 80067d4:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	785b      	ldrb	r3, [r3, #1]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d004      	beq.n	80067e8 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	781b      	ldrb	r3, [r3, #0]
 80067e2:	b29a      	uxth	r2, r3
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80067e8:	78bb      	ldrb	r3, [r7, #2]
 80067ea:	2b02      	cmp	r3, #2
 80067ec:	d102      	bne.n	80067f4 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	2200      	movs	r2, #0
 80067f2:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80067fa:	2b01      	cmp	r3, #1
 80067fc:	d101      	bne.n	8006802 <HAL_PCD_EP_Open+0xaa>
 80067fe:	2302      	movs	r3, #2
 8006800:	e00e      	b.n	8006820 <HAL_PCD_EP_Open+0xc8>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2201      	movs	r2, #1
 8006806:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	68f9      	ldr	r1, [r7, #12]
 8006810:	4618      	mov	r0, r3
 8006812:	f002 f99b 	bl	8008b4c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2200      	movs	r2, #0
 800681a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800681e:	7afb      	ldrb	r3, [r7, #11]
}
 8006820:	4618      	mov	r0, r3
 8006822:	3710      	adds	r7, #16
 8006824:	46bd      	mov	sp, r7
 8006826:	bd80      	pop	{r7, pc}

08006828 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b084      	sub	sp, #16
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
 8006830:	460b      	mov	r3, r1
 8006832:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006834:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006838:	2b00      	cmp	r3, #0
 800683a:	da0f      	bge.n	800685c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800683c:	78fb      	ldrb	r3, [r7, #3]
 800683e:	f003 020f 	and.w	r2, r3, #15
 8006842:	4613      	mov	r3, r2
 8006844:	00db      	lsls	r3, r3, #3
 8006846:	4413      	add	r3, r2
 8006848:	009b      	lsls	r3, r3, #2
 800684a:	3338      	adds	r3, #56	; 0x38
 800684c:	687a      	ldr	r2, [r7, #4]
 800684e:	4413      	add	r3, r2
 8006850:	3304      	adds	r3, #4
 8006852:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	2201      	movs	r2, #1
 8006858:	705a      	strb	r2, [r3, #1]
 800685a:	e00f      	b.n	800687c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800685c:	78fb      	ldrb	r3, [r7, #3]
 800685e:	f003 020f 	and.w	r2, r3, #15
 8006862:	4613      	mov	r3, r2
 8006864:	00db      	lsls	r3, r3, #3
 8006866:	4413      	add	r3, r2
 8006868:	009b      	lsls	r3, r3, #2
 800686a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800686e:	687a      	ldr	r2, [r7, #4]
 8006870:	4413      	add	r3, r2
 8006872:	3304      	adds	r3, #4
 8006874:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	2200      	movs	r2, #0
 800687a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800687c:	78fb      	ldrb	r3, [r7, #3]
 800687e:	f003 030f 	and.w	r3, r3, #15
 8006882:	b2da      	uxtb	r2, r3
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800688e:	2b01      	cmp	r3, #1
 8006890:	d101      	bne.n	8006896 <HAL_PCD_EP_Close+0x6e>
 8006892:	2302      	movs	r3, #2
 8006894:	e00e      	b.n	80068b4 <HAL_PCD_EP_Close+0x8c>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2201      	movs	r2, #1
 800689a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	68f9      	ldr	r1, [r7, #12]
 80068a4:	4618      	mov	r0, r3
 80068a6:	f002 f9d9 	bl	8008c5c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2200      	movs	r2, #0
 80068ae:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80068b2:	2300      	movs	r3, #0
}
 80068b4:	4618      	mov	r0, r3
 80068b6:	3710      	adds	r7, #16
 80068b8:	46bd      	mov	sp, r7
 80068ba:	bd80      	pop	{r7, pc}

080068bc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b086      	sub	sp, #24
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	60f8      	str	r0, [r7, #12]
 80068c4:	607a      	str	r2, [r7, #4]
 80068c6:	603b      	str	r3, [r7, #0]
 80068c8:	460b      	mov	r3, r1
 80068ca:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80068cc:	7afb      	ldrb	r3, [r7, #11]
 80068ce:	f003 020f 	and.w	r2, r3, #15
 80068d2:	4613      	mov	r3, r2
 80068d4:	00db      	lsls	r3, r3, #3
 80068d6:	4413      	add	r3, r2
 80068d8:	009b      	lsls	r3, r3, #2
 80068da:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80068de:	68fa      	ldr	r2, [r7, #12]
 80068e0:	4413      	add	r3, r2
 80068e2:	3304      	adds	r3, #4
 80068e4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80068e6:	697b      	ldr	r3, [r7, #20]
 80068e8:	687a      	ldr	r2, [r7, #4]
 80068ea:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80068ec:	697b      	ldr	r3, [r7, #20]
 80068ee:	683a      	ldr	r2, [r7, #0]
 80068f0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80068f2:	697b      	ldr	r3, [r7, #20]
 80068f4:	2200      	movs	r2, #0
 80068f6:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80068f8:	697b      	ldr	r3, [r7, #20]
 80068fa:	2200      	movs	r2, #0
 80068fc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80068fe:	7afb      	ldrb	r3, [r7, #11]
 8006900:	f003 030f 	and.w	r3, r3, #15
 8006904:	b2da      	uxtb	r2, r3
 8006906:	697b      	ldr	r3, [r7, #20]
 8006908:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	691b      	ldr	r3, [r3, #16]
 800690e:	2b01      	cmp	r3, #1
 8006910:	d102      	bne.n	8006918 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006912:	687a      	ldr	r2, [r7, #4]
 8006914:	697b      	ldr	r3, [r7, #20]
 8006916:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006918:	7afb      	ldrb	r3, [r7, #11]
 800691a:	f003 030f 	and.w	r3, r3, #15
 800691e:	2b00      	cmp	r3, #0
 8006920:	d109      	bne.n	8006936 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	6818      	ldr	r0, [r3, #0]
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	691b      	ldr	r3, [r3, #16]
 800692a:	b2db      	uxtb	r3, r3
 800692c:	461a      	mov	r2, r3
 800692e:	6979      	ldr	r1, [r7, #20]
 8006930:	f002 fcb8 	bl	80092a4 <USB_EP0StartXfer>
 8006934:	e008      	b.n	8006948 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	6818      	ldr	r0, [r3, #0]
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	691b      	ldr	r3, [r3, #16]
 800693e:	b2db      	uxtb	r3, r3
 8006940:	461a      	mov	r2, r3
 8006942:	6979      	ldr	r1, [r7, #20]
 8006944:	f002 fa66 	bl	8008e14 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006948:	2300      	movs	r3, #0
}
 800694a:	4618      	mov	r0, r3
 800694c:	3718      	adds	r7, #24
 800694e:	46bd      	mov	sp, r7
 8006950:	bd80      	pop	{r7, pc}

08006952 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006952:	b480      	push	{r7}
 8006954:	b083      	sub	sp, #12
 8006956:	af00      	add	r7, sp, #0
 8006958:	6078      	str	r0, [r7, #4]
 800695a:	460b      	mov	r3, r1
 800695c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800695e:	78fb      	ldrb	r3, [r7, #3]
 8006960:	f003 020f 	and.w	r2, r3, #15
 8006964:	6879      	ldr	r1, [r7, #4]
 8006966:	4613      	mov	r3, r2
 8006968:	00db      	lsls	r3, r3, #3
 800696a:	4413      	add	r3, r2
 800696c:	009b      	lsls	r3, r3, #2
 800696e:	440b      	add	r3, r1
 8006970:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8006974:	681b      	ldr	r3, [r3, #0]
}
 8006976:	4618      	mov	r0, r3
 8006978:	370c      	adds	r7, #12
 800697a:	46bd      	mov	sp, r7
 800697c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006980:	4770      	bx	lr

08006982 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006982:	b580      	push	{r7, lr}
 8006984:	b086      	sub	sp, #24
 8006986:	af00      	add	r7, sp, #0
 8006988:	60f8      	str	r0, [r7, #12]
 800698a:	607a      	str	r2, [r7, #4]
 800698c:	603b      	str	r3, [r7, #0]
 800698e:	460b      	mov	r3, r1
 8006990:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006992:	7afb      	ldrb	r3, [r7, #11]
 8006994:	f003 020f 	and.w	r2, r3, #15
 8006998:	4613      	mov	r3, r2
 800699a:	00db      	lsls	r3, r3, #3
 800699c:	4413      	add	r3, r2
 800699e:	009b      	lsls	r3, r3, #2
 80069a0:	3338      	adds	r3, #56	; 0x38
 80069a2:	68fa      	ldr	r2, [r7, #12]
 80069a4:	4413      	add	r3, r2
 80069a6:	3304      	adds	r3, #4
 80069a8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80069aa:	697b      	ldr	r3, [r7, #20]
 80069ac:	687a      	ldr	r2, [r7, #4]
 80069ae:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80069b0:	697b      	ldr	r3, [r7, #20]
 80069b2:	683a      	ldr	r2, [r7, #0]
 80069b4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80069b6:	697b      	ldr	r3, [r7, #20]
 80069b8:	2200      	movs	r2, #0
 80069ba:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80069bc:	697b      	ldr	r3, [r7, #20]
 80069be:	2201      	movs	r2, #1
 80069c0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80069c2:	7afb      	ldrb	r3, [r7, #11]
 80069c4:	f003 030f 	and.w	r3, r3, #15
 80069c8:	b2da      	uxtb	r2, r3
 80069ca:	697b      	ldr	r3, [r7, #20]
 80069cc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	691b      	ldr	r3, [r3, #16]
 80069d2:	2b01      	cmp	r3, #1
 80069d4:	d102      	bne.n	80069dc <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80069d6:	687a      	ldr	r2, [r7, #4]
 80069d8:	697b      	ldr	r3, [r7, #20]
 80069da:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80069dc:	7afb      	ldrb	r3, [r7, #11]
 80069de:	f003 030f 	and.w	r3, r3, #15
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d109      	bne.n	80069fa <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	6818      	ldr	r0, [r3, #0]
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	691b      	ldr	r3, [r3, #16]
 80069ee:	b2db      	uxtb	r3, r3
 80069f0:	461a      	mov	r2, r3
 80069f2:	6979      	ldr	r1, [r7, #20]
 80069f4:	f002 fc56 	bl	80092a4 <USB_EP0StartXfer>
 80069f8:	e008      	b.n	8006a0c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	6818      	ldr	r0, [r3, #0]
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	691b      	ldr	r3, [r3, #16]
 8006a02:	b2db      	uxtb	r3, r3
 8006a04:	461a      	mov	r2, r3
 8006a06:	6979      	ldr	r1, [r7, #20]
 8006a08:	f002 fa04 	bl	8008e14 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006a0c:	2300      	movs	r3, #0
}
 8006a0e:	4618      	mov	r0, r3
 8006a10:	3718      	adds	r7, #24
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bd80      	pop	{r7, pc}

08006a16 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006a16:	b580      	push	{r7, lr}
 8006a18:	b084      	sub	sp, #16
 8006a1a:	af00      	add	r7, sp, #0
 8006a1c:	6078      	str	r0, [r7, #4]
 8006a1e:	460b      	mov	r3, r1
 8006a20:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006a22:	78fb      	ldrb	r3, [r7, #3]
 8006a24:	f003 020f 	and.w	r2, r3, #15
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	685b      	ldr	r3, [r3, #4]
 8006a2c:	429a      	cmp	r2, r3
 8006a2e:	d901      	bls.n	8006a34 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006a30:	2301      	movs	r3, #1
 8006a32:	e050      	b.n	8006ad6 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006a34:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	da0f      	bge.n	8006a5c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006a3c:	78fb      	ldrb	r3, [r7, #3]
 8006a3e:	f003 020f 	and.w	r2, r3, #15
 8006a42:	4613      	mov	r3, r2
 8006a44:	00db      	lsls	r3, r3, #3
 8006a46:	4413      	add	r3, r2
 8006a48:	009b      	lsls	r3, r3, #2
 8006a4a:	3338      	adds	r3, #56	; 0x38
 8006a4c:	687a      	ldr	r2, [r7, #4]
 8006a4e:	4413      	add	r3, r2
 8006a50:	3304      	adds	r3, #4
 8006a52:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	2201      	movs	r2, #1
 8006a58:	705a      	strb	r2, [r3, #1]
 8006a5a:	e00d      	b.n	8006a78 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006a5c:	78fa      	ldrb	r2, [r7, #3]
 8006a5e:	4613      	mov	r3, r2
 8006a60:	00db      	lsls	r3, r3, #3
 8006a62:	4413      	add	r3, r2
 8006a64:	009b      	lsls	r3, r3, #2
 8006a66:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006a6a:	687a      	ldr	r2, [r7, #4]
 8006a6c:	4413      	add	r3, r2
 8006a6e:	3304      	adds	r3, #4
 8006a70:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	2200      	movs	r2, #0
 8006a76:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	2201      	movs	r2, #1
 8006a7c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006a7e:	78fb      	ldrb	r3, [r7, #3]
 8006a80:	f003 030f 	and.w	r3, r3, #15
 8006a84:	b2da      	uxtb	r2, r3
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006a90:	2b01      	cmp	r3, #1
 8006a92:	d101      	bne.n	8006a98 <HAL_PCD_EP_SetStall+0x82>
 8006a94:	2302      	movs	r3, #2
 8006a96:	e01e      	b.n	8006ad6 <HAL_PCD_EP_SetStall+0xc0>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2201      	movs	r2, #1
 8006a9c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	68f9      	ldr	r1, [r7, #12]
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	f002 fe94 	bl	80097d4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006aac:	78fb      	ldrb	r3, [r7, #3]
 8006aae:	f003 030f 	and.w	r3, r3, #15
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d10a      	bne.n	8006acc <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6818      	ldr	r0, [r3, #0]
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	691b      	ldr	r3, [r3, #16]
 8006abe:	b2d9      	uxtb	r1, r3
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006ac6:	461a      	mov	r2, r3
 8006ac8:	f003 f884 	bl	8009bd4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2200      	movs	r2, #0
 8006ad0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006ad4:	2300      	movs	r3, #0
}
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	3710      	adds	r7, #16
 8006ada:	46bd      	mov	sp, r7
 8006adc:	bd80      	pop	{r7, pc}

08006ade <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006ade:	b580      	push	{r7, lr}
 8006ae0:	b084      	sub	sp, #16
 8006ae2:	af00      	add	r7, sp, #0
 8006ae4:	6078      	str	r0, [r7, #4]
 8006ae6:	460b      	mov	r3, r1
 8006ae8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006aea:	78fb      	ldrb	r3, [r7, #3]
 8006aec:	f003 020f 	and.w	r2, r3, #15
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	685b      	ldr	r3, [r3, #4]
 8006af4:	429a      	cmp	r2, r3
 8006af6:	d901      	bls.n	8006afc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006af8:	2301      	movs	r3, #1
 8006afa:	e042      	b.n	8006b82 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006afc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	da0f      	bge.n	8006b24 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006b04:	78fb      	ldrb	r3, [r7, #3]
 8006b06:	f003 020f 	and.w	r2, r3, #15
 8006b0a:	4613      	mov	r3, r2
 8006b0c:	00db      	lsls	r3, r3, #3
 8006b0e:	4413      	add	r3, r2
 8006b10:	009b      	lsls	r3, r3, #2
 8006b12:	3338      	adds	r3, #56	; 0x38
 8006b14:	687a      	ldr	r2, [r7, #4]
 8006b16:	4413      	add	r3, r2
 8006b18:	3304      	adds	r3, #4
 8006b1a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	2201      	movs	r2, #1
 8006b20:	705a      	strb	r2, [r3, #1]
 8006b22:	e00f      	b.n	8006b44 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006b24:	78fb      	ldrb	r3, [r7, #3]
 8006b26:	f003 020f 	and.w	r2, r3, #15
 8006b2a:	4613      	mov	r3, r2
 8006b2c:	00db      	lsls	r3, r3, #3
 8006b2e:	4413      	add	r3, r2
 8006b30:	009b      	lsls	r3, r3, #2
 8006b32:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006b36:	687a      	ldr	r2, [r7, #4]
 8006b38:	4413      	add	r3, r2
 8006b3a:	3304      	adds	r3, #4
 8006b3c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	2200      	movs	r2, #0
 8006b42:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	2200      	movs	r2, #0
 8006b48:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006b4a:	78fb      	ldrb	r3, [r7, #3]
 8006b4c:	f003 030f 	and.w	r3, r3, #15
 8006b50:	b2da      	uxtb	r2, r3
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006b5c:	2b01      	cmp	r3, #1
 8006b5e:	d101      	bne.n	8006b64 <HAL_PCD_EP_ClrStall+0x86>
 8006b60:	2302      	movs	r3, #2
 8006b62:	e00e      	b.n	8006b82 <HAL_PCD_EP_ClrStall+0xa4>
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2201      	movs	r2, #1
 8006b68:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	68f9      	ldr	r1, [r7, #12]
 8006b72:	4618      	mov	r0, r3
 8006b74:	f002 fe9c 	bl	80098b0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006b80:	2300      	movs	r3, #0
}
 8006b82:	4618      	mov	r0, r3
 8006b84:	3710      	adds	r7, #16
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bd80      	pop	{r7, pc}

08006b8a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006b8a:	b580      	push	{r7, lr}
 8006b8c:	b084      	sub	sp, #16
 8006b8e:	af00      	add	r7, sp, #0
 8006b90:	6078      	str	r0, [r7, #4]
 8006b92:	460b      	mov	r3, r1
 8006b94:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8006b96:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	da0c      	bge.n	8006bb8 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006b9e:	78fb      	ldrb	r3, [r7, #3]
 8006ba0:	f003 020f 	and.w	r2, r3, #15
 8006ba4:	4613      	mov	r3, r2
 8006ba6:	00db      	lsls	r3, r3, #3
 8006ba8:	4413      	add	r3, r2
 8006baa:	009b      	lsls	r3, r3, #2
 8006bac:	3338      	adds	r3, #56	; 0x38
 8006bae:	687a      	ldr	r2, [r7, #4]
 8006bb0:	4413      	add	r3, r2
 8006bb2:	3304      	adds	r3, #4
 8006bb4:	60fb      	str	r3, [r7, #12]
 8006bb6:	e00c      	b.n	8006bd2 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006bb8:	78fb      	ldrb	r3, [r7, #3]
 8006bba:	f003 020f 	and.w	r2, r3, #15
 8006bbe:	4613      	mov	r3, r2
 8006bc0:	00db      	lsls	r3, r3, #3
 8006bc2:	4413      	add	r3, r2
 8006bc4:	009b      	lsls	r3, r3, #2
 8006bc6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006bca:	687a      	ldr	r2, [r7, #4]
 8006bcc:	4413      	add	r3, r2
 8006bce:	3304      	adds	r3, #4
 8006bd0:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	68f9      	ldr	r1, [r7, #12]
 8006bd8:	4618      	mov	r0, r3
 8006bda:	f002 fcbb 	bl	8009554 <USB_EPStopXfer>
 8006bde:	4603      	mov	r3, r0
 8006be0:	72fb      	strb	r3, [r7, #11]

  return ret;
 8006be2:	7afb      	ldrb	r3, [r7, #11]
}
 8006be4:	4618      	mov	r0, r3
 8006be6:	3710      	adds	r7, #16
 8006be8:	46bd      	mov	sp, r7
 8006bea:	bd80      	pop	{r7, pc}

08006bec <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b08a      	sub	sp, #40	; 0x28
 8006bf0:	af02      	add	r7, sp, #8
 8006bf2:	6078      	str	r0, [r7, #4]
 8006bf4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bfc:	697b      	ldr	r3, [r7, #20]
 8006bfe:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8006c00:	683a      	ldr	r2, [r7, #0]
 8006c02:	4613      	mov	r3, r2
 8006c04:	00db      	lsls	r3, r3, #3
 8006c06:	4413      	add	r3, r2
 8006c08:	009b      	lsls	r3, r3, #2
 8006c0a:	3338      	adds	r3, #56	; 0x38
 8006c0c:	687a      	ldr	r2, [r7, #4]
 8006c0e:	4413      	add	r3, r2
 8006c10:	3304      	adds	r3, #4
 8006c12:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	6a1a      	ldr	r2, [r3, #32]
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	699b      	ldr	r3, [r3, #24]
 8006c1c:	429a      	cmp	r2, r3
 8006c1e:	d901      	bls.n	8006c24 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006c20:	2301      	movs	r3, #1
 8006c22:	e06c      	b.n	8006cfe <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	699a      	ldr	r2, [r3, #24]
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	6a1b      	ldr	r3, [r3, #32]
 8006c2c:	1ad3      	subs	r3, r2, r3
 8006c2e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	68db      	ldr	r3, [r3, #12]
 8006c34:	69fa      	ldr	r2, [r7, #28]
 8006c36:	429a      	cmp	r2, r3
 8006c38:	d902      	bls.n	8006c40 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	68db      	ldr	r3, [r3, #12]
 8006c3e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006c40:	69fb      	ldr	r3, [r7, #28]
 8006c42:	3303      	adds	r3, #3
 8006c44:	089b      	lsrs	r3, r3, #2
 8006c46:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006c48:	e02b      	b.n	8006ca2 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	699a      	ldr	r2, [r3, #24]
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	6a1b      	ldr	r3, [r3, #32]
 8006c52:	1ad3      	subs	r3, r2, r3
 8006c54:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	68db      	ldr	r3, [r3, #12]
 8006c5a:	69fa      	ldr	r2, [r7, #28]
 8006c5c:	429a      	cmp	r2, r3
 8006c5e:	d902      	bls.n	8006c66 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	68db      	ldr	r3, [r3, #12]
 8006c64:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8006c66:	69fb      	ldr	r3, [r7, #28]
 8006c68:	3303      	adds	r3, #3
 8006c6a:	089b      	lsrs	r3, r3, #2
 8006c6c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	6919      	ldr	r1, [r3, #16]
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	b2da      	uxtb	r2, r3
 8006c76:	69fb      	ldr	r3, [r7, #28]
 8006c78:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006c7e:	b2db      	uxtb	r3, r3
 8006c80:	9300      	str	r3, [sp, #0]
 8006c82:	4603      	mov	r3, r0
 8006c84:	6978      	ldr	r0, [r7, #20]
 8006c86:	f002 fd0f 	bl	80096a8 <USB_WritePacket>

    ep->xfer_buff  += len;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	691a      	ldr	r2, [r3, #16]
 8006c8e:	69fb      	ldr	r3, [r7, #28]
 8006c90:	441a      	add	r2, r3
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	6a1a      	ldr	r2, [r3, #32]
 8006c9a:	69fb      	ldr	r3, [r7, #28]
 8006c9c:	441a      	add	r2, r3
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	015a      	lsls	r2, r3, #5
 8006ca6:	693b      	ldr	r3, [r7, #16]
 8006ca8:	4413      	add	r3, r2
 8006caa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cae:	699b      	ldr	r3, [r3, #24]
 8006cb0:	b29b      	uxth	r3, r3
 8006cb2:	69ba      	ldr	r2, [r7, #24]
 8006cb4:	429a      	cmp	r2, r3
 8006cb6:	d809      	bhi.n	8006ccc <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	6a1a      	ldr	r2, [r3, #32]
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006cc0:	429a      	cmp	r2, r3
 8006cc2:	d203      	bcs.n	8006ccc <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	699b      	ldr	r3, [r3, #24]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d1be      	bne.n	8006c4a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	699a      	ldr	r2, [r3, #24]
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	6a1b      	ldr	r3, [r3, #32]
 8006cd4:	429a      	cmp	r2, r3
 8006cd6:	d811      	bhi.n	8006cfc <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	f003 030f 	and.w	r3, r3, #15
 8006cde:	2201      	movs	r2, #1
 8006ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ce4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006ce6:	693b      	ldr	r3, [r7, #16]
 8006ce8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	43db      	mvns	r3, r3
 8006cf2:	6939      	ldr	r1, [r7, #16]
 8006cf4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006cf8:	4013      	ands	r3, r2
 8006cfa:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8006cfc:	2300      	movs	r3, #0
}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	3720      	adds	r7, #32
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bd80      	pop	{r7, pc}
	...

08006d08 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b088      	sub	sp, #32
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
 8006d10:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d18:	69fb      	ldr	r3, [r7, #28]
 8006d1a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006d1c:	69fb      	ldr	r3, [r7, #28]
 8006d1e:	333c      	adds	r3, #60	; 0x3c
 8006d20:	3304      	adds	r3, #4
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	015a      	lsls	r2, r3, #5
 8006d2a:	69bb      	ldr	r3, [r7, #24]
 8006d2c:	4413      	add	r3, r2
 8006d2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d32:	689b      	ldr	r3, [r3, #8]
 8006d34:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	691b      	ldr	r3, [r3, #16]
 8006d3a:	2b01      	cmp	r3, #1
 8006d3c:	d17b      	bne.n	8006e36 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8006d3e:	693b      	ldr	r3, [r7, #16]
 8006d40:	f003 0308 	and.w	r3, r3, #8
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d015      	beq.n	8006d74 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006d48:	697b      	ldr	r3, [r7, #20]
 8006d4a:	4a61      	ldr	r2, [pc, #388]	; (8006ed0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	f240 80b9 	bls.w	8006ec4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006d52:	693b      	ldr	r3, [r7, #16]
 8006d54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	f000 80b3 	beq.w	8006ec4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	015a      	lsls	r2, r3, #5
 8006d62:	69bb      	ldr	r3, [r7, #24]
 8006d64:	4413      	add	r3, r2
 8006d66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d6a:	461a      	mov	r2, r3
 8006d6c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d70:	6093      	str	r3, [r2, #8]
 8006d72:	e0a7      	b.n	8006ec4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006d74:	693b      	ldr	r3, [r7, #16]
 8006d76:	f003 0320 	and.w	r3, r3, #32
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d009      	beq.n	8006d92 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	015a      	lsls	r2, r3, #5
 8006d82:	69bb      	ldr	r3, [r7, #24]
 8006d84:	4413      	add	r3, r2
 8006d86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d8a:	461a      	mov	r2, r3
 8006d8c:	2320      	movs	r3, #32
 8006d8e:	6093      	str	r3, [r2, #8]
 8006d90:	e098      	b.n	8006ec4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8006d92:	693b      	ldr	r3, [r7, #16]
 8006d94:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	f040 8093 	bne.w	8006ec4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006d9e:	697b      	ldr	r3, [r7, #20]
 8006da0:	4a4b      	ldr	r2, [pc, #300]	; (8006ed0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d90f      	bls.n	8006dc6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006da6:	693b      	ldr	r3, [r7, #16]
 8006da8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d00a      	beq.n	8006dc6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	015a      	lsls	r2, r3, #5
 8006db4:	69bb      	ldr	r3, [r7, #24]
 8006db6:	4413      	add	r3, r2
 8006db8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dbc:	461a      	mov	r2, r3
 8006dbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006dc2:	6093      	str	r3, [r2, #8]
 8006dc4:	e07e      	b.n	8006ec4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8006dc6:	683a      	ldr	r2, [r7, #0]
 8006dc8:	4613      	mov	r3, r2
 8006dca:	00db      	lsls	r3, r3, #3
 8006dcc:	4413      	add	r3, r2
 8006dce:	009b      	lsls	r3, r3, #2
 8006dd0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006dd4:	687a      	ldr	r2, [r7, #4]
 8006dd6:	4413      	add	r3, r2
 8006dd8:	3304      	adds	r3, #4
 8006dda:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	69da      	ldr	r2, [r3, #28]
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	0159      	lsls	r1, r3, #5
 8006de4:	69bb      	ldr	r3, [r7, #24]
 8006de6:	440b      	add	r3, r1
 8006de8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dec:	691b      	ldr	r3, [r3, #16]
 8006dee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006df2:	1ad2      	subs	r2, r2, r3
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d114      	bne.n	8006e28 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	699b      	ldr	r3, [r3, #24]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d109      	bne.n	8006e1a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6818      	ldr	r0, [r3, #0]
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006e10:	461a      	mov	r2, r3
 8006e12:	2101      	movs	r1, #1
 8006e14:	f002 fede 	bl	8009bd4 <USB_EP0_OutStart>
 8006e18:	e006      	b.n	8006e28 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	691a      	ldr	r2, [r3, #16]
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	6a1b      	ldr	r3, [r3, #32]
 8006e22:	441a      	add	r2, r3
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	b2db      	uxtb	r3, r3
 8006e2c:	4619      	mov	r1, r3
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	f011 fcd2 	bl	80187d8 <HAL_PCD_DataOutStageCallback>
 8006e34:	e046      	b.n	8006ec4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006e36:	697b      	ldr	r3, [r7, #20]
 8006e38:	4a26      	ldr	r2, [pc, #152]	; (8006ed4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d124      	bne.n	8006e88 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006e3e:	693b      	ldr	r3, [r7, #16]
 8006e40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d00a      	beq.n	8006e5e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	015a      	lsls	r2, r3, #5
 8006e4c:	69bb      	ldr	r3, [r7, #24]
 8006e4e:	4413      	add	r3, r2
 8006e50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e54:	461a      	mov	r2, r3
 8006e56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e5a:	6093      	str	r3, [r2, #8]
 8006e5c:	e032      	b.n	8006ec4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006e5e:	693b      	ldr	r3, [r7, #16]
 8006e60:	f003 0320 	and.w	r3, r3, #32
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d008      	beq.n	8006e7a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	015a      	lsls	r2, r3, #5
 8006e6c:	69bb      	ldr	r3, [r7, #24]
 8006e6e:	4413      	add	r3, r2
 8006e70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e74:	461a      	mov	r2, r3
 8006e76:	2320      	movs	r3, #32
 8006e78:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	b2db      	uxtb	r3, r3
 8006e7e:	4619      	mov	r1, r3
 8006e80:	6878      	ldr	r0, [r7, #4]
 8006e82:	f011 fca9 	bl	80187d8 <HAL_PCD_DataOutStageCallback>
 8006e86:	e01d      	b.n	8006ec4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d114      	bne.n	8006eb8 <PCD_EP_OutXfrComplete_int+0x1b0>
 8006e8e:	6879      	ldr	r1, [r7, #4]
 8006e90:	683a      	ldr	r2, [r7, #0]
 8006e92:	4613      	mov	r3, r2
 8006e94:	00db      	lsls	r3, r3, #3
 8006e96:	4413      	add	r3, r2
 8006e98:	009b      	lsls	r3, r3, #2
 8006e9a:	440b      	add	r3, r1
 8006e9c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d108      	bne.n	8006eb8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6818      	ldr	r0, [r3, #0]
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006eb0:	461a      	mov	r2, r3
 8006eb2:	2100      	movs	r1, #0
 8006eb4:	f002 fe8e 	bl	8009bd4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	b2db      	uxtb	r3, r3
 8006ebc:	4619      	mov	r1, r3
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	f011 fc8a 	bl	80187d8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006ec4:	2300      	movs	r3, #0
}
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	3720      	adds	r7, #32
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	bd80      	pop	{r7, pc}
 8006ece:	bf00      	nop
 8006ed0:	4f54300a 	.word	0x4f54300a
 8006ed4:	4f54310a 	.word	0x4f54310a

08006ed8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b086      	sub	sp, #24
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
 8006ee0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ee8:	697b      	ldr	r3, [r7, #20]
 8006eea:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006eec:	697b      	ldr	r3, [r7, #20]
 8006eee:	333c      	adds	r3, #60	; 0x3c
 8006ef0:	3304      	adds	r3, #4
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	015a      	lsls	r2, r3, #5
 8006efa:	693b      	ldr	r3, [r7, #16]
 8006efc:	4413      	add	r3, r2
 8006efe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f02:	689b      	ldr	r3, [r3, #8]
 8006f04:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	4a15      	ldr	r2, [pc, #84]	; (8006f60 <PCD_EP_OutSetupPacket_int+0x88>)
 8006f0a:	4293      	cmp	r3, r2
 8006f0c:	d90e      	bls.n	8006f2c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006f0e:	68bb      	ldr	r3, [r7, #8]
 8006f10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d009      	beq.n	8006f2c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	015a      	lsls	r2, r3, #5
 8006f1c:	693b      	ldr	r3, [r7, #16]
 8006f1e:	4413      	add	r3, r2
 8006f20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f24:	461a      	mov	r2, r3
 8006f26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f2a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006f2c:	6878      	ldr	r0, [r7, #4]
 8006f2e:	f011 fc41 	bl	80187b4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	4a0a      	ldr	r2, [pc, #40]	; (8006f60 <PCD_EP_OutSetupPacket_int+0x88>)
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d90c      	bls.n	8006f54 <PCD_EP_OutSetupPacket_int+0x7c>
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	691b      	ldr	r3, [r3, #16]
 8006f3e:	2b01      	cmp	r3, #1
 8006f40:	d108      	bne.n	8006f54 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6818      	ldr	r0, [r3, #0]
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006f4c:	461a      	mov	r2, r3
 8006f4e:	2101      	movs	r1, #1
 8006f50:	f002 fe40 	bl	8009bd4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006f54:	2300      	movs	r3, #0
}
 8006f56:	4618      	mov	r0, r3
 8006f58:	3718      	adds	r7, #24
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	bd80      	pop	{r7, pc}
 8006f5e:	bf00      	nop
 8006f60:	4f54300a 	.word	0x4f54300a

08006f64 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006f64:	b480      	push	{r7}
 8006f66:	b085      	sub	sp, #20
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
 8006f6c:	460b      	mov	r3, r1
 8006f6e:	70fb      	strb	r3, [r7, #3]
 8006f70:	4613      	mov	r3, r2
 8006f72:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f7a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006f7c:	78fb      	ldrb	r3, [r7, #3]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d107      	bne.n	8006f92 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006f82:	883b      	ldrh	r3, [r7, #0]
 8006f84:	0419      	lsls	r1, r3, #16
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	68ba      	ldr	r2, [r7, #8]
 8006f8c:	430a      	orrs	r2, r1
 8006f8e:	629a      	str	r2, [r3, #40]	; 0x28
 8006f90:	e028      	b.n	8006fe4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f98:	0c1b      	lsrs	r3, r3, #16
 8006f9a:	68ba      	ldr	r2, [r7, #8]
 8006f9c:	4413      	add	r3, r2
 8006f9e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	73fb      	strb	r3, [r7, #15]
 8006fa4:	e00d      	b.n	8006fc2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681a      	ldr	r2, [r3, #0]
 8006faa:	7bfb      	ldrb	r3, [r7, #15]
 8006fac:	3340      	adds	r3, #64	; 0x40
 8006fae:	009b      	lsls	r3, r3, #2
 8006fb0:	4413      	add	r3, r2
 8006fb2:	685b      	ldr	r3, [r3, #4]
 8006fb4:	0c1b      	lsrs	r3, r3, #16
 8006fb6:	68ba      	ldr	r2, [r7, #8]
 8006fb8:	4413      	add	r3, r2
 8006fba:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006fbc:	7bfb      	ldrb	r3, [r7, #15]
 8006fbe:	3301      	adds	r3, #1
 8006fc0:	73fb      	strb	r3, [r7, #15]
 8006fc2:	7bfa      	ldrb	r2, [r7, #15]
 8006fc4:	78fb      	ldrb	r3, [r7, #3]
 8006fc6:	3b01      	subs	r3, #1
 8006fc8:	429a      	cmp	r2, r3
 8006fca:	d3ec      	bcc.n	8006fa6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006fcc:	883b      	ldrh	r3, [r7, #0]
 8006fce:	0418      	lsls	r0, r3, #16
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	6819      	ldr	r1, [r3, #0]
 8006fd4:	78fb      	ldrb	r3, [r7, #3]
 8006fd6:	3b01      	subs	r3, #1
 8006fd8:	68ba      	ldr	r2, [r7, #8]
 8006fda:	4302      	orrs	r2, r0
 8006fdc:	3340      	adds	r3, #64	; 0x40
 8006fde:	009b      	lsls	r3, r3, #2
 8006fe0:	440b      	add	r3, r1
 8006fe2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006fe4:	2300      	movs	r3, #0
}
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	3714      	adds	r7, #20
 8006fea:	46bd      	mov	sp, r7
 8006fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff0:	4770      	bx	lr

08006ff2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8006ff2:	b480      	push	{r7}
 8006ff4:	b083      	sub	sp, #12
 8006ff6:	af00      	add	r7, sp, #0
 8006ff8:	6078      	str	r0, [r7, #4]
 8006ffa:	460b      	mov	r3, r1
 8006ffc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	887a      	ldrh	r2, [r7, #2]
 8007004:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8007006:	2300      	movs	r3, #0
}
 8007008:	4618      	mov	r0, r3
 800700a:	370c      	adds	r7, #12
 800700c:	46bd      	mov	sp, r7
 800700e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007012:	4770      	bx	lr

08007014 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007014:	b480      	push	{r7}
 8007016:	b083      	sub	sp, #12
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
 800701c:	460b      	mov	r3, r1
 800701e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8007020:	bf00      	nop
 8007022:	370c      	adds	r7, #12
 8007024:	46bd      	mov	sp, r7
 8007026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702a:	4770      	bx	lr

0800702c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b086      	sub	sp, #24
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d101      	bne.n	800703e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800703a:	2301      	movs	r3, #1
 800703c:	e267      	b.n	800750e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f003 0301 	and.w	r3, r3, #1
 8007046:	2b00      	cmp	r3, #0
 8007048:	d075      	beq.n	8007136 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800704a:	4b88      	ldr	r3, [pc, #544]	; (800726c <HAL_RCC_OscConfig+0x240>)
 800704c:	689b      	ldr	r3, [r3, #8]
 800704e:	f003 030c 	and.w	r3, r3, #12
 8007052:	2b04      	cmp	r3, #4
 8007054:	d00c      	beq.n	8007070 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007056:	4b85      	ldr	r3, [pc, #532]	; (800726c <HAL_RCC_OscConfig+0x240>)
 8007058:	689b      	ldr	r3, [r3, #8]
 800705a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800705e:	2b08      	cmp	r3, #8
 8007060:	d112      	bne.n	8007088 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007062:	4b82      	ldr	r3, [pc, #520]	; (800726c <HAL_RCC_OscConfig+0x240>)
 8007064:	685b      	ldr	r3, [r3, #4]
 8007066:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800706a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800706e:	d10b      	bne.n	8007088 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007070:	4b7e      	ldr	r3, [pc, #504]	; (800726c <HAL_RCC_OscConfig+0x240>)
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007078:	2b00      	cmp	r3, #0
 800707a:	d05b      	beq.n	8007134 <HAL_RCC_OscConfig+0x108>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	685b      	ldr	r3, [r3, #4]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d157      	bne.n	8007134 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007084:	2301      	movs	r3, #1
 8007086:	e242      	b.n	800750e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	685b      	ldr	r3, [r3, #4]
 800708c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007090:	d106      	bne.n	80070a0 <HAL_RCC_OscConfig+0x74>
 8007092:	4b76      	ldr	r3, [pc, #472]	; (800726c <HAL_RCC_OscConfig+0x240>)
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	4a75      	ldr	r2, [pc, #468]	; (800726c <HAL_RCC_OscConfig+0x240>)
 8007098:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800709c:	6013      	str	r3, [r2, #0]
 800709e:	e01d      	b.n	80070dc <HAL_RCC_OscConfig+0xb0>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	685b      	ldr	r3, [r3, #4]
 80070a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80070a8:	d10c      	bne.n	80070c4 <HAL_RCC_OscConfig+0x98>
 80070aa:	4b70      	ldr	r3, [pc, #448]	; (800726c <HAL_RCC_OscConfig+0x240>)
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	4a6f      	ldr	r2, [pc, #444]	; (800726c <HAL_RCC_OscConfig+0x240>)
 80070b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80070b4:	6013      	str	r3, [r2, #0]
 80070b6:	4b6d      	ldr	r3, [pc, #436]	; (800726c <HAL_RCC_OscConfig+0x240>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	4a6c      	ldr	r2, [pc, #432]	; (800726c <HAL_RCC_OscConfig+0x240>)
 80070bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80070c0:	6013      	str	r3, [r2, #0]
 80070c2:	e00b      	b.n	80070dc <HAL_RCC_OscConfig+0xb0>
 80070c4:	4b69      	ldr	r3, [pc, #420]	; (800726c <HAL_RCC_OscConfig+0x240>)
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	4a68      	ldr	r2, [pc, #416]	; (800726c <HAL_RCC_OscConfig+0x240>)
 80070ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80070ce:	6013      	str	r3, [r2, #0]
 80070d0:	4b66      	ldr	r3, [pc, #408]	; (800726c <HAL_RCC_OscConfig+0x240>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	4a65      	ldr	r2, [pc, #404]	; (800726c <HAL_RCC_OscConfig+0x240>)
 80070d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80070da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	685b      	ldr	r3, [r3, #4]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d013      	beq.n	800710c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070e4:	f7fe f9f8 	bl	80054d8 <HAL_GetTick>
 80070e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80070ea:	e008      	b.n	80070fe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80070ec:	f7fe f9f4 	bl	80054d8 <HAL_GetTick>
 80070f0:	4602      	mov	r2, r0
 80070f2:	693b      	ldr	r3, [r7, #16]
 80070f4:	1ad3      	subs	r3, r2, r3
 80070f6:	2b64      	cmp	r3, #100	; 0x64
 80070f8:	d901      	bls.n	80070fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80070fa:	2303      	movs	r3, #3
 80070fc:	e207      	b.n	800750e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80070fe:	4b5b      	ldr	r3, [pc, #364]	; (800726c <HAL_RCC_OscConfig+0x240>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007106:	2b00      	cmp	r3, #0
 8007108:	d0f0      	beq.n	80070ec <HAL_RCC_OscConfig+0xc0>
 800710a:	e014      	b.n	8007136 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800710c:	f7fe f9e4 	bl	80054d8 <HAL_GetTick>
 8007110:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007112:	e008      	b.n	8007126 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007114:	f7fe f9e0 	bl	80054d8 <HAL_GetTick>
 8007118:	4602      	mov	r2, r0
 800711a:	693b      	ldr	r3, [r7, #16]
 800711c:	1ad3      	subs	r3, r2, r3
 800711e:	2b64      	cmp	r3, #100	; 0x64
 8007120:	d901      	bls.n	8007126 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007122:	2303      	movs	r3, #3
 8007124:	e1f3      	b.n	800750e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007126:	4b51      	ldr	r3, [pc, #324]	; (800726c <HAL_RCC_OscConfig+0x240>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800712e:	2b00      	cmp	r3, #0
 8007130:	d1f0      	bne.n	8007114 <HAL_RCC_OscConfig+0xe8>
 8007132:	e000      	b.n	8007136 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007134:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f003 0302 	and.w	r3, r3, #2
 800713e:	2b00      	cmp	r3, #0
 8007140:	d063      	beq.n	800720a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007142:	4b4a      	ldr	r3, [pc, #296]	; (800726c <HAL_RCC_OscConfig+0x240>)
 8007144:	689b      	ldr	r3, [r3, #8]
 8007146:	f003 030c 	and.w	r3, r3, #12
 800714a:	2b00      	cmp	r3, #0
 800714c:	d00b      	beq.n	8007166 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800714e:	4b47      	ldr	r3, [pc, #284]	; (800726c <HAL_RCC_OscConfig+0x240>)
 8007150:	689b      	ldr	r3, [r3, #8]
 8007152:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007156:	2b08      	cmp	r3, #8
 8007158:	d11c      	bne.n	8007194 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800715a:	4b44      	ldr	r3, [pc, #272]	; (800726c <HAL_RCC_OscConfig+0x240>)
 800715c:	685b      	ldr	r3, [r3, #4]
 800715e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007162:	2b00      	cmp	r3, #0
 8007164:	d116      	bne.n	8007194 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007166:	4b41      	ldr	r3, [pc, #260]	; (800726c <HAL_RCC_OscConfig+0x240>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f003 0302 	and.w	r3, r3, #2
 800716e:	2b00      	cmp	r3, #0
 8007170:	d005      	beq.n	800717e <HAL_RCC_OscConfig+0x152>
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	68db      	ldr	r3, [r3, #12]
 8007176:	2b01      	cmp	r3, #1
 8007178:	d001      	beq.n	800717e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800717a:	2301      	movs	r3, #1
 800717c:	e1c7      	b.n	800750e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800717e:	4b3b      	ldr	r3, [pc, #236]	; (800726c <HAL_RCC_OscConfig+0x240>)
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	691b      	ldr	r3, [r3, #16]
 800718a:	00db      	lsls	r3, r3, #3
 800718c:	4937      	ldr	r1, [pc, #220]	; (800726c <HAL_RCC_OscConfig+0x240>)
 800718e:	4313      	orrs	r3, r2
 8007190:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007192:	e03a      	b.n	800720a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	68db      	ldr	r3, [r3, #12]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d020      	beq.n	80071de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800719c:	4b34      	ldr	r3, [pc, #208]	; (8007270 <HAL_RCC_OscConfig+0x244>)
 800719e:	2201      	movs	r2, #1
 80071a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071a2:	f7fe f999 	bl	80054d8 <HAL_GetTick>
 80071a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80071a8:	e008      	b.n	80071bc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80071aa:	f7fe f995 	bl	80054d8 <HAL_GetTick>
 80071ae:	4602      	mov	r2, r0
 80071b0:	693b      	ldr	r3, [r7, #16]
 80071b2:	1ad3      	subs	r3, r2, r3
 80071b4:	2b02      	cmp	r3, #2
 80071b6:	d901      	bls.n	80071bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80071b8:	2303      	movs	r3, #3
 80071ba:	e1a8      	b.n	800750e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80071bc:	4b2b      	ldr	r3, [pc, #172]	; (800726c <HAL_RCC_OscConfig+0x240>)
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f003 0302 	and.w	r3, r3, #2
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d0f0      	beq.n	80071aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80071c8:	4b28      	ldr	r3, [pc, #160]	; (800726c <HAL_RCC_OscConfig+0x240>)
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	691b      	ldr	r3, [r3, #16]
 80071d4:	00db      	lsls	r3, r3, #3
 80071d6:	4925      	ldr	r1, [pc, #148]	; (800726c <HAL_RCC_OscConfig+0x240>)
 80071d8:	4313      	orrs	r3, r2
 80071da:	600b      	str	r3, [r1, #0]
 80071dc:	e015      	b.n	800720a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80071de:	4b24      	ldr	r3, [pc, #144]	; (8007270 <HAL_RCC_OscConfig+0x244>)
 80071e0:	2200      	movs	r2, #0
 80071e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071e4:	f7fe f978 	bl	80054d8 <HAL_GetTick>
 80071e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80071ea:	e008      	b.n	80071fe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80071ec:	f7fe f974 	bl	80054d8 <HAL_GetTick>
 80071f0:	4602      	mov	r2, r0
 80071f2:	693b      	ldr	r3, [r7, #16]
 80071f4:	1ad3      	subs	r3, r2, r3
 80071f6:	2b02      	cmp	r3, #2
 80071f8:	d901      	bls.n	80071fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80071fa:	2303      	movs	r3, #3
 80071fc:	e187      	b.n	800750e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80071fe:	4b1b      	ldr	r3, [pc, #108]	; (800726c <HAL_RCC_OscConfig+0x240>)
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f003 0302 	and.w	r3, r3, #2
 8007206:	2b00      	cmp	r3, #0
 8007208:	d1f0      	bne.n	80071ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f003 0308 	and.w	r3, r3, #8
 8007212:	2b00      	cmp	r3, #0
 8007214:	d036      	beq.n	8007284 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	695b      	ldr	r3, [r3, #20]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d016      	beq.n	800724c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800721e:	4b15      	ldr	r3, [pc, #84]	; (8007274 <HAL_RCC_OscConfig+0x248>)
 8007220:	2201      	movs	r2, #1
 8007222:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007224:	f7fe f958 	bl	80054d8 <HAL_GetTick>
 8007228:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800722a:	e008      	b.n	800723e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800722c:	f7fe f954 	bl	80054d8 <HAL_GetTick>
 8007230:	4602      	mov	r2, r0
 8007232:	693b      	ldr	r3, [r7, #16]
 8007234:	1ad3      	subs	r3, r2, r3
 8007236:	2b02      	cmp	r3, #2
 8007238:	d901      	bls.n	800723e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800723a:	2303      	movs	r3, #3
 800723c:	e167      	b.n	800750e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800723e:	4b0b      	ldr	r3, [pc, #44]	; (800726c <HAL_RCC_OscConfig+0x240>)
 8007240:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007242:	f003 0302 	and.w	r3, r3, #2
 8007246:	2b00      	cmp	r3, #0
 8007248:	d0f0      	beq.n	800722c <HAL_RCC_OscConfig+0x200>
 800724a:	e01b      	b.n	8007284 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800724c:	4b09      	ldr	r3, [pc, #36]	; (8007274 <HAL_RCC_OscConfig+0x248>)
 800724e:	2200      	movs	r2, #0
 8007250:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007252:	f7fe f941 	bl	80054d8 <HAL_GetTick>
 8007256:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007258:	e00e      	b.n	8007278 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800725a:	f7fe f93d 	bl	80054d8 <HAL_GetTick>
 800725e:	4602      	mov	r2, r0
 8007260:	693b      	ldr	r3, [r7, #16]
 8007262:	1ad3      	subs	r3, r2, r3
 8007264:	2b02      	cmp	r3, #2
 8007266:	d907      	bls.n	8007278 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007268:	2303      	movs	r3, #3
 800726a:	e150      	b.n	800750e <HAL_RCC_OscConfig+0x4e2>
 800726c:	40023800 	.word	0x40023800
 8007270:	42470000 	.word	0x42470000
 8007274:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007278:	4b88      	ldr	r3, [pc, #544]	; (800749c <HAL_RCC_OscConfig+0x470>)
 800727a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800727c:	f003 0302 	and.w	r3, r3, #2
 8007280:	2b00      	cmp	r3, #0
 8007282:	d1ea      	bne.n	800725a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f003 0304 	and.w	r3, r3, #4
 800728c:	2b00      	cmp	r3, #0
 800728e:	f000 8097 	beq.w	80073c0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007292:	2300      	movs	r3, #0
 8007294:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007296:	4b81      	ldr	r3, [pc, #516]	; (800749c <HAL_RCC_OscConfig+0x470>)
 8007298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800729a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d10f      	bne.n	80072c2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80072a2:	2300      	movs	r3, #0
 80072a4:	60bb      	str	r3, [r7, #8]
 80072a6:	4b7d      	ldr	r3, [pc, #500]	; (800749c <HAL_RCC_OscConfig+0x470>)
 80072a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072aa:	4a7c      	ldr	r2, [pc, #496]	; (800749c <HAL_RCC_OscConfig+0x470>)
 80072ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80072b0:	6413      	str	r3, [r2, #64]	; 0x40
 80072b2:	4b7a      	ldr	r3, [pc, #488]	; (800749c <HAL_RCC_OscConfig+0x470>)
 80072b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80072ba:	60bb      	str	r3, [r7, #8]
 80072bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80072be:	2301      	movs	r3, #1
 80072c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80072c2:	4b77      	ldr	r3, [pc, #476]	; (80074a0 <HAL_RCC_OscConfig+0x474>)
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d118      	bne.n	8007300 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80072ce:	4b74      	ldr	r3, [pc, #464]	; (80074a0 <HAL_RCC_OscConfig+0x474>)
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	4a73      	ldr	r2, [pc, #460]	; (80074a0 <HAL_RCC_OscConfig+0x474>)
 80072d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80072d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80072da:	f7fe f8fd 	bl	80054d8 <HAL_GetTick>
 80072de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80072e0:	e008      	b.n	80072f4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80072e2:	f7fe f8f9 	bl	80054d8 <HAL_GetTick>
 80072e6:	4602      	mov	r2, r0
 80072e8:	693b      	ldr	r3, [r7, #16]
 80072ea:	1ad3      	subs	r3, r2, r3
 80072ec:	2b02      	cmp	r3, #2
 80072ee:	d901      	bls.n	80072f4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80072f0:	2303      	movs	r3, #3
 80072f2:	e10c      	b.n	800750e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80072f4:	4b6a      	ldr	r3, [pc, #424]	; (80074a0 <HAL_RCC_OscConfig+0x474>)
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d0f0      	beq.n	80072e2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	689b      	ldr	r3, [r3, #8]
 8007304:	2b01      	cmp	r3, #1
 8007306:	d106      	bne.n	8007316 <HAL_RCC_OscConfig+0x2ea>
 8007308:	4b64      	ldr	r3, [pc, #400]	; (800749c <HAL_RCC_OscConfig+0x470>)
 800730a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800730c:	4a63      	ldr	r2, [pc, #396]	; (800749c <HAL_RCC_OscConfig+0x470>)
 800730e:	f043 0301 	orr.w	r3, r3, #1
 8007312:	6713      	str	r3, [r2, #112]	; 0x70
 8007314:	e01c      	b.n	8007350 <HAL_RCC_OscConfig+0x324>
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	689b      	ldr	r3, [r3, #8]
 800731a:	2b05      	cmp	r3, #5
 800731c:	d10c      	bne.n	8007338 <HAL_RCC_OscConfig+0x30c>
 800731e:	4b5f      	ldr	r3, [pc, #380]	; (800749c <HAL_RCC_OscConfig+0x470>)
 8007320:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007322:	4a5e      	ldr	r2, [pc, #376]	; (800749c <HAL_RCC_OscConfig+0x470>)
 8007324:	f043 0304 	orr.w	r3, r3, #4
 8007328:	6713      	str	r3, [r2, #112]	; 0x70
 800732a:	4b5c      	ldr	r3, [pc, #368]	; (800749c <HAL_RCC_OscConfig+0x470>)
 800732c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800732e:	4a5b      	ldr	r2, [pc, #364]	; (800749c <HAL_RCC_OscConfig+0x470>)
 8007330:	f043 0301 	orr.w	r3, r3, #1
 8007334:	6713      	str	r3, [r2, #112]	; 0x70
 8007336:	e00b      	b.n	8007350 <HAL_RCC_OscConfig+0x324>
 8007338:	4b58      	ldr	r3, [pc, #352]	; (800749c <HAL_RCC_OscConfig+0x470>)
 800733a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800733c:	4a57      	ldr	r2, [pc, #348]	; (800749c <HAL_RCC_OscConfig+0x470>)
 800733e:	f023 0301 	bic.w	r3, r3, #1
 8007342:	6713      	str	r3, [r2, #112]	; 0x70
 8007344:	4b55      	ldr	r3, [pc, #340]	; (800749c <HAL_RCC_OscConfig+0x470>)
 8007346:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007348:	4a54      	ldr	r2, [pc, #336]	; (800749c <HAL_RCC_OscConfig+0x470>)
 800734a:	f023 0304 	bic.w	r3, r3, #4
 800734e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	689b      	ldr	r3, [r3, #8]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d015      	beq.n	8007384 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007358:	f7fe f8be 	bl	80054d8 <HAL_GetTick>
 800735c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800735e:	e00a      	b.n	8007376 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007360:	f7fe f8ba 	bl	80054d8 <HAL_GetTick>
 8007364:	4602      	mov	r2, r0
 8007366:	693b      	ldr	r3, [r7, #16]
 8007368:	1ad3      	subs	r3, r2, r3
 800736a:	f241 3288 	movw	r2, #5000	; 0x1388
 800736e:	4293      	cmp	r3, r2
 8007370:	d901      	bls.n	8007376 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007372:	2303      	movs	r3, #3
 8007374:	e0cb      	b.n	800750e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007376:	4b49      	ldr	r3, [pc, #292]	; (800749c <HAL_RCC_OscConfig+0x470>)
 8007378:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800737a:	f003 0302 	and.w	r3, r3, #2
 800737e:	2b00      	cmp	r3, #0
 8007380:	d0ee      	beq.n	8007360 <HAL_RCC_OscConfig+0x334>
 8007382:	e014      	b.n	80073ae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007384:	f7fe f8a8 	bl	80054d8 <HAL_GetTick>
 8007388:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800738a:	e00a      	b.n	80073a2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800738c:	f7fe f8a4 	bl	80054d8 <HAL_GetTick>
 8007390:	4602      	mov	r2, r0
 8007392:	693b      	ldr	r3, [r7, #16]
 8007394:	1ad3      	subs	r3, r2, r3
 8007396:	f241 3288 	movw	r2, #5000	; 0x1388
 800739a:	4293      	cmp	r3, r2
 800739c:	d901      	bls.n	80073a2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800739e:	2303      	movs	r3, #3
 80073a0:	e0b5      	b.n	800750e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80073a2:	4b3e      	ldr	r3, [pc, #248]	; (800749c <HAL_RCC_OscConfig+0x470>)
 80073a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073a6:	f003 0302 	and.w	r3, r3, #2
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d1ee      	bne.n	800738c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80073ae:	7dfb      	ldrb	r3, [r7, #23]
 80073b0:	2b01      	cmp	r3, #1
 80073b2:	d105      	bne.n	80073c0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80073b4:	4b39      	ldr	r3, [pc, #228]	; (800749c <HAL_RCC_OscConfig+0x470>)
 80073b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073b8:	4a38      	ldr	r2, [pc, #224]	; (800749c <HAL_RCC_OscConfig+0x470>)
 80073ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80073be:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	699b      	ldr	r3, [r3, #24]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	f000 80a1 	beq.w	800750c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80073ca:	4b34      	ldr	r3, [pc, #208]	; (800749c <HAL_RCC_OscConfig+0x470>)
 80073cc:	689b      	ldr	r3, [r3, #8]
 80073ce:	f003 030c 	and.w	r3, r3, #12
 80073d2:	2b08      	cmp	r3, #8
 80073d4:	d05c      	beq.n	8007490 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	699b      	ldr	r3, [r3, #24]
 80073da:	2b02      	cmp	r3, #2
 80073dc:	d141      	bne.n	8007462 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80073de:	4b31      	ldr	r3, [pc, #196]	; (80074a4 <HAL_RCC_OscConfig+0x478>)
 80073e0:	2200      	movs	r2, #0
 80073e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80073e4:	f7fe f878 	bl	80054d8 <HAL_GetTick>
 80073e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80073ea:	e008      	b.n	80073fe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80073ec:	f7fe f874 	bl	80054d8 <HAL_GetTick>
 80073f0:	4602      	mov	r2, r0
 80073f2:	693b      	ldr	r3, [r7, #16]
 80073f4:	1ad3      	subs	r3, r2, r3
 80073f6:	2b02      	cmp	r3, #2
 80073f8:	d901      	bls.n	80073fe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80073fa:	2303      	movs	r3, #3
 80073fc:	e087      	b.n	800750e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80073fe:	4b27      	ldr	r3, [pc, #156]	; (800749c <HAL_RCC_OscConfig+0x470>)
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007406:	2b00      	cmp	r3, #0
 8007408:	d1f0      	bne.n	80073ec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	69da      	ldr	r2, [r3, #28]
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6a1b      	ldr	r3, [r3, #32]
 8007412:	431a      	orrs	r2, r3
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007418:	019b      	lsls	r3, r3, #6
 800741a:	431a      	orrs	r2, r3
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007420:	085b      	lsrs	r3, r3, #1
 8007422:	3b01      	subs	r3, #1
 8007424:	041b      	lsls	r3, r3, #16
 8007426:	431a      	orrs	r2, r3
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800742c:	061b      	lsls	r3, r3, #24
 800742e:	491b      	ldr	r1, [pc, #108]	; (800749c <HAL_RCC_OscConfig+0x470>)
 8007430:	4313      	orrs	r3, r2
 8007432:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007434:	4b1b      	ldr	r3, [pc, #108]	; (80074a4 <HAL_RCC_OscConfig+0x478>)
 8007436:	2201      	movs	r2, #1
 8007438:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800743a:	f7fe f84d 	bl	80054d8 <HAL_GetTick>
 800743e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007440:	e008      	b.n	8007454 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007442:	f7fe f849 	bl	80054d8 <HAL_GetTick>
 8007446:	4602      	mov	r2, r0
 8007448:	693b      	ldr	r3, [r7, #16]
 800744a:	1ad3      	subs	r3, r2, r3
 800744c:	2b02      	cmp	r3, #2
 800744e:	d901      	bls.n	8007454 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007450:	2303      	movs	r3, #3
 8007452:	e05c      	b.n	800750e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007454:	4b11      	ldr	r3, [pc, #68]	; (800749c <HAL_RCC_OscConfig+0x470>)
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800745c:	2b00      	cmp	r3, #0
 800745e:	d0f0      	beq.n	8007442 <HAL_RCC_OscConfig+0x416>
 8007460:	e054      	b.n	800750c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007462:	4b10      	ldr	r3, [pc, #64]	; (80074a4 <HAL_RCC_OscConfig+0x478>)
 8007464:	2200      	movs	r2, #0
 8007466:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007468:	f7fe f836 	bl	80054d8 <HAL_GetTick>
 800746c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800746e:	e008      	b.n	8007482 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007470:	f7fe f832 	bl	80054d8 <HAL_GetTick>
 8007474:	4602      	mov	r2, r0
 8007476:	693b      	ldr	r3, [r7, #16]
 8007478:	1ad3      	subs	r3, r2, r3
 800747a:	2b02      	cmp	r3, #2
 800747c:	d901      	bls.n	8007482 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800747e:	2303      	movs	r3, #3
 8007480:	e045      	b.n	800750e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007482:	4b06      	ldr	r3, [pc, #24]	; (800749c <HAL_RCC_OscConfig+0x470>)
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800748a:	2b00      	cmp	r3, #0
 800748c:	d1f0      	bne.n	8007470 <HAL_RCC_OscConfig+0x444>
 800748e:	e03d      	b.n	800750c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	699b      	ldr	r3, [r3, #24]
 8007494:	2b01      	cmp	r3, #1
 8007496:	d107      	bne.n	80074a8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007498:	2301      	movs	r3, #1
 800749a:	e038      	b.n	800750e <HAL_RCC_OscConfig+0x4e2>
 800749c:	40023800 	.word	0x40023800
 80074a0:	40007000 	.word	0x40007000
 80074a4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80074a8:	4b1b      	ldr	r3, [pc, #108]	; (8007518 <HAL_RCC_OscConfig+0x4ec>)
 80074aa:	685b      	ldr	r3, [r3, #4]
 80074ac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	699b      	ldr	r3, [r3, #24]
 80074b2:	2b01      	cmp	r3, #1
 80074b4:	d028      	beq.n	8007508 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80074c0:	429a      	cmp	r2, r3
 80074c2:	d121      	bne.n	8007508 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80074ce:	429a      	cmp	r2, r3
 80074d0:	d11a      	bne.n	8007508 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80074d2:	68fa      	ldr	r2, [r7, #12]
 80074d4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80074d8:	4013      	ands	r3, r2
 80074da:	687a      	ldr	r2, [r7, #4]
 80074dc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80074de:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80074e0:	4293      	cmp	r3, r2
 80074e2:	d111      	bne.n	8007508 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074ee:	085b      	lsrs	r3, r3, #1
 80074f0:	3b01      	subs	r3, #1
 80074f2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80074f4:	429a      	cmp	r2, r3
 80074f6:	d107      	bne.n	8007508 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007502:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007504:	429a      	cmp	r2, r3
 8007506:	d001      	beq.n	800750c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007508:	2301      	movs	r3, #1
 800750a:	e000      	b.n	800750e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800750c:	2300      	movs	r3, #0
}
 800750e:	4618      	mov	r0, r3
 8007510:	3718      	adds	r7, #24
 8007512:	46bd      	mov	sp, r7
 8007514:	bd80      	pop	{r7, pc}
 8007516:	bf00      	nop
 8007518:	40023800 	.word	0x40023800

0800751c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b084      	sub	sp, #16
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
 8007524:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d101      	bne.n	8007530 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800752c:	2301      	movs	r3, #1
 800752e:	e0cc      	b.n	80076ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007530:	4b68      	ldr	r3, [pc, #416]	; (80076d4 <HAL_RCC_ClockConfig+0x1b8>)
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f003 0307 	and.w	r3, r3, #7
 8007538:	683a      	ldr	r2, [r7, #0]
 800753a:	429a      	cmp	r2, r3
 800753c:	d90c      	bls.n	8007558 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800753e:	4b65      	ldr	r3, [pc, #404]	; (80076d4 <HAL_RCC_ClockConfig+0x1b8>)
 8007540:	683a      	ldr	r2, [r7, #0]
 8007542:	b2d2      	uxtb	r2, r2
 8007544:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007546:	4b63      	ldr	r3, [pc, #396]	; (80076d4 <HAL_RCC_ClockConfig+0x1b8>)
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f003 0307 	and.w	r3, r3, #7
 800754e:	683a      	ldr	r2, [r7, #0]
 8007550:	429a      	cmp	r2, r3
 8007552:	d001      	beq.n	8007558 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007554:	2301      	movs	r3, #1
 8007556:	e0b8      	b.n	80076ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f003 0302 	and.w	r3, r3, #2
 8007560:	2b00      	cmp	r3, #0
 8007562:	d020      	beq.n	80075a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f003 0304 	and.w	r3, r3, #4
 800756c:	2b00      	cmp	r3, #0
 800756e:	d005      	beq.n	800757c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007570:	4b59      	ldr	r3, [pc, #356]	; (80076d8 <HAL_RCC_ClockConfig+0x1bc>)
 8007572:	689b      	ldr	r3, [r3, #8]
 8007574:	4a58      	ldr	r2, [pc, #352]	; (80076d8 <HAL_RCC_ClockConfig+0x1bc>)
 8007576:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800757a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f003 0308 	and.w	r3, r3, #8
 8007584:	2b00      	cmp	r3, #0
 8007586:	d005      	beq.n	8007594 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007588:	4b53      	ldr	r3, [pc, #332]	; (80076d8 <HAL_RCC_ClockConfig+0x1bc>)
 800758a:	689b      	ldr	r3, [r3, #8]
 800758c:	4a52      	ldr	r2, [pc, #328]	; (80076d8 <HAL_RCC_ClockConfig+0x1bc>)
 800758e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007592:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007594:	4b50      	ldr	r3, [pc, #320]	; (80076d8 <HAL_RCC_ClockConfig+0x1bc>)
 8007596:	689b      	ldr	r3, [r3, #8]
 8007598:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	689b      	ldr	r3, [r3, #8]
 80075a0:	494d      	ldr	r1, [pc, #308]	; (80076d8 <HAL_RCC_ClockConfig+0x1bc>)
 80075a2:	4313      	orrs	r3, r2
 80075a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f003 0301 	and.w	r3, r3, #1
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d044      	beq.n	800763c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	685b      	ldr	r3, [r3, #4]
 80075b6:	2b01      	cmp	r3, #1
 80075b8:	d107      	bne.n	80075ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80075ba:	4b47      	ldr	r3, [pc, #284]	; (80076d8 <HAL_RCC_ClockConfig+0x1bc>)
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d119      	bne.n	80075fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80075c6:	2301      	movs	r3, #1
 80075c8:	e07f      	b.n	80076ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	685b      	ldr	r3, [r3, #4]
 80075ce:	2b02      	cmp	r3, #2
 80075d0:	d003      	beq.n	80075da <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80075d6:	2b03      	cmp	r3, #3
 80075d8:	d107      	bne.n	80075ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80075da:	4b3f      	ldr	r3, [pc, #252]	; (80076d8 <HAL_RCC_ClockConfig+0x1bc>)
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d109      	bne.n	80075fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80075e6:	2301      	movs	r3, #1
 80075e8:	e06f      	b.n	80076ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80075ea:	4b3b      	ldr	r3, [pc, #236]	; (80076d8 <HAL_RCC_ClockConfig+0x1bc>)
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f003 0302 	and.w	r3, r3, #2
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d101      	bne.n	80075fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80075f6:	2301      	movs	r3, #1
 80075f8:	e067      	b.n	80076ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80075fa:	4b37      	ldr	r3, [pc, #220]	; (80076d8 <HAL_RCC_ClockConfig+0x1bc>)
 80075fc:	689b      	ldr	r3, [r3, #8]
 80075fe:	f023 0203 	bic.w	r2, r3, #3
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	685b      	ldr	r3, [r3, #4]
 8007606:	4934      	ldr	r1, [pc, #208]	; (80076d8 <HAL_RCC_ClockConfig+0x1bc>)
 8007608:	4313      	orrs	r3, r2
 800760a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800760c:	f7fd ff64 	bl	80054d8 <HAL_GetTick>
 8007610:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007612:	e00a      	b.n	800762a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007614:	f7fd ff60 	bl	80054d8 <HAL_GetTick>
 8007618:	4602      	mov	r2, r0
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	1ad3      	subs	r3, r2, r3
 800761e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007622:	4293      	cmp	r3, r2
 8007624:	d901      	bls.n	800762a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007626:	2303      	movs	r3, #3
 8007628:	e04f      	b.n	80076ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800762a:	4b2b      	ldr	r3, [pc, #172]	; (80076d8 <HAL_RCC_ClockConfig+0x1bc>)
 800762c:	689b      	ldr	r3, [r3, #8]
 800762e:	f003 020c 	and.w	r2, r3, #12
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	685b      	ldr	r3, [r3, #4]
 8007636:	009b      	lsls	r3, r3, #2
 8007638:	429a      	cmp	r2, r3
 800763a:	d1eb      	bne.n	8007614 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800763c:	4b25      	ldr	r3, [pc, #148]	; (80076d4 <HAL_RCC_ClockConfig+0x1b8>)
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f003 0307 	and.w	r3, r3, #7
 8007644:	683a      	ldr	r2, [r7, #0]
 8007646:	429a      	cmp	r2, r3
 8007648:	d20c      	bcs.n	8007664 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800764a:	4b22      	ldr	r3, [pc, #136]	; (80076d4 <HAL_RCC_ClockConfig+0x1b8>)
 800764c:	683a      	ldr	r2, [r7, #0]
 800764e:	b2d2      	uxtb	r2, r2
 8007650:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007652:	4b20      	ldr	r3, [pc, #128]	; (80076d4 <HAL_RCC_ClockConfig+0x1b8>)
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f003 0307 	and.w	r3, r3, #7
 800765a:	683a      	ldr	r2, [r7, #0]
 800765c:	429a      	cmp	r2, r3
 800765e:	d001      	beq.n	8007664 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007660:	2301      	movs	r3, #1
 8007662:	e032      	b.n	80076ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f003 0304 	and.w	r3, r3, #4
 800766c:	2b00      	cmp	r3, #0
 800766e:	d008      	beq.n	8007682 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007670:	4b19      	ldr	r3, [pc, #100]	; (80076d8 <HAL_RCC_ClockConfig+0x1bc>)
 8007672:	689b      	ldr	r3, [r3, #8]
 8007674:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	68db      	ldr	r3, [r3, #12]
 800767c:	4916      	ldr	r1, [pc, #88]	; (80076d8 <HAL_RCC_ClockConfig+0x1bc>)
 800767e:	4313      	orrs	r3, r2
 8007680:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f003 0308 	and.w	r3, r3, #8
 800768a:	2b00      	cmp	r3, #0
 800768c:	d009      	beq.n	80076a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800768e:	4b12      	ldr	r3, [pc, #72]	; (80076d8 <HAL_RCC_ClockConfig+0x1bc>)
 8007690:	689b      	ldr	r3, [r3, #8]
 8007692:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	691b      	ldr	r3, [r3, #16]
 800769a:	00db      	lsls	r3, r3, #3
 800769c:	490e      	ldr	r1, [pc, #56]	; (80076d8 <HAL_RCC_ClockConfig+0x1bc>)
 800769e:	4313      	orrs	r3, r2
 80076a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80076a2:	f000 f821 	bl	80076e8 <HAL_RCC_GetSysClockFreq>
 80076a6:	4602      	mov	r2, r0
 80076a8:	4b0b      	ldr	r3, [pc, #44]	; (80076d8 <HAL_RCC_ClockConfig+0x1bc>)
 80076aa:	689b      	ldr	r3, [r3, #8]
 80076ac:	091b      	lsrs	r3, r3, #4
 80076ae:	f003 030f 	and.w	r3, r3, #15
 80076b2:	490a      	ldr	r1, [pc, #40]	; (80076dc <HAL_RCC_ClockConfig+0x1c0>)
 80076b4:	5ccb      	ldrb	r3, [r1, r3]
 80076b6:	fa22 f303 	lsr.w	r3, r2, r3
 80076ba:	4a09      	ldr	r2, [pc, #36]	; (80076e0 <HAL_RCC_ClockConfig+0x1c4>)
 80076bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80076be:	4b09      	ldr	r3, [pc, #36]	; (80076e4 <HAL_RCC_ClockConfig+0x1c8>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	4618      	mov	r0, r3
 80076c4:	f7fd fec4 	bl	8005450 <HAL_InitTick>

  return HAL_OK;
 80076c8:	2300      	movs	r3, #0
}
 80076ca:	4618      	mov	r0, r3
 80076cc:	3710      	adds	r7, #16
 80076ce:	46bd      	mov	sp, r7
 80076d0:	bd80      	pop	{r7, pc}
 80076d2:	bf00      	nop
 80076d4:	40023c00 	.word	0x40023c00
 80076d8:	40023800 	.word	0x40023800
 80076dc:	0801d3a4 	.word	0x0801d3a4
 80076e0:	20000048 	.word	0x20000048
 80076e4:	2000004c 	.word	0x2000004c

080076e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80076e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80076ec:	b094      	sub	sp, #80	; 0x50
 80076ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80076f0:	2300      	movs	r3, #0
 80076f2:	647b      	str	r3, [r7, #68]	; 0x44
 80076f4:	2300      	movs	r3, #0
 80076f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80076f8:	2300      	movs	r3, #0
 80076fa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80076fc:	2300      	movs	r3, #0
 80076fe:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007700:	4b79      	ldr	r3, [pc, #484]	; (80078e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8007702:	689b      	ldr	r3, [r3, #8]
 8007704:	f003 030c 	and.w	r3, r3, #12
 8007708:	2b08      	cmp	r3, #8
 800770a:	d00d      	beq.n	8007728 <HAL_RCC_GetSysClockFreq+0x40>
 800770c:	2b08      	cmp	r3, #8
 800770e:	f200 80e1 	bhi.w	80078d4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007712:	2b00      	cmp	r3, #0
 8007714:	d002      	beq.n	800771c <HAL_RCC_GetSysClockFreq+0x34>
 8007716:	2b04      	cmp	r3, #4
 8007718:	d003      	beq.n	8007722 <HAL_RCC_GetSysClockFreq+0x3a>
 800771a:	e0db      	b.n	80078d4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800771c:	4b73      	ldr	r3, [pc, #460]	; (80078ec <HAL_RCC_GetSysClockFreq+0x204>)
 800771e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8007720:	e0db      	b.n	80078da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007722:	4b73      	ldr	r3, [pc, #460]	; (80078f0 <HAL_RCC_GetSysClockFreq+0x208>)
 8007724:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007726:	e0d8      	b.n	80078da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007728:	4b6f      	ldr	r3, [pc, #444]	; (80078e8 <HAL_RCC_GetSysClockFreq+0x200>)
 800772a:	685b      	ldr	r3, [r3, #4]
 800772c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007730:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007732:	4b6d      	ldr	r3, [pc, #436]	; (80078e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8007734:	685b      	ldr	r3, [r3, #4]
 8007736:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800773a:	2b00      	cmp	r3, #0
 800773c:	d063      	beq.n	8007806 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800773e:	4b6a      	ldr	r3, [pc, #424]	; (80078e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8007740:	685b      	ldr	r3, [r3, #4]
 8007742:	099b      	lsrs	r3, r3, #6
 8007744:	2200      	movs	r2, #0
 8007746:	63bb      	str	r3, [r7, #56]	; 0x38
 8007748:	63fa      	str	r2, [r7, #60]	; 0x3c
 800774a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800774c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007750:	633b      	str	r3, [r7, #48]	; 0x30
 8007752:	2300      	movs	r3, #0
 8007754:	637b      	str	r3, [r7, #52]	; 0x34
 8007756:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800775a:	4622      	mov	r2, r4
 800775c:	462b      	mov	r3, r5
 800775e:	f04f 0000 	mov.w	r0, #0
 8007762:	f04f 0100 	mov.w	r1, #0
 8007766:	0159      	lsls	r1, r3, #5
 8007768:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800776c:	0150      	lsls	r0, r2, #5
 800776e:	4602      	mov	r2, r0
 8007770:	460b      	mov	r3, r1
 8007772:	4621      	mov	r1, r4
 8007774:	1a51      	subs	r1, r2, r1
 8007776:	6139      	str	r1, [r7, #16]
 8007778:	4629      	mov	r1, r5
 800777a:	eb63 0301 	sbc.w	r3, r3, r1
 800777e:	617b      	str	r3, [r7, #20]
 8007780:	f04f 0200 	mov.w	r2, #0
 8007784:	f04f 0300 	mov.w	r3, #0
 8007788:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800778c:	4659      	mov	r1, fp
 800778e:	018b      	lsls	r3, r1, #6
 8007790:	4651      	mov	r1, sl
 8007792:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007796:	4651      	mov	r1, sl
 8007798:	018a      	lsls	r2, r1, #6
 800779a:	4651      	mov	r1, sl
 800779c:	ebb2 0801 	subs.w	r8, r2, r1
 80077a0:	4659      	mov	r1, fp
 80077a2:	eb63 0901 	sbc.w	r9, r3, r1
 80077a6:	f04f 0200 	mov.w	r2, #0
 80077aa:	f04f 0300 	mov.w	r3, #0
 80077ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80077b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80077b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80077ba:	4690      	mov	r8, r2
 80077bc:	4699      	mov	r9, r3
 80077be:	4623      	mov	r3, r4
 80077c0:	eb18 0303 	adds.w	r3, r8, r3
 80077c4:	60bb      	str	r3, [r7, #8]
 80077c6:	462b      	mov	r3, r5
 80077c8:	eb49 0303 	adc.w	r3, r9, r3
 80077cc:	60fb      	str	r3, [r7, #12]
 80077ce:	f04f 0200 	mov.w	r2, #0
 80077d2:	f04f 0300 	mov.w	r3, #0
 80077d6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80077da:	4629      	mov	r1, r5
 80077dc:	024b      	lsls	r3, r1, #9
 80077de:	4621      	mov	r1, r4
 80077e0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80077e4:	4621      	mov	r1, r4
 80077e6:	024a      	lsls	r2, r1, #9
 80077e8:	4610      	mov	r0, r2
 80077ea:	4619      	mov	r1, r3
 80077ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80077ee:	2200      	movs	r2, #0
 80077f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80077f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80077f4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80077f8:	f7f9 faa0 	bl	8000d3c <__aeabi_uldivmod>
 80077fc:	4602      	mov	r2, r0
 80077fe:	460b      	mov	r3, r1
 8007800:	4613      	mov	r3, r2
 8007802:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007804:	e058      	b.n	80078b8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007806:	4b38      	ldr	r3, [pc, #224]	; (80078e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8007808:	685b      	ldr	r3, [r3, #4]
 800780a:	099b      	lsrs	r3, r3, #6
 800780c:	2200      	movs	r2, #0
 800780e:	4618      	mov	r0, r3
 8007810:	4611      	mov	r1, r2
 8007812:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007816:	623b      	str	r3, [r7, #32]
 8007818:	2300      	movs	r3, #0
 800781a:	627b      	str	r3, [r7, #36]	; 0x24
 800781c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007820:	4642      	mov	r2, r8
 8007822:	464b      	mov	r3, r9
 8007824:	f04f 0000 	mov.w	r0, #0
 8007828:	f04f 0100 	mov.w	r1, #0
 800782c:	0159      	lsls	r1, r3, #5
 800782e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007832:	0150      	lsls	r0, r2, #5
 8007834:	4602      	mov	r2, r0
 8007836:	460b      	mov	r3, r1
 8007838:	4641      	mov	r1, r8
 800783a:	ebb2 0a01 	subs.w	sl, r2, r1
 800783e:	4649      	mov	r1, r9
 8007840:	eb63 0b01 	sbc.w	fp, r3, r1
 8007844:	f04f 0200 	mov.w	r2, #0
 8007848:	f04f 0300 	mov.w	r3, #0
 800784c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007850:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007854:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007858:	ebb2 040a 	subs.w	r4, r2, sl
 800785c:	eb63 050b 	sbc.w	r5, r3, fp
 8007860:	f04f 0200 	mov.w	r2, #0
 8007864:	f04f 0300 	mov.w	r3, #0
 8007868:	00eb      	lsls	r3, r5, #3
 800786a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800786e:	00e2      	lsls	r2, r4, #3
 8007870:	4614      	mov	r4, r2
 8007872:	461d      	mov	r5, r3
 8007874:	4643      	mov	r3, r8
 8007876:	18e3      	adds	r3, r4, r3
 8007878:	603b      	str	r3, [r7, #0]
 800787a:	464b      	mov	r3, r9
 800787c:	eb45 0303 	adc.w	r3, r5, r3
 8007880:	607b      	str	r3, [r7, #4]
 8007882:	f04f 0200 	mov.w	r2, #0
 8007886:	f04f 0300 	mov.w	r3, #0
 800788a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800788e:	4629      	mov	r1, r5
 8007890:	028b      	lsls	r3, r1, #10
 8007892:	4621      	mov	r1, r4
 8007894:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007898:	4621      	mov	r1, r4
 800789a:	028a      	lsls	r2, r1, #10
 800789c:	4610      	mov	r0, r2
 800789e:	4619      	mov	r1, r3
 80078a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80078a2:	2200      	movs	r2, #0
 80078a4:	61bb      	str	r3, [r7, #24]
 80078a6:	61fa      	str	r2, [r7, #28]
 80078a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80078ac:	f7f9 fa46 	bl	8000d3c <__aeabi_uldivmod>
 80078b0:	4602      	mov	r2, r0
 80078b2:	460b      	mov	r3, r1
 80078b4:	4613      	mov	r3, r2
 80078b6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80078b8:	4b0b      	ldr	r3, [pc, #44]	; (80078e8 <HAL_RCC_GetSysClockFreq+0x200>)
 80078ba:	685b      	ldr	r3, [r3, #4]
 80078bc:	0c1b      	lsrs	r3, r3, #16
 80078be:	f003 0303 	and.w	r3, r3, #3
 80078c2:	3301      	adds	r3, #1
 80078c4:	005b      	lsls	r3, r3, #1
 80078c6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80078c8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80078ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80078cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80078d0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80078d2:	e002      	b.n	80078da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80078d4:	4b05      	ldr	r3, [pc, #20]	; (80078ec <HAL_RCC_GetSysClockFreq+0x204>)
 80078d6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80078d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80078da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80078dc:	4618      	mov	r0, r3
 80078de:	3750      	adds	r7, #80	; 0x50
 80078e0:	46bd      	mov	sp, r7
 80078e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80078e6:	bf00      	nop
 80078e8:	40023800 	.word	0x40023800
 80078ec:	00f42400 	.word	0x00f42400
 80078f0:	007a1200 	.word	0x007a1200

080078f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80078f4:	b480      	push	{r7}
 80078f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80078f8:	4b03      	ldr	r3, [pc, #12]	; (8007908 <HAL_RCC_GetHCLKFreq+0x14>)
 80078fa:	681b      	ldr	r3, [r3, #0]
}
 80078fc:	4618      	mov	r0, r3
 80078fe:	46bd      	mov	sp, r7
 8007900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007904:	4770      	bx	lr
 8007906:	bf00      	nop
 8007908:	20000048 	.word	0x20000048

0800790c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800790c:	b580      	push	{r7, lr}
 800790e:	b082      	sub	sp, #8
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d101      	bne.n	800791e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800791a:	2301      	movs	r3, #1
 800791c:	e07b      	b.n	8007a16 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007922:	2b00      	cmp	r3, #0
 8007924:	d108      	bne.n	8007938 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	685b      	ldr	r3, [r3, #4]
 800792a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800792e:	d009      	beq.n	8007944 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2200      	movs	r2, #0
 8007934:	61da      	str	r2, [r3, #28]
 8007936:	e005      	b.n	8007944 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2200      	movs	r2, #0
 800793c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2200      	movs	r2, #0
 8007942:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2200      	movs	r2, #0
 8007948:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007950:	b2db      	uxtb	r3, r3
 8007952:	2b00      	cmp	r3, #0
 8007954:	d106      	bne.n	8007964 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2200      	movs	r2, #0
 800795a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800795e:	6878      	ldr	r0, [r7, #4]
 8007960:	f7fd fbce 	bl	8005100 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2202      	movs	r2, #2
 8007968:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	681a      	ldr	r2, [r3, #0]
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800797a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	685b      	ldr	r3, [r3, #4]
 8007980:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	689b      	ldr	r3, [r3, #8]
 8007988:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800798c:	431a      	orrs	r2, r3
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	68db      	ldr	r3, [r3, #12]
 8007992:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007996:	431a      	orrs	r2, r3
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	691b      	ldr	r3, [r3, #16]
 800799c:	f003 0302 	and.w	r3, r3, #2
 80079a0:	431a      	orrs	r2, r3
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	695b      	ldr	r3, [r3, #20]
 80079a6:	f003 0301 	and.w	r3, r3, #1
 80079aa:	431a      	orrs	r2, r3
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	699b      	ldr	r3, [r3, #24]
 80079b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80079b4:	431a      	orrs	r2, r3
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	69db      	ldr	r3, [r3, #28]
 80079ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80079be:	431a      	orrs	r2, r3
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6a1b      	ldr	r3, [r3, #32]
 80079c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079c8:	ea42 0103 	orr.w	r1, r2, r3
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079d0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	430a      	orrs	r2, r1
 80079da:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	699b      	ldr	r3, [r3, #24]
 80079e0:	0c1b      	lsrs	r3, r3, #16
 80079e2:	f003 0104 	and.w	r1, r3, #4
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ea:	f003 0210 	and.w	r2, r3, #16
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	430a      	orrs	r2, r1
 80079f4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	69da      	ldr	r2, [r3, #28]
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007a04:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2200      	movs	r2, #0
 8007a0a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2201      	movs	r2, #1
 8007a10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007a14:	2300      	movs	r3, #0
}
 8007a16:	4618      	mov	r0, r3
 8007a18:	3708      	adds	r7, #8
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	bd80      	pop	{r7, pc}

08007a1e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007a1e:	b580      	push	{r7, lr}
 8007a20:	b088      	sub	sp, #32
 8007a22:	af00      	add	r7, sp, #0
 8007a24:	60f8      	str	r0, [r7, #12]
 8007a26:	60b9      	str	r1, [r7, #8]
 8007a28:	603b      	str	r3, [r7, #0]
 8007a2a:	4613      	mov	r3, r2
 8007a2c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007a2e:	2300      	movs	r3, #0
 8007a30:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007a38:	2b01      	cmp	r3, #1
 8007a3a:	d101      	bne.n	8007a40 <HAL_SPI_Transmit+0x22>
 8007a3c:	2302      	movs	r3, #2
 8007a3e:	e126      	b.n	8007c8e <HAL_SPI_Transmit+0x270>
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	2201      	movs	r2, #1
 8007a44:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007a48:	f7fd fd46 	bl	80054d8 <HAL_GetTick>
 8007a4c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007a4e:	88fb      	ldrh	r3, [r7, #6]
 8007a50:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007a58:	b2db      	uxtb	r3, r3
 8007a5a:	2b01      	cmp	r3, #1
 8007a5c:	d002      	beq.n	8007a64 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007a5e:	2302      	movs	r3, #2
 8007a60:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007a62:	e10b      	b.n	8007c7c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007a64:	68bb      	ldr	r3, [r7, #8]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d002      	beq.n	8007a70 <HAL_SPI_Transmit+0x52>
 8007a6a:	88fb      	ldrh	r3, [r7, #6]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d102      	bne.n	8007a76 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007a70:	2301      	movs	r3, #1
 8007a72:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007a74:	e102      	b.n	8007c7c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	2203      	movs	r2, #3
 8007a7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	2200      	movs	r2, #0
 8007a82:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	68ba      	ldr	r2, [r7, #8]
 8007a88:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	88fa      	ldrh	r2, [r7, #6]
 8007a8e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	88fa      	ldrh	r2, [r7, #6]
 8007a94:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	2200      	movs	r2, #0
 8007a9a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	2200      	movs	r2, #0
 8007aac:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	689b      	ldr	r3, [r3, #8]
 8007ab8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007abc:	d10f      	bne.n	8007ade <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	681a      	ldr	r2, [r3, #0]
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007acc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	681a      	ldr	r2, [r3, #0]
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007adc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ae8:	2b40      	cmp	r3, #64	; 0x40
 8007aea:	d007      	beq.n	8007afc <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	681a      	ldr	r2, [r3, #0]
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007afa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	68db      	ldr	r3, [r3, #12]
 8007b00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b04:	d14b      	bne.n	8007b9e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	685b      	ldr	r3, [r3, #4]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d002      	beq.n	8007b14 <HAL_SPI_Transmit+0xf6>
 8007b0e:	8afb      	ldrh	r3, [r7, #22]
 8007b10:	2b01      	cmp	r3, #1
 8007b12:	d13e      	bne.n	8007b92 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b18:	881a      	ldrh	r2, [r3, #0]
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b24:	1c9a      	adds	r2, r3, #2
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b2e:	b29b      	uxth	r3, r3
 8007b30:	3b01      	subs	r3, #1
 8007b32:	b29a      	uxth	r2, r3
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007b38:	e02b      	b.n	8007b92 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	689b      	ldr	r3, [r3, #8]
 8007b40:	f003 0302 	and.w	r3, r3, #2
 8007b44:	2b02      	cmp	r3, #2
 8007b46:	d112      	bne.n	8007b6e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b4c:	881a      	ldrh	r2, [r3, #0]
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b58:	1c9a      	adds	r2, r3, #2
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b62:	b29b      	uxth	r3, r3
 8007b64:	3b01      	subs	r3, #1
 8007b66:	b29a      	uxth	r2, r3
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	86da      	strh	r2, [r3, #54]	; 0x36
 8007b6c:	e011      	b.n	8007b92 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007b6e:	f7fd fcb3 	bl	80054d8 <HAL_GetTick>
 8007b72:	4602      	mov	r2, r0
 8007b74:	69bb      	ldr	r3, [r7, #24]
 8007b76:	1ad3      	subs	r3, r2, r3
 8007b78:	683a      	ldr	r2, [r7, #0]
 8007b7a:	429a      	cmp	r2, r3
 8007b7c:	d803      	bhi.n	8007b86 <HAL_SPI_Transmit+0x168>
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b84:	d102      	bne.n	8007b8c <HAL_SPI_Transmit+0x16e>
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d102      	bne.n	8007b92 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8007b8c:	2303      	movs	r3, #3
 8007b8e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007b90:	e074      	b.n	8007c7c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b96:	b29b      	uxth	r3, r3
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d1ce      	bne.n	8007b3a <HAL_SPI_Transmit+0x11c>
 8007b9c:	e04c      	b.n	8007c38 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	685b      	ldr	r3, [r3, #4]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d002      	beq.n	8007bac <HAL_SPI_Transmit+0x18e>
 8007ba6:	8afb      	ldrh	r3, [r7, #22]
 8007ba8:	2b01      	cmp	r3, #1
 8007baa:	d140      	bne.n	8007c2e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	330c      	adds	r3, #12
 8007bb6:	7812      	ldrb	r2, [r2, #0]
 8007bb8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bbe:	1c5a      	adds	r2, r3, #1
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007bc8:	b29b      	uxth	r3, r3
 8007bca:	3b01      	subs	r3, #1
 8007bcc:	b29a      	uxth	r2, r3
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007bd2:	e02c      	b.n	8007c2e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	689b      	ldr	r3, [r3, #8]
 8007bda:	f003 0302 	and.w	r3, r3, #2
 8007bde:	2b02      	cmp	r3, #2
 8007be0:	d113      	bne.n	8007c0a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	330c      	adds	r3, #12
 8007bec:	7812      	ldrb	r2, [r2, #0]
 8007bee:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bf4:	1c5a      	adds	r2, r3, #1
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007bfe:	b29b      	uxth	r3, r3
 8007c00:	3b01      	subs	r3, #1
 8007c02:	b29a      	uxth	r2, r3
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	86da      	strh	r2, [r3, #54]	; 0x36
 8007c08:	e011      	b.n	8007c2e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007c0a:	f7fd fc65 	bl	80054d8 <HAL_GetTick>
 8007c0e:	4602      	mov	r2, r0
 8007c10:	69bb      	ldr	r3, [r7, #24]
 8007c12:	1ad3      	subs	r3, r2, r3
 8007c14:	683a      	ldr	r2, [r7, #0]
 8007c16:	429a      	cmp	r2, r3
 8007c18:	d803      	bhi.n	8007c22 <HAL_SPI_Transmit+0x204>
 8007c1a:	683b      	ldr	r3, [r7, #0]
 8007c1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c20:	d102      	bne.n	8007c28 <HAL_SPI_Transmit+0x20a>
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d102      	bne.n	8007c2e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8007c28:	2303      	movs	r3, #3
 8007c2a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007c2c:	e026      	b.n	8007c7c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007c32:	b29b      	uxth	r3, r3
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d1cd      	bne.n	8007bd4 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007c38:	69ba      	ldr	r2, [r7, #24]
 8007c3a:	6839      	ldr	r1, [r7, #0]
 8007c3c:	68f8      	ldr	r0, [r7, #12]
 8007c3e:	f000 fbcb 	bl	80083d8 <SPI_EndRxTxTransaction>
 8007c42:	4603      	mov	r3, r0
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d002      	beq.n	8007c4e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	2220      	movs	r2, #32
 8007c4c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	689b      	ldr	r3, [r3, #8]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d10a      	bne.n	8007c6c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007c56:	2300      	movs	r3, #0
 8007c58:	613b      	str	r3, [r7, #16]
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	68db      	ldr	r3, [r3, #12]
 8007c60:	613b      	str	r3, [r7, #16]
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	689b      	ldr	r3, [r3, #8]
 8007c68:	613b      	str	r3, [r7, #16]
 8007c6a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d002      	beq.n	8007c7a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8007c74:	2301      	movs	r3, #1
 8007c76:	77fb      	strb	r3, [r7, #31]
 8007c78:	e000      	b.n	8007c7c <HAL_SPI_Transmit+0x25e>
  }

error:
 8007c7a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	2201      	movs	r2, #1
 8007c80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	2200      	movs	r2, #0
 8007c88:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007c8c:	7ffb      	ldrb	r3, [r7, #31]
}
 8007c8e:	4618      	mov	r0, r3
 8007c90:	3720      	adds	r7, #32
 8007c92:	46bd      	mov	sp, r7
 8007c94:	bd80      	pop	{r7, pc}

08007c96 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007c96:	b580      	push	{r7, lr}
 8007c98:	b088      	sub	sp, #32
 8007c9a:	af02      	add	r7, sp, #8
 8007c9c:	60f8      	str	r0, [r7, #12]
 8007c9e:	60b9      	str	r1, [r7, #8]
 8007ca0:	603b      	str	r3, [r7, #0]
 8007ca2:	4613      	mov	r3, r2
 8007ca4:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	685b      	ldr	r3, [r3, #4]
 8007cae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007cb2:	d112      	bne.n	8007cda <HAL_SPI_Receive+0x44>
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	689b      	ldr	r3, [r3, #8]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d10e      	bne.n	8007cda <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	2204      	movs	r2, #4
 8007cc0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007cc4:	88fa      	ldrh	r2, [r7, #6]
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	9300      	str	r3, [sp, #0]
 8007cca:	4613      	mov	r3, r2
 8007ccc:	68ba      	ldr	r2, [r7, #8]
 8007cce:	68b9      	ldr	r1, [r7, #8]
 8007cd0:	68f8      	ldr	r0, [r7, #12]
 8007cd2:	f000 f8f1 	bl	8007eb8 <HAL_SPI_TransmitReceive>
 8007cd6:	4603      	mov	r3, r0
 8007cd8:	e0ea      	b.n	8007eb0 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007ce0:	2b01      	cmp	r3, #1
 8007ce2:	d101      	bne.n	8007ce8 <HAL_SPI_Receive+0x52>
 8007ce4:	2302      	movs	r3, #2
 8007ce6:	e0e3      	b.n	8007eb0 <HAL_SPI_Receive+0x21a>
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	2201      	movs	r2, #1
 8007cec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007cf0:	f7fd fbf2 	bl	80054d8 <HAL_GetTick>
 8007cf4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007cfc:	b2db      	uxtb	r3, r3
 8007cfe:	2b01      	cmp	r3, #1
 8007d00:	d002      	beq.n	8007d08 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8007d02:	2302      	movs	r3, #2
 8007d04:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007d06:	e0ca      	b.n	8007e9e <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d002      	beq.n	8007d14 <HAL_SPI_Receive+0x7e>
 8007d0e:	88fb      	ldrh	r3, [r7, #6]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d102      	bne.n	8007d1a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8007d14:	2301      	movs	r3, #1
 8007d16:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007d18:	e0c1      	b.n	8007e9e <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	2204      	movs	r2, #4
 8007d1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	2200      	movs	r2, #0
 8007d26:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	68ba      	ldr	r2, [r7, #8]
 8007d2c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	88fa      	ldrh	r2, [r7, #6]
 8007d32:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	88fa      	ldrh	r2, [r7, #6]
 8007d38:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	2200      	movs	r2, #0
 8007d44:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	2200      	movs	r2, #0
 8007d4a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	2200      	movs	r2, #0
 8007d50:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	2200      	movs	r2, #0
 8007d56:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	689b      	ldr	r3, [r3, #8]
 8007d5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d60:	d10f      	bne.n	8007d82 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	681a      	ldr	r2, [r3, #0]
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007d70:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	681a      	ldr	r2, [r3, #0]
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007d80:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d8c:	2b40      	cmp	r3, #64	; 0x40
 8007d8e:	d007      	beq.n	8007da0 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	681a      	ldr	r2, [r3, #0]
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007d9e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	68db      	ldr	r3, [r3, #12]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d162      	bne.n	8007e6e <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007da8:	e02e      	b.n	8007e08 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	689b      	ldr	r3, [r3, #8]
 8007db0:	f003 0301 	and.w	r3, r3, #1
 8007db4:	2b01      	cmp	r3, #1
 8007db6:	d115      	bne.n	8007de4 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	f103 020c 	add.w	r2, r3, #12
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dc4:	7812      	ldrb	r2, [r2, #0]
 8007dc6:	b2d2      	uxtb	r2, r2
 8007dc8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dce:	1c5a      	adds	r2, r3, #1
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007dd8:	b29b      	uxth	r3, r3
 8007dda:	3b01      	subs	r3, #1
 8007ddc:	b29a      	uxth	r2, r3
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007de2:	e011      	b.n	8007e08 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007de4:	f7fd fb78 	bl	80054d8 <HAL_GetTick>
 8007de8:	4602      	mov	r2, r0
 8007dea:	693b      	ldr	r3, [r7, #16]
 8007dec:	1ad3      	subs	r3, r2, r3
 8007dee:	683a      	ldr	r2, [r7, #0]
 8007df0:	429a      	cmp	r2, r3
 8007df2:	d803      	bhi.n	8007dfc <HAL_SPI_Receive+0x166>
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dfa:	d102      	bne.n	8007e02 <HAL_SPI_Receive+0x16c>
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d102      	bne.n	8007e08 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8007e02:	2303      	movs	r3, #3
 8007e04:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007e06:	e04a      	b.n	8007e9e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e0c:	b29b      	uxth	r3, r3
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d1cb      	bne.n	8007daa <HAL_SPI_Receive+0x114>
 8007e12:	e031      	b.n	8007e78 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	689b      	ldr	r3, [r3, #8]
 8007e1a:	f003 0301 	and.w	r3, r3, #1
 8007e1e:	2b01      	cmp	r3, #1
 8007e20:	d113      	bne.n	8007e4a <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	68da      	ldr	r2, [r3, #12]
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e2c:	b292      	uxth	r2, r2
 8007e2e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e34:	1c9a      	adds	r2, r3, #2
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e3e:	b29b      	uxth	r3, r3
 8007e40:	3b01      	subs	r3, #1
 8007e42:	b29a      	uxth	r2, r3
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007e48:	e011      	b.n	8007e6e <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007e4a:	f7fd fb45 	bl	80054d8 <HAL_GetTick>
 8007e4e:	4602      	mov	r2, r0
 8007e50:	693b      	ldr	r3, [r7, #16]
 8007e52:	1ad3      	subs	r3, r2, r3
 8007e54:	683a      	ldr	r2, [r7, #0]
 8007e56:	429a      	cmp	r2, r3
 8007e58:	d803      	bhi.n	8007e62 <HAL_SPI_Receive+0x1cc>
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e60:	d102      	bne.n	8007e68 <HAL_SPI_Receive+0x1d2>
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d102      	bne.n	8007e6e <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8007e68:	2303      	movs	r3, #3
 8007e6a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007e6c:	e017      	b.n	8007e9e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e72:	b29b      	uxth	r3, r3
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d1cd      	bne.n	8007e14 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007e78:	693a      	ldr	r2, [r7, #16]
 8007e7a:	6839      	ldr	r1, [r7, #0]
 8007e7c:	68f8      	ldr	r0, [r7, #12]
 8007e7e:	f000 fa45 	bl	800830c <SPI_EndRxTransaction>
 8007e82:	4603      	mov	r3, r0
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d002      	beq.n	8007e8e <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	2220      	movs	r2, #32
 8007e8c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d002      	beq.n	8007e9c <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8007e96:	2301      	movs	r3, #1
 8007e98:	75fb      	strb	r3, [r7, #23]
 8007e9a:	e000      	b.n	8007e9e <HAL_SPI_Receive+0x208>
  }

error :
 8007e9c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	2201      	movs	r2, #1
 8007ea2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007eae:	7dfb      	ldrb	r3, [r7, #23]
}
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	3718      	adds	r7, #24
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	bd80      	pop	{r7, pc}

08007eb8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b08c      	sub	sp, #48	; 0x30
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	60f8      	str	r0, [r7, #12]
 8007ec0:	60b9      	str	r1, [r7, #8]
 8007ec2:	607a      	str	r2, [r7, #4]
 8007ec4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007ec6:	2301      	movs	r3, #1
 8007ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007eca:	2300      	movs	r3, #0
 8007ecc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007ed6:	2b01      	cmp	r3, #1
 8007ed8:	d101      	bne.n	8007ede <HAL_SPI_TransmitReceive+0x26>
 8007eda:	2302      	movs	r3, #2
 8007edc:	e18a      	b.n	80081f4 <HAL_SPI_TransmitReceive+0x33c>
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	2201      	movs	r2, #1
 8007ee2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007ee6:	f7fd faf7 	bl	80054d8 <HAL_GetTick>
 8007eea:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007ef2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	685b      	ldr	r3, [r3, #4]
 8007efa:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007efc:	887b      	ldrh	r3, [r7, #2]
 8007efe:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007f00:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007f04:	2b01      	cmp	r3, #1
 8007f06:	d00f      	beq.n	8007f28 <HAL_SPI_TransmitReceive+0x70>
 8007f08:	69fb      	ldr	r3, [r7, #28]
 8007f0a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007f0e:	d107      	bne.n	8007f20 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	689b      	ldr	r3, [r3, #8]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d103      	bne.n	8007f20 <HAL_SPI_TransmitReceive+0x68>
 8007f18:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007f1c:	2b04      	cmp	r3, #4
 8007f1e:	d003      	beq.n	8007f28 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007f20:	2302      	movs	r3, #2
 8007f22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007f26:	e15b      	b.n	80081e0 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007f28:	68bb      	ldr	r3, [r7, #8]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d005      	beq.n	8007f3a <HAL_SPI_TransmitReceive+0x82>
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d002      	beq.n	8007f3a <HAL_SPI_TransmitReceive+0x82>
 8007f34:	887b      	ldrh	r3, [r7, #2]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d103      	bne.n	8007f42 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007f3a:	2301      	movs	r3, #1
 8007f3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007f40:	e14e      	b.n	80081e0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007f48:	b2db      	uxtb	r3, r3
 8007f4a:	2b04      	cmp	r3, #4
 8007f4c:	d003      	beq.n	8007f56 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	2205      	movs	r2, #5
 8007f52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	2200      	movs	r2, #0
 8007f5a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	687a      	ldr	r2, [r7, #4]
 8007f60:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	887a      	ldrh	r2, [r7, #2]
 8007f66:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	887a      	ldrh	r2, [r7, #2]
 8007f6c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	68ba      	ldr	r2, [r7, #8]
 8007f72:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	887a      	ldrh	r2, [r7, #2]
 8007f78:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	887a      	ldrh	r2, [r7, #2]
 8007f7e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	2200      	movs	r2, #0
 8007f84:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	2200      	movs	r2, #0
 8007f8a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f96:	2b40      	cmp	r3, #64	; 0x40
 8007f98:	d007      	beq.n	8007faa <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	681a      	ldr	r2, [r3, #0]
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007fa8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	68db      	ldr	r3, [r3, #12]
 8007fae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007fb2:	d178      	bne.n	80080a6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	685b      	ldr	r3, [r3, #4]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d002      	beq.n	8007fc2 <HAL_SPI_TransmitReceive+0x10a>
 8007fbc:	8b7b      	ldrh	r3, [r7, #26]
 8007fbe:	2b01      	cmp	r3, #1
 8007fc0:	d166      	bne.n	8008090 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fc6:	881a      	ldrh	r2, [r3, #0]
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fd2:	1c9a      	adds	r2, r3, #2
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007fdc:	b29b      	uxth	r3, r3
 8007fde:	3b01      	subs	r3, #1
 8007fe0:	b29a      	uxth	r2, r3
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007fe6:	e053      	b.n	8008090 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	689b      	ldr	r3, [r3, #8]
 8007fee:	f003 0302 	and.w	r3, r3, #2
 8007ff2:	2b02      	cmp	r3, #2
 8007ff4:	d11b      	bne.n	800802e <HAL_SPI_TransmitReceive+0x176>
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007ffa:	b29b      	uxth	r3, r3
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d016      	beq.n	800802e <HAL_SPI_TransmitReceive+0x176>
 8008000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008002:	2b01      	cmp	r3, #1
 8008004:	d113      	bne.n	800802e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800800a:	881a      	ldrh	r2, [r3, #0]
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008016:	1c9a      	adds	r2, r3, #2
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008020:	b29b      	uxth	r3, r3
 8008022:	3b01      	subs	r3, #1
 8008024:	b29a      	uxth	r2, r3
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800802a:	2300      	movs	r3, #0
 800802c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	689b      	ldr	r3, [r3, #8]
 8008034:	f003 0301 	and.w	r3, r3, #1
 8008038:	2b01      	cmp	r3, #1
 800803a:	d119      	bne.n	8008070 <HAL_SPI_TransmitReceive+0x1b8>
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008040:	b29b      	uxth	r3, r3
 8008042:	2b00      	cmp	r3, #0
 8008044:	d014      	beq.n	8008070 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	68da      	ldr	r2, [r3, #12]
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008050:	b292      	uxth	r2, r2
 8008052:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008058:	1c9a      	adds	r2, r3, #2
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008062:	b29b      	uxth	r3, r3
 8008064:	3b01      	subs	r3, #1
 8008066:	b29a      	uxth	r2, r3
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800806c:	2301      	movs	r3, #1
 800806e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008070:	f7fd fa32 	bl	80054d8 <HAL_GetTick>
 8008074:	4602      	mov	r2, r0
 8008076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008078:	1ad3      	subs	r3, r2, r3
 800807a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800807c:	429a      	cmp	r2, r3
 800807e:	d807      	bhi.n	8008090 <HAL_SPI_TransmitReceive+0x1d8>
 8008080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008082:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008086:	d003      	beq.n	8008090 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8008088:	2303      	movs	r3, #3
 800808a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800808e:	e0a7      	b.n	80081e0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008094:	b29b      	uxth	r3, r3
 8008096:	2b00      	cmp	r3, #0
 8008098:	d1a6      	bne.n	8007fe8 <HAL_SPI_TransmitReceive+0x130>
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800809e:	b29b      	uxth	r3, r3
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d1a1      	bne.n	8007fe8 <HAL_SPI_TransmitReceive+0x130>
 80080a4:	e07c      	b.n	80081a0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	685b      	ldr	r3, [r3, #4]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d002      	beq.n	80080b4 <HAL_SPI_TransmitReceive+0x1fc>
 80080ae:	8b7b      	ldrh	r3, [r7, #26]
 80080b0:	2b01      	cmp	r3, #1
 80080b2:	d16b      	bne.n	800818c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	330c      	adds	r3, #12
 80080be:	7812      	ldrb	r2, [r2, #0]
 80080c0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080c6:	1c5a      	adds	r2, r3, #1
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80080d0:	b29b      	uxth	r3, r3
 80080d2:	3b01      	subs	r3, #1
 80080d4:	b29a      	uxth	r2, r3
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80080da:	e057      	b.n	800818c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	689b      	ldr	r3, [r3, #8]
 80080e2:	f003 0302 	and.w	r3, r3, #2
 80080e6:	2b02      	cmp	r3, #2
 80080e8:	d11c      	bne.n	8008124 <HAL_SPI_TransmitReceive+0x26c>
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80080ee:	b29b      	uxth	r3, r3
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d017      	beq.n	8008124 <HAL_SPI_TransmitReceive+0x26c>
 80080f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080f6:	2b01      	cmp	r3, #1
 80080f8:	d114      	bne.n	8008124 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	330c      	adds	r3, #12
 8008104:	7812      	ldrb	r2, [r2, #0]
 8008106:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800810c:	1c5a      	adds	r2, r3, #1
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008116:	b29b      	uxth	r3, r3
 8008118:	3b01      	subs	r3, #1
 800811a:	b29a      	uxth	r2, r3
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008120:	2300      	movs	r3, #0
 8008122:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	689b      	ldr	r3, [r3, #8]
 800812a:	f003 0301 	and.w	r3, r3, #1
 800812e:	2b01      	cmp	r3, #1
 8008130:	d119      	bne.n	8008166 <HAL_SPI_TransmitReceive+0x2ae>
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008136:	b29b      	uxth	r3, r3
 8008138:	2b00      	cmp	r3, #0
 800813a:	d014      	beq.n	8008166 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	68da      	ldr	r2, [r3, #12]
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008146:	b2d2      	uxtb	r2, r2
 8008148:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800814e:	1c5a      	adds	r2, r3, #1
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008158:	b29b      	uxth	r3, r3
 800815a:	3b01      	subs	r3, #1
 800815c:	b29a      	uxth	r2, r3
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008162:	2301      	movs	r3, #1
 8008164:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008166:	f7fd f9b7 	bl	80054d8 <HAL_GetTick>
 800816a:	4602      	mov	r2, r0
 800816c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800816e:	1ad3      	subs	r3, r2, r3
 8008170:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008172:	429a      	cmp	r2, r3
 8008174:	d803      	bhi.n	800817e <HAL_SPI_TransmitReceive+0x2c6>
 8008176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800817c:	d102      	bne.n	8008184 <HAL_SPI_TransmitReceive+0x2cc>
 800817e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008180:	2b00      	cmp	r3, #0
 8008182:	d103      	bne.n	800818c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8008184:	2303      	movs	r3, #3
 8008186:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800818a:	e029      	b.n	80081e0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008190:	b29b      	uxth	r3, r3
 8008192:	2b00      	cmp	r3, #0
 8008194:	d1a2      	bne.n	80080dc <HAL_SPI_TransmitReceive+0x224>
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800819a:	b29b      	uxth	r3, r3
 800819c:	2b00      	cmp	r3, #0
 800819e:	d19d      	bne.n	80080dc <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80081a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081a2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80081a4:	68f8      	ldr	r0, [r7, #12]
 80081a6:	f000 f917 	bl	80083d8 <SPI_EndRxTxTransaction>
 80081aa:	4603      	mov	r3, r0
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d006      	beq.n	80081be <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80081b0:	2301      	movs	r3, #1
 80081b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	2220      	movs	r2, #32
 80081ba:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80081bc:	e010      	b.n	80081e0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	689b      	ldr	r3, [r3, #8]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d10b      	bne.n	80081de <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80081c6:	2300      	movs	r3, #0
 80081c8:	617b      	str	r3, [r7, #20]
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	68db      	ldr	r3, [r3, #12]
 80081d0:	617b      	str	r3, [r7, #20]
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	689b      	ldr	r3, [r3, #8]
 80081d8:	617b      	str	r3, [r7, #20]
 80081da:	697b      	ldr	r3, [r7, #20]
 80081dc:	e000      	b.n	80081e0 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80081de:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	2201      	movs	r2, #1
 80081e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	2200      	movs	r2, #0
 80081ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80081f0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80081f4:	4618      	mov	r0, r3
 80081f6:	3730      	adds	r7, #48	; 0x30
 80081f8:	46bd      	mov	sp, r7
 80081fa:	bd80      	pop	{r7, pc}

080081fc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b088      	sub	sp, #32
 8008200:	af00      	add	r7, sp, #0
 8008202:	60f8      	str	r0, [r7, #12]
 8008204:	60b9      	str	r1, [r7, #8]
 8008206:	603b      	str	r3, [r7, #0]
 8008208:	4613      	mov	r3, r2
 800820a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800820c:	f7fd f964 	bl	80054d8 <HAL_GetTick>
 8008210:	4602      	mov	r2, r0
 8008212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008214:	1a9b      	subs	r3, r3, r2
 8008216:	683a      	ldr	r2, [r7, #0]
 8008218:	4413      	add	r3, r2
 800821a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800821c:	f7fd f95c 	bl	80054d8 <HAL_GetTick>
 8008220:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008222:	4b39      	ldr	r3, [pc, #228]	; (8008308 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	015b      	lsls	r3, r3, #5
 8008228:	0d1b      	lsrs	r3, r3, #20
 800822a:	69fa      	ldr	r2, [r7, #28]
 800822c:	fb02 f303 	mul.w	r3, r2, r3
 8008230:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008232:	e054      	b.n	80082de <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	f1b3 3fff 	cmp.w	r3, #4294967295
 800823a:	d050      	beq.n	80082de <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800823c:	f7fd f94c 	bl	80054d8 <HAL_GetTick>
 8008240:	4602      	mov	r2, r0
 8008242:	69bb      	ldr	r3, [r7, #24]
 8008244:	1ad3      	subs	r3, r2, r3
 8008246:	69fa      	ldr	r2, [r7, #28]
 8008248:	429a      	cmp	r2, r3
 800824a:	d902      	bls.n	8008252 <SPI_WaitFlagStateUntilTimeout+0x56>
 800824c:	69fb      	ldr	r3, [r7, #28]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d13d      	bne.n	80082ce <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	685a      	ldr	r2, [r3, #4]
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008260:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	685b      	ldr	r3, [r3, #4]
 8008266:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800826a:	d111      	bne.n	8008290 <SPI_WaitFlagStateUntilTimeout+0x94>
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	689b      	ldr	r3, [r3, #8]
 8008270:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008274:	d004      	beq.n	8008280 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	689b      	ldr	r3, [r3, #8]
 800827a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800827e:	d107      	bne.n	8008290 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	681a      	ldr	r2, [r3, #0]
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800828e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008294:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008298:	d10f      	bne.n	80082ba <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	681a      	ldr	r2, [r3, #0]
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80082a8:	601a      	str	r2, [r3, #0]
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	681a      	ldr	r2, [r3, #0]
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80082b8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	2201      	movs	r2, #1
 80082be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	2200      	movs	r2, #0
 80082c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80082ca:	2303      	movs	r3, #3
 80082cc:	e017      	b.n	80082fe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80082ce:	697b      	ldr	r3, [r7, #20]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d101      	bne.n	80082d8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80082d4:	2300      	movs	r3, #0
 80082d6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80082d8:	697b      	ldr	r3, [r7, #20]
 80082da:	3b01      	subs	r3, #1
 80082dc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	689a      	ldr	r2, [r3, #8]
 80082e4:	68bb      	ldr	r3, [r7, #8]
 80082e6:	4013      	ands	r3, r2
 80082e8:	68ba      	ldr	r2, [r7, #8]
 80082ea:	429a      	cmp	r2, r3
 80082ec:	bf0c      	ite	eq
 80082ee:	2301      	moveq	r3, #1
 80082f0:	2300      	movne	r3, #0
 80082f2:	b2db      	uxtb	r3, r3
 80082f4:	461a      	mov	r2, r3
 80082f6:	79fb      	ldrb	r3, [r7, #7]
 80082f8:	429a      	cmp	r2, r3
 80082fa:	d19b      	bne.n	8008234 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80082fc:	2300      	movs	r3, #0
}
 80082fe:	4618      	mov	r0, r3
 8008300:	3720      	adds	r7, #32
 8008302:	46bd      	mov	sp, r7
 8008304:	bd80      	pop	{r7, pc}
 8008306:	bf00      	nop
 8008308:	20000048 	.word	0x20000048

0800830c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b086      	sub	sp, #24
 8008310:	af02      	add	r7, sp, #8
 8008312:	60f8      	str	r0, [r7, #12]
 8008314:	60b9      	str	r1, [r7, #8]
 8008316:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	685b      	ldr	r3, [r3, #4]
 800831c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008320:	d111      	bne.n	8008346 <SPI_EndRxTransaction+0x3a>
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	689b      	ldr	r3, [r3, #8]
 8008326:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800832a:	d004      	beq.n	8008336 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	689b      	ldr	r3, [r3, #8]
 8008330:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008334:	d107      	bne.n	8008346 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	681a      	ldr	r2, [r3, #0]
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008344:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	685b      	ldr	r3, [r3, #4]
 800834a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800834e:	d12a      	bne.n	80083a6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	689b      	ldr	r3, [r3, #8]
 8008354:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008358:	d012      	beq.n	8008380 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	9300      	str	r3, [sp, #0]
 800835e:	68bb      	ldr	r3, [r7, #8]
 8008360:	2200      	movs	r2, #0
 8008362:	2180      	movs	r1, #128	; 0x80
 8008364:	68f8      	ldr	r0, [r7, #12]
 8008366:	f7ff ff49 	bl	80081fc <SPI_WaitFlagStateUntilTimeout>
 800836a:	4603      	mov	r3, r0
 800836c:	2b00      	cmp	r3, #0
 800836e:	d02d      	beq.n	80083cc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008374:	f043 0220 	orr.w	r2, r3, #32
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800837c:	2303      	movs	r3, #3
 800837e:	e026      	b.n	80083ce <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	9300      	str	r3, [sp, #0]
 8008384:	68bb      	ldr	r3, [r7, #8]
 8008386:	2200      	movs	r2, #0
 8008388:	2101      	movs	r1, #1
 800838a:	68f8      	ldr	r0, [r7, #12]
 800838c:	f7ff ff36 	bl	80081fc <SPI_WaitFlagStateUntilTimeout>
 8008390:	4603      	mov	r3, r0
 8008392:	2b00      	cmp	r3, #0
 8008394:	d01a      	beq.n	80083cc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800839a:	f043 0220 	orr.w	r2, r3, #32
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80083a2:	2303      	movs	r3, #3
 80083a4:	e013      	b.n	80083ce <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	9300      	str	r3, [sp, #0]
 80083aa:	68bb      	ldr	r3, [r7, #8]
 80083ac:	2200      	movs	r2, #0
 80083ae:	2101      	movs	r1, #1
 80083b0:	68f8      	ldr	r0, [r7, #12]
 80083b2:	f7ff ff23 	bl	80081fc <SPI_WaitFlagStateUntilTimeout>
 80083b6:	4603      	mov	r3, r0
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d007      	beq.n	80083cc <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083c0:	f043 0220 	orr.w	r2, r3, #32
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80083c8:	2303      	movs	r3, #3
 80083ca:	e000      	b.n	80083ce <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80083cc:	2300      	movs	r3, #0
}
 80083ce:	4618      	mov	r0, r3
 80083d0:	3710      	adds	r7, #16
 80083d2:	46bd      	mov	sp, r7
 80083d4:	bd80      	pop	{r7, pc}
	...

080083d8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b088      	sub	sp, #32
 80083dc:	af02      	add	r7, sp, #8
 80083de:	60f8      	str	r0, [r7, #12]
 80083e0:	60b9      	str	r1, [r7, #8]
 80083e2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80083e4:	4b1b      	ldr	r3, [pc, #108]	; (8008454 <SPI_EndRxTxTransaction+0x7c>)
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	4a1b      	ldr	r2, [pc, #108]	; (8008458 <SPI_EndRxTxTransaction+0x80>)
 80083ea:	fba2 2303 	umull	r2, r3, r2, r3
 80083ee:	0d5b      	lsrs	r3, r3, #21
 80083f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80083f4:	fb02 f303 	mul.w	r3, r2, r3
 80083f8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	685b      	ldr	r3, [r3, #4]
 80083fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008402:	d112      	bne.n	800842a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	9300      	str	r3, [sp, #0]
 8008408:	68bb      	ldr	r3, [r7, #8]
 800840a:	2200      	movs	r2, #0
 800840c:	2180      	movs	r1, #128	; 0x80
 800840e:	68f8      	ldr	r0, [r7, #12]
 8008410:	f7ff fef4 	bl	80081fc <SPI_WaitFlagStateUntilTimeout>
 8008414:	4603      	mov	r3, r0
 8008416:	2b00      	cmp	r3, #0
 8008418:	d016      	beq.n	8008448 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800841e:	f043 0220 	orr.w	r2, r3, #32
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008426:	2303      	movs	r3, #3
 8008428:	e00f      	b.n	800844a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800842a:	697b      	ldr	r3, [r7, #20]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d00a      	beq.n	8008446 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8008430:	697b      	ldr	r3, [r7, #20]
 8008432:	3b01      	subs	r3, #1
 8008434:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	689b      	ldr	r3, [r3, #8]
 800843c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008440:	2b80      	cmp	r3, #128	; 0x80
 8008442:	d0f2      	beq.n	800842a <SPI_EndRxTxTransaction+0x52>
 8008444:	e000      	b.n	8008448 <SPI_EndRxTxTransaction+0x70>
        break;
 8008446:	bf00      	nop
  }

  return HAL_OK;
 8008448:	2300      	movs	r3, #0
}
 800844a:	4618      	mov	r0, r3
 800844c:	3718      	adds	r7, #24
 800844e:	46bd      	mov	sp, r7
 8008450:	bd80      	pop	{r7, pc}
 8008452:	bf00      	nop
 8008454:	20000048 	.word	0x20000048
 8008458:	165e9f81 	.word	0x165e9f81

0800845c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800845c:	b084      	sub	sp, #16
 800845e:	b580      	push	{r7, lr}
 8008460:	b084      	sub	sp, #16
 8008462:	af00      	add	r7, sp, #0
 8008464:	6078      	str	r0, [r7, #4]
 8008466:	f107 001c 	add.w	r0, r7, #28
 800846a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800846e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008470:	2b01      	cmp	r3, #1
 8008472:	d122      	bne.n	80084ba <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008478:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	68db      	ldr	r3, [r3, #12]
 8008484:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008488:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800848c:	687a      	ldr	r2, [r7, #4]
 800848e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	68db      	ldr	r3, [r3, #12]
 8008494:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800849c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800849e:	2b01      	cmp	r3, #1
 80084a0:	d105      	bne.n	80084ae <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	68db      	ldr	r3, [r3, #12]
 80084a6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80084ae:	6878      	ldr	r0, [r7, #4]
 80084b0:	f001 fbee 	bl	8009c90 <USB_CoreReset>
 80084b4:	4603      	mov	r3, r0
 80084b6:	73fb      	strb	r3, [r7, #15]
 80084b8:	e01a      	b.n	80084f0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	68db      	ldr	r3, [r3, #12]
 80084be:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80084c6:	6878      	ldr	r0, [r7, #4]
 80084c8:	f001 fbe2 	bl	8009c90 <USB_CoreReset>
 80084cc:	4603      	mov	r3, r0
 80084ce:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80084d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d106      	bne.n	80084e4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084da:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	639a      	str	r2, [r3, #56]	; 0x38
 80084e2:	e005      	b.n	80084f0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084e8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80084f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084f2:	2b01      	cmp	r3, #1
 80084f4:	d10b      	bne.n	800850e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	689b      	ldr	r3, [r3, #8]
 80084fa:	f043 0206 	orr.w	r2, r3, #6
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	689b      	ldr	r3, [r3, #8]
 8008506:	f043 0220 	orr.w	r2, r3, #32
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800850e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008510:	4618      	mov	r0, r3
 8008512:	3710      	adds	r7, #16
 8008514:	46bd      	mov	sp, r7
 8008516:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800851a:	b004      	add	sp, #16
 800851c:	4770      	bx	lr
	...

08008520 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008520:	b480      	push	{r7}
 8008522:	b087      	sub	sp, #28
 8008524:	af00      	add	r7, sp, #0
 8008526:	60f8      	str	r0, [r7, #12]
 8008528:	60b9      	str	r1, [r7, #8]
 800852a:	4613      	mov	r3, r2
 800852c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800852e:	79fb      	ldrb	r3, [r7, #7]
 8008530:	2b02      	cmp	r3, #2
 8008532:	d165      	bne.n	8008600 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008534:	68bb      	ldr	r3, [r7, #8]
 8008536:	4a41      	ldr	r2, [pc, #260]	; (800863c <USB_SetTurnaroundTime+0x11c>)
 8008538:	4293      	cmp	r3, r2
 800853a:	d906      	bls.n	800854a <USB_SetTurnaroundTime+0x2a>
 800853c:	68bb      	ldr	r3, [r7, #8]
 800853e:	4a40      	ldr	r2, [pc, #256]	; (8008640 <USB_SetTurnaroundTime+0x120>)
 8008540:	4293      	cmp	r3, r2
 8008542:	d202      	bcs.n	800854a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008544:	230f      	movs	r3, #15
 8008546:	617b      	str	r3, [r7, #20]
 8008548:	e062      	b.n	8008610 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800854a:	68bb      	ldr	r3, [r7, #8]
 800854c:	4a3c      	ldr	r2, [pc, #240]	; (8008640 <USB_SetTurnaroundTime+0x120>)
 800854e:	4293      	cmp	r3, r2
 8008550:	d306      	bcc.n	8008560 <USB_SetTurnaroundTime+0x40>
 8008552:	68bb      	ldr	r3, [r7, #8]
 8008554:	4a3b      	ldr	r2, [pc, #236]	; (8008644 <USB_SetTurnaroundTime+0x124>)
 8008556:	4293      	cmp	r3, r2
 8008558:	d202      	bcs.n	8008560 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800855a:	230e      	movs	r3, #14
 800855c:	617b      	str	r3, [r7, #20]
 800855e:	e057      	b.n	8008610 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008560:	68bb      	ldr	r3, [r7, #8]
 8008562:	4a38      	ldr	r2, [pc, #224]	; (8008644 <USB_SetTurnaroundTime+0x124>)
 8008564:	4293      	cmp	r3, r2
 8008566:	d306      	bcc.n	8008576 <USB_SetTurnaroundTime+0x56>
 8008568:	68bb      	ldr	r3, [r7, #8]
 800856a:	4a37      	ldr	r2, [pc, #220]	; (8008648 <USB_SetTurnaroundTime+0x128>)
 800856c:	4293      	cmp	r3, r2
 800856e:	d202      	bcs.n	8008576 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008570:	230d      	movs	r3, #13
 8008572:	617b      	str	r3, [r7, #20]
 8008574:	e04c      	b.n	8008610 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8008576:	68bb      	ldr	r3, [r7, #8]
 8008578:	4a33      	ldr	r2, [pc, #204]	; (8008648 <USB_SetTurnaroundTime+0x128>)
 800857a:	4293      	cmp	r3, r2
 800857c:	d306      	bcc.n	800858c <USB_SetTurnaroundTime+0x6c>
 800857e:	68bb      	ldr	r3, [r7, #8]
 8008580:	4a32      	ldr	r2, [pc, #200]	; (800864c <USB_SetTurnaroundTime+0x12c>)
 8008582:	4293      	cmp	r3, r2
 8008584:	d802      	bhi.n	800858c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8008586:	230c      	movs	r3, #12
 8008588:	617b      	str	r3, [r7, #20]
 800858a:	e041      	b.n	8008610 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800858c:	68bb      	ldr	r3, [r7, #8]
 800858e:	4a2f      	ldr	r2, [pc, #188]	; (800864c <USB_SetTurnaroundTime+0x12c>)
 8008590:	4293      	cmp	r3, r2
 8008592:	d906      	bls.n	80085a2 <USB_SetTurnaroundTime+0x82>
 8008594:	68bb      	ldr	r3, [r7, #8]
 8008596:	4a2e      	ldr	r2, [pc, #184]	; (8008650 <USB_SetTurnaroundTime+0x130>)
 8008598:	4293      	cmp	r3, r2
 800859a:	d802      	bhi.n	80085a2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800859c:	230b      	movs	r3, #11
 800859e:	617b      	str	r3, [r7, #20]
 80085a0:	e036      	b.n	8008610 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80085a2:	68bb      	ldr	r3, [r7, #8]
 80085a4:	4a2a      	ldr	r2, [pc, #168]	; (8008650 <USB_SetTurnaroundTime+0x130>)
 80085a6:	4293      	cmp	r3, r2
 80085a8:	d906      	bls.n	80085b8 <USB_SetTurnaroundTime+0x98>
 80085aa:	68bb      	ldr	r3, [r7, #8]
 80085ac:	4a29      	ldr	r2, [pc, #164]	; (8008654 <USB_SetTurnaroundTime+0x134>)
 80085ae:	4293      	cmp	r3, r2
 80085b0:	d802      	bhi.n	80085b8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80085b2:	230a      	movs	r3, #10
 80085b4:	617b      	str	r3, [r7, #20]
 80085b6:	e02b      	b.n	8008610 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80085b8:	68bb      	ldr	r3, [r7, #8]
 80085ba:	4a26      	ldr	r2, [pc, #152]	; (8008654 <USB_SetTurnaroundTime+0x134>)
 80085bc:	4293      	cmp	r3, r2
 80085be:	d906      	bls.n	80085ce <USB_SetTurnaroundTime+0xae>
 80085c0:	68bb      	ldr	r3, [r7, #8]
 80085c2:	4a25      	ldr	r2, [pc, #148]	; (8008658 <USB_SetTurnaroundTime+0x138>)
 80085c4:	4293      	cmp	r3, r2
 80085c6:	d202      	bcs.n	80085ce <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80085c8:	2309      	movs	r3, #9
 80085ca:	617b      	str	r3, [r7, #20]
 80085cc:	e020      	b.n	8008610 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80085ce:	68bb      	ldr	r3, [r7, #8]
 80085d0:	4a21      	ldr	r2, [pc, #132]	; (8008658 <USB_SetTurnaroundTime+0x138>)
 80085d2:	4293      	cmp	r3, r2
 80085d4:	d306      	bcc.n	80085e4 <USB_SetTurnaroundTime+0xc4>
 80085d6:	68bb      	ldr	r3, [r7, #8]
 80085d8:	4a20      	ldr	r2, [pc, #128]	; (800865c <USB_SetTurnaroundTime+0x13c>)
 80085da:	4293      	cmp	r3, r2
 80085dc:	d802      	bhi.n	80085e4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80085de:	2308      	movs	r3, #8
 80085e0:	617b      	str	r3, [r7, #20]
 80085e2:	e015      	b.n	8008610 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80085e4:	68bb      	ldr	r3, [r7, #8]
 80085e6:	4a1d      	ldr	r2, [pc, #116]	; (800865c <USB_SetTurnaroundTime+0x13c>)
 80085e8:	4293      	cmp	r3, r2
 80085ea:	d906      	bls.n	80085fa <USB_SetTurnaroundTime+0xda>
 80085ec:	68bb      	ldr	r3, [r7, #8]
 80085ee:	4a1c      	ldr	r2, [pc, #112]	; (8008660 <USB_SetTurnaroundTime+0x140>)
 80085f0:	4293      	cmp	r3, r2
 80085f2:	d202      	bcs.n	80085fa <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80085f4:	2307      	movs	r3, #7
 80085f6:	617b      	str	r3, [r7, #20]
 80085f8:	e00a      	b.n	8008610 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80085fa:	2306      	movs	r3, #6
 80085fc:	617b      	str	r3, [r7, #20]
 80085fe:	e007      	b.n	8008610 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008600:	79fb      	ldrb	r3, [r7, #7]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d102      	bne.n	800860c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8008606:	2309      	movs	r3, #9
 8008608:	617b      	str	r3, [r7, #20]
 800860a:	e001      	b.n	8008610 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800860c:	2309      	movs	r3, #9
 800860e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	68db      	ldr	r3, [r3, #12]
 8008614:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	68da      	ldr	r2, [r3, #12]
 8008620:	697b      	ldr	r3, [r7, #20]
 8008622:	029b      	lsls	r3, r3, #10
 8008624:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8008628:	431a      	orrs	r2, r3
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800862e:	2300      	movs	r3, #0
}
 8008630:	4618      	mov	r0, r3
 8008632:	371c      	adds	r7, #28
 8008634:	46bd      	mov	sp, r7
 8008636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863a:	4770      	bx	lr
 800863c:	00d8acbf 	.word	0x00d8acbf
 8008640:	00e4e1c0 	.word	0x00e4e1c0
 8008644:	00f42400 	.word	0x00f42400
 8008648:	01067380 	.word	0x01067380
 800864c:	011a499f 	.word	0x011a499f
 8008650:	01312cff 	.word	0x01312cff
 8008654:	014ca43f 	.word	0x014ca43f
 8008658:	016e3600 	.word	0x016e3600
 800865c:	01a6ab1f 	.word	0x01a6ab1f
 8008660:	01e84800 	.word	0x01e84800

08008664 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008664:	b480      	push	{r7}
 8008666:	b083      	sub	sp, #12
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	689b      	ldr	r3, [r3, #8]
 8008670:	f043 0201 	orr.w	r2, r3, #1
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008678:	2300      	movs	r3, #0
}
 800867a:	4618      	mov	r0, r3
 800867c:	370c      	adds	r7, #12
 800867e:	46bd      	mov	sp, r7
 8008680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008684:	4770      	bx	lr

08008686 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008686:	b480      	push	{r7}
 8008688:	b083      	sub	sp, #12
 800868a:	af00      	add	r7, sp, #0
 800868c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	689b      	ldr	r3, [r3, #8]
 8008692:	f023 0201 	bic.w	r2, r3, #1
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800869a:	2300      	movs	r3, #0
}
 800869c:	4618      	mov	r0, r3
 800869e:	370c      	adds	r7, #12
 80086a0:	46bd      	mov	sp, r7
 80086a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a6:	4770      	bx	lr

080086a8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b084      	sub	sp, #16
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
 80086b0:	460b      	mov	r3, r1
 80086b2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80086b4:	2300      	movs	r3, #0
 80086b6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	68db      	ldr	r3, [r3, #12]
 80086bc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80086c4:	78fb      	ldrb	r3, [r7, #3]
 80086c6:	2b01      	cmp	r3, #1
 80086c8:	d115      	bne.n	80086f6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	68db      	ldr	r3, [r3, #12]
 80086ce:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80086d6:	2001      	movs	r0, #1
 80086d8:	f7fc ff0a 	bl	80054f0 <HAL_Delay>
      ms++;
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	3301      	adds	r3, #1
 80086e0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80086e2:	6878      	ldr	r0, [r7, #4]
 80086e4:	f001 fa45 	bl	8009b72 <USB_GetMode>
 80086e8:	4603      	mov	r3, r0
 80086ea:	2b01      	cmp	r3, #1
 80086ec:	d01e      	beq.n	800872c <USB_SetCurrentMode+0x84>
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	2b31      	cmp	r3, #49	; 0x31
 80086f2:	d9f0      	bls.n	80086d6 <USB_SetCurrentMode+0x2e>
 80086f4:	e01a      	b.n	800872c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80086f6:	78fb      	ldrb	r3, [r7, #3]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d115      	bne.n	8008728 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	68db      	ldr	r3, [r3, #12]
 8008700:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008708:	2001      	movs	r0, #1
 800870a:	f7fc fef1 	bl	80054f0 <HAL_Delay>
      ms++;
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	3301      	adds	r3, #1
 8008712:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008714:	6878      	ldr	r0, [r7, #4]
 8008716:	f001 fa2c 	bl	8009b72 <USB_GetMode>
 800871a:	4603      	mov	r3, r0
 800871c:	2b00      	cmp	r3, #0
 800871e:	d005      	beq.n	800872c <USB_SetCurrentMode+0x84>
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	2b31      	cmp	r3, #49	; 0x31
 8008724:	d9f0      	bls.n	8008708 <USB_SetCurrentMode+0x60>
 8008726:	e001      	b.n	800872c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008728:	2301      	movs	r3, #1
 800872a:	e005      	b.n	8008738 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	2b32      	cmp	r3, #50	; 0x32
 8008730:	d101      	bne.n	8008736 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008732:	2301      	movs	r3, #1
 8008734:	e000      	b.n	8008738 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008736:	2300      	movs	r3, #0
}
 8008738:	4618      	mov	r0, r3
 800873a:	3710      	adds	r7, #16
 800873c:	46bd      	mov	sp, r7
 800873e:	bd80      	pop	{r7, pc}

08008740 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008740:	b084      	sub	sp, #16
 8008742:	b580      	push	{r7, lr}
 8008744:	b086      	sub	sp, #24
 8008746:	af00      	add	r7, sp, #0
 8008748:	6078      	str	r0, [r7, #4]
 800874a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800874e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008752:	2300      	movs	r3, #0
 8008754:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800875a:	2300      	movs	r3, #0
 800875c:	613b      	str	r3, [r7, #16]
 800875e:	e009      	b.n	8008774 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008760:	687a      	ldr	r2, [r7, #4]
 8008762:	693b      	ldr	r3, [r7, #16]
 8008764:	3340      	adds	r3, #64	; 0x40
 8008766:	009b      	lsls	r3, r3, #2
 8008768:	4413      	add	r3, r2
 800876a:	2200      	movs	r2, #0
 800876c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800876e:	693b      	ldr	r3, [r7, #16]
 8008770:	3301      	adds	r3, #1
 8008772:	613b      	str	r3, [r7, #16]
 8008774:	693b      	ldr	r3, [r7, #16]
 8008776:	2b0e      	cmp	r3, #14
 8008778:	d9f2      	bls.n	8008760 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800877a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800877c:	2b00      	cmp	r3, #0
 800877e:	d11c      	bne.n	80087ba <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008786:	685b      	ldr	r3, [r3, #4]
 8008788:	68fa      	ldr	r2, [r7, #12]
 800878a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800878e:	f043 0302 	orr.w	r3, r3, #2
 8008792:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008798:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087a4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087b0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	639a      	str	r2, [r3, #56]	; 0x38
 80087b8:	e00b      	b.n	80087d2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087be:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087ca:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80087d8:	461a      	mov	r2, r3
 80087da:	2300      	movs	r3, #0
 80087dc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087e4:	4619      	mov	r1, r3
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087ec:	461a      	mov	r2, r3
 80087ee:	680b      	ldr	r3, [r1, #0]
 80087f0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80087f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087f4:	2b01      	cmp	r3, #1
 80087f6:	d10c      	bne.n	8008812 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80087f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d104      	bne.n	8008808 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80087fe:	2100      	movs	r1, #0
 8008800:	6878      	ldr	r0, [r7, #4]
 8008802:	f000 f965 	bl	8008ad0 <USB_SetDevSpeed>
 8008806:	e008      	b.n	800881a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008808:	2101      	movs	r1, #1
 800880a:	6878      	ldr	r0, [r7, #4]
 800880c:	f000 f960 	bl	8008ad0 <USB_SetDevSpeed>
 8008810:	e003      	b.n	800881a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008812:	2103      	movs	r1, #3
 8008814:	6878      	ldr	r0, [r7, #4]
 8008816:	f000 f95b 	bl	8008ad0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800881a:	2110      	movs	r1, #16
 800881c:	6878      	ldr	r0, [r7, #4]
 800881e:	f000 f8f3 	bl	8008a08 <USB_FlushTxFifo>
 8008822:	4603      	mov	r3, r0
 8008824:	2b00      	cmp	r3, #0
 8008826:	d001      	beq.n	800882c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8008828:	2301      	movs	r3, #1
 800882a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800882c:	6878      	ldr	r0, [r7, #4]
 800882e:	f000 f91f 	bl	8008a70 <USB_FlushRxFifo>
 8008832:	4603      	mov	r3, r0
 8008834:	2b00      	cmp	r3, #0
 8008836:	d001      	beq.n	800883c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8008838:	2301      	movs	r3, #1
 800883a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008842:	461a      	mov	r2, r3
 8008844:	2300      	movs	r3, #0
 8008846:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800884e:	461a      	mov	r2, r3
 8008850:	2300      	movs	r3, #0
 8008852:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800885a:	461a      	mov	r2, r3
 800885c:	2300      	movs	r3, #0
 800885e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008860:	2300      	movs	r3, #0
 8008862:	613b      	str	r3, [r7, #16]
 8008864:	e043      	b.n	80088ee <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008866:	693b      	ldr	r3, [r7, #16]
 8008868:	015a      	lsls	r2, r3, #5
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	4413      	add	r3, r2
 800886e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008878:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800887c:	d118      	bne.n	80088b0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800887e:	693b      	ldr	r3, [r7, #16]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d10a      	bne.n	800889a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008884:	693b      	ldr	r3, [r7, #16]
 8008886:	015a      	lsls	r2, r3, #5
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	4413      	add	r3, r2
 800888c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008890:	461a      	mov	r2, r3
 8008892:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008896:	6013      	str	r3, [r2, #0]
 8008898:	e013      	b.n	80088c2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800889a:	693b      	ldr	r3, [r7, #16]
 800889c:	015a      	lsls	r2, r3, #5
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	4413      	add	r3, r2
 80088a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088a6:	461a      	mov	r2, r3
 80088a8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80088ac:	6013      	str	r3, [r2, #0]
 80088ae:	e008      	b.n	80088c2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80088b0:	693b      	ldr	r3, [r7, #16]
 80088b2:	015a      	lsls	r2, r3, #5
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	4413      	add	r3, r2
 80088b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088bc:	461a      	mov	r2, r3
 80088be:	2300      	movs	r3, #0
 80088c0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80088c2:	693b      	ldr	r3, [r7, #16]
 80088c4:	015a      	lsls	r2, r3, #5
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	4413      	add	r3, r2
 80088ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088ce:	461a      	mov	r2, r3
 80088d0:	2300      	movs	r3, #0
 80088d2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80088d4:	693b      	ldr	r3, [r7, #16]
 80088d6:	015a      	lsls	r2, r3, #5
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	4413      	add	r3, r2
 80088dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088e0:	461a      	mov	r2, r3
 80088e2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80088e6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80088e8:	693b      	ldr	r3, [r7, #16]
 80088ea:	3301      	adds	r3, #1
 80088ec:	613b      	str	r3, [r7, #16]
 80088ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088f0:	693a      	ldr	r2, [r7, #16]
 80088f2:	429a      	cmp	r2, r3
 80088f4:	d3b7      	bcc.n	8008866 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80088f6:	2300      	movs	r3, #0
 80088f8:	613b      	str	r3, [r7, #16]
 80088fa:	e043      	b.n	8008984 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80088fc:	693b      	ldr	r3, [r7, #16]
 80088fe:	015a      	lsls	r2, r3, #5
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	4413      	add	r3, r2
 8008904:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800890e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008912:	d118      	bne.n	8008946 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8008914:	693b      	ldr	r3, [r7, #16]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d10a      	bne.n	8008930 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800891a:	693b      	ldr	r3, [r7, #16]
 800891c:	015a      	lsls	r2, r3, #5
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	4413      	add	r3, r2
 8008922:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008926:	461a      	mov	r2, r3
 8008928:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800892c:	6013      	str	r3, [r2, #0]
 800892e:	e013      	b.n	8008958 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008930:	693b      	ldr	r3, [r7, #16]
 8008932:	015a      	lsls	r2, r3, #5
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	4413      	add	r3, r2
 8008938:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800893c:	461a      	mov	r2, r3
 800893e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008942:	6013      	str	r3, [r2, #0]
 8008944:	e008      	b.n	8008958 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008946:	693b      	ldr	r3, [r7, #16]
 8008948:	015a      	lsls	r2, r3, #5
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	4413      	add	r3, r2
 800894e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008952:	461a      	mov	r2, r3
 8008954:	2300      	movs	r3, #0
 8008956:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008958:	693b      	ldr	r3, [r7, #16]
 800895a:	015a      	lsls	r2, r3, #5
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	4413      	add	r3, r2
 8008960:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008964:	461a      	mov	r2, r3
 8008966:	2300      	movs	r3, #0
 8008968:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800896a:	693b      	ldr	r3, [r7, #16]
 800896c:	015a      	lsls	r2, r3, #5
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	4413      	add	r3, r2
 8008972:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008976:	461a      	mov	r2, r3
 8008978:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800897c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800897e:	693b      	ldr	r3, [r7, #16]
 8008980:	3301      	adds	r3, #1
 8008982:	613b      	str	r3, [r7, #16]
 8008984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008986:	693a      	ldr	r2, [r7, #16]
 8008988:	429a      	cmp	r2, r3
 800898a:	d3b7      	bcc.n	80088fc <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008992:	691b      	ldr	r3, [r3, #16]
 8008994:	68fa      	ldr	r2, [r7, #12]
 8008996:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800899a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800899e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	2200      	movs	r2, #0
 80089a4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80089ac:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80089ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d105      	bne.n	80089c0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	699b      	ldr	r3, [r3, #24]
 80089b8:	f043 0210 	orr.w	r2, r3, #16
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	699a      	ldr	r2, [r3, #24]
 80089c4:	4b0f      	ldr	r3, [pc, #60]	; (8008a04 <USB_DevInit+0x2c4>)
 80089c6:	4313      	orrs	r3, r2
 80089c8:	687a      	ldr	r2, [r7, #4]
 80089ca:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80089cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d005      	beq.n	80089de <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	699b      	ldr	r3, [r3, #24]
 80089d6:	f043 0208 	orr.w	r2, r3, #8
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80089de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089e0:	2b01      	cmp	r3, #1
 80089e2:	d107      	bne.n	80089f4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	699b      	ldr	r3, [r3, #24]
 80089e8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80089ec:	f043 0304 	orr.w	r3, r3, #4
 80089f0:	687a      	ldr	r2, [r7, #4]
 80089f2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80089f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80089f6:	4618      	mov	r0, r3
 80089f8:	3718      	adds	r7, #24
 80089fa:	46bd      	mov	sp, r7
 80089fc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008a00:	b004      	add	sp, #16
 8008a02:	4770      	bx	lr
 8008a04:	803c3800 	.word	0x803c3800

08008a08 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008a08:	b480      	push	{r7}
 8008a0a:	b085      	sub	sp, #20
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
 8008a10:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008a12:	2300      	movs	r3, #0
 8008a14:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	3301      	adds	r3, #1
 8008a1a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	4a13      	ldr	r2, [pc, #76]	; (8008a6c <USB_FlushTxFifo+0x64>)
 8008a20:	4293      	cmp	r3, r2
 8008a22:	d901      	bls.n	8008a28 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008a24:	2303      	movs	r3, #3
 8008a26:	e01b      	b.n	8008a60 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	691b      	ldr	r3, [r3, #16]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	daf2      	bge.n	8008a16 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008a30:	2300      	movs	r3, #0
 8008a32:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008a34:	683b      	ldr	r3, [r7, #0]
 8008a36:	019b      	lsls	r3, r3, #6
 8008a38:	f043 0220 	orr.w	r2, r3, #32
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	3301      	adds	r3, #1
 8008a44:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	4a08      	ldr	r2, [pc, #32]	; (8008a6c <USB_FlushTxFifo+0x64>)
 8008a4a:	4293      	cmp	r3, r2
 8008a4c:	d901      	bls.n	8008a52 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008a4e:	2303      	movs	r3, #3
 8008a50:	e006      	b.n	8008a60 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	691b      	ldr	r3, [r3, #16]
 8008a56:	f003 0320 	and.w	r3, r3, #32
 8008a5a:	2b20      	cmp	r3, #32
 8008a5c:	d0f0      	beq.n	8008a40 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008a5e:	2300      	movs	r3, #0
}
 8008a60:	4618      	mov	r0, r3
 8008a62:	3714      	adds	r7, #20
 8008a64:	46bd      	mov	sp, r7
 8008a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6a:	4770      	bx	lr
 8008a6c:	00030d40 	.word	0x00030d40

08008a70 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008a70:	b480      	push	{r7}
 8008a72:	b085      	sub	sp, #20
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008a78:	2300      	movs	r3, #0
 8008a7a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	3301      	adds	r3, #1
 8008a80:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	4a11      	ldr	r2, [pc, #68]	; (8008acc <USB_FlushRxFifo+0x5c>)
 8008a86:	4293      	cmp	r3, r2
 8008a88:	d901      	bls.n	8008a8e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008a8a:	2303      	movs	r3, #3
 8008a8c:	e018      	b.n	8008ac0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	691b      	ldr	r3, [r3, #16]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	daf2      	bge.n	8008a7c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008a96:	2300      	movs	r3, #0
 8008a98:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	2210      	movs	r2, #16
 8008a9e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	3301      	adds	r3, #1
 8008aa4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	4a08      	ldr	r2, [pc, #32]	; (8008acc <USB_FlushRxFifo+0x5c>)
 8008aaa:	4293      	cmp	r3, r2
 8008aac:	d901      	bls.n	8008ab2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008aae:	2303      	movs	r3, #3
 8008ab0:	e006      	b.n	8008ac0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	691b      	ldr	r3, [r3, #16]
 8008ab6:	f003 0310 	and.w	r3, r3, #16
 8008aba:	2b10      	cmp	r3, #16
 8008abc:	d0f0      	beq.n	8008aa0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008abe:	2300      	movs	r3, #0
}
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	3714      	adds	r7, #20
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aca:	4770      	bx	lr
 8008acc:	00030d40 	.word	0x00030d40

08008ad0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008ad0:	b480      	push	{r7}
 8008ad2:	b085      	sub	sp, #20
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
 8008ad8:	460b      	mov	r3, r1
 8008ada:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ae6:	681a      	ldr	r2, [r3, #0]
 8008ae8:	78fb      	ldrb	r3, [r7, #3]
 8008aea:	68f9      	ldr	r1, [r7, #12]
 8008aec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008af0:	4313      	orrs	r3, r2
 8008af2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008af4:	2300      	movs	r3, #0
}
 8008af6:	4618      	mov	r0, r3
 8008af8:	3714      	adds	r7, #20
 8008afa:	46bd      	mov	sp, r7
 8008afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b00:	4770      	bx	lr

08008b02 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008b02:	b480      	push	{r7}
 8008b04:	b087      	sub	sp, #28
 8008b06:	af00      	add	r7, sp, #0
 8008b08:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008b0e:	693b      	ldr	r3, [r7, #16]
 8008b10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b14:	689b      	ldr	r3, [r3, #8]
 8008b16:	f003 0306 	and.w	r3, r3, #6
 8008b1a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d102      	bne.n	8008b28 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8008b22:	2300      	movs	r3, #0
 8008b24:	75fb      	strb	r3, [r7, #23]
 8008b26:	e00a      	b.n	8008b3e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	2b02      	cmp	r3, #2
 8008b2c:	d002      	beq.n	8008b34 <USB_GetDevSpeed+0x32>
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	2b06      	cmp	r3, #6
 8008b32:	d102      	bne.n	8008b3a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008b34:	2302      	movs	r3, #2
 8008b36:	75fb      	strb	r3, [r7, #23]
 8008b38:	e001      	b.n	8008b3e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008b3a:	230f      	movs	r3, #15
 8008b3c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008b3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b40:	4618      	mov	r0, r3
 8008b42:	371c      	adds	r7, #28
 8008b44:	46bd      	mov	sp, r7
 8008b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4a:	4770      	bx	lr

08008b4c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008b4c:	b480      	push	{r7}
 8008b4e:	b085      	sub	sp, #20
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
 8008b54:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008b5a:	683b      	ldr	r3, [r7, #0]
 8008b5c:	781b      	ldrb	r3, [r3, #0]
 8008b5e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	785b      	ldrb	r3, [r3, #1]
 8008b64:	2b01      	cmp	r3, #1
 8008b66:	d13a      	bne.n	8008bde <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b6e:	69da      	ldr	r2, [r3, #28]
 8008b70:	683b      	ldr	r3, [r7, #0]
 8008b72:	781b      	ldrb	r3, [r3, #0]
 8008b74:	f003 030f 	and.w	r3, r3, #15
 8008b78:	2101      	movs	r1, #1
 8008b7a:	fa01 f303 	lsl.w	r3, r1, r3
 8008b7e:	b29b      	uxth	r3, r3
 8008b80:	68f9      	ldr	r1, [r7, #12]
 8008b82:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008b86:	4313      	orrs	r3, r2
 8008b88:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008b8a:	68bb      	ldr	r3, [r7, #8]
 8008b8c:	015a      	lsls	r2, r3, #5
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	4413      	add	r3, r2
 8008b92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d155      	bne.n	8008c4c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008ba0:	68bb      	ldr	r3, [r7, #8]
 8008ba2:	015a      	lsls	r2, r3, #5
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	4413      	add	r3, r2
 8008ba8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bac:	681a      	ldr	r2, [r3, #0]
 8008bae:	683b      	ldr	r3, [r7, #0]
 8008bb0:	68db      	ldr	r3, [r3, #12]
 8008bb2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008bb6:	683b      	ldr	r3, [r7, #0]
 8008bb8:	791b      	ldrb	r3, [r3, #4]
 8008bba:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008bbc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008bbe:	68bb      	ldr	r3, [r7, #8]
 8008bc0:	059b      	lsls	r3, r3, #22
 8008bc2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008bc4:	4313      	orrs	r3, r2
 8008bc6:	68ba      	ldr	r2, [r7, #8]
 8008bc8:	0151      	lsls	r1, r2, #5
 8008bca:	68fa      	ldr	r2, [r7, #12]
 8008bcc:	440a      	add	r2, r1
 8008bce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008bd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008bd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008bda:	6013      	str	r3, [r2, #0]
 8008bdc:	e036      	b.n	8008c4c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008be4:	69da      	ldr	r2, [r3, #28]
 8008be6:	683b      	ldr	r3, [r7, #0]
 8008be8:	781b      	ldrb	r3, [r3, #0]
 8008bea:	f003 030f 	and.w	r3, r3, #15
 8008bee:	2101      	movs	r1, #1
 8008bf0:	fa01 f303 	lsl.w	r3, r1, r3
 8008bf4:	041b      	lsls	r3, r3, #16
 8008bf6:	68f9      	ldr	r1, [r7, #12]
 8008bf8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008bfc:	4313      	orrs	r3, r2
 8008bfe:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008c00:	68bb      	ldr	r3, [r7, #8]
 8008c02:	015a      	lsls	r2, r3, #5
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	4413      	add	r3, r2
 8008c08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d11a      	bne.n	8008c4c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008c16:	68bb      	ldr	r3, [r7, #8]
 8008c18:	015a      	lsls	r2, r3, #5
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	4413      	add	r3, r2
 8008c1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c22:	681a      	ldr	r2, [r3, #0]
 8008c24:	683b      	ldr	r3, [r7, #0]
 8008c26:	68db      	ldr	r3, [r3, #12]
 8008c28:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	791b      	ldrb	r3, [r3, #4]
 8008c30:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008c32:	430b      	orrs	r3, r1
 8008c34:	4313      	orrs	r3, r2
 8008c36:	68ba      	ldr	r2, [r7, #8]
 8008c38:	0151      	lsls	r1, r2, #5
 8008c3a:	68fa      	ldr	r2, [r7, #12]
 8008c3c:	440a      	add	r2, r1
 8008c3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008c46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c4a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008c4c:	2300      	movs	r3, #0
}
 8008c4e:	4618      	mov	r0, r3
 8008c50:	3714      	adds	r7, #20
 8008c52:	46bd      	mov	sp, r7
 8008c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c58:	4770      	bx	lr
	...

08008c5c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008c5c:	b480      	push	{r7}
 8008c5e:	b085      	sub	sp, #20
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
 8008c64:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008c6a:	683b      	ldr	r3, [r7, #0]
 8008c6c:	781b      	ldrb	r3, [r3, #0]
 8008c6e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008c70:	683b      	ldr	r3, [r7, #0]
 8008c72:	785b      	ldrb	r3, [r3, #1]
 8008c74:	2b01      	cmp	r3, #1
 8008c76:	d161      	bne.n	8008d3c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008c78:	68bb      	ldr	r3, [r7, #8]
 8008c7a:	015a      	lsls	r2, r3, #5
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	4413      	add	r3, r2
 8008c80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008c8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008c8e:	d11f      	bne.n	8008cd0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008c90:	68bb      	ldr	r3, [r7, #8]
 8008c92:	015a      	lsls	r2, r3, #5
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	4413      	add	r3, r2
 8008c98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	68ba      	ldr	r2, [r7, #8]
 8008ca0:	0151      	lsls	r1, r2, #5
 8008ca2:	68fa      	ldr	r2, [r7, #12]
 8008ca4:	440a      	add	r2, r1
 8008ca6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008caa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008cae:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008cb0:	68bb      	ldr	r3, [r7, #8]
 8008cb2:	015a      	lsls	r2, r3, #5
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	4413      	add	r3, r2
 8008cb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	68ba      	ldr	r2, [r7, #8]
 8008cc0:	0151      	lsls	r1, r2, #5
 8008cc2:	68fa      	ldr	r2, [r7, #12]
 8008cc4:	440a      	add	r2, r1
 8008cc6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008cca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008cce:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cd6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008cd8:	683b      	ldr	r3, [r7, #0]
 8008cda:	781b      	ldrb	r3, [r3, #0]
 8008cdc:	f003 030f 	and.w	r3, r3, #15
 8008ce0:	2101      	movs	r1, #1
 8008ce2:	fa01 f303 	lsl.w	r3, r1, r3
 8008ce6:	b29b      	uxth	r3, r3
 8008ce8:	43db      	mvns	r3, r3
 8008cea:	68f9      	ldr	r1, [r7, #12]
 8008cec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008cf0:	4013      	ands	r3, r2
 8008cf2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cfa:	69da      	ldr	r2, [r3, #28]
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	781b      	ldrb	r3, [r3, #0]
 8008d00:	f003 030f 	and.w	r3, r3, #15
 8008d04:	2101      	movs	r1, #1
 8008d06:	fa01 f303 	lsl.w	r3, r1, r3
 8008d0a:	b29b      	uxth	r3, r3
 8008d0c:	43db      	mvns	r3, r3
 8008d0e:	68f9      	ldr	r1, [r7, #12]
 8008d10:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008d14:	4013      	ands	r3, r2
 8008d16:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008d18:	68bb      	ldr	r3, [r7, #8]
 8008d1a:	015a      	lsls	r2, r3, #5
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	4413      	add	r3, r2
 8008d20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d24:	681a      	ldr	r2, [r3, #0]
 8008d26:	68bb      	ldr	r3, [r7, #8]
 8008d28:	0159      	lsls	r1, r3, #5
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	440b      	add	r3, r1
 8008d2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d32:	4619      	mov	r1, r3
 8008d34:	4b35      	ldr	r3, [pc, #212]	; (8008e0c <USB_DeactivateEndpoint+0x1b0>)
 8008d36:	4013      	ands	r3, r2
 8008d38:	600b      	str	r3, [r1, #0]
 8008d3a:	e060      	b.n	8008dfe <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008d3c:	68bb      	ldr	r3, [r7, #8]
 8008d3e:	015a      	lsls	r2, r3, #5
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	4413      	add	r3, r2
 8008d44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008d4e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008d52:	d11f      	bne.n	8008d94 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008d54:	68bb      	ldr	r3, [r7, #8]
 8008d56:	015a      	lsls	r2, r3, #5
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	4413      	add	r3, r2
 8008d5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	68ba      	ldr	r2, [r7, #8]
 8008d64:	0151      	lsls	r1, r2, #5
 8008d66:	68fa      	ldr	r2, [r7, #12]
 8008d68:	440a      	add	r2, r1
 8008d6a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008d6e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008d72:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008d74:	68bb      	ldr	r3, [r7, #8]
 8008d76:	015a      	lsls	r2, r3, #5
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	4413      	add	r3, r2
 8008d7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	68ba      	ldr	r2, [r7, #8]
 8008d84:	0151      	lsls	r1, r2, #5
 8008d86:	68fa      	ldr	r2, [r7, #12]
 8008d88:	440a      	add	r2, r1
 8008d8a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008d8e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008d92:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d9a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	781b      	ldrb	r3, [r3, #0]
 8008da0:	f003 030f 	and.w	r3, r3, #15
 8008da4:	2101      	movs	r1, #1
 8008da6:	fa01 f303 	lsl.w	r3, r1, r3
 8008daa:	041b      	lsls	r3, r3, #16
 8008dac:	43db      	mvns	r3, r3
 8008dae:	68f9      	ldr	r1, [r7, #12]
 8008db0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008db4:	4013      	ands	r3, r2
 8008db6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008dbe:	69da      	ldr	r2, [r3, #28]
 8008dc0:	683b      	ldr	r3, [r7, #0]
 8008dc2:	781b      	ldrb	r3, [r3, #0]
 8008dc4:	f003 030f 	and.w	r3, r3, #15
 8008dc8:	2101      	movs	r1, #1
 8008dca:	fa01 f303 	lsl.w	r3, r1, r3
 8008dce:	041b      	lsls	r3, r3, #16
 8008dd0:	43db      	mvns	r3, r3
 8008dd2:	68f9      	ldr	r1, [r7, #12]
 8008dd4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008dd8:	4013      	ands	r3, r2
 8008dda:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008ddc:	68bb      	ldr	r3, [r7, #8]
 8008dde:	015a      	lsls	r2, r3, #5
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	4413      	add	r3, r2
 8008de4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008de8:	681a      	ldr	r2, [r3, #0]
 8008dea:	68bb      	ldr	r3, [r7, #8]
 8008dec:	0159      	lsls	r1, r3, #5
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	440b      	add	r3, r1
 8008df2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008df6:	4619      	mov	r1, r3
 8008df8:	4b05      	ldr	r3, [pc, #20]	; (8008e10 <USB_DeactivateEndpoint+0x1b4>)
 8008dfa:	4013      	ands	r3, r2
 8008dfc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8008dfe:	2300      	movs	r3, #0
}
 8008e00:	4618      	mov	r0, r3
 8008e02:	3714      	adds	r7, #20
 8008e04:	46bd      	mov	sp, r7
 8008e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0a:	4770      	bx	lr
 8008e0c:	ec337800 	.word	0xec337800
 8008e10:	eff37800 	.word	0xeff37800

08008e14 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b08a      	sub	sp, #40	; 0x28
 8008e18:	af02      	add	r7, sp, #8
 8008e1a:	60f8      	str	r0, [r7, #12]
 8008e1c:	60b9      	str	r1, [r7, #8]
 8008e1e:	4613      	mov	r3, r2
 8008e20:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8008e26:	68bb      	ldr	r3, [r7, #8]
 8008e28:	781b      	ldrb	r3, [r3, #0]
 8008e2a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008e2c:	68bb      	ldr	r3, [r7, #8]
 8008e2e:	785b      	ldrb	r3, [r3, #1]
 8008e30:	2b01      	cmp	r3, #1
 8008e32:	f040 815c 	bne.w	80090ee <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008e36:	68bb      	ldr	r3, [r7, #8]
 8008e38:	699b      	ldr	r3, [r3, #24]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d132      	bne.n	8008ea4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008e3e:	69bb      	ldr	r3, [r7, #24]
 8008e40:	015a      	lsls	r2, r3, #5
 8008e42:	69fb      	ldr	r3, [r7, #28]
 8008e44:	4413      	add	r3, r2
 8008e46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e4a:	691b      	ldr	r3, [r3, #16]
 8008e4c:	69ba      	ldr	r2, [r7, #24]
 8008e4e:	0151      	lsls	r1, r2, #5
 8008e50:	69fa      	ldr	r2, [r7, #28]
 8008e52:	440a      	add	r2, r1
 8008e54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e58:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008e5c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008e60:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008e62:	69bb      	ldr	r3, [r7, #24]
 8008e64:	015a      	lsls	r2, r3, #5
 8008e66:	69fb      	ldr	r3, [r7, #28]
 8008e68:	4413      	add	r3, r2
 8008e6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e6e:	691b      	ldr	r3, [r3, #16]
 8008e70:	69ba      	ldr	r2, [r7, #24]
 8008e72:	0151      	lsls	r1, r2, #5
 8008e74:	69fa      	ldr	r2, [r7, #28]
 8008e76:	440a      	add	r2, r1
 8008e78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e7c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008e80:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008e82:	69bb      	ldr	r3, [r7, #24]
 8008e84:	015a      	lsls	r2, r3, #5
 8008e86:	69fb      	ldr	r3, [r7, #28]
 8008e88:	4413      	add	r3, r2
 8008e8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e8e:	691b      	ldr	r3, [r3, #16]
 8008e90:	69ba      	ldr	r2, [r7, #24]
 8008e92:	0151      	lsls	r1, r2, #5
 8008e94:	69fa      	ldr	r2, [r7, #28]
 8008e96:	440a      	add	r2, r1
 8008e98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e9c:	0cdb      	lsrs	r3, r3, #19
 8008e9e:	04db      	lsls	r3, r3, #19
 8008ea0:	6113      	str	r3, [r2, #16]
 8008ea2:	e074      	b.n	8008f8e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008ea4:	69bb      	ldr	r3, [r7, #24]
 8008ea6:	015a      	lsls	r2, r3, #5
 8008ea8:	69fb      	ldr	r3, [r7, #28]
 8008eaa:	4413      	add	r3, r2
 8008eac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008eb0:	691b      	ldr	r3, [r3, #16]
 8008eb2:	69ba      	ldr	r2, [r7, #24]
 8008eb4:	0151      	lsls	r1, r2, #5
 8008eb6:	69fa      	ldr	r2, [r7, #28]
 8008eb8:	440a      	add	r2, r1
 8008eba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ebe:	0cdb      	lsrs	r3, r3, #19
 8008ec0:	04db      	lsls	r3, r3, #19
 8008ec2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008ec4:	69bb      	ldr	r3, [r7, #24]
 8008ec6:	015a      	lsls	r2, r3, #5
 8008ec8:	69fb      	ldr	r3, [r7, #28]
 8008eca:	4413      	add	r3, r2
 8008ecc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ed0:	691b      	ldr	r3, [r3, #16]
 8008ed2:	69ba      	ldr	r2, [r7, #24]
 8008ed4:	0151      	lsls	r1, r2, #5
 8008ed6:	69fa      	ldr	r2, [r7, #28]
 8008ed8:	440a      	add	r2, r1
 8008eda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ede:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008ee2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008ee6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008ee8:	69bb      	ldr	r3, [r7, #24]
 8008eea:	015a      	lsls	r2, r3, #5
 8008eec:	69fb      	ldr	r3, [r7, #28]
 8008eee:	4413      	add	r3, r2
 8008ef0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ef4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8008ef6:	68bb      	ldr	r3, [r7, #8]
 8008ef8:	6999      	ldr	r1, [r3, #24]
 8008efa:	68bb      	ldr	r3, [r7, #8]
 8008efc:	68db      	ldr	r3, [r3, #12]
 8008efe:	440b      	add	r3, r1
 8008f00:	1e59      	subs	r1, r3, #1
 8008f02:	68bb      	ldr	r3, [r7, #8]
 8008f04:	68db      	ldr	r3, [r3, #12]
 8008f06:	fbb1 f3f3 	udiv	r3, r1, r3
 8008f0a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008f0c:	4b9d      	ldr	r3, [pc, #628]	; (8009184 <USB_EPStartXfer+0x370>)
 8008f0e:	400b      	ands	r3, r1
 8008f10:	69b9      	ldr	r1, [r7, #24]
 8008f12:	0148      	lsls	r0, r1, #5
 8008f14:	69f9      	ldr	r1, [r7, #28]
 8008f16:	4401      	add	r1, r0
 8008f18:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008f1c:	4313      	orrs	r3, r2
 8008f1e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008f20:	69bb      	ldr	r3, [r7, #24]
 8008f22:	015a      	lsls	r2, r3, #5
 8008f24:	69fb      	ldr	r3, [r7, #28]
 8008f26:	4413      	add	r3, r2
 8008f28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f2c:	691a      	ldr	r2, [r3, #16]
 8008f2e:	68bb      	ldr	r3, [r7, #8]
 8008f30:	699b      	ldr	r3, [r3, #24]
 8008f32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008f36:	69b9      	ldr	r1, [r7, #24]
 8008f38:	0148      	lsls	r0, r1, #5
 8008f3a:	69f9      	ldr	r1, [r7, #28]
 8008f3c:	4401      	add	r1, r0
 8008f3e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008f42:	4313      	orrs	r3, r2
 8008f44:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8008f46:	68bb      	ldr	r3, [r7, #8]
 8008f48:	791b      	ldrb	r3, [r3, #4]
 8008f4a:	2b01      	cmp	r3, #1
 8008f4c:	d11f      	bne.n	8008f8e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008f4e:	69bb      	ldr	r3, [r7, #24]
 8008f50:	015a      	lsls	r2, r3, #5
 8008f52:	69fb      	ldr	r3, [r7, #28]
 8008f54:	4413      	add	r3, r2
 8008f56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f5a:	691b      	ldr	r3, [r3, #16]
 8008f5c:	69ba      	ldr	r2, [r7, #24]
 8008f5e:	0151      	lsls	r1, r2, #5
 8008f60:	69fa      	ldr	r2, [r7, #28]
 8008f62:	440a      	add	r2, r1
 8008f64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f68:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8008f6c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8008f6e:	69bb      	ldr	r3, [r7, #24]
 8008f70:	015a      	lsls	r2, r3, #5
 8008f72:	69fb      	ldr	r3, [r7, #28]
 8008f74:	4413      	add	r3, r2
 8008f76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f7a:	691b      	ldr	r3, [r3, #16]
 8008f7c:	69ba      	ldr	r2, [r7, #24]
 8008f7e:	0151      	lsls	r1, r2, #5
 8008f80:	69fa      	ldr	r2, [r7, #28]
 8008f82:	440a      	add	r2, r1
 8008f84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f88:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008f8c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8008f8e:	79fb      	ldrb	r3, [r7, #7]
 8008f90:	2b01      	cmp	r3, #1
 8008f92:	d14b      	bne.n	800902c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008f94:	68bb      	ldr	r3, [r7, #8]
 8008f96:	695b      	ldr	r3, [r3, #20]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d009      	beq.n	8008fb0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008f9c:	69bb      	ldr	r3, [r7, #24]
 8008f9e:	015a      	lsls	r2, r3, #5
 8008fa0:	69fb      	ldr	r3, [r7, #28]
 8008fa2:	4413      	add	r3, r2
 8008fa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fa8:	461a      	mov	r2, r3
 8008faa:	68bb      	ldr	r3, [r7, #8]
 8008fac:	695b      	ldr	r3, [r3, #20]
 8008fae:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008fb0:	68bb      	ldr	r3, [r7, #8]
 8008fb2:	791b      	ldrb	r3, [r3, #4]
 8008fb4:	2b01      	cmp	r3, #1
 8008fb6:	d128      	bne.n	800900a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008fb8:	69fb      	ldr	r3, [r7, #28]
 8008fba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fbe:	689b      	ldr	r3, [r3, #8]
 8008fc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d110      	bne.n	8008fea <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008fc8:	69bb      	ldr	r3, [r7, #24]
 8008fca:	015a      	lsls	r2, r3, #5
 8008fcc:	69fb      	ldr	r3, [r7, #28]
 8008fce:	4413      	add	r3, r2
 8008fd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	69ba      	ldr	r2, [r7, #24]
 8008fd8:	0151      	lsls	r1, r2, #5
 8008fda:	69fa      	ldr	r2, [r7, #28]
 8008fdc:	440a      	add	r2, r1
 8008fde:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008fe2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008fe6:	6013      	str	r3, [r2, #0]
 8008fe8:	e00f      	b.n	800900a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008fea:	69bb      	ldr	r3, [r7, #24]
 8008fec:	015a      	lsls	r2, r3, #5
 8008fee:	69fb      	ldr	r3, [r7, #28]
 8008ff0:	4413      	add	r3, r2
 8008ff2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	69ba      	ldr	r2, [r7, #24]
 8008ffa:	0151      	lsls	r1, r2, #5
 8008ffc:	69fa      	ldr	r2, [r7, #28]
 8008ffe:	440a      	add	r2, r1
 8009000:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009004:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009008:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800900a:	69bb      	ldr	r3, [r7, #24]
 800900c:	015a      	lsls	r2, r3, #5
 800900e:	69fb      	ldr	r3, [r7, #28]
 8009010:	4413      	add	r3, r2
 8009012:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	69ba      	ldr	r2, [r7, #24]
 800901a:	0151      	lsls	r1, r2, #5
 800901c:	69fa      	ldr	r2, [r7, #28]
 800901e:	440a      	add	r2, r1
 8009020:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009024:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009028:	6013      	str	r3, [r2, #0]
 800902a:	e133      	b.n	8009294 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800902c:	69bb      	ldr	r3, [r7, #24]
 800902e:	015a      	lsls	r2, r3, #5
 8009030:	69fb      	ldr	r3, [r7, #28]
 8009032:	4413      	add	r3, r2
 8009034:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	69ba      	ldr	r2, [r7, #24]
 800903c:	0151      	lsls	r1, r2, #5
 800903e:	69fa      	ldr	r2, [r7, #28]
 8009040:	440a      	add	r2, r1
 8009042:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009046:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800904a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800904c:	68bb      	ldr	r3, [r7, #8]
 800904e:	791b      	ldrb	r3, [r3, #4]
 8009050:	2b01      	cmp	r3, #1
 8009052:	d015      	beq.n	8009080 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8009054:	68bb      	ldr	r3, [r7, #8]
 8009056:	699b      	ldr	r3, [r3, #24]
 8009058:	2b00      	cmp	r3, #0
 800905a:	f000 811b 	beq.w	8009294 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800905e:	69fb      	ldr	r3, [r7, #28]
 8009060:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009064:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009066:	68bb      	ldr	r3, [r7, #8]
 8009068:	781b      	ldrb	r3, [r3, #0]
 800906a:	f003 030f 	and.w	r3, r3, #15
 800906e:	2101      	movs	r1, #1
 8009070:	fa01 f303 	lsl.w	r3, r1, r3
 8009074:	69f9      	ldr	r1, [r7, #28]
 8009076:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800907a:	4313      	orrs	r3, r2
 800907c:	634b      	str	r3, [r1, #52]	; 0x34
 800907e:	e109      	b.n	8009294 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009080:	69fb      	ldr	r3, [r7, #28]
 8009082:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009086:	689b      	ldr	r3, [r3, #8]
 8009088:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800908c:	2b00      	cmp	r3, #0
 800908e:	d110      	bne.n	80090b2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009090:	69bb      	ldr	r3, [r7, #24]
 8009092:	015a      	lsls	r2, r3, #5
 8009094:	69fb      	ldr	r3, [r7, #28]
 8009096:	4413      	add	r3, r2
 8009098:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	69ba      	ldr	r2, [r7, #24]
 80090a0:	0151      	lsls	r1, r2, #5
 80090a2:	69fa      	ldr	r2, [r7, #28]
 80090a4:	440a      	add	r2, r1
 80090a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80090aa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80090ae:	6013      	str	r3, [r2, #0]
 80090b0:	e00f      	b.n	80090d2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80090b2:	69bb      	ldr	r3, [r7, #24]
 80090b4:	015a      	lsls	r2, r3, #5
 80090b6:	69fb      	ldr	r3, [r7, #28]
 80090b8:	4413      	add	r3, r2
 80090ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	69ba      	ldr	r2, [r7, #24]
 80090c2:	0151      	lsls	r1, r2, #5
 80090c4:	69fa      	ldr	r2, [r7, #28]
 80090c6:	440a      	add	r2, r1
 80090c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80090cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80090d0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80090d2:	68bb      	ldr	r3, [r7, #8]
 80090d4:	6919      	ldr	r1, [r3, #16]
 80090d6:	68bb      	ldr	r3, [r7, #8]
 80090d8:	781a      	ldrb	r2, [r3, #0]
 80090da:	68bb      	ldr	r3, [r7, #8]
 80090dc:	699b      	ldr	r3, [r3, #24]
 80090de:	b298      	uxth	r0, r3
 80090e0:	79fb      	ldrb	r3, [r7, #7]
 80090e2:	9300      	str	r3, [sp, #0]
 80090e4:	4603      	mov	r3, r0
 80090e6:	68f8      	ldr	r0, [r7, #12]
 80090e8:	f000 fade 	bl	80096a8 <USB_WritePacket>
 80090ec:	e0d2      	b.n	8009294 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80090ee:	69bb      	ldr	r3, [r7, #24]
 80090f0:	015a      	lsls	r2, r3, #5
 80090f2:	69fb      	ldr	r3, [r7, #28]
 80090f4:	4413      	add	r3, r2
 80090f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090fa:	691b      	ldr	r3, [r3, #16]
 80090fc:	69ba      	ldr	r2, [r7, #24]
 80090fe:	0151      	lsls	r1, r2, #5
 8009100:	69fa      	ldr	r2, [r7, #28]
 8009102:	440a      	add	r2, r1
 8009104:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009108:	0cdb      	lsrs	r3, r3, #19
 800910a:	04db      	lsls	r3, r3, #19
 800910c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800910e:	69bb      	ldr	r3, [r7, #24]
 8009110:	015a      	lsls	r2, r3, #5
 8009112:	69fb      	ldr	r3, [r7, #28]
 8009114:	4413      	add	r3, r2
 8009116:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800911a:	691b      	ldr	r3, [r3, #16]
 800911c:	69ba      	ldr	r2, [r7, #24]
 800911e:	0151      	lsls	r1, r2, #5
 8009120:	69fa      	ldr	r2, [r7, #28]
 8009122:	440a      	add	r2, r1
 8009124:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009128:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800912c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009130:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8009132:	68bb      	ldr	r3, [r7, #8]
 8009134:	699b      	ldr	r3, [r3, #24]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d126      	bne.n	8009188 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800913a:	69bb      	ldr	r3, [r7, #24]
 800913c:	015a      	lsls	r2, r3, #5
 800913e:	69fb      	ldr	r3, [r7, #28]
 8009140:	4413      	add	r3, r2
 8009142:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009146:	691a      	ldr	r2, [r3, #16]
 8009148:	68bb      	ldr	r3, [r7, #8]
 800914a:	68db      	ldr	r3, [r3, #12]
 800914c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009150:	69b9      	ldr	r1, [r7, #24]
 8009152:	0148      	lsls	r0, r1, #5
 8009154:	69f9      	ldr	r1, [r7, #28]
 8009156:	4401      	add	r1, r0
 8009158:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800915c:	4313      	orrs	r3, r2
 800915e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009160:	69bb      	ldr	r3, [r7, #24]
 8009162:	015a      	lsls	r2, r3, #5
 8009164:	69fb      	ldr	r3, [r7, #28]
 8009166:	4413      	add	r3, r2
 8009168:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800916c:	691b      	ldr	r3, [r3, #16]
 800916e:	69ba      	ldr	r2, [r7, #24]
 8009170:	0151      	lsls	r1, r2, #5
 8009172:	69fa      	ldr	r2, [r7, #28]
 8009174:	440a      	add	r2, r1
 8009176:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800917a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800917e:	6113      	str	r3, [r2, #16]
 8009180:	e03a      	b.n	80091f8 <USB_EPStartXfer+0x3e4>
 8009182:	bf00      	nop
 8009184:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009188:	68bb      	ldr	r3, [r7, #8]
 800918a:	699a      	ldr	r2, [r3, #24]
 800918c:	68bb      	ldr	r3, [r7, #8]
 800918e:	68db      	ldr	r3, [r3, #12]
 8009190:	4413      	add	r3, r2
 8009192:	1e5a      	subs	r2, r3, #1
 8009194:	68bb      	ldr	r3, [r7, #8]
 8009196:	68db      	ldr	r3, [r3, #12]
 8009198:	fbb2 f3f3 	udiv	r3, r2, r3
 800919c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800919e:	68bb      	ldr	r3, [r7, #8]
 80091a0:	68db      	ldr	r3, [r3, #12]
 80091a2:	8afa      	ldrh	r2, [r7, #22]
 80091a4:	fb03 f202 	mul.w	r2, r3, r2
 80091a8:	68bb      	ldr	r3, [r7, #8]
 80091aa:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80091ac:	69bb      	ldr	r3, [r7, #24]
 80091ae:	015a      	lsls	r2, r3, #5
 80091b0:	69fb      	ldr	r3, [r7, #28]
 80091b2:	4413      	add	r3, r2
 80091b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091b8:	691a      	ldr	r2, [r3, #16]
 80091ba:	8afb      	ldrh	r3, [r7, #22]
 80091bc:	04d9      	lsls	r1, r3, #19
 80091be:	4b38      	ldr	r3, [pc, #224]	; (80092a0 <USB_EPStartXfer+0x48c>)
 80091c0:	400b      	ands	r3, r1
 80091c2:	69b9      	ldr	r1, [r7, #24]
 80091c4:	0148      	lsls	r0, r1, #5
 80091c6:	69f9      	ldr	r1, [r7, #28]
 80091c8:	4401      	add	r1, r0
 80091ca:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80091ce:	4313      	orrs	r3, r2
 80091d0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80091d2:	69bb      	ldr	r3, [r7, #24]
 80091d4:	015a      	lsls	r2, r3, #5
 80091d6:	69fb      	ldr	r3, [r7, #28]
 80091d8:	4413      	add	r3, r2
 80091da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091de:	691a      	ldr	r2, [r3, #16]
 80091e0:	68bb      	ldr	r3, [r7, #8]
 80091e2:	69db      	ldr	r3, [r3, #28]
 80091e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80091e8:	69b9      	ldr	r1, [r7, #24]
 80091ea:	0148      	lsls	r0, r1, #5
 80091ec:	69f9      	ldr	r1, [r7, #28]
 80091ee:	4401      	add	r1, r0
 80091f0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80091f4:	4313      	orrs	r3, r2
 80091f6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80091f8:	79fb      	ldrb	r3, [r7, #7]
 80091fa:	2b01      	cmp	r3, #1
 80091fc:	d10d      	bne.n	800921a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80091fe:	68bb      	ldr	r3, [r7, #8]
 8009200:	691b      	ldr	r3, [r3, #16]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d009      	beq.n	800921a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009206:	68bb      	ldr	r3, [r7, #8]
 8009208:	6919      	ldr	r1, [r3, #16]
 800920a:	69bb      	ldr	r3, [r7, #24]
 800920c:	015a      	lsls	r2, r3, #5
 800920e:	69fb      	ldr	r3, [r7, #28]
 8009210:	4413      	add	r3, r2
 8009212:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009216:	460a      	mov	r2, r1
 8009218:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800921a:	68bb      	ldr	r3, [r7, #8]
 800921c:	791b      	ldrb	r3, [r3, #4]
 800921e:	2b01      	cmp	r3, #1
 8009220:	d128      	bne.n	8009274 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009222:	69fb      	ldr	r3, [r7, #28]
 8009224:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009228:	689b      	ldr	r3, [r3, #8]
 800922a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800922e:	2b00      	cmp	r3, #0
 8009230:	d110      	bne.n	8009254 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009232:	69bb      	ldr	r3, [r7, #24]
 8009234:	015a      	lsls	r2, r3, #5
 8009236:	69fb      	ldr	r3, [r7, #28]
 8009238:	4413      	add	r3, r2
 800923a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	69ba      	ldr	r2, [r7, #24]
 8009242:	0151      	lsls	r1, r2, #5
 8009244:	69fa      	ldr	r2, [r7, #28]
 8009246:	440a      	add	r2, r1
 8009248:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800924c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009250:	6013      	str	r3, [r2, #0]
 8009252:	e00f      	b.n	8009274 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009254:	69bb      	ldr	r3, [r7, #24]
 8009256:	015a      	lsls	r2, r3, #5
 8009258:	69fb      	ldr	r3, [r7, #28]
 800925a:	4413      	add	r3, r2
 800925c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	69ba      	ldr	r2, [r7, #24]
 8009264:	0151      	lsls	r1, r2, #5
 8009266:	69fa      	ldr	r2, [r7, #28]
 8009268:	440a      	add	r2, r1
 800926a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800926e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009272:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009274:	69bb      	ldr	r3, [r7, #24]
 8009276:	015a      	lsls	r2, r3, #5
 8009278:	69fb      	ldr	r3, [r7, #28]
 800927a:	4413      	add	r3, r2
 800927c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	69ba      	ldr	r2, [r7, #24]
 8009284:	0151      	lsls	r1, r2, #5
 8009286:	69fa      	ldr	r2, [r7, #28]
 8009288:	440a      	add	r2, r1
 800928a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800928e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009292:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009294:	2300      	movs	r3, #0
}
 8009296:	4618      	mov	r0, r3
 8009298:	3720      	adds	r7, #32
 800929a:	46bd      	mov	sp, r7
 800929c:	bd80      	pop	{r7, pc}
 800929e:	bf00      	nop
 80092a0:	1ff80000 	.word	0x1ff80000

080092a4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80092a4:	b480      	push	{r7}
 80092a6:	b087      	sub	sp, #28
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	60f8      	str	r0, [r7, #12]
 80092ac:	60b9      	str	r1, [r7, #8]
 80092ae:	4613      	mov	r3, r2
 80092b0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80092b6:	68bb      	ldr	r3, [r7, #8]
 80092b8:	781b      	ldrb	r3, [r3, #0]
 80092ba:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80092bc:	68bb      	ldr	r3, [r7, #8]
 80092be:	785b      	ldrb	r3, [r3, #1]
 80092c0:	2b01      	cmp	r3, #1
 80092c2:	f040 80ce 	bne.w	8009462 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80092c6:	68bb      	ldr	r3, [r7, #8]
 80092c8:	699b      	ldr	r3, [r3, #24]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d132      	bne.n	8009334 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80092ce:	693b      	ldr	r3, [r7, #16]
 80092d0:	015a      	lsls	r2, r3, #5
 80092d2:	697b      	ldr	r3, [r7, #20]
 80092d4:	4413      	add	r3, r2
 80092d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092da:	691b      	ldr	r3, [r3, #16]
 80092dc:	693a      	ldr	r2, [r7, #16]
 80092de:	0151      	lsls	r1, r2, #5
 80092e0:	697a      	ldr	r2, [r7, #20]
 80092e2:	440a      	add	r2, r1
 80092e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80092e8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80092ec:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80092f0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80092f2:	693b      	ldr	r3, [r7, #16]
 80092f4:	015a      	lsls	r2, r3, #5
 80092f6:	697b      	ldr	r3, [r7, #20]
 80092f8:	4413      	add	r3, r2
 80092fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092fe:	691b      	ldr	r3, [r3, #16]
 8009300:	693a      	ldr	r2, [r7, #16]
 8009302:	0151      	lsls	r1, r2, #5
 8009304:	697a      	ldr	r2, [r7, #20]
 8009306:	440a      	add	r2, r1
 8009308:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800930c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009310:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009312:	693b      	ldr	r3, [r7, #16]
 8009314:	015a      	lsls	r2, r3, #5
 8009316:	697b      	ldr	r3, [r7, #20]
 8009318:	4413      	add	r3, r2
 800931a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800931e:	691b      	ldr	r3, [r3, #16]
 8009320:	693a      	ldr	r2, [r7, #16]
 8009322:	0151      	lsls	r1, r2, #5
 8009324:	697a      	ldr	r2, [r7, #20]
 8009326:	440a      	add	r2, r1
 8009328:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800932c:	0cdb      	lsrs	r3, r3, #19
 800932e:	04db      	lsls	r3, r3, #19
 8009330:	6113      	str	r3, [r2, #16]
 8009332:	e04e      	b.n	80093d2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009334:	693b      	ldr	r3, [r7, #16]
 8009336:	015a      	lsls	r2, r3, #5
 8009338:	697b      	ldr	r3, [r7, #20]
 800933a:	4413      	add	r3, r2
 800933c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009340:	691b      	ldr	r3, [r3, #16]
 8009342:	693a      	ldr	r2, [r7, #16]
 8009344:	0151      	lsls	r1, r2, #5
 8009346:	697a      	ldr	r2, [r7, #20]
 8009348:	440a      	add	r2, r1
 800934a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800934e:	0cdb      	lsrs	r3, r3, #19
 8009350:	04db      	lsls	r3, r3, #19
 8009352:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009354:	693b      	ldr	r3, [r7, #16]
 8009356:	015a      	lsls	r2, r3, #5
 8009358:	697b      	ldr	r3, [r7, #20]
 800935a:	4413      	add	r3, r2
 800935c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009360:	691b      	ldr	r3, [r3, #16]
 8009362:	693a      	ldr	r2, [r7, #16]
 8009364:	0151      	lsls	r1, r2, #5
 8009366:	697a      	ldr	r2, [r7, #20]
 8009368:	440a      	add	r2, r1
 800936a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800936e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009372:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009376:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8009378:	68bb      	ldr	r3, [r7, #8]
 800937a:	699a      	ldr	r2, [r3, #24]
 800937c:	68bb      	ldr	r3, [r7, #8]
 800937e:	68db      	ldr	r3, [r3, #12]
 8009380:	429a      	cmp	r2, r3
 8009382:	d903      	bls.n	800938c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8009384:	68bb      	ldr	r3, [r7, #8]
 8009386:	68da      	ldr	r2, [r3, #12]
 8009388:	68bb      	ldr	r3, [r7, #8]
 800938a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800938c:	693b      	ldr	r3, [r7, #16]
 800938e:	015a      	lsls	r2, r3, #5
 8009390:	697b      	ldr	r3, [r7, #20]
 8009392:	4413      	add	r3, r2
 8009394:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009398:	691b      	ldr	r3, [r3, #16]
 800939a:	693a      	ldr	r2, [r7, #16]
 800939c:	0151      	lsls	r1, r2, #5
 800939e:	697a      	ldr	r2, [r7, #20]
 80093a0:	440a      	add	r2, r1
 80093a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80093a6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80093aa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80093ac:	693b      	ldr	r3, [r7, #16]
 80093ae:	015a      	lsls	r2, r3, #5
 80093b0:	697b      	ldr	r3, [r7, #20]
 80093b2:	4413      	add	r3, r2
 80093b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093b8:	691a      	ldr	r2, [r3, #16]
 80093ba:	68bb      	ldr	r3, [r7, #8]
 80093bc:	699b      	ldr	r3, [r3, #24]
 80093be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80093c2:	6939      	ldr	r1, [r7, #16]
 80093c4:	0148      	lsls	r0, r1, #5
 80093c6:	6979      	ldr	r1, [r7, #20]
 80093c8:	4401      	add	r1, r0
 80093ca:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80093ce:	4313      	orrs	r3, r2
 80093d0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80093d2:	79fb      	ldrb	r3, [r7, #7]
 80093d4:	2b01      	cmp	r3, #1
 80093d6:	d11e      	bne.n	8009416 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80093d8:	68bb      	ldr	r3, [r7, #8]
 80093da:	695b      	ldr	r3, [r3, #20]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d009      	beq.n	80093f4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80093e0:	693b      	ldr	r3, [r7, #16]
 80093e2:	015a      	lsls	r2, r3, #5
 80093e4:	697b      	ldr	r3, [r7, #20]
 80093e6:	4413      	add	r3, r2
 80093e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093ec:	461a      	mov	r2, r3
 80093ee:	68bb      	ldr	r3, [r7, #8]
 80093f0:	695b      	ldr	r3, [r3, #20]
 80093f2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80093f4:	693b      	ldr	r3, [r7, #16]
 80093f6:	015a      	lsls	r2, r3, #5
 80093f8:	697b      	ldr	r3, [r7, #20]
 80093fa:	4413      	add	r3, r2
 80093fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	693a      	ldr	r2, [r7, #16]
 8009404:	0151      	lsls	r1, r2, #5
 8009406:	697a      	ldr	r2, [r7, #20]
 8009408:	440a      	add	r2, r1
 800940a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800940e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009412:	6013      	str	r3, [r2, #0]
 8009414:	e097      	b.n	8009546 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009416:	693b      	ldr	r3, [r7, #16]
 8009418:	015a      	lsls	r2, r3, #5
 800941a:	697b      	ldr	r3, [r7, #20]
 800941c:	4413      	add	r3, r2
 800941e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	693a      	ldr	r2, [r7, #16]
 8009426:	0151      	lsls	r1, r2, #5
 8009428:	697a      	ldr	r2, [r7, #20]
 800942a:	440a      	add	r2, r1
 800942c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009430:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009434:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8009436:	68bb      	ldr	r3, [r7, #8]
 8009438:	699b      	ldr	r3, [r3, #24]
 800943a:	2b00      	cmp	r3, #0
 800943c:	f000 8083 	beq.w	8009546 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009440:	697b      	ldr	r3, [r7, #20]
 8009442:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009446:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009448:	68bb      	ldr	r3, [r7, #8]
 800944a:	781b      	ldrb	r3, [r3, #0]
 800944c:	f003 030f 	and.w	r3, r3, #15
 8009450:	2101      	movs	r1, #1
 8009452:	fa01 f303 	lsl.w	r3, r1, r3
 8009456:	6979      	ldr	r1, [r7, #20]
 8009458:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800945c:	4313      	orrs	r3, r2
 800945e:	634b      	str	r3, [r1, #52]	; 0x34
 8009460:	e071      	b.n	8009546 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009462:	693b      	ldr	r3, [r7, #16]
 8009464:	015a      	lsls	r2, r3, #5
 8009466:	697b      	ldr	r3, [r7, #20]
 8009468:	4413      	add	r3, r2
 800946a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800946e:	691b      	ldr	r3, [r3, #16]
 8009470:	693a      	ldr	r2, [r7, #16]
 8009472:	0151      	lsls	r1, r2, #5
 8009474:	697a      	ldr	r2, [r7, #20]
 8009476:	440a      	add	r2, r1
 8009478:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800947c:	0cdb      	lsrs	r3, r3, #19
 800947e:	04db      	lsls	r3, r3, #19
 8009480:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009482:	693b      	ldr	r3, [r7, #16]
 8009484:	015a      	lsls	r2, r3, #5
 8009486:	697b      	ldr	r3, [r7, #20]
 8009488:	4413      	add	r3, r2
 800948a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800948e:	691b      	ldr	r3, [r3, #16]
 8009490:	693a      	ldr	r2, [r7, #16]
 8009492:	0151      	lsls	r1, r2, #5
 8009494:	697a      	ldr	r2, [r7, #20]
 8009496:	440a      	add	r2, r1
 8009498:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800949c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80094a0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80094a4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80094a6:	68bb      	ldr	r3, [r7, #8]
 80094a8:	699b      	ldr	r3, [r3, #24]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d003      	beq.n	80094b6 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80094ae:	68bb      	ldr	r3, [r7, #8]
 80094b0:	68da      	ldr	r2, [r3, #12]
 80094b2:	68bb      	ldr	r3, [r7, #8]
 80094b4:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80094b6:	68bb      	ldr	r3, [r7, #8]
 80094b8:	68da      	ldr	r2, [r3, #12]
 80094ba:	68bb      	ldr	r3, [r7, #8]
 80094bc:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80094be:	693b      	ldr	r3, [r7, #16]
 80094c0:	015a      	lsls	r2, r3, #5
 80094c2:	697b      	ldr	r3, [r7, #20]
 80094c4:	4413      	add	r3, r2
 80094c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094ca:	691b      	ldr	r3, [r3, #16]
 80094cc:	693a      	ldr	r2, [r7, #16]
 80094ce:	0151      	lsls	r1, r2, #5
 80094d0:	697a      	ldr	r2, [r7, #20]
 80094d2:	440a      	add	r2, r1
 80094d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80094d8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80094dc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80094de:	693b      	ldr	r3, [r7, #16]
 80094e0:	015a      	lsls	r2, r3, #5
 80094e2:	697b      	ldr	r3, [r7, #20]
 80094e4:	4413      	add	r3, r2
 80094e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094ea:	691a      	ldr	r2, [r3, #16]
 80094ec:	68bb      	ldr	r3, [r7, #8]
 80094ee:	69db      	ldr	r3, [r3, #28]
 80094f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80094f4:	6939      	ldr	r1, [r7, #16]
 80094f6:	0148      	lsls	r0, r1, #5
 80094f8:	6979      	ldr	r1, [r7, #20]
 80094fa:	4401      	add	r1, r0
 80094fc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009500:	4313      	orrs	r3, r2
 8009502:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8009504:	79fb      	ldrb	r3, [r7, #7]
 8009506:	2b01      	cmp	r3, #1
 8009508:	d10d      	bne.n	8009526 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800950a:	68bb      	ldr	r3, [r7, #8]
 800950c:	691b      	ldr	r3, [r3, #16]
 800950e:	2b00      	cmp	r3, #0
 8009510:	d009      	beq.n	8009526 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009512:	68bb      	ldr	r3, [r7, #8]
 8009514:	6919      	ldr	r1, [r3, #16]
 8009516:	693b      	ldr	r3, [r7, #16]
 8009518:	015a      	lsls	r2, r3, #5
 800951a:	697b      	ldr	r3, [r7, #20]
 800951c:	4413      	add	r3, r2
 800951e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009522:	460a      	mov	r2, r1
 8009524:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009526:	693b      	ldr	r3, [r7, #16]
 8009528:	015a      	lsls	r2, r3, #5
 800952a:	697b      	ldr	r3, [r7, #20]
 800952c:	4413      	add	r3, r2
 800952e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	693a      	ldr	r2, [r7, #16]
 8009536:	0151      	lsls	r1, r2, #5
 8009538:	697a      	ldr	r2, [r7, #20]
 800953a:	440a      	add	r2, r1
 800953c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009540:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009544:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009546:	2300      	movs	r3, #0
}
 8009548:	4618      	mov	r0, r3
 800954a:	371c      	adds	r7, #28
 800954c:	46bd      	mov	sp, r7
 800954e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009552:	4770      	bx	lr

08009554 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009554:	b480      	push	{r7}
 8009556:	b087      	sub	sp, #28
 8009558:	af00      	add	r7, sp, #0
 800955a:	6078      	str	r0, [r7, #4]
 800955c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800955e:	2300      	movs	r3, #0
 8009560:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8009562:	2300      	movs	r3, #0
 8009564:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800956a:	683b      	ldr	r3, [r7, #0]
 800956c:	785b      	ldrb	r3, [r3, #1]
 800956e:	2b01      	cmp	r3, #1
 8009570:	d14a      	bne.n	8009608 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009572:	683b      	ldr	r3, [r7, #0]
 8009574:	781b      	ldrb	r3, [r3, #0]
 8009576:	015a      	lsls	r2, r3, #5
 8009578:	693b      	ldr	r3, [r7, #16]
 800957a:	4413      	add	r3, r2
 800957c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009586:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800958a:	f040 8086 	bne.w	800969a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800958e:	683b      	ldr	r3, [r7, #0]
 8009590:	781b      	ldrb	r3, [r3, #0]
 8009592:	015a      	lsls	r2, r3, #5
 8009594:	693b      	ldr	r3, [r7, #16]
 8009596:	4413      	add	r3, r2
 8009598:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	683a      	ldr	r2, [r7, #0]
 80095a0:	7812      	ldrb	r2, [r2, #0]
 80095a2:	0151      	lsls	r1, r2, #5
 80095a4:	693a      	ldr	r2, [r7, #16]
 80095a6:	440a      	add	r2, r1
 80095a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80095ac:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80095b0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80095b2:	683b      	ldr	r3, [r7, #0]
 80095b4:	781b      	ldrb	r3, [r3, #0]
 80095b6:	015a      	lsls	r2, r3, #5
 80095b8:	693b      	ldr	r3, [r7, #16]
 80095ba:	4413      	add	r3, r2
 80095bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	683a      	ldr	r2, [r7, #0]
 80095c4:	7812      	ldrb	r2, [r2, #0]
 80095c6:	0151      	lsls	r1, r2, #5
 80095c8:	693a      	ldr	r2, [r7, #16]
 80095ca:	440a      	add	r2, r1
 80095cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80095d0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80095d4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	3301      	adds	r3, #1
 80095da:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	f242 7210 	movw	r2, #10000	; 0x2710
 80095e2:	4293      	cmp	r3, r2
 80095e4:	d902      	bls.n	80095ec <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80095e6:	2301      	movs	r3, #1
 80095e8:	75fb      	strb	r3, [r7, #23]
          break;
 80095ea:	e056      	b.n	800969a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80095ec:	683b      	ldr	r3, [r7, #0]
 80095ee:	781b      	ldrb	r3, [r3, #0]
 80095f0:	015a      	lsls	r2, r3, #5
 80095f2:	693b      	ldr	r3, [r7, #16]
 80095f4:	4413      	add	r3, r2
 80095f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009600:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009604:	d0e7      	beq.n	80095d6 <USB_EPStopXfer+0x82>
 8009606:	e048      	b.n	800969a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	781b      	ldrb	r3, [r3, #0]
 800960c:	015a      	lsls	r2, r3, #5
 800960e:	693b      	ldr	r3, [r7, #16]
 8009610:	4413      	add	r3, r2
 8009612:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800961c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009620:	d13b      	bne.n	800969a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8009622:	683b      	ldr	r3, [r7, #0]
 8009624:	781b      	ldrb	r3, [r3, #0]
 8009626:	015a      	lsls	r2, r3, #5
 8009628:	693b      	ldr	r3, [r7, #16]
 800962a:	4413      	add	r3, r2
 800962c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	683a      	ldr	r2, [r7, #0]
 8009634:	7812      	ldrb	r2, [r2, #0]
 8009636:	0151      	lsls	r1, r2, #5
 8009638:	693a      	ldr	r2, [r7, #16]
 800963a:	440a      	add	r2, r1
 800963c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009640:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009644:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8009646:	683b      	ldr	r3, [r7, #0]
 8009648:	781b      	ldrb	r3, [r3, #0]
 800964a:	015a      	lsls	r2, r3, #5
 800964c:	693b      	ldr	r3, [r7, #16]
 800964e:	4413      	add	r3, r2
 8009650:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	683a      	ldr	r2, [r7, #0]
 8009658:	7812      	ldrb	r2, [r2, #0]
 800965a:	0151      	lsls	r1, r2, #5
 800965c:	693a      	ldr	r2, [r7, #16]
 800965e:	440a      	add	r2, r1
 8009660:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009664:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009668:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	3301      	adds	r3, #1
 800966e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	f242 7210 	movw	r2, #10000	; 0x2710
 8009676:	4293      	cmp	r3, r2
 8009678:	d902      	bls.n	8009680 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800967a:	2301      	movs	r3, #1
 800967c:	75fb      	strb	r3, [r7, #23]
          break;
 800967e:	e00c      	b.n	800969a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8009680:	683b      	ldr	r3, [r7, #0]
 8009682:	781b      	ldrb	r3, [r3, #0]
 8009684:	015a      	lsls	r2, r3, #5
 8009686:	693b      	ldr	r3, [r7, #16]
 8009688:	4413      	add	r3, r2
 800968a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009694:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009698:	d0e7      	beq.n	800966a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800969a:	7dfb      	ldrb	r3, [r7, #23]
}
 800969c:	4618      	mov	r0, r3
 800969e:	371c      	adds	r7, #28
 80096a0:	46bd      	mov	sp, r7
 80096a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a6:	4770      	bx	lr

080096a8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80096a8:	b480      	push	{r7}
 80096aa:	b089      	sub	sp, #36	; 0x24
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	60f8      	str	r0, [r7, #12]
 80096b0:	60b9      	str	r1, [r7, #8]
 80096b2:	4611      	mov	r1, r2
 80096b4:	461a      	mov	r2, r3
 80096b6:	460b      	mov	r3, r1
 80096b8:	71fb      	strb	r3, [r7, #7]
 80096ba:	4613      	mov	r3, r2
 80096bc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80096c2:	68bb      	ldr	r3, [r7, #8]
 80096c4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80096c6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d123      	bne.n	8009716 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80096ce:	88bb      	ldrh	r3, [r7, #4]
 80096d0:	3303      	adds	r3, #3
 80096d2:	089b      	lsrs	r3, r3, #2
 80096d4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80096d6:	2300      	movs	r3, #0
 80096d8:	61bb      	str	r3, [r7, #24]
 80096da:	e018      	b.n	800970e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80096dc:	79fb      	ldrb	r3, [r7, #7]
 80096de:	031a      	lsls	r2, r3, #12
 80096e0:	697b      	ldr	r3, [r7, #20]
 80096e2:	4413      	add	r3, r2
 80096e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80096e8:	461a      	mov	r2, r3
 80096ea:	69fb      	ldr	r3, [r7, #28]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	6013      	str	r3, [r2, #0]
      pSrc++;
 80096f0:	69fb      	ldr	r3, [r7, #28]
 80096f2:	3301      	adds	r3, #1
 80096f4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80096f6:	69fb      	ldr	r3, [r7, #28]
 80096f8:	3301      	adds	r3, #1
 80096fa:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80096fc:	69fb      	ldr	r3, [r7, #28]
 80096fe:	3301      	adds	r3, #1
 8009700:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009702:	69fb      	ldr	r3, [r7, #28]
 8009704:	3301      	adds	r3, #1
 8009706:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009708:	69bb      	ldr	r3, [r7, #24]
 800970a:	3301      	adds	r3, #1
 800970c:	61bb      	str	r3, [r7, #24]
 800970e:	69ba      	ldr	r2, [r7, #24]
 8009710:	693b      	ldr	r3, [r7, #16]
 8009712:	429a      	cmp	r2, r3
 8009714:	d3e2      	bcc.n	80096dc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009716:	2300      	movs	r3, #0
}
 8009718:	4618      	mov	r0, r3
 800971a:	3724      	adds	r7, #36	; 0x24
 800971c:	46bd      	mov	sp, r7
 800971e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009722:	4770      	bx	lr

08009724 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009724:	b480      	push	{r7}
 8009726:	b08b      	sub	sp, #44	; 0x2c
 8009728:	af00      	add	r7, sp, #0
 800972a:	60f8      	str	r0, [r7, #12]
 800972c:	60b9      	str	r1, [r7, #8]
 800972e:	4613      	mov	r3, r2
 8009730:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009736:	68bb      	ldr	r3, [r7, #8]
 8009738:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800973a:	88fb      	ldrh	r3, [r7, #6]
 800973c:	089b      	lsrs	r3, r3, #2
 800973e:	b29b      	uxth	r3, r3
 8009740:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009742:	88fb      	ldrh	r3, [r7, #6]
 8009744:	f003 0303 	and.w	r3, r3, #3
 8009748:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800974a:	2300      	movs	r3, #0
 800974c:	623b      	str	r3, [r7, #32]
 800974e:	e014      	b.n	800977a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009750:	69bb      	ldr	r3, [r7, #24]
 8009752:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009756:	681a      	ldr	r2, [r3, #0]
 8009758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800975a:	601a      	str	r2, [r3, #0]
    pDest++;
 800975c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800975e:	3301      	adds	r3, #1
 8009760:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009764:	3301      	adds	r3, #1
 8009766:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800976a:	3301      	adds	r3, #1
 800976c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800976e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009770:	3301      	adds	r3, #1
 8009772:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8009774:	6a3b      	ldr	r3, [r7, #32]
 8009776:	3301      	adds	r3, #1
 8009778:	623b      	str	r3, [r7, #32]
 800977a:	6a3a      	ldr	r2, [r7, #32]
 800977c:	697b      	ldr	r3, [r7, #20]
 800977e:	429a      	cmp	r2, r3
 8009780:	d3e6      	bcc.n	8009750 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009782:	8bfb      	ldrh	r3, [r7, #30]
 8009784:	2b00      	cmp	r3, #0
 8009786:	d01e      	beq.n	80097c6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009788:	2300      	movs	r3, #0
 800978a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800978c:	69bb      	ldr	r3, [r7, #24]
 800978e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009792:	461a      	mov	r2, r3
 8009794:	f107 0310 	add.w	r3, r7, #16
 8009798:	6812      	ldr	r2, [r2, #0]
 800979a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800979c:	693a      	ldr	r2, [r7, #16]
 800979e:	6a3b      	ldr	r3, [r7, #32]
 80097a0:	b2db      	uxtb	r3, r3
 80097a2:	00db      	lsls	r3, r3, #3
 80097a4:	fa22 f303 	lsr.w	r3, r2, r3
 80097a8:	b2da      	uxtb	r2, r3
 80097aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ac:	701a      	strb	r2, [r3, #0]
      i++;
 80097ae:	6a3b      	ldr	r3, [r7, #32]
 80097b0:	3301      	adds	r3, #1
 80097b2:	623b      	str	r3, [r7, #32]
      pDest++;
 80097b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097b6:	3301      	adds	r3, #1
 80097b8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80097ba:	8bfb      	ldrh	r3, [r7, #30]
 80097bc:	3b01      	subs	r3, #1
 80097be:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80097c0:	8bfb      	ldrh	r3, [r7, #30]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d1ea      	bne.n	800979c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80097c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80097c8:	4618      	mov	r0, r3
 80097ca:	372c      	adds	r7, #44	; 0x2c
 80097cc:	46bd      	mov	sp, r7
 80097ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d2:	4770      	bx	lr

080097d4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80097d4:	b480      	push	{r7}
 80097d6:	b085      	sub	sp, #20
 80097d8:	af00      	add	r7, sp, #0
 80097da:	6078      	str	r0, [r7, #4]
 80097dc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80097e2:	683b      	ldr	r3, [r7, #0]
 80097e4:	781b      	ldrb	r3, [r3, #0]
 80097e6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80097e8:	683b      	ldr	r3, [r7, #0]
 80097ea:	785b      	ldrb	r3, [r3, #1]
 80097ec:	2b01      	cmp	r3, #1
 80097ee:	d12c      	bne.n	800984a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80097f0:	68bb      	ldr	r3, [r7, #8]
 80097f2:	015a      	lsls	r2, r3, #5
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	4413      	add	r3, r2
 80097f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	db12      	blt.n	8009828 <USB_EPSetStall+0x54>
 8009802:	68bb      	ldr	r3, [r7, #8]
 8009804:	2b00      	cmp	r3, #0
 8009806:	d00f      	beq.n	8009828 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009808:	68bb      	ldr	r3, [r7, #8]
 800980a:	015a      	lsls	r2, r3, #5
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	4413      	add	r3, r2
 8009810:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	68ba      	ldr	r2, [r7, #8]
 8009818:	0151      	lsls	r1, r2, #5
 800981a:	68fa      	ldr	r2, [r7, #12]
 800981c:	440a      	add	r2, r1
 800981e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009822:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009826:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009828:	68bb      	ldr	r3, [r7, #8]
 800982a:	015a      	lsls	r2, r3, #5
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	4413      	add	r3, r2
 8009830:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	68ba      	ldr	r2, [r7, #8]
 8009838:	0151      	lsls	r1, r2, #5
 800983a:	68fa      	ldr	r2, [r7, #12]
 800983c:	440a      	add	r2, r1
 800983e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009842:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009846:	6013      	str	r3, [r2, #0]
 8009848:	e02b      	b.n	80098a2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800984a:	68bb      	ldr	r3, [r7, #8]
 800984c:	015a      	lsls	r2, r3, #5
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	4413      	add	r3, r2
 8009852:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	2b00      	cmp	r3, #0
 800985a:	db12      	blt.n	8009882 <USB_EPSetStall+0xae>
 800985c:	68bb      	ldr	r3, [r7, #8]
 800985e:	2b00      	cmp	r3, #0
 8009860:	d00f      	beq.n	8009882 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009862:	68bb      	ldr	r3, [r7, #8]
 8009864:	015a      	lsls	r2, r3, #5
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	4413      	add	r3, r2
 800986a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	68ba      	ldr	r2, [r7, #8]
 8009872:	0151      	lsls	r1, r2, #5
 8009874:	68fa      	ldr	r2, [r7, #12]
 8009876:	440a      	add	r2, r1
 8009878:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800987c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009880:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009882:	68bb      	ldr	r3, [r7, #8]
 8009884:	015a      	lsls	r2, r3, #5
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	4413      	add	r3, r2
 800988a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	68ba      	ldr	r2, [r7, #8]
 8009892:	0151      	lsls	r1, r2, #5
 8009894:	68fa      	ldr	r2, [r7, #12]
 8009896:	440a      	add	r2, r1
 8009898:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800989c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80098a0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80098a2:	2300      	movs	r3, #0
}
 80098a4:	4618      	mov	r0, r3
 80098a6:	3714      	adds	r7, #20
 80098a8:	46bd      	mov	sp, r7
 80098aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ae:	4770      	bx	lr

080098b0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80098b0:	b480      	push	{r7}
 80098b2:	b085      	sub	sp, #20
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	6078      	str	r0, [r7, #4]
 80098b8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80098be:	683b      	ldr	r3, [r7, #0]
 80098c0:	781b      	ldrb	r3, [r3, #0]
 80098c2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80098c4:	683b      	ldr	r3, [r7, #0]
 80098c6:	785b      	ldrb	r3, [r3, #1]
 80098c8:	2b01      	cmp	r3, #1
 80098ca:	d128      	bne.n	800991e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80098cc:	68bb      	ldr	r3, [r7, #8]
 80098ce:	015a      	lsls	r2, r3, #5
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	4413      	add	r3, r2
 80098d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	68ba      	ldr	r2, [r7, #8]
 80098dc:	0151      	lsls	r1, r2, #5
 80098de:	68fa      	ldr	r2, [r7, #12]
 80098e0:	440a      	add	r2, r1
 80098e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80098e6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80098ea:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80098ec:	683b      	ldr	r3, [r7, #0]
 80098ee:	791b      	ldrb	r3, [r3, #4]
 80098f0:	2b03      	cmp	r3, #3
 80098f2:	d003      	beq.n	80098fc <USB_EPClearStall+0x4c>
 80098f4:	683b      	ldr	r3, [r7, #0]
 80098f6:	791b      	ldrb	r3, [r3, #4]
 80098f8:	2b02      	cmp	r3, #2
 80098fa:	d138      	bne.n	800996e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80098fc:	68bb      	ldr	r3, [r7, #8]
 80098fe:	015a      	lsls	r2, r3, #5
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	4413      	add	r3, r2
 8009904:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	68ba      	ldr	r2, [r7, #8]
 800990c:	0151      	lsls	r1, r2, #5
 800990e:	68fa      	ldr	r2, [r7, #12]
 8009910:	440a      	add	r2, r1
 8009912:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009916:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800991a:	6013      	str	r3, [r2, #0]
 800991c:	e027      	b.n	800996e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800991e:	68bb      	ldr	r3, [r7, #8]
 8009920:	015a      	lsls	r2, r3, #5
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	4413      	add	r3, r2
 8009926:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	68ba      	ldr	r2, [r7, #8]
 800992e:	0151      	lsls	r1, r2, #5
 8009930:	68fa      	ldr	r2, [r7, #12]
 8009932:	440a      	add	r2, r1
 8009934:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009938:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800993c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800993e:	683b      	ldr	r3, [r7, #0]
 8009940:	791b      	ldrb	r3, [r3, #4]
 8009942:	2b03      	cmp	r3, #3
 8009944:	d003      	beq.n	800994e <USB_EPClearStall+0x9e>
 8009946:	683b      	ldr	r3, [r7, #0]
 8009948:	791b      	ldrb	r3, [r3, #4]
 800994a:	2b02      	cmp	r3, #2
 800994c:	d10f      	bne.n	800996e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800994e:	68bb      	ldr	r3, [r7, #8]
 8009950:	015a      	lsls	r2, r3, #5
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	4413      	add	r3, r2
 8009956:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	68ba      	ldr	r2, [r7, #8]
 800995e:	0151      	lsls	r1, r2, #5
 8009960:	68fa      	ldr	r2, [r7, #12]
 8009962:	440a      	add	r2, r1
 8009964:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009968:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800996c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800996e:	2300      	movs	r3, #0
}
 8009970:	4618      	mov	r0, r3
 8009972:	3714      	adds	r7, #20
 8009974:	46bd      	mov	sp, r7
 8009976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997a:	4770      	bx	lr

0800997c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800997c:	b480      	push	{r7}
 800997e:	b085      	sub	sp, #20
 8009980:	af00      	add	r7, sp, #0
 8009982:	6078      	str	r0, [r7, #4]
 8009984:	460b      	mov	r3, r1
 8009986:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	68fa      	ldr	r2, [r7, #12]
 8009996:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800999a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800999e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099a6:	681a      	ldr	r2, [r3, #0]
 80099a8:	78fb      	ldrb	r3, [r7, #3]
 80099aa:	011b      	lsls	r3, r3, #4
 80099ac:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80099b0:	68f9      	ldr	r1, [r7, #12]
 80099b2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80099b6:	4313      	orrs	r3, r2
 80099b8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80099ba:	2300      	movs	r3, #0
}
 80099bc:	4618      	mov	r0, r3
 80099be:	3714      	adds	r7, #20
 80099c0:	46bd      	mov	sp, r7
 80099c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c6:	4770      	bx	lr

080099c8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80099c8:	b480      	push	{r7}
 80099ca:	b085      	sub	sp, #20
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	68fa      	ldr	r2, [r7, #12]
 80099de:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80099e2:	f023 0303 	bic.w	r3, r3, #3
 80099e6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099ee:	685b      	ldr	r3, [r3, #4]
 80099f0:	68fa      	ldr	r2, [r7, #12]
 80099f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80099f6:	f023 0302 	bic.w	r3, r3, #2
 80099fa:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80099fc:	2300      	movs	r3, #0
}
 80099fe:	4618      	mov	r0, r3
 8009a00:	3714      	adds	r7, #20
 8009a02:	46bd      	mov	sp, r7
 8009a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a08:	4770      	bx	lr

08009a0a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009a0a:	b480      	push	{r7}
 8009a0c:	b085      	sub	sp, #20
 8009a0e:	af00      	add	r7, sp, #0
 8009a10:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	68fa      	ldr	r2, [r7, #12]
 8009a20:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009a24:	f023 0303 	bic.w	r3, r3, #3
 8009a28:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a30:	685b      	ldr	r3, [r3, #4]
 8009a32:	68fa      	ldr	r2, [r7, #12]
 8009a34:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009a38:	f043 0302 	orr.w	r3, r3, #2
 8009a3c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009a3e:	2300      	movs	r3, #0
}
 8009a40:	4618      	mov	r0, r3
 8009a42:	3714      	adds	r7, #20
 8009a44:	46bd      	mov	sp, r7
 8009a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4a:	4770      	bx	lr

08009a4c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009a4c:	b480      	push	{r7}
 8009a4e:	b085      	sub	sp, #20
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	695b      	ldr	r3, [r3, #20]
 8009a58:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	699b      	ldr	r3, [r3, #24]
 8009a5e:	68fa      	ldr	r2, [r7, #12]
 8009a60:	4013      	ands	r3, r2
 8009a62:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009a64:	68fb      	ldr	r3, [r7, #12]
}
 8009a66:	4618      	mov	r0, r3
 8009a68:	3714      	adds	r7, #20
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a70:	4770      	bx	lr

08009a72 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009a72:	b480      	push	{r7}
 8009a74:	b085      	sub	sp, #20
 8009a76:	af00      	add	r7, sp, #0
 8009a78:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a84:	699b      	ldr	r3, [r3, #24]
 8009a86:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a8e:	69db      	ldr	r3, [r3, #28]
 8009a90:	68ba      	ldr	r2, [r7, #8]
 8009a92:	4013      	ands	r3, r2
 8009a94:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009a96:	68bb      	ldr	r3, [r7, #8]
 8009a98:	0c1b      	lsrs	r3, r3, #16
}
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	3714      	adds	r7, #20
 8009a9e:	46bd      	mov	sp, r7
 8009aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa4:	4770      	bx	lr

08009aa6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009aa6:	b480      	push	{r7}
 8009aa8:	b085      	sub	sp, #20
 8009aaa:	af00      	add	r7, sp, #0
 8009aac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ab8:	699b      	ldr	r3, [r3, #24]
 8009aba:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ac2:	69db      	ldr	r3, [r3, #28]
 8009ac4:	68ba      	ldr	r2, [r7, #8]
 8009ac6:	4013      	ands	r3, r2
 8009ac8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009aca:	68bb      	ldr	r3, [r7, #8]
 8009acc:	b29b      	uxth	r3, r3
}
 8009ace:	4618      	mov	r0, r3
 8009ad0:	3714      	adds	r7, #20
 8009ad2:	46bd      	mov	sp, r7
 8009ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad8:	4770      	bx	lr

08009ada <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009ada:	b480      	push	{r7}
 8009adc:	b085      	sub	sp, #20
 8009ade:	af00      	add	r7, sp, #0
 8009ae0:	6078      	str	r0, [r7, #4]
 8009ae2:	460b      	mov	r3, r1
 8009ae4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009aea:	78fb      	ldrb	r3, [r7, #3]
 8009aec:	015a      	lsls	r2, r3, #5
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	4413      	add	r3, r2
 8009af2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009af6:	689b      	ldr	r3, [r3, #8]
 8009af8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b00:	695b      	ldr	r3, [r3, #20]
 8009b02:	68ba      	ldr	r2, [r7, #8]
 8009b04:	4013      	ands	r3, r2
 8009b06:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009b08:	68bb      	ldr	r3, [r7, #8]
}
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	3714      	adds	r7, #20
 8009b0e:	46bd      	mov	sp, r7
 8009b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b14:	4770      	bx	lr

08009b16 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009b16:	b480      	push	{r7}
 8009b18:	b087      	sub	sp, #28
 8009b1a:	af00      	add	r7, sp, #0
 8009b1c:	6078      	str	r0, [r7, #4]
 8009b1e:	460b      	mov	r3, r1
 8009b20:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009b26:	697b      	ldr	r3, [r7, #20]
 8009b28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b2c:	691b      	ldr	r3, [r3, #16]
 8009b2e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009b30:	697b      	ldr	r3, [r7, #20]
 8009b32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b38:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009b3a:	78fb      	ldrb	r3, [r7, #3]
 8009b3c:	f003 030f 	and.w	r3, r3, #15
 8009b40:	68fa      	ldr	r2, [r7, #12]
 8009b42:	fa22 f303 	lsr.w	r3, r2, r3
 8009b46:	01db      	lsls	r3, r3, #7
 8009b48:	b2db      	uxtb	r3, r3
 8009b4a:	693a      	ldr	r2, [r7, #16]
 8009b4c:	4313      	orrs	r3, r2
 8009b4e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009b50:	78fb      	ldrb	r3, [r7, #3]
 8009b52:	015a      	lsls	r2, r3, #5
 8009b54:	697b      	ldr	r3, [r7, #20]
 8009b56:	4413      	add	r3, r2
 8009b58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b5c:	689b      	ldr	r3, [r3, #8]
 8009b5e:	693a      	ldr	r2, [r7, #16]
 8009b60:	4013      	ands	r3, r2
 8009b62:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009b64:	68bb      	ldr	r3, [r7, #8]
}
 8009b66:	4618      	mov	r0, r3
 8009b68:	371c      	adds	r7, #28
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b70:	4770      	bx	lr

08009b72 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009b72:	b480      	push	{r7}
 8009b74:	b083      	sub	sp, #12
 8009b76:	af00      	add	r7, sp, #0
 8009b78:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	695b      	ldr	r3, [r3, #20]
 8009b7e:	f003 0301 	and.w	r3, r3, #1
}
 8009b82:	4618      	mov	r0, r3
 8009b84:	370c      	adds	r7, #12
 8009b86:	46bd      	mov	sp, r7
 8009b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8c:	4770      	bx	lr

08009b8e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8009b8e:	b480      	push	{r7}
 8009b90:	b085      	sub	sp, #20
 8009b92:	af00      	add	r7, sp, #0
 8009b94:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	68fa      	ldr	r2, [r7, #12]
 8009ba4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009ba8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8009bac:	f023 0307 	bic.w	r3, r3, #7
 8009bb0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009bb8:	685b      	ldr	r3, [r3, #4]
 8009bba:	68fa      	ldr	r2, [r7, #12]
 8009bbc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009bc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009bc4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009bc6:	2300      	movs	r3, #0
}
 8009bc8:	4618      	mov	r0, r3
 8009bca:	3714      	adds	r7, #20
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd2:	4770      	bx	lr

08009bd4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8009bd4:	b480      	push	{r7}
 8009bd6:	b087      	sub	sp, #28
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	60f8      	str	r0, [r7, #12]
 8009bdc:	460b      	mov	r3, r1
 8009bde:	607a      	str	r2, [r7, #4]
 8009be0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	333c      	adds	r3, #60	; 0x3c
 8009bea:	3304      	adds	r3, #4
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009bf0:	693b      	ldr	r3, [r7, #16]
 8009bf2:	4a26      	ldr	r2, [pc, #152]	; (8009c8c <USB_EP0_OutStart+0xb8>)
 8009bf4:	4293      	cmp	r3, r2
 8009bf6:	d90a      	bls.n	8009c0e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009bf8:	697b      	ldr	r3, [r7, #20]
 8009bfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009c04:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009c08:	d101      	bne.n	8009c0e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	e037      	b.n	8009c7e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009c0e:	697b      	ldr	r3, [r7, #20]
 8009c10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c14:	461a      	mov	r2, r3
 8009c16:	2300      	movs	r3, #0
 8009c18:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009c1a:	697b      	ldr	r3, [r7, #20]
 8009c1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c20:	691b      	ldr	r3, [r3, #16]
 8009c22:	697a      	ldr	r2, [r7, #20]
 8009c24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c28:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009c2c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009c2e:	697b      	ldr	r3, [r7, #20]
 8009c30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c34:	691b      	ldr	r3, [r3, #16]
 8009c36:	697a      	ldr	r2, [r7, #20]
 8009c38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c3c:	f043 0318 	orr.w	r3, r3, #24
 8009c40:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009c42:	697b      	ldr	r3, [r7, #20]
 8009c44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c48:	691b      	ldr	r3, [r3, #16]
 8009c4a:	697a      	ldr	r2, [r7, #20]
 8009c4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c50:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8009c54:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8009c56:	7afb      	ldrb	r3, [r7, #11]
 8009c58:	2b01      	cmp	r3, #1
 8009c5a:	d10f      	bne.n	8009c7c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009c5c:	697b      	ldr	r3, [r7, #20]
 8009c5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c62:	461a      	mov	r2, r3
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009c68:	697b      	ldr	r3, [r7, #20]
 8009c6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	697a      	ldr	r2, [r7, #20]
 8009c72:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c76:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8009c7a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009c7c:	2300      	movs	r3, #0
}
 8009c7e:	4618      	mov	r0, r3
 8009c80:	371c      	adds	r7, #28
 8009c82:	46bd      	mov	sp, r7
 8009c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c88:	4770      	bx	lr
 8009c8a:	bf00      	nop
 8009c8c:	4f54300a 	.word	0x4f54300a

08009c90 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009c90:	b480      	push	{r7}
 8009c92:	b085      	sub	sp, #20
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009c98:	2300      	movs	r3, #0
 8009c9a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	3301      	adds	r3, #1
 8009ca0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	4a13      	ldr	r2, [pc, #76]	; (8009cf4 <USB_CoreReset+0x64>)
 8009ca6:	4293      	cmp	r3, r2
 8009ca8:	d901      	bls.n	8009cae <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009caa:	2303      	movs	r3, #3
 8009cac:	e01b      	b.n	8009ce6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	691b      	ldr	r3, [r3, #16]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	daf2      	bge.n	8009c9c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	691b      	ldr	r3, [r3, #16]
 8009cbe:	f043 0201 	orr.w	r2, r3, #1
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	3301      	adds	r3, #1
 8009cca:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	4a09      	ldr	r2, [pc, #36]	; (8009cf4 <USB_CoreReset+0x64>)
 8009cd0:	4293      	cmp	r3, r2
 8009cd2:	d901      	bls.n	8009cd8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009cd4:	2303      	movs	r3, #3
 8009cd6:	e006      	b.n	8009ce6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	691b      	ldr	r3, [r3, #16]
 8009cdc:	f003 0301 	and.w	r3, r3, #1
 8009ce0:	2b01      	cmp	r3, #1
 8009ce2:	d0f0      	beq.n	8009cc6 <USB_CoreReset+0x36>

  return HAL_OK;
 8009ce4:	2300      	movs	r3, #0
}
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	3714      	adds	r7, #20
 8009cea:	46bd      	mov	sp, r7
 8009cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf0:	4770      	bx	lr
 8009cf2:	bf00      	nop
 8009cf4:	00030d40 	.word	0x00030d40

08009cf8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	b084      	sub	sp, #16
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	6078      	str	r0, [r7, #4]
 8009d00:	460b      	mov	r3, r1
 8009d02:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009d04:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009d08:	f00e ffd0 	bl	8018cac <USBD_static_malloc>
 8009d0c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d109      	bne.n	8009d28 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	32b0      	adds	r2, #176	; 0xb0
 8009d1e:	2100      	movs	r1, #0
 8009d20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8009d24:	2302      	movs	r3, #2
 8009d26:	e0d4      	b.n	8009ed2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8009d28:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8009d2c:	2100      	movs	r1, #0
 8009d2e:	68f8      	ldr	r0, [r7, #12]
 8009d30:	f010 fbd6 	bl	801a4e0 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	32b0      	adds	r2, #176	; 0xb0
 8009d3e:	68f9      	ldr	r1, [r7, #12]
 8009d40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	32b0      	adds	r2, #176	; 0xb0
 8009d4e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	7c1b      	ldrb	r3, [r3, #16]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d138      	bne.n	8009dd2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009d60:	4b5e      	ldr	r3, [pc, #376]	; (8009edc <USBD_CDC_Init+0x1e4>)
 8009d62:	7819      	ldrb	r1, [r3, #0]
 8009d64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009d68:	2202      	movs	r2, #2
 8009d6a:	6878      	ldr	r0, [r7, #4]
 8009d6c:	f00e fe7b 	bl	8018a66 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009d70:	4b5a      	ldr	r3, [pc, #360]	; (8009edc <USBD_CDC_Init+0x1e4>)
 8009d72:	781b      	ldrb	r3, [r3, #0]
 8009d74:	f003 020f 	and.w	r2, r3, #15
 8009d78:	6879      	ldr	r1, [r7, #4]
 8009d7a:	4613      	mov	r3, r2
 8009d7c:	009b      	lsls	r3, r3, #2
 8009d7e:	4413      	add	r3, r2
 8009d80:	009b      	lsls	r3, r3, #2
 8009d82:	440b      	add	r3, r1
 8009d84:	3324      	adds	r3, #36	; 0x24
 8009d86:	2201      	movs	r2, #1
 8009d88:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009d8a:	4b55      	ldr	r3, [pc, #340]	; (8009ee0 <USBD_CDC_Init+0x1e8>)
 8009d8c:	7819      	ldrb	r1, [r3, #0]
 8009d8e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009d92:	2202      	movs	r2, #2
 8009d94:	6878      	ldr	r0, [r7, #4]
 8009d96:	f00e fe66 	bl	8018a66 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009d9a:	4b51      	ldr	r3, [pc, #324]	; (8009ee0 <USBD_CDC_Init+0x1e8>)
 8009d9c:	781b      	ldrb	r3, [r3, #0]
 8009d9e:	f003 020f 	and.w	r2, r3, #15
 8009da2:	6879      	ldr	r1, [r7, #4]
 8009da4:	4613      	mov	r3, r2
 8009da6:	009b      	lsls	r3, r3, #2
 8009da8:	4413      	add	r3, r2
 8009daa:	009b      	lsls	r3, r3, #2
 8009dac:	440b      	add	r3, r1
 8009dae:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009db2:	2201      	movs	r2, #1
 8009db4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009db6:	4b4b      	ldr	r3, [pc, #300]	; (8009ee4 <USBD_CDC_Init+0x1ec>)
 8009db8:	781b      	ldrb	r3, [r3, #0]
 8009dba:	f003 020f 	and.w	r2, r3, #15
 8009dbe:	6879      	ldr	r1, [r7, #4]
 8009dc0:	4613      	mov	r3, r2
 8009dc2:	009b      	lsls	r3, r3, #2
 8009dc4:	4413      	add	r3, r2
 8009dc6:	009b      	lsls	r3, r3, #2
 8009dc8:	440b      	add	r3, r1
 8009dca:	3326      	adds	r3, #38	; 0x26
 8009dcc:	2210      	movs	r2, #16
 8009dce:	801a      	strh	r2, [r3, #0]
 8009dd0:	e035      	b.n	8009e3e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009dd2:	4b42      	ldr	r3, [pc, #264]	; (8009edc <USBD_CDC_Init+0x1e4>)
 8009dd4:	7819      	ldrb	r1, [r3, #0]
 8009dd6:	2340      	movs	r3, #64	; 0x40
 8009dd8:	2202      	movs	r2, #2
 8009dda:	6878      	ldr	r0, [r7, #4]
 8009ddc:	f00e fe43 	bl	8018a66 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009de0:	4b3e      	ldr	r3, [pc, #248]	; (8009edc <USBD_CDC_Init+0x1e4>)
 8009de2:	781b      	ldrb	r3, [r3, #0]
 8009de4:	f003 020f 	and.w	r2, r3, #15
 8009de8:	6879      	ldr	r1, [r7, #4]
 8009dea:	4613      	mov	r3, r2
 8009dec:	009b      	lsls	r3, r3, #2
 8009dee:	4413      	add	r3, r2
 8009df0:	009b      	lsls	r3, r3, #2
 8009df2:	440b      	add	r3, r1
 8009df4:	3324      	adds	r3, #36	; 0x24
 8009df6:	2201      	movs	r2, #1
 8009df8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009dfa:	4b39      	ldr	r3, [pc, #228]	; (8009ee0 <USBD_CDC_Init+0x1e8>)
 8009dfc:	7819      	ldrb	r1, [r3, #0]
 8009dfe:	2340      	movs	r3, #64	; 0x40
 8009e00:	2202      	movs	r2, #2
 8009e02:	6878      	ldr	r0, [r7, #4]
 8009e04:	f00e fe2f 	bl	8018a66 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009e08:	4b35      	ldr	r3, [pc, #212]	; (8009ee0 <USBD_CDC_Init+0x1e8>)
 8009e0a:	781b      	ldrb	r3, [r3, #0]
 8009e0c:	f003 020f 	and.w	r2, r3, #15
 8009e10:	6879      	ldr	r1, [r7, #4]
 8009e12:	4613      	mov	r3, r2
 8009e14:	009b      	lsls	r3, r3, #2
 8009e16:	4413      	add	r3, r2
 8009e18:	009b      	lsls	r3, r3, #2
 8009e1a:	440b      	add	r3, r1
 8009e1c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009e20:	2201      	movs	r2, #1
 8009e22:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009e24:	4b2f      	ldr	r3, [pc, #188]	; (8009ee4 <USBD_CDC_Init+0x1ec>)
 8009e26:	781b      	ldrb	r3, [r3, #0]
 8009e28:	f003 020f 	and.w	r2, r3, #15
 8009e2c:	6879      	ldr	r1, [r7, #4]
 8009e2e:	4613      	mov	r3, r2
 8009e30:	009b      	lsls	r3, r3, #2
 8009e32:	4413      	add	r3, r2
 8009e34:	009b      	lsls	r3, r3, #2
 8009e36:	440b      	add	r3, r1
 8009e38:	3326      	adds	r3, #38	; 0x26
 8009e3a:	2210      	movs	r2, #16
 8009e3c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009e3e:	4b29      	ldr	r3, [pc, #164]	; (8009ee4 <USBD_CDC_Init+0x1ec>)
 8009e40:	7819      	ldrb	r1, [r3, #0]
 8009e42:	2308      	movs	r3, #8
 8009e44:	2203      	movs	r2, #3
 8009e46:	6878      	ldr	r0, [r7, #4]
 8009e48:	f00e fe0d 	bl	8018a66 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8009e4c:	4b25      	ldr	r3, [pc, #148]	; (8009ee4 <USBD_CDC_Init+0x1ec>)
 8009e4e:	781b      	ldrb	r3, [r3, #0]
 8009e50:	f003 020f 	and.w	r2, r3, #15
 8009e54:	6879      	ldr	r1, [r7, #4]
 8009e56:	4613      	mov	r3, r2
 8009e58:	009b      	lsls	r3, r3, #2
 8009e5a:	4413      	add	r3, r2
 8009e5c:	009b      	lsls	r3, r3, #2
 8009e5e:	440b      	add	r3, r1
 8009e60:	3324      	adds	r3, #36	; 0x24
 8009e62:	2201      	movs	r2, #1
 8009e64:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	2200      	movs	r2, #0
 8009e6a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009e74:	687a      	ldr	r2, [r7, #4]
 8009e76:	33b0      	adds	r3, #176	; 0xb0
 8009e78:	009b      	lsls	r3, r3, #2
 8009e7a:	4413      	add	r3, r2
 8009e7c:	685b      	ldr	r3, [r3, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	2200      	movs	r2, #0
 8009e86:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d101      	bne.n	8009ea0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8009e9c:	2302      	movs	r3, #2
 8009e9e:	e018      	b.n	8009ed2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	7c1b      	ldrb	r3, [r3, #16]
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d10a      	bne.n	8009ebe <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009ea8:	4b0d      	ldr	r3, [pc, #52]	; (8009ee0 <USBD_CDC_Init+0x1e8>)
 8009eaa:	7819      	ldrb	r1, [r3, #0]
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009eb2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009eb6:	6878      	ldr	r0, [r7, #4]
 8009eb8:	f00e fec4 	bl	8018c44 <USBD_LL_PrepareReceive>
 8009ebc:	e008      	b.n	8009ed0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009ebe:	4b08      	ldr	r3, [pc, #32]	; (8009ee0 <USBD_CDC_Init+0x1e8>)
 8009ec0:	7819      	ldrb	r1, [r3, #0]
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009ec8:	2340      	movs	r3, #64	; 0x40
 8009eca:	6878      	ldr	r0, [r7, #4]
 8009ecc:	f00e feba 	bl	8018c44 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009ed0:	2300      	movs	r3, #0
}
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	3710      	adds	r7, #16
 8009ed6:	46bd      	mov	sp, r7
 8009ed8:	bd80      	pop	{r7, pc}
 8009eda:	bf00      	nop
 8009edc:	200000db 	.word	0x200000db
 8009ee0:	200000dc 	.word	0x200000dc
 8009ee4:	200000dd 	.word	0x200000dd

08009ee8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	b082      	sub	sp, #8
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	6078      	str	r0, [r7, #4]
 8009ef0:	460b      	mov	r3, r1
 8009ef2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8009ef4:	4b3a      	ldr	r3, [pc, #232]	; (8009fe0 <USBD_CDC_DeInit+0xf8>)
 8009ef6:	781b      	ldrb	r3, [r3, #0]
 8009ef8:	4619      	mov	r1, r3
 8009efa:	6878      	ldr	r0, [r7, #4]
 8009efc:	f00e fdd9 	bl	8018ab2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8009f00:	4b37      	ldr	r3, [pc, #220]	; (8009fe0 <USBD_CDC_DeInit+0xf8>)
 8009f02:	781b      	ldrb	r3, [r3, #0]
 8009f04:	f003 020f 	and.w	r2, r3, #15
 8009f08:	6879      	ldr	r1, [r7, #4]
 8009f0a:	4613      	mov	r3, r2
 8009f0c:	009b      	lsls	r3, r3, #2
 8009f0e:	4413      	add	r3, r2
 8009f10:	009b      	lsls	r3, r3, #2
 8009f12:	440b      	add	r3, r1
 8009f14:	3324      	adds	r3, #36	; 0x24
 8009f16:	2200      	movs	r2, #0
 8009f18:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8009f1a:	4b32      	ldr	r3, [pc, #200]	; (8009fe4 <USBD_CDC_DeInit+0xfc>)
 8009f1c:	781b      	ldrb	r3, [r3, #0]
 8009f1e:	4619      	mov	r1, r3
 8009f20:	6878      	ldr	r0, [r7, #4]
 8009f22:	f00e fdc6 	bl	8018ab2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8009f26:	4b2f      	ldr	r3, [pc, #188]	; (8009fe4 <USBD_CDC_DeInit+0xfc>)
 8009f28:	781b      	ldrb	r3, [r3, #0]
 8009f2a:	f003 020f 	and.w	r2, r3, #15
 8009f2e:	6879      	ldr	r1, [r7, #4]
 8009f30:	4613      	mov	r3, r2
 8009f32:	009b      	lsls	r3, r3, #2
 8009f34:	4413      	add	r3, r2
 8009f36:	009b      	lsls	r3, r3, #2
 8009f38:	440b      	add	r3, r1
 8009f3a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009f3e:	2200      	movs	r2, #0
 8009f40:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8009f42:	4b29      	ldr	r3, [pc, #164]	; (8009fe8 <USBD_CDC_DeInit+0x100>)
 8009f44:	781b      	ldrb	r3, [r3, #0]
 8009f46:	4619      	mov	r1, r3
 8009f48:	6878      	ldr	r0, [r7, #4]
 8009f4a:	f00e fdb2 	bl	8018ab2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8009f4e:	4b26      	ldr	r3, [pc, #152]	; (8009fe8 <USBD_CDC_DeInit+0x100>)
 8009f50:	781b      	ldrb	r3, [r3, #0]
 8009f52:	f003 020f 	and.w	r2, r3, #15
 8009f56:	6879      	ldr	r1, [r7, #4]
 8009f58:	4613      	mov	r3, r2
 8009f5a:	009b      	lsls	r3, r3, #2
 8009f5c:	4413      	add	r3, r2
 8009f5e:	009b      	lsls	r3, r3, #2
 8009f60:	440b      	add	r3, r1
 8009f62:	3324      	adds	r3, #36	; 0x24
 8009f64:	2200      	movs	r2, #0
 8009f66:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8009f68:	4b1f      	ldr	r3, [pc, #124]	; (8009fe8 <USBD_CDC_DeInit+0x100>)
 8009f6a:	781b      	ldrb	r3, [r3, #0]
 8009f6c:	f003 020f 	and.w	r2, r3, #15
 8009f70:	6879      	ldr	r1, [r7, #4]
 8009f72:	4613      	mov	r3, r2
 8009f74:	009b      	lsls	r3, r3, #2
 8009f76:	4413      	add	r3, r2
 8009f78:	009b      	lsls	r3, r3, #2
 8009f7a:	440b      	add	r3, r1
 8009f7c:	3326      	adds	r3, #38	; 0x26
 8009f7e:	2200      	movs	r2, #0
 8009f80:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	32b0      	adds	r2, #176	; 0xb0
 8009f8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d01f      	beq.n	8009fd4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009f9a:	687a      	ldr	r2, [r7, #4]
 8009f9c:	33b0      	adds	r3, #176	; 0xb0
 8009f9e:	009b      	lsls	r3, r3, #2
 8009fa0:	4413      	add	r3, r2
 8009fa2:	685b      	ldr	r3, [r3, #4]
 8009fa4:	685b      	ldr	r3, [r3, #4]
 8009fa6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	32b0      	adds	r2, #176	; 0xb0
 8009fb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	f00e fe86 	bl	8018cc8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	32b0      	adds	r2, #176	; 0xb0
 8009fc6:	2100      	movs	r1, #0
 8009fc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	2200      	movs	r2, #0
 8009fd0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009fd4:	2300      	movs	r3, #0
}
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	3708      	adds	r7, #8
 8009fda:	46bd      	mov	sp, r7
 8009fdc:	bd80      	pop	{r7, pc}
 8009fde:	bf00      	nop
 8009fe0:	200000db 	.word	0x200000db
 8009fe4:	200000dc 	.word	0x200000dc
 8009fe8:	200000dd 	.word	0x200000dd

08009fec <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009fec:	b580      	push	{r7, lr}
 8009fee:	b086      	sub	sp, #24
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	6078      	str	r0, [r7, #4]
 8009ff4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	32b0      	adds	r2, #176	; 0xb0
 800a000:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a004:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800a006:	2300      	movs	r3, #0
 800a008:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800a00a:	2300      	movs	r3, #0
 800a00c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800a00e:	2300      	movs	r3, #0
 800a010:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800a012:	693b      	ldr	r3, [r7, #16]
 800a014:	2b00      	cmp	r3, #0
 800a016:	d101      	bne.n	800a01c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800a018:	2303      	movs	r3, #3
 800a01a:	e0bf      	b.n	800a19c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a01c:	683b      	ldr	r3, [r7, #0]
 800a01e:	781b      	ldrb	r3, [r3, #0]
 800a020:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a024:	2b00      	cmp	r3, #0
 800a026:	d050      	beq.n	800a0ca <USBD_CDC_Setup+0xde>
 800a028:	2b20      	cmp	r3, #32
 800a02a:	f040 80af 	bne.w	800a18c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800a02e:	683b      	ldr	r3, [r7, #0]
 800a030:	88db      	ldrh	r3, [r3, #6]
 800a032:	2b00      	cmp	r3, #0
 800a034:	d03a      	beq.n	800a0ac <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800a036:	683b      	ldr	r3, [r7, #0]
 800a038:	781b      	ldrb	r3, [r3, #0]
 800a03a:	b25b      	sxtb	r3, r3
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	da1b      	bge.n	800a078 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a046:	687a      	ldr	r2, [r7, #4]
 800a048:	33b0      	adds	r3, #176	; 0xb0
 800a04a:	009b      	lsls	r3, r3, #2
 800a04c:	4413      	add	r3, r2
 800a04e:	685b      	ldr	r3, [r3, #4]
 800a050:	689b      	ldr	r3, [r3, #8]
 800a052:	683a      	ldr	r2, [r7, #0]
 800a054:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800a056:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a058:	683a      	ldr	r2, [r7, #0]
 800a05a:	88d2      	ldrh	r2, [r2, #6]
 800a05c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800a05e:	683b      	ldr	r3, [r7, #0]
 800a060:	88db      	ldrh	r3, [r3, #6]
 800a062:	2b07      	cmp	r3, #7
 800a064:	bf28      	it	cs
 800a066:	2307      	movcs	r3, #7
 800a068:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800a06a:	693b      	ldr	r3, [r7, #16]
 800a06c:	89fa      	ldrh	r2, [r7, #14]
 800a06e:	4619      	mov	r1, r3
 800a070:	6878      	ldr	r0, [r7, #4]
 800a072:	f001 fd89 	bl	800bb88 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800a076:	e090      	b.n	800a19a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800a078:	683b      	ldr	r3, [r7, #0]
 800a07a:	785a      	ldrb	r2, [r3, #1]
 800a07c:	693b      	ldr	r3, [r7, #16]
 800a07e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800a082:	683b      	ldr	r3, [r7, #0]
 800a084:	88db      	ldrh	r3, [r3, #6]
 800a086:	2b3f      	cmp	r3, #63	; 0x3f
 800a088:	d803      	bhi.n	800a092 <USBD_CDC_Setup+0xa6>
 800a08a:	683b      	ldr	r3, [r7, #0]
 800a08c:	88db      	ldrh	r3, [r3, #6]
 800a08e:	b2da      	uxtb	r2, r3
 800a090:	e000      	b.n	800a094 <USBD_CDC_Setup+0xa8>
 800a092:	2240      	movs	r2, #64	; 0x40
 800a094:	693b      	ldr	r3, [r7, #16]
 800a096:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800a09a:	6939      	ldr	r1, [r7, #16]
 800a09c:	693b      	ldr	r3, [r7, #16]
 800a09e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800a0a2:	461a      	mov	r2, r3
 800a0a4:	6878      	ldr	r0, [r7, #4]
 800a0a6:	f001 fd9b 	bl	800bbe0 <USBD_CtlPrepareRx>
      break;
 800a0aa:	e076      	b.n	800a19a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a0b2:	687a      	ldr	r2, [r7, #4]
 800a0b4:	33b0      	adds	r3, #176	; 0xb0
 800a0b6:	009b      	lsls	r3, r3, #2
 800a0b8:	4413      	add	r3, r2
 800a0ba:	685b      	ldr	r3, [r3, #4]
 800a0bc:	689b      	ldr	r3, [r3, #8]
 800a0be:	683a      	ldr	r2, [r7, #0]
 800a0c0:	7850      	ldrb	r0, [r2, #1]
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	6839      	ldr	r1, [r7, #0]
 800a0c6:	4798      	blx	r3
      break;
 800a0c8:	e067      	b.n	800a19a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a0ca:	683b      	ldr	r3, [r7, #0]
 800a0cc:	785b      	ldrb	r3, [r3, #1]
 800a0ce:	2b0b      	cmp	r3, #11
 800a0d0:	d851      	bhi.n	800a176 <USBD_CDC_Setup+0x18a>
 800a0d2:	a201      	add	r2, pc, #4	; (adr r2, 800a0d8 <USBD_CDC_Setup+0xec>)
 800a0d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0d8:	0800a109 	.word	0x0800a109
 800a0dc:	0800a185 	.word	0x0800a185
 800a0e0:	0800a177 	.word	0x0800a177
 800a0e4:	0800a177 	.word	0x0800a177
 800a0e8:	0800a177 	.word	0x0800a177
 800a0ec:	0800a177 	.word	0x0800a177
 800a0f0:	0800a177 	.word	0x0800a177
 800a0f4:	0800a177 	.word	0x0800a177
 800a0f8:	0800a177 	.word	0x0800a177
 800a0fc:	0800a177 	.word	0x0800a177
 800a100:	0800a133 	.word	0x0800a133
 800a104:	0800a15d 	.word	0x0800a15d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a10e:	b2db      	uxtb	r3, r3
 800a110:	2b03      	cmp	r3, #3
 800a112:	d107      	bne.n	800a124 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a114:	f107 030a 	add.w	r3, r7, #10
 800a118:	2202      	movs	r2, #2
 800a11a:	4619      	mov	r1, r3
 800a11c:	6878      	ldr	r0, [r7, #4]
 800a11e:	f001 fd33 	bl	800bb88 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a122:	e032      	b.n	800a18a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a124:	6839      	ldr	r1, [r7, #0]
 800a126:	6878      	ldr	r0, [r7, #4]
 800a128:	f001 fcbd 	bl	800baa6 <USBD_CtlError>
            ret = USBD_FAIL;
 800a12c:	2303      	movs	r3, #3
 800a12e:	75fb      	strb	r3, [r7, #23]
          break;
 800a130:	e02b      	b.n	800a18a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a138:	b2db      	uxtb	r3, r3
 800a13a:	2b03      	cmp	r3, #3
 800a13c:	d107      	bne.n	800a14e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800a13e:	f107 030d 	add.w	r3, r7, #13
 800a142:	2201      	movs	r2, #1
 800a144:	4619      	mov	r1, r3
 800a146:	6878      	ldr	r0, [r7, #4]
 800a148:	f001 fd1e 	bl	800bb88 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a14c:	e01d      	b.n	800a18a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a14e:	6839      	ldr	r1, [r7, #0]
 800a150:	6878      	ldr	r0, [r7, #4]
 800a152:	f001 fca8 	bl	800baa6 <USBD_CtlError>
            ret = USBD_FAIL;
 800a156:	2303      	movs	r3, #3
 800a158:	75fb      	strb	r3, [r7, #23]
          break;
 800a15a:	e016      	b.n	800a18a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a162:	b2db      	uxtb	r3, r3
 800a164:	2b03      	cmp	r3, #3
 800a166:	d00f      	beq.n	800a188 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800a168:	6839      	ldr	r1, [r7, #0]
 800a16a:	6878      	ldr	r0, [r7, #4]
 800a16c:	f001 fc9b 	bl	800baa6 <USBD_CtlError>
            ret = USBD_FAIL;
 800a170:	2303      	movs	r3, #3
 800a172:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a174:	e008      	b.n	800a188 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800a176:	6839      	ldr	r1, [r7, #0]
 800a178:	6878      	ldr	r0, [r7, #4]
 800a17a:	f001 fc94 	bl	800baa6 <USBD_CtlError>
          ret = USBD_FAIL;
 800a17e:	2303      	movs	r3, #3
 800a180:	75fb      	strb	r3, [r7, #23]
          break;
 800a182:	e002      	b.n	800a18a <USBD_CDC_Setup+0x19e>
          break;
 800a184:	bf00      	nop
 800a186:	e008      	b.n	800a19a <USBD_CDC_Setup+0x1ae>
          break;
 800a188:	bf00      	nop
      }
      break;
 800a18a:	e006      	b.n	800a19a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800a18c:	6839      	ldr	r1, [r7, #0]
 800a18e:	6878      	ldr	r0, [r7, #4]
 800a190:	f001 fc89 	bl	800baa6 <USBD_CtlError>
      ret = USBD_FAIL;
 800a194:	2303      	movs	r3, #3
 800a196:	75fb      	strb	r3, [r7, #23]
      break;
 800a198:	bf00      	nop
  }

  return (uint8_t)ret;
 800a19a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a19c:	4618      	mov	r0, r3
 800a19e:	3718      	adds	r7, #24
 800a1a0:	46bd      	mov	sp, r7
 800a1a2:	bd80      	pop	{r7, pc}

0800a1a4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a1a4:	b580      	push	{r7, lr}
 800a1a6:	b084      	sub	sp, #16
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	6078      	str	r0, [r7, #4]
 800a1ac:	460b      	mov	r3, r1
 800a1ae:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a1b6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	32b0      	adds	r2, #176	; 0xb0
 800a1c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d101      	bne.n	800a1ce <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800a1ca:	2303      	movs	r3, #3
 800a1cc:	e065      	b.n	800a29a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	32b0      	adds	r2, #176	; 0xb0
 800a1d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1dc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a1de:	78fb      	ldrb	r3, [r7, #3]
 800a1e0:	f003 020f 	and.w	r2, r3, #15
 800a1e4:	6879      	ldr	r1, [r7, #4]
 800a1e6:	4613      	mov	r3, r2
 800a1e8:	009b      	lsls	r3, r3, #2
 800a1ea:	4413      	add	r3, r2
 800a1ec:	009b      	lsls	r3, r3, #2
 800a1ee:	440b      	add	r3, r1
 800a1f0:	3318      	adds	r3, #24
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d02f      	beq.n	800a258 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800a1f8:	78fb      	ldrb	r3, [r7, #3]
 800a1fa:	f003 020f 	and.w	r2, r3, #15
 800a1fe:	6879      	ldr	r1, [r7, #4]
 800a200:	4613      	mov	r3, r2
 800a202:	009b      	lsls	r3, r3, #2
 800a204:	4413      	add	r3, r2
 800a206:	009b      	lsls	r3, r3, #2
 800a208:	440b      	add	r3, r1
 800a20a:	3318      	adds	r3, #24
 800a20c:	681a      	ldr	r2, [r3, #0]
 800a20e:	78fb      	ldrb	r3, [r7, #3]
 800a210:	f003 010f 	and.w	r1, r3, #15
 800a214:	68f8      	ldr	r0, [r7, #12]
 800a216:	460b      	mov	r3, r1
 800a218:	00db      	lsls	r3, r3, #3
 800a21a:	440b      	add	r3, r1
 800a21c:	009b      	lsls	r3, r3, #2
 800a21e:	4403      	add	r3, r0
 800a220:	3348      	adds	r3, #72	; 0x48
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	fbb2 f1f3 	udiv	r1, r2, r3
 800a228:	fb01 f303 	mul.w	r3, r1, r3
 800a22c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d112      	bne.n	800a258 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800a232:	78fb      	ldrb	r3, [r7, #3]
 800a234:	f003 020f 	and.w	r2, r3, #15
 800a238:	6879      	ldr	r1, [r7, #4]
 800a23a:	4613      	mov	r3, r2
 800a23c:	009b      	lsls	r3, r3, #2
 800a23e:	4413      	add	r3, r2
 800a240:	009b      	lsls	r3, r3, #2
 800a242:	440b      	add	r3, r1
 800a244:	3318      	adds	r3, #24
 800a246:	2200      	movs	r2, #0
 800a248:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a24a:	78f9      	ldrb	r1, [r7, #3]
 800a24c:	2300      	movs	r3, #0
 800a24e:	2200      	movs	r2, #0
 800a250:	6878      	ldr	r0, [r7, #4]
 800a252:	f00e fcd6 	bl	8018c02 <USBD_LL_Transmit>
 800a256:	e01f      	b.n	800a298 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800a258:	68bb      	ldr	r3, [r7, #8]
 800a25a:	2200      	movs	r2, #0
 800a25c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a266:	687a      	ldr	r2, [r7, #4]
 800a268:	33b0      	adds	r3, #176	; 0xb0
 800a26a:	009b      	lsls	r3, r3, #2
 800a26c:	4413      	add	r3, r2
 800a26e:	685b      	ldr	r3, [r3, #4]
 800a270:	691b      	ldr	r3, [r3, #16]
 800a272:	2b00      	cmp	r3, #0
 800a274:	d010      	beq.n	800a298 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a27c:	687a      	ldr	r2, [r7, #4]
 800a27e:	33b0      	adds	r3, #176	; 0xb0
 800a280:	009b      	lsls	r3, r3, #2
 800a282:	4413      	add	r3, r2
 800a284:	685b      	ldr	r3, [r3, #4]
 800a286:	691b      	ldr	r3, [r3, #16]
 800a288:	68ba      	ldr	r2, [r7, #8]
 800a28a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800a28e:	68ba      	ldr	r2, [r7, #8]
 800a290:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800a294:	78fa      	ldrb	r2, [r7, #3]
 800a296:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800a298:	2300      	movs	r3, #0
}
 800a29a:	4618      	mov	r0, r3
 800a29c:	3710      	adds	r7, #16
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	bd80      	pop	{r7, pc}

0800a2a2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a2a2:	b580      	push	{r7, lr}
 800a2a4:	b084      	sub	sp, #16
 800a2a6:	af00      	add	r7, sp, #0
 800a2a8:	6078      	str	r0, [r7, #4]
 800a2aa:	460b      	mov	r3, r1
 800a2ac:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	32b0      	adds	r2, #176	; 0xb0
 800a2b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2bc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	32b0      	adds	r2, #176	; 0xb0
 800a2c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d101      	bne.n	800a2d4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800a2d0:	2303      	movs	r3, #3
 800a2d2:	e01a      	b.n	800a30a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a2d4:	78fb      	ldrb	r3, [r7, #3]
 800a2d6:	4619      	mov	r1, r3
 800a2d8:	6878      	ldr	r0, [r7, #4]
 800a2da:	f00e fcd4 	bl	8018c86 <USBD_LL_GetRxDataSize>
 800a2de:	4602      	mov	r2, r0
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a2ec:	687a      	ldr	r2, [r7, #4]
 800a2ee:	33b0      	adds	r3, #176	; 0xb0
 800a2f0:	009b      	lsls	r3, r3, #2
 800a2f2:	4413      	add	r3, r2
 800a2f4:	685b      	ldr	r3, [r3, #4]
 800a2f6:	68db      	ldr	r3, [r3, #12]
 800a2f8:	68fa      	ldr	r2, [r7, #12]
 800a2fa:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800a2fe:	68fa      	ldr	r2, [r7, #12]
 800a300:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800a304:	4611      	mov	r1, r2
 800a306:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a308:	2300      	movs	r3, #0
}
 800a30a:	4618      	mov	r0, r3
 800a30c:	3710      	adds	r7, #16
 800a30e:	46bd      	mov	sp, r7
 800a310:	bd80      	pop	{r7, pc}

0800a312 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a312:	b580      	push	{r7, lr}
 800a314:	b084      	sub	sp, #16
 800a316:	af00      	add	r7, sp, #0
 800a318:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	32b0      	adds	r2, #176	; 0xb0
 800a324:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a328:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d101      	bne.n	800a334 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a330:	2303      	movs	r3, #3
 800a332:	e025      	b.n	800a380 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a33a:	687a      	ldr	r2, [r7, #4]
 800a33c:	33b0      	adds	r3, #176	; 0xb0
 800a33e:	009b      	lsls	r3, r3, #2
 800a340:	4413      	add	r3, r2
 800a342:	685b      	ldr	r3, [r3, #4]
 800a344:	2b00      	cmp	r3, #0
 800a346:	d01a      	beq.n	800a37e <USBD_CDC_EP0_RxReady+0x6c>
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a34e:	2bff      	cmp	r3, #255	; 0xff
 800a350:	d015      	beq.n	800a37e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a358:	687a      	ldr	r2, [r7, #4]
 800a35a:	33b0      	adds	r3, #176	; 0xb0
 800a35c:	009b      	lsls	r3, r3, #2
 800a35e:	4413      	add	r3, r2
 800a360:	685b      	ldr	r3, [r3, #4]
 800a362:	689b      	ldr	r3, [r3, #8]
 800a364:	68fa      	ldr	r2, [r7, #12]
 800a366:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800a36a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800a36c:	68fa      	ldr	r2, [r7, #12]
 800a36e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a372:	b292      	uxth	r2, r2
 800a374:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	22ff      	movs	r2, #255	; 0xff
 800a37a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800a37e:	2300      	movs	r3, #0
}
 800a380:	4618      	mov	r0, r3
 800a382:	3710      	adds	r7, #16
 800a384:	46bd      	mov	sp, r7
 800a386:	bd80      	pop	{r7, pc}

0800a388 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a388:	b580      	push	{r7, lr}
 800a38a:	b086      	sub	sp, #24
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a390:	2182      	movs	r1, #130	; 0x82
 800a392:	4818      	ldr	r0, [pc, #96]	; (800a3f4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a394:	f000 fd4f 	bl	800ae36 <USBD_GetEpDesc>
 800a398:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a39a:	2101      	movs	r1, #1
 800a39c:	4815      	ldr	r0, [pc, #84]	; (800a3f4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a39e:	f000 fd4a 	bl	800ae36 <USBD_GetEpDesc>
 800a3a2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a3a4:	2181      	movs	r1, #129	; 0x81
 800a3a6:	4813      	ldr	r0, [pc, #76]	; (800a3f4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a3a8:	f000 fd45 	bl	800ae36 <USBD_GetEpDesc>
 800a3ac:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a3ae:	697b      	ldr	r3, [r7, #20]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d002      	beq.n	800a3ba <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a3b4:	697b      	ldr	r3, [r7, #20]
 800a3b6:	2210      	movs	r2, #16
 800a3b8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a3ba:	693b      	ldr	r3, [r7, #16]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d006      	beq.n	800a3ce <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a3c0:	693b      	ldr	r3, [r7, #16]
 800a3c2:	2200      	movs	r2, #0
 800a3c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a3c8:	711a      	strb	r2, [r3, #4]
 800a3ca:	2200      	movs	r2, #0
 800a3cc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d006      	beq.n	800a3e2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	2200      	movs	r2, #0
 800a3d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a3dc:	711a      	strb	r2, [r3, #4]
 800a3de:	2200      	movs	r2, #0
 800a3e0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	2243      	movs	r2, #67	; 0x43
 800a3e6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a3e8:	4b02      	ldr	r3, [pc, #8]	; (800a3f4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	3718      	adds	r7, #24
 800a3ee:	46bd      	mov	sp, r7
 800a3f0:	bd80      	pop	{r7, pc}
 800a3f2:	bf00      	nop
 800a3f4:	20000098 	.word	0x20000098

0800a3f8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	b086      	sub	sp, #24
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a400:	2182      	movs	r1, #130	; 0x82
 800a402:	4818      	ldr	r0, [pc, #96]	; (800a464 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a404:	f000 fd17 	bl	800ae36 <USBD_GetEpDesc>
 800a408:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a40a:	2101      	movs	r1, #1
 800a40c:	4815      	ldr	r0, [pc, #84]	; (800a464 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a40e:	f000 fd12 	bl	800ae36 <USBD_GetEpDesc>
 800a412:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a414:	2181      	movs	r1, #129	; 0x81
 800a416:	4813      	ldr	r0, [pc, #76]	; (800a464 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a418:	f000 fd0d 	bl	800ae36 <USBD_GetEpDesc>
 800a41c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a41e:	697b      	ldr	r3, [r7, #20]
 800a420:	2b00      	cmp	r3, #0
 800a422:	d002      	beq.n	800a42a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800a424:	697b      	ldr	r3, [r7, #20]
 800a426:	2210      	movs	r2, #16
 800a428:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a42a:	693b      	ldr	r3, [r7, #16]
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d006      	beq.n	800a43e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a430:	693b      	ldr	r3, [r7, #16]
 800a432:	2200      	movs	r2, #0
 800a434:	711a      	strb	r2, [r3, #4]
 800a436:	2200      	movs	r2, #0
 800a438:	f042 0202 	orr.w	r2, r2, #2
 800a43c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	2b00      	cmp	r3, #0
 800a442:	d006      	beq.n	800a452 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	2200      	movs	r2, #0
 800a448:	711a      	strb	r2, [r3, #4]
 800a44a:	2200      	movs	r2, #0
 800a44c:	f042 0202 	orr.w	r2, r2, #2
 800a450:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	2243      	movs	r2, #67	; 0x43
 800a456:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a458:	4b02      	ldr	r3, [pc, #8]	; (800a464 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800a45a:	4618      	mov	r0, r3
 800a45c:	3718      	adds	r7, #24
 800a45e:	46bd      	mov	sp, r7
 800a460:	bd80      	pop	{r7, pc}
 800a462:	bf00      	nop
 800a464:	20000098 	.word	0x20000098

0800a468 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a468:	b580      	push	{r7, lr}
 800a46a:	b086      	sub	sp, #24
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a470:	2182      	movs	r1, #130	; 0x82
 800a472:	4818      	ldr	r0, [pc, #96]	; (800a4d4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a474:	f000 fcdf 	bl	800ae36 <USBD_GetEpDesc>
 800a478:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a47a:	2101      	movs	r1, #1
 800a47c:	4815      	ldr	r0, [pc, #84]	; (800a4d4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a47e:	f000 fcda 	bl	800ae36 <USBD_GetEpDesc>
 800a482:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a484:	2181      	movs	r1, #129	; 0x81
 800a486:	4813      	ldr	r0, [pc, #76]	; (800a4d4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a488:	f000 fcd5 	bl	800ae36 <USBD_GetEpDesc>
 800a48c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a48e:	697b      	ldr	r3, [r7, #20]
 800a490:	2b00      	cmp	r3, #0
 800a492:	d002      	beq.n	800a49a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a494:	697b      	ldr	r3, [r7, #20]
 800a496:	2210      	movs	r2, #16
 800a498:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a49a:	693b      	ldr	r3, [r7, #16]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d006      	beq.n	800a4ae <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a4a0:	693b      	ldr	r3, [r7, #16]
 800a4a2:	2200      	movs	r2, #0
 800a4a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a4a8:	711a      	strb	r2, [r3, #4]
 800a4aa:	2200      	movs	r2, #0
 800a4ac:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d006      	beq.n	800a4c2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	2200      	movs	r2, #0
 800a4b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a4bc:	711a      	strb	r2, [r3, #4]
 800a4be:	2200      	movs	r2, #0
 800a4c0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	2243      	movs	r2, #67	; 0x43
 800a4c6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a4c8:	4b02      	ldr	r3, [pc, #8]	; (800a4d4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	3718      	adds	r7, #24
 800a4ce:	46bd      	mov	sp, r7
 800a4d0:	bd80      	pop	{r7, pc}
 800a4d2:	bf00      	nop
 800a4d4:	20000098 	.word	0x20000098

0800a4d8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a4d8:	b480      	push	{r7}
 800a4da:	b083      	sub	sp, #12
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	220a      	movs	r2, #10
 800a4e4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a4e6:	4b03      	ldr	r3, [pc, #12]	; (800a4f4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a4e8:	4618      	mov	r0, r3
 800a4ea:	370c      	adds	r7, #12
 800a4ec:	46bd      	mov	sp, r7
 800a4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f2:	4770      	bx	lr
 800a4f4:	20000054 	.word	0x20000054

0800a4f8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a4f8:	b480      	push	{r7}
 800a4fa:	b083      	sub	sp, #12
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	6078      	str	r0, [r7, #4]
 800a500:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a502:	683b      	ldr	r3, [r7, #0]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d101      	bne.n	800a50c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a508:	2303      	movs	r3, #3
 800a50a:	e009      	b.n	800a520 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a512:	687a      	ldr	r2, [r7, #4]
 800a514:	33b0      	adds	r3, #176	; 0xb0
 800a516:	009b      	lsls	r3, r3, #2
 800a518:	4413      	add	r3, r2
 800a51a:	683a      	ldr	r2, [r7, #0]
 800a51c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800a51e:	2300      	movs	r3, #0
}
 800a520:	4618      	mov	r0, r3
 800a522:	370c      	adds	r7, #12
 800a524:	46bd      	mov	sp, r7
 800a526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a52a:	4770      	bx	lr

0800a52c <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a52c:	b480      	push	{r7}
 800a52e:	b087      	sub	sp, #28
 800a530:	af00      	add	r7, sp, #0
 800a532:	60f8      	str	r0, [r7, #12]
 800a534:	60b9      	str	r1, [r7, #8]
 800a536:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	32b0      	adds	r2, #176	; 0xb0
 800a542:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a546:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800a548:	697b      	ldr	r3, [r7, #20]
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d101      	bne.n	800a552 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a54e:	2303      	movs	r3, #3
 800a550:	e008      	b.n	800a564 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800a552:	697b      	ldr	r3, [r7, #20]
 800a554:	68ba      	ldr	r2, [r7, #8]
 800a556:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a55a:	697b      	ldr	r3, [r7, #20]
 800a55c:	687a      	ldr	r2, [r7, #4]
 800a55e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800a562:	2300      	movs	r3, #0
}
 800a564:	4618      	mov	r0, r3
 800a566:	371c      	adds	r7, #28
 800a568:	46bd      	mov	sp, r7
 800a56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a56e:	4770      	bx	lr

0800a570 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a570:	b480      	push	{r7}
 800a572:	b085      	sub	sp, #20
 800a574:	af00      	add	r7, sp, #0
 800a576:	6078      	str	r0, [r7, #4]
 800a578:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	32b0      	adds	r2, #176	; 0xb0
 800a584:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a588:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d101      	bne.n	800a594 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800a590:	2303      	movs	r3, #3
 800a592:	e004      	b.n	800a59e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	683a      	ldr	r2, [r7, #0]
 800a598:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800a59c:	2300      	movs	r3, #0
}
 800a59e:	4618      	mov	r0, r3
 800a5a0:	3714      	adds	r7, #20
 800a5a2:	46bd      	mov	sp, r7
 800a5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a8:	4770      	bx	lr
	...

0800a5ac <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a5ac:	b580      	push	{r7, lr}
 800a5ae:	b084      	sub	sp, #16
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	32b0      	adds	r2, #176	; 0xb0
 800a5be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5c2:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800a5c4:	2301      	movs	r3, #1
 800a5c6:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	32b0      	adds	r2, #176	; 0xb0
 800a5d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d101      	bne.n	800a5de <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800a5da:	2303      	movs	r3, #3
 800a5dc:	e025      	b.n	800a62a <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800a5de:	68bb      	ldr	r3, [r7, #8]
 800a5e0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d11f      	bne.n	800a628 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800a5e8:	68bb      	ldr	r3, [r7, #8]
 800a5ea:	2201      	movs	r2, #1
 800a5ec:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800a5f0:	4b10      	ldr	r3, [pc, #64]	; (800a634 <USBD_CDC_TransmitPacket+0x88>)
 800a5f2:	781b      	ldrb	r3, [r3, #0]
 800a5f4:	f003 020f 	and.w	r2, r3, #15
 800a5f8:	68bb      	ldr	r3, [r7, #8]
 800a5fa:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800a5fe:	6878      	ldr	r0, [r7, #4]
 800a600:	4613      	mov	r3, r2
 800a602:	009b      	lsls	r3, r3, #2
 800a604:	4413      	add	r3, r2
 800a606:	009b      	lsls	r3, r3, #2
 800a608:	4403      	add	r3, r0
 800a60a:	3318      	adds	r3, #24
 800a60c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800a60e:	4b09      	ldr	r3, [pc, #36]	; (800a634 <USBD_CDC_TransmitPacket+0x88>)
 800a610:	7819      	ldrb	r1, [r3, #0]
 800a612:	68bb      	ldr	r3, [r7, #8]
 800a614:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800a618:	68bb      	ldr	r3, [r7, #8]
 800a61a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800a61e:	6878      	ldr	r0, [r7, #4]
 800a620:	f00e faef 	bl	8018c02 <USBD_LL_Transmit>

    ret = USBD_OK;
 800a624:	2300      	movs	r3, #0
 800a626:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800a628:	7bfb      	ldrb	r3, [r7, #15]
}
 800a62a:	4618      	mov	r0, r3
 800a62c:	3710      	adds	r7, #16
 800a62e:	46bd      	mov	sp, r7
 800a630:	bd80      	pop	{r7, pc}
 800a632:	bf00      	nop
 800a634:	200000db 	.word	0x200000db

0800a638 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a638:	b580      	push	{r7, lr}
 800a63a:	b084      	sub	sp, #16
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	32b0      	adds	r2, #176	; 0xb0
 800a64a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a64e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	32b0      	adds	r2, #176	; 0xb0
 800a65a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d101      	bne.n	800a666 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800a662:	2303      	movs	r3, #3
 800a664:	e018      	b.n	800a698 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	7c1b      	ldrb	r3, [r3, #16]
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d10a      	bne.n	800a684 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a66e:	4b0c      	ldr	r3, [pc, #48]	; (800a6a0 <USBD_CDC_ReceivePacket+0x68>)
 800a670:	7819      	ldrb	r1, [r3, #0]
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a678:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a67c:	6878      	ldr	r0, [r7, #4]
 800a67e:	f00e fae1 	bl	8018c44 <USBD_LL_PrepareReceive>
 800a682:	e008      	b.n	800a696 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a684:	4b06      	ldr	r3, [pc, #24]	; (800a6a0 <USBD_CDC_ReceivePacket+0x68>)
 800a686:	7819      	ldrb	r1, [r3, #0]
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a68e:	2340      	movs	r3, #64	; 0x40
 800a690:	6878      	ldr	r0, [r7, #4]
 800a692:	f00e fad7 	bl	8018c44 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a696:	2300      	movs	r3, #0
}
 800a698:	4618      	mov	r0, r3
 800a69a:	3710      	adds	r7, #16
 800a69c:	46bd      	mov	sp, r7
 800a69e:	bd80      	pop	{r7, pc}
 800a6a0:	200000dc 	.word	0x200000dc

0800a6a4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a6a4:	b580      	push	{r7, lr}
 800a6a6:	b086      	sub	sp, #24
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	60f8      	str	r0, [r7, #12]
 800a6ac:	60b9      	str	r1, [r7, #8]
 800a6ae:	4613      	mov	r3, r2
 800a6b0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d101      	bne.n	800a6bc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a6b8:	2303      	movs	r3, #3
 800a6ba:	e01f      	b.n	800a6fc <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	2200      	movs	r2, #0
 800a6c0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	2200      	movs	r2, #0
 800a6c8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	2200      	movs	r2, #0
 800a6d0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a6d4:	68bb      	ldr	r3, [r7, #8]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d003      	beq.n	800a6e2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	68ba      	ldr	r2, [r7, #8]
 800a6de:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	2201      	movs	r2, #1
 800a6e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	79fa      	ldrb	r2, [r7, #7]
 800a6ee:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a6f0:	68f8      	ldr	r0, [r7, #12]
 800a6f2:	f00e f951 	bl	8018998 <USBD_LL_Init>
 800a6f6:	4603      	mov	r3, r0
 800a6f8:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a6fa:	7dfb      	ldrb	r3, [r7, #23]
}
 800a6fc:	4618      	mov	r0, r3
 800a6fe:	3718      	adds	r7, #24
 800a700:	46bd      	mov	sp, r7
 800a702:	bd80      	pop	{r7, pc}

0800a704 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a704:	b580      	push	{r7, lr}
 800a706:	b084      	sub	sp, #16
 800a708:	af00      	add	r7, sp, #0
 800a70a:	6078      	str	r0, [r7, #4]
 800a70c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a70e:	2300      	movs	r3, #0
 800a710:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a712:	683b      	ldr	r3, [r7, #0]
 800a714:	2b00      	cmp	r3, #0
 800a716:	d101      	bne.n	800a71c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a718:	2303      	movs	r3, #3
 800a71a:	e025      	b.n	800a768 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	683a      	ldr	r2, [r7, #0]
 800a720:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	32ae      	adds	r2, #174	; 0xae
 800a72e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a734:	2b00      	cmp	r3, #0
 800a736:	d00f      	beq.n	800a758 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	32ae      	adds	r2, #174	; 0xae
 800a742:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a748:	f107 020e 	add.w	r2, r7, #14
 800a74c:	4610      	mov	r0, r2
 800a74e:	4798      	blx	r3
 800a750:	4602      	mov	r2, r0
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800a75e:	1c5a      	adds	r2, r3, #1
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800a766:	2300      	movs	r3, #0
}
 800a768:	4618      	mov	r0, r3
 800a76a:	3710      	adds	r7, #16
 800a76c:	46bd      	mov	sp, r7
 800a76e:	bd80      	pop	{r7, pc}

0800a770 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a770:	b580      	push	{r7, lr}
 800a772:	b082      	sub	sp, #8
 800a774:	af00      	add	r7, sp, #0
 800a776:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a778:	6878      	ldr	r0, [r7, #4]
 800a77a:	f00e f959 	bl	8018a30 <USBD_LL_Start>
 800a77e:	4603      	mov	r3, r0
}
 800a780:	4618      	mov	r0, r3
 800a782:	3708      	adds	r7, #8
 800a784:	46bd      	mov	sp, r7
 800a786:	bd80      	pop	{r7, pc}

0800a788 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800a788:	b480      	push	{r7}
 800a78a:	b083      	sub	sp, #12
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a790:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800a792:	4618      	mov	r0, r3
 800a794:	370c      	adds	r7, #12
 800a796:	46bd      	mov	sp, r7
 800a798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a79c:	4770      	bx	lr

0800a79e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a79e:	b580      	push	{r7, lr}
 800a7a0:	b084      	sub	sp, #16
 800a7a2:	af00      	add	r7, sp, #0
 800a7a4:	6078      	str	r0, [r7, #4]
 800a7a6:	460b      	mov	r3, r1
 800a7a8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d009      	beq.n	800a7cc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	78fa      	ldrb	r2, [r7, #3]
 800a7c2:	4611      	mov	r1, r2
 800a7c4:	6878      	ldr	r0, [r7, #4]
 800a7c6:	4798      	blx	r3
 800a7c8:	4603      	mov	r3, r0
 800a7ca:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a7cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	3710      	adds	r7, #16
 800a7d2:	46bd      	mov	sp, r7
 800a7d4:	bd80      	pop	{r7, pc}

0800a7d6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a7d6:	b580      	push	{r7, lr}
 800a7d8:	b084      	sub	sp, #16
 800a7da:	af00      	add	r7, sp, #0
 800a7dc:	6078      	str	r0, [r7, #4]
 800a7de:	460b      	mov	r3, r1
 800a7e0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a7e2:	2300      	movs	r3, #0
 800a7e4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a7ec:	685b      	ldr	r3, [r3, #4]
 800a7ee:	78fa      	ldrb	r2, [r7, #3]
 800a7f0:	4611      	mov	r1, r2
 800a7f2:	6878      	ldr	r0, [r7, #4]
 800a7f4:	4798      	blx	r3
 800a7f6:	4603      	mov	r3, r0
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d001      	beq.n	800a800 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800a7fc:	2303      	movs	r3, #3
 800a7fe:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a800:	7bfb      	ldrb	r3, [r7, #15]
}
 800a802:	4618      	mov	r0, r3
 800a804:	3710      	adds	r7, #16
 800a806:	46bd      	mov	sp, r7
 800a808:	bd80      	pop	{r7, pc}

0800a80a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a80a:	b580      	push	{r7, lr}
 800a80c:	b084      	sub	sp, #16
 800a80e:	af00      	add	r7, sp, #0
 800a810:	6078      	str	r0, [r7, #4]
 800a812:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a81a:	6839      	ldr	r1, [r7, #0]
 800a81c:	4618      	mov	r0, r3
 800a81e:	f001 f908 	bl	800ba32 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	2201      	movs	r2, #1
 800a826:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800a830:	461a      	mov	r2, r3
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a83e:	f003 031f 	and.w	r3, r3, #31
 800a842:	2b02      	cmp	r3, #2
 800a844:	d01a      	beq.n	800a87c <USBD_LL_SetupStage+0x72>
 800a846:	2b02      	cmp	r3, #2
 800a848:	d822      	bhi.n	800a890 <USBD_LL_SetupStage+0x86>
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d002      	beq.n	800a854 <USBD_LL_SetupStage+0x4a>
 800a84e:	2b01      	cmp	r3, #1
 800a850:	d00a      	beq.n	800a868 <USBD_LL_SetupStage+0x5e>
 800a852:	e01d      	b.n	800a890 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a85a:	4619      	mov	r1, r3
 800a85c:	6878      	ldr	r0, [r7, #4]
 800a85e:	f000 fb5f 	bl	800af20 <USBD_StdDevReq>
 800a862:	4603      	mov	r3, r0
 800a864:	73fb      	strb	r3, [r7, #15]
      break;
 800a866:	e020      	b.n	800a8aa <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a86e:	4619      	mov	r1, r3
 800a870:	6878      	ldr	r0, [r7, #4]
 800a872:	f000 fbc7 	bl	800b004 <USBD_StdItfReq>
 800a876:	4603      	mov	r3, r0
 800a878:	73fb      	strb	r3, [r7, #15]
      break;
 800a87a:	e016      	b.n	800a8aa <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a882:	4619      	mov	r1, r3
 800a884:	6878      	ldr	r0, [r7, #4]
 800a886:	f000 fc29 	bl	800b0dc <USBD_StdEPReq>
 800a88a:	4603      	mov	r3, r0
 800a88c:	73fb      	strb	r3, [r7, #15]
      break;
 800a88e:	e00c      	b.n	800a8aa <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a896:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a89a:	b2db      	uxtb	r3, r3
 800a89c:	4619      	mov	r1, r3
 800a89e:	6878      	ldr	r0, [r7, #4]
 800a8a0:	f00e f926 	bl	8018af0 <USBD_LL_StallEP>
 800a8a4:	4603      	mov	r3, r0
 800a8a6:	73fb      	strb	r3, [r7, #15]
      break;
 800a8a8:	bf00      	nop
  }

  return ret;
 800a8aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8ac:	4618      	mov	r0, r3
 800a8ae:	3710      	adds	r7, #16
 800a8b0:	46bd      	mov	sp, r7
 800a8b2:	bd80      	pop	{r7, pc}

0800a8b4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a8b4:	b580      	push	{r7, lr}
 800a8b6:	b086      	sub	sp, #24
 800a8b8:	af00      	add	r7, sp, #0
 800a8ba:	60f8      	str	r0, [r7, #12]
 800a8bc:	460b      	mov	r3, r1
 800a8be:	607a      	str	r2, [r7, #4]
 800a8c0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800a8c6:	7afb      	ldrb	r3, [r7, #11]
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d16e      	bne.n	800a9aa <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a8d2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a8da:	2b03      	cmp	r3, #3
 800a8dc:	f040 8098 	bne.w	800aa10 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800a8e0:	693b      	ldr	r3, [r7, #16]
 800a8e2:	689a      	ldr	r2, [r3, #8]
 800a8e4:	693b      	ldr	r3, [r7, #16]
 800a8e6:	68db      	ldr	r3, [r3, #12]
 800a8e8:	429a      	cmp	r2, r3
 800a8ea:	d913      	bls.n	800a914 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800a8ec:	693b      	ldr	r3, [r7, #16]
 800a8ee:	689a      	ldr	r2, [r3, #8]
 800a8f0:	693b      	ldr	r3, [r7, #16]
 800a8f2:	68db      	ldr	r3, [r3, #12]
 800a8f4:	1ad2      	subs	r2, r2, r3
 800a8f6:	693b      	ldr	r3, [r7, #16]
 800a8f8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a8fa:	693b      	ldr	r3, [r7, #16]
 800a8fc:	68da      	ldr	r2, [r3, #12]
 800a8fe:	693b      	ldr	r3, [r7, #16]
 800a900:	689b      	ldr	r3, [r3, #8]
 800a902:	4293      	cmp	r3, r2
 800a904:	bf28      	it	cs
 800a906:	4613      	movcs	r3, r2
 800a908:	461a      	mov	r2, r3
 800a90a:	6879      	ldr	r1, [r7, #4]
 800a90c:	68f8      	ldr	r0, [r7, #12]
 800a90e:	f001 f984 	bl	800bc1a <USBD_CtlContinueRx>
 800a912:	e07d      	b.n	800aa10 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a91a:	f003 031f 	and.w	r3, r3, #31
 800a91e:	2b02      	cmp	r3, #2
 800a920:	d014      	beq.n	800a94c <USBD_LL_DataOutStage+0x98>
 800a922:	2b02      	cmp	r3, #2
 800a924:	d81d      	bhi.n	800a962 <USBD_LL_DataOutStage+0xae>
 800a926:	2b00      	cmp	r3, #0
 800a928:	d002      	beq.n	800a930 <USBD_LL_DataOutStage+0x7c>
 800a92a:	2b01      	cmp	r3, #1
 800a92c:	d003      	beq.n	800a936 <USBD_LL_DataOutStage+0x82>
 800a92e:	e018      	b.n	800a962 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800a930:	2300      	movs	r3, #0
 800a932:	75bb      	strb	r3, [r7, #22]
            break;
 800a934:	e018      	b.n	800a968 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a93c:	b2db      	uxtb	r3, r3
 800a93e:	4619      	mov	r1, r3
 800a940:	68f8      	ldr	r0, [r7, #12]
 800a942:	f000 fa5e 	bl	800ae02 <USBD_CoreFindIF>
 800a946:	4603      	mov	r3, r0
 800a948:	75bb      	strb	r3, [r7, #22]
            break;
 800a94a:	e00d      	b.n	800a968 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a952:	b2db      	uxtb	r3, r3
 800a954:	4619      	mov	r1, r3
 800a956:	68f8      	ldr	r0, [r7, #12]
 800a958:	f000 fa60 	bl	800ae1c <USBD_CoreFindEP>
 800a95c:	4603      	mov	r3, r0
 800a95e:	75bb      	strb	r3, [r7, #22]
            break;
 800a960:	e002      	b.n	800a968 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800a962:	2300      	movs	r3, #0
 800a964:	75bb      	strb	r3, [r7, #22]
            break;
 800a966:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a968:	7dbb      	ldrb	r3, [r7, #22]
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d119      	bne.n	800a9a2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a974:	b2db      	uxtb	r3, r3
 800a976:	2b03      	cmp	r3, #3
 800a978:	d113      	bne.n	800a9a2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a97a:	7dba      	ldrb	r2, [r7, #22]
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	32ae      	adds	r2, #174	; 0xae
 800a980:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a984:	691b      	ldr	r3, [r3, #16]
 800a986:	2b00      	cmp	r3, #0
 800a988:	d00b      	beq.n	800a9a2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800a98a:	7dba      	ldrb	r2, [r7, #22]
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a992:	7dba      	ldrb	r2, [r7, #22]
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	32ae      	adds	r2, #174	; 0xae
 800a998:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a99c:	691b      	ldr	r3, [r3, #16]
 800a99e:	68f8      	ldr	r0, [r7, #12]
 800a9a0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a9a2:	68f8      	ldr	r0, [r7, #12]
 800a9a4:	f001 f94a 	bl	800bc3c <USBD_CtlSendStatus>
 800a9a8:	e032      	b.n	800aa10 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a9aa:	7afb      	ldrb	r3, [r7, #11]
 800a9ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a9b0:	b2db      	uxtb	r3, r3
 800a9b2:	4619      	mov	r1, r3
 800a9b4:	68f8      	ldr	r0, [r7, #12]
 800a9b6:	f000 fa31 	bl	800ae1c <USBD_CoreFindEP>
 800a9ba:	4603      	mov	r3, r0
 800a9bc:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a9be:	7dbb      	ldrb	r3, [r7, #22]
 800a9c0:	2bff      	cmp	r3, #255	; 0xff
 800a9c2:	d025      	beq.n	800aa10 <USBD_LL_DataOutStage+0x15c>
 800a9c4:	7dbb      	ldrb	r3, [r7, #22]
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d122      	bne.n	800aa10 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a9d0:	b2db      	uxtb	r3, r3
 800a9d2:	2b03      	cmp	r3, #3
 800a9d4:	d117      	bne.n	800aa06 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a9d6:	7dba      	ldrb	r2, [r7, #22]
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	32ae      	adds	r2, #174	; 0xae
 800a9dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9e0:	699b      	ldr	r3, [r3, #24]
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d00f      	beq.n	800aa06 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800a9e6:	7dba      	ldrb	r2, [r7, #22]
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a9ee:	7dba      	ldrb	r2, [r7, #22]
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	32ae      	adds	r2, #174	; 0xae
 800a9f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9f8:	699b      	ldr	r3, [r3, #24]
 800a9fa:	7afa      	ldrb	r2, [r7, #11]
 800a9fc:	4611      	mov	r1, r2
 800a9fe:	68f8      	ldr	r0, [r7, #12]
 800aa00:	4798      	blx	r3
 800aa02:	4603      	mov	r3, r0
 800aa04:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800aa06:	7dfb      	ldrb	r3, [r7, #23]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d001      	beq.n	800aa10 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800aa0c:	7dfb      	ldrb	r3, [r7, #23]
 800aa0e:	e000      	b.n	800aa12 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800aa10:	2300      	movs	r3, #0
}
 800aa12:	4618      	mov	r0, r3
 800aa14:	3718      	adds	r7, #24
 800aa16:	46bd      	mov	sp, r7
 800aa18:	bd80      	pop	{r7, pc}

0800aa1a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800aa1a:	b580      	push	{r7, lr}
 800aa1c:	b086      	sub	sp, #24
 800aa1e:	af00      	add	r7, sp, #0
 800aa20:	60f8      	str	r0, [r7, #12]
 800aa22:	460b      	mov	r3, r1
 800aa24:	607a      	str	r2, [r7, #4]
 800aa26:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800aa28:	7afb      	ldrb	r3, [r7, #11]
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d16f      	bne.n	800ab0e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	3314      	adds	r3, #20
 800aa32:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800aa3a:	2b02      	cmp	r3, #2
 800aa3c:	d15a      	bne.n	800aaf4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800aa3e:	693b      	ldr	r3, [r7, #16]
 800aa40:	689a      	ldr	r2, [r3, #8]
 800aa42:	693b      	ldr	r3, [r7, #16]
 800aa44:	68db      	ldr	r3, [r3, #12]
 800aa46:	429a      	cmp	r2, r3
 800aa48:	d914      	bls.n	800aa74 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800aa4a:	693b      	ldr	r3, [r7, #16]
 800aa4c:	689a      	ldr	r2, [r3, #8]
 800aa4e:	693b      	ldr	r3, [r7, #16]
 800aa50:	68db      	ldr	r3, [r3, #12]
 800aa52:	1ad2      	subs	r2, r2, r3
 800aa54:	693b      	ldr	r3, [r7, #16]
 800aa56:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800aa58:	693b      	ldr	r3, [r7, #16]
 800aa5a:	689b      	ldr	r3, [r3, #8]
 800aa5c:	461a      	mov	r2, r3
 800aa5e:	6879      	ldr	r1, [r7, #4]
 800aa60:	68f8      	ldr	r0, [r7, #12]
 800aa62:	f001 f8ac 	bl	800bbbe <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800aa66:	2300      	movs	r3, #0
 800aa68:	2200      	movs	r2, #0
 800aa6a:	2100      	movs	r1, #0
 800aa6c:	68f8      	ldr	r0, [r7, #12]
 800aa6e:	f00e f8e9 	bl	8018c44 <USBD_LL_PrepareReceive>
 800aa72:	e03f      	b.n	800aaf4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800aa74:	693b      	ldr	r3, [r7, #16]
 800aa76:	68da      	ldr	r2, [r3, #12]
 800aa78:	693b      	ldr	r3, [r7, #16]
 800aa7a:	689b      	ldr	r3, [r3, #8]
 800aa7c:	429a      	cmp	r2, r3
 800aa7e:	d11c      	bne.n	800aaba <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800aa80:	693b      	ldr	r3, [r7, #16]
 800aa82:	685a      	ldr	r2, [r3, #4]
 800aa84:	693b      	ldr	r3, [r7, #16]
 800aa86:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800aa88:	429a      	cmp	r2, r3
 800aa8a:	d316      	bcc.n	800aaba <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800aa8c:	693b      	ldr	r3, [r7, #16]
 800aa8e:	685a      	ldr	r2, [r3, #4]
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800aa96:	429a      	cmp	r2, r3
 800aa98:	d20f      	bcs.n	800aaba <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800aa9a:	2200      	movs	r2, #0
 800aa9c:	2100      	movs	r1, #0
 800aa9e:	68f8      	ldr	r0, [r7, #12]
 800aaa0:	f001 f88d 	bl	800bbbe <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	2200      	movs	r2, #0
 800aaa8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800aaac:	2300      	movs	r3, #0
 800aaae:	2200      	movs	r2, #0
 800aab0:	2100      	movs	r1, #0
 800aab2:	68f8      	ldr	r0, [r7, #12]
 800aab4:	f00e f8c6 	bl	8018c44 <USBD_LL_PrepareReceive>
 800aab8:	e01c      	b.n	800aaf4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aac0:	b2db      	uxtb	r3, r3
 800aac2:	2b03      	cmp	r3, #3
 800aac4:	d10f      	bne.n	800aae6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aacc:	68db      	ldr	r3, [r3, #12]
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d009      	beq.n	800aae6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	2200      	movs	r2, #0
 800aad6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aae0:	68db      	ldr	r3, [r3, #12]
 800aae2:	68f8      	ldr	r0, [r7, #12]
 800aae4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800aae6:	2180      	movs	r1, #128	; 0x80
 800aae8:	68f8      	ldr	r0, [r7, #12]
 800aaea:	f00e f801 	bl	8018af0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800aaee:	68f8      	ldr	r0, [r7, #12]
 800aaf0:	f001 f8b7 	bl	800bc62 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d03a      	beq.n	800ab74 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800aafe:	68f8      	ldr	r0, [r7, #12]
 800ab00:	f7ff fe42 	bl	800a788 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	2200      	movs	r2, #0
 800ab08:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800ab0c:	e032      	b.n	800ab74 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800ab0e:	7afb      	ldrb	r3, [r7, #11]
 800ab10:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ab14:	b2db      	uxtb	r3, r3
 800ab16:	4619      	mov	r1, r3
 800ab18:	68f8      	ldr	r0, [r7, #12]
 800ab1a:	f000 f97f 	bl	800ae1c <USBD_CoreFindEP>
 800ab1e:	4603      	mov	r3, r0
 800ab20:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ab22:	7dfb      	ldrb	r3, [r7, #23]
 800ab24:	2bff      	cmp	r3, #255	; 0xff
 800ab26:	d025      	beq.n	800ab74 <USBD_LL_DataInStage+0x15a>
 800ab28:	7dfb      	ldrb	r3, [r7, #23]
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d122      	bne.n	800ab74 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab34:	b2db      	uxtb	r3, r3
 800ab36:	2b03      	cmp	r3, #3
 800ab38:	d11c      	bne.n	800ab74 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800ab3a:	7dfa      	ldrb	r2, [r7, #23]
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	32ae      	adds	r2, #174	; 0xae
 800ab40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab44:	695b      	ldr	r3, [r3, #20]
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d014      	beq.n	800ab74 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800ab4a:	7dfa      	ldrb	r2, [r7, #23]
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800ab52:	7dfa      	ldrb	r2, [r7, #23]
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	32ae      	adds	r2, #174	; 0xae
 800ab58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab5c:	695b      	ldr	r3, [r3, #20]
 800ab5e:	7afa      	ldrb	r2, [r7, #11]
 800ab60:	4611      	mov	r1, r2
 800ab62:	68f8      	ldr	r0, [r7, #12]
 800ab64:	4798      	blx	r3
 800ab66:	4603      	mov	r3, r0
 800ab68:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800ab6a:	7dbb      	ldrb	r3, [r7, #22]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d001      	beq.n	800ab74 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800ab70:	7dbb      	ldrb	r3, [r7, #22]
 800ab72:	e000      	b.n	800ab76 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800ab74:	2300      	movs	r3, #0
}
 800ab76:	4618      	mov	r0, r3
 800ab78:	3718      	adds	r7, #24
 800ab7a:	46bd      	mov	sp, r7
 800ab7c:	bd80      	pop	{r7, pc}

0800ab7e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ab7e:	b580      	push	{r7, lr}
 800ab80:	b084      	sub	sp, #16
 800ab82:	af00      	add	r7, sp, #0
 800ab84:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800ab86:	2300      	movs	r3, #0
 800ab88:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	2201      	movs	r2, #1
 800ab8e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	2200      	movs	r2, #0
 800ab96:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	2200      	movs	r2, #0
 800ab9e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	2200      	movs	r2, #0
 800aba4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	2200      	movs	r2, #0
 800abac:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d014      	beq.n	800abe4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800abc0:	685b      	ldr	r3, [r3, #4]
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d00e      	beq.n	800abe4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800abcc:	685b      	ldr	r3, [r3, #4]
 800abce:	687a      	ldr	r2, [r7, #4]
 800abd0:	6852      	ldr	r2, [r2, #4]
 800abd2:	b2d2      	uxtb	r2, r2
 800abd4:	4611      	mov	r1, r2
 800abd6:	6878      	ldr	r0, [r7, #4]
 800abd8:	4798      	blx	r3
 800abda:	4603      	mov	r3, r0
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d001      	beq.n	800abe4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800abe0:	2303      	movs	r3, #3
 800abe2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800abe4:	2340      	movs	r3, #64	; 0x40
 800abe6:	2200      	movs	r2, #0
 800abe8:	2100      	movs	r1, #0
 800abea:	6878      	ldr	r0, [r7, #4]
 800abec:	f00d ff3b 	bl	8018a66 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	2201      	movs	r2, #1
 800abf4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	2240      	movs	r2, #64	; 0x40
 800abfc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ac00:	2340      	movs	r3, #64	; 0x40
 800ac02:	2200      	movs	r2, #0
 800ac04:	2180      	movs	r1, #128	; 0x80
 800ac06:	6878      	ldr	r0, [r7, #4]
 800ac08:	f00d ff2d 	bl	8018a66 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	2201      	movs	r2, #1
 800ac10:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	2240      	movs	r2, #64	; 0x40
 800ac16:	621a      	str	r2, [r3, #32]

  return ret;
 800ac18:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac1a:	4618      	mov	r0, r3
 800ac1c:	3710      	adds	r7, #16
 800ac1e:	46bd      	mov	sp, r7
 800ac20:	bd80      	pop	{r7, pc}

0800ac22 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ac22:	b480      	push	{r7}
 800ac24:	b083      	sub	sp, #12
 800ac26:	af00      	add	r7, sp, #0
 800ac28:	6078      	str	r0, [r7, #4]
 800ac2a:	460b      	mov	r3, r1
 800ac2c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	78fa      	ldrb	r2, [r7, #3]
 800ac32:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ac34:	2300      	movs	r3, #0
}
 800ac36:	4618      	mov	r0, r3
 800ac38:	370c      	adds	r7, #12
 800ac3a:	46bd      	mov	sp, r7
 800ac3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac40:	4770      	bx	lr

0800ac42 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ac42:	b480      	push	{r7}
 800ac44:	b083      	sub	sp, #12
 800ac46:	af00      	add	r7, sp, #0
 800ac48:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac50:	b2da      	uxtb	r2, r3
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	2204      	movs	r2, #4
 800ac5c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800ac60:	2300      	movs	r3, #0
}
 800ac62:	4618      	mov	r0, r3
 800ac64:	370c      	adds	r7, #12
 800ac66:	46bd      	mov	sp, r7
 800ac68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac6c:	4770      	bx	lr

0800ac6e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ac6e:	b480      	push	{r7}
 800ac70:	b083      	sub	sp, #12
 800ac72:	af00      	add	r7, sp, #0
 800ac74:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac7c:	b2db      	uxtb	r3, r3
 800ac7e:	2b04      	cmp	r3, #4
 800ac80:	d106      	bne.n	800ac90 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800ac88:	b2da      	uxtb	r2, r3
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800ac90:	2300      	movs	r3, #0
}
 800ac92:	4618      	mov	r0, r3
 800ac94:	370c      	adds	r7, #12
 800ac96:	46bd      	mov	sp, r7
 800ac98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac9c:	4770      	bx	lr

0800ac9e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ac9e:	b580      	push	{r7, lr}
 800aca0:	b082      	sub	sp, #8
 800aca2:	af00      	add	r7, sp, #0
 800aca4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800acac:	b2db      	uxtb	r3, r3
 800acae:	2b03      	cmp	r3, #3
 800acb0:	d110      	bne.n	800acd4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d00b      	beq.n	800acd4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800acc2:	69db      	ldr	r3, [r3, #28]
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d005      	beq.n	800acd4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800acce:	69db      	ldr	r3, [r3, #28]
 800acd0:	6878      	ldr	r0, [r7, #4]
 800acd2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800acd4:	2300      	movs	r3, #0
}
 800acd6:	4618      	mov	r0, r3
 800acd8:	3708      	adds	r7, #8
 800acda:	46bd      	mov	sp, r7
 800acdc:	bd80      	pop	{r7, pc}

0800acde <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800acde:	b580      	push	{r7, lr}
 800ace0:	b082      	sub	sp, #8
 800ace2:	af00      	add	r7, sp, #0
 800ace4:	6078      	str	r0, [r7, #4]
 800ace6:	460b      	mov	r3, r1
 800ace8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	32ae      	adds	r2, #174	; 0xae
 800acf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d101      	bne.n	800ad00 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800acfc:	2303      	movs	r3, #3
 800acfe:	e01c      	b.n	800ad3a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad06:	b2db      	uxtb	r3, r3
 800ad08:	2b03      	cmp	r3, #3
 800ad0a:	d115      	bne.n	800ad38 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	32ae      	adds	r2, #174	; 0xae
 800ad16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad1a:	6a1b      	ldr	r3, [r3, #32]
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d00b      	beq.n	800ad38 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	32ae      	adds	r2, #174	; 0xae
 800ad2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad2e:	6a1b      	ldr	r3, [r3, #32]
 800ad30:	78fa      	ldrb	r2, [r7, #3]
 800ad32:	4611      	mov	r1, r2
 800ad34:	6878      	ldr	r0, [r7, #4]
 800ad36:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ad38:	2300      	movs	r3, #0
}
 800ad3a:	4618      	mov	r0, r3
 800ad3c:	3708      	adds	r7, #8
 800ad3e:	46bd      	mov	sp, r7
 800ad40:	bd80      	pop	{r7, pc}

0800ad42 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800ad42:	b580      	push	{r7, lr}
 800ad44:	b082      	sub	sp, #8
 800ad46:	af00      	add	r7, sp, #0
 800ad48:	6078      	str	r0, [r7, #4]
 800ad4a:	460b      	mov	r3, r1
 800ad4c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	32ae      	adds	r2, #174	; 0xae
 800ad58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d101      	bne.n	800ad64 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800ad60:	2303      	movs	r3, #3
 800ad62:	e01c      	b.n	800ad9e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad6a:	b2db      	uxtb	r3, r3
 800ad6c:	2b03      	cmp	r3, #3
 800ad6e:	d115      	bne.n	800ad9c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	32ae      	adds	r2, #174	; 0xae
 800ad7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d00b      	beq.n	800ad9c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	32ae      	adds	r2, #174	; 0xae
 800ad8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad94:	78fa      	ldrb	r2, [r7, #3]
 800ad96:	4611      	mov	r1, r2
 800ad98:	6878      	ldr	r0, [r7, #4]
 800ad9a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ad9c:	2300      	movs	r3, #0
}
 800ad9e:	4618      	mov	r0, r3
 800ada0:	3708      	adds	r7, #8
 800ada2:	46bd      	mov	sp, r7
 800ada4:	bd80      	pop	{r7, pc}

0800ada6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800ada6:	b480      	push	{r7}
 800ada8:	b083      	sub	sp, #12
 800adaa:	af00      	add	r7, sp, #0
 800adac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800adae:	2300      	movs	r3, #0
}
 800adb0:	4618      	mov	r0, r3
 800adb2:	370c      	adds	r7, #12
 800adb4:	46bd      	mov	sp, r7
 800adb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adba:	4770      	bx	lr

0800adbc <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800adbc:	b580      	push	{r7, lr}
 800adbe:	b084      	sub	sp, #16
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800adc4:	2300      	movs	r3, #0
 800adc6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	2201      	movs	r2, #1
 800adcc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800add6:	2b00      	cmp	r3, #0
 800add8:	d00e      	beq.n	800adf8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ade0:	685b      	ldr	r3, [r3, #4]
 800ade2:	687a      	ldr	r2, [r7, #4]
 800ade4:	6852      	ldr	r2, [r2, #4]
 800ade6:	b2d2      	uxtb	r2, r2
 800ade8:	4611      	mov	r1, r2
 800adea:	6878      	ldr	r0, [r7, #4]
 800adec:	4798      	blx	r3
 800adee:	4603      	mov	r3, r0
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d001      	beq.n	800adf8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800adf4:	2303      	movs	r3, #3
 800adf6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800adf8:	7bfb      	ldrb	r3, [r7, #15]
}
 800adfa:	4618      	mov	r0, r3
 800adfc:	3710      	adds	r7, #16
 800adfe:	46bd      	mov	sp, r7
 800ae00:	bd80      	pop	{r7, pc}

0800ae02 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ae02:	b480      	push	{r7}
 800ae04:	b083      	sub	sp, #12
 800ae06:	af00      	add	r7, sp, #0
 800ae08:	6078      	str	r0, [r7, #4]
 800ae0a:	460b      	mov	r3, r1
 800ae0c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ae0e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ae10:	4618      	mov	r0, r3
 800ae12:	370c      	adds	r7, #12
 800ae14:	46bd      	mov	sp, r7
 800ae16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae1a:	4770      	bx	lr

0800ae1c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ae1c:	b480      	push	{r7}
 800ae1e:	b083      	sub	sp, #12
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	6078      	str	r0, [r7, #4]
 800ae24:	460b      	mov	r3, r1
 800ae26:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ae28:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ae2a:	4618      	mov	r0, r3
 800ae2c:	370c      	adds	r7, #12
 800ae2e:	46bd      	mov	sp, r7
 800ae30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae34:	4770      	bx	lr

0800ae36 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800ae36:	b580      	push	{r7, lr}
 800ae38:	b086      	sub	sp, #24
 800ae3a:	af00      	add	r7, sp, #0
 800ae3c:	6078      	str	r0, [r7, #4]
 800ae3e:	460b      	mov	r3, r1
 800ae40:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800ae4a:	2300      	movs	r3, #0
 800ae4c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	885b      	ldrh	r3, [r3, #2]
 800ae52:	b29a      	uxth	r2, r3
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	781b      	ldrb	r3, [r3, #0]
 800ae58:	b29b      	uxth	r3, r3
 800ae5a:	429a      	cmp	r2, r3
 800ae5c:	d920      	bls.n	800aea0 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	781b      	ldrb	r3, [r3, #0]
 800ae62:	b29b      	uxth	r3, r3
 800ae64:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800ae66:	e013      	b.n	800ae90 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800ae68:	f107 030a 	add.w	r3, r7, #10
 800ae6c:	4619      	mov	r1, r3
 800ae6e:	6978      	ldr	r0, [r7, #20]
 800ae70:	f000 f81b 	bl	800aeaa <USBD_GetNextDesc>
 800ae74:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800ae76:	697b      	ldr	r3, [r7, #20]
 800ae78:	785b      	ldrb	r3, [r3, #1]
 800ae7a:	2b05      	cmp	r3, #5
 800ae7c:	d108      	bne.n	800ae90 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800ae7e:	697b      	ldr	r3, [r7, #20]
 800ae80:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800ae82:	693b      	ldr	r3, [r7, #16]
 800ae84:	789b      	ldrb	r3, [r3, #2]
 800ae86:	78fa      	ldrb	r2, [r7, #3]
 800ae88:	429a      	cmp	r2, r3
 800ae8a:	d008      	beq.n	800ae9e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800ae8c:	2300      	movs	r3, #0
 800ae8e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	885b      	ldrh	r3, [r3, #2]
 800ae94:	b29a      	uxth	r2, r3
 800ae96:	897b      	ldrh	r3, [r7, #10]
 800ae98:	429a      	cmp	r2, r3
 800ae9a:	d8e5      	bhi.n	800ae68 <USBD_GetEpDesc+0x32>
 800ae9c:	e000      	b.n	800aea0 <USBD_GetEpDesc+0x6a>
          break;
 800ae9e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800aea0:	693b      	ldr	r3, [r7, #16]
}
 800aea2:	4618      	mov	r0, r3
 800aea4:	3718      	adds	r7, #24
 800aea6:	46bd      	mov	sp, r7
 800aea8:	bd80      	pop	{r7, pc}

0800aeaa <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800aeaa:	b480      	push	{r7}
 800aeac:	b085      	sub	sp, #20
 800aeae:	af00      	add	r7, sp, #0
 800aeb0:	6078      	str	r0, [r7, #4]
 800aeb2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800aeb8:	683b      	ldr	r3, [r7, #0]
 800aeba:	881a      	ldrh	r2, [r3, #0]
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	781b      	ldrb	r3, [r3, #0]
 800aec0:	b29b      	uxth	r3, r3
 800aec2:	4413      	add	r3, r2
 800aec4:	b29a      	uxth	r2, r3
 800aec6:	683b      	ldr	r3, [r7, #0]
 800aec8:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	781b      	ldrb	r3, [r3, #0]
 800aece:	461a      	mov	r2, r3
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	4413      	add	r3, r2
 800aed4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800aed6:	68fb      	ldr	r3, [r7, #12]
}
 800aed8:	4618      	mov	r0, r3
 800aeda:	3714      	adds	r7, #20
 800aedc:	46bd      	mov	sp, r7
 800aede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee2:	4770      	bx	lr

0800aee4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800aee4:	b480      	push	{r7}
 800aee6:	b087      	sub	sp, #28
 800aee8:	af00      	add	r7, sp, #0
 800aeea:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800aef0:	697b      	ldr	r3, [r7, #20]
 800aef2:	781b      	ldrb	r3, [r3, #0]
 800aef4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800aef6:	697b      	ldr	r3, [r7, #20]
 800aef8:	3301      	adds	r3, #1
 800aefa:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800aefc:	697b      	ldr	r3, [r7, #20]
 800aefe:	781b      	ldrb	r3, [r3, #0]
 800af00:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800af02:	8a3b      	ldrh	r3, [r7, #16]
 800af04:	021b      	lsls	r3, r3, #8
 800af06:	b21a      	sxth	r2, r3
 800af08:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800af0c:	4313      	orrs	r3, r2
 800af0e:	b21b      	sxth	r3, r3
 800af10:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800af12:	89fb      	ldrh	r3, [r7, #14]
}
 800af14:	4618      	mov	r0, r3
 800af16:	371c      	adds	r7, #28
 800af18:	46bd      	mov	sp, r7
 800af1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af1e:	4770      	bx	lr

0800af20 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af20:	b580      	push	{r7, lr}
 800af22:	b084      	sub	sp, #16
 800af24:	af00      	add	r7, sp, #0
 800af26:	6078      	str	r0, [r7, #4]
 800af28:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800af2a:	2300      	movs	r3, #0
 800af2c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800af2e:	683b      	ldr	r3, [r7, #0]
 800af30:	781b      	ldrb	r3, [r3, #0]
 800af32:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800af36:	2b40      	cmp	r3, #64	; 0x40
 800af38:	d005      	beq.n	800af46 <USBD_StdDevReq+0x26>
 800af3a:	2b40      	cmp	r3, #64	; 0x40
 800af3c:	d857      	bhi.n	800afee <USBD_StdDevReq+0xce>
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d00f      	beq.n	800af62 <USBD_StdDevReq+0x42>
 800af42:	2b20      	cmp	r3, #32
 800af44:	d153      	bne.n	800afee <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	32ae      	adds	r2, #174	; 0xae
 800af50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af54:	689b      	ldr	r3, [r3, #8]
 800af56:	6839      	ldr	r1, [r7, #0]
 800af58:	6878      	ldr	r0, [r7, #4]
 800af5a:	4798      	blx	r3
 800af5c:	4603      	mov	r3, r0
 800af5e:	73fb      	strb	r3, [r7, #15]
      break;
 800af60:	e04a      	b.n	800aff8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800af62:	683b      	ldr	r3, [r7, #0]
 800af64:	785b      	ldrb	r3, [r3, #1]
 800af66:	2b09      	cmp	r3, #9
 800af68:	d83b      	bhi.n	800afe2 <USBD_StdDevReq+0xc2>
 800af6a:	a201      	add	r2, pc, #4	; (adr r2, 800af70 <USBD_StdDevReq+0x50>)
 800af6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af70:	0800afc5 	.word	0x0800afc5
 800af74:	0800afd9 	.word	0x0800afd9
 800af78:	0800afe3 	.word	0x0800afe3
 800af7c:	0800afcf 	.word	0x0800afcf
 800af80:	0800afe3 	.word	0x0800afe3
 800af84:	0800afa3 	.word	0x0800afa3
 800af88:	0800af99 	.word	0x0800af99
 800af8c:	0800afe3 	.word	0x0800afe3
 800af90:	0800afbb 	.word	0x0800afbb
 800af94:	0800afad 	.word	0x0800afad
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800af98:	6839      	ldr	r1, [r7, #0]
 800af9a:	6878      	ldr	r0, [r7, #4]
 800af9c:	f000 fa3c 	bl	800b418 <USBD_GetDescriptor>
          break;
 800afa0:	e024      	b.n	800afec <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800afa2:	6839      	ldr	r1, [r7, #0]
 800afa4:	6878      	ldr	r0, [r7, #4]
 800afa6:	f000 fba1 	bl	800b6ec <USBD_SetAddress>
          break;
 800afaa:	e01f      	b.n	800afec <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800afac:	6839      	ldr	r1, [r7, #0]
 800afae:	6878      	ldr	r0, [r7, #4]
 800afb0:	f000 fbe0 	bl	800b774 <USBD_SetConfig>
 800afb4:	4603      	mov	r3, r0
 800afb6:	73fb      	strb	r3, [r7, #15]
          break;
 800afb8:	e018      	b.n	800afec <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800afba:	6839      	ldr	r1, [r7, #0]
 800afbc:	6878      	ldr	r0, [r7, #4]
 800afbe:	f000 fc83 	bl	800b8c8 <USBD_GetConfig>
          break;
 800afc2:	e013      	b.n	800afec <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800afc4:	6839      	ldr	r1, [r7, #0]
 800afc6:	6878      	ldr	r0, [r7, #4]
 800afc8:	f000 fcb4 	bl	800b934 <USBD_GetStatus>
          break;
 800afcc:	e00e      	b.n	800afec <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800afce:	6839      	ldr	r1, [r7, #0]
 800afd0:	6878      	ldr	r0, [r7, #4]
 800afd2:	f000 fce3 	bl	800b99c <USBD_SetFeature>
          break;
 800afd6:	e009      	b.n	800afec <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800afd8:	6839      	ldr	r1, [r7, #0]
 800afda:	6878      	ldr	r0, [r7, #4]
 800afdc:	f000 fd07 	bl	800b9ee <USBD_ClrFeature>
          break;
 800afe0:	e004      	b.n	800afec <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800afe2:	6839      	ldr	r1, [r7, #0]
 800afe4:	6878      	ldr	r0, [r7, #4]
 800afe6:	f000 fd5e 	bl	800baa6 <USBD_CtlError>
          break;
 800afea:	bf00      	nop
      }
      break;
 800afec:	e004      	b.n	800aff8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800afee:	6839      	ldr	r1, [r7, #0]
 800aff0:	6878      	ldr	r0, [r7, #4]
 800aff2:	f000 fd58 	bl	800baa6 <USBD_CtlError>
      break;
 800aff6:	bf00      	nop
  }

  return ret;
 800aff8:	7bfb      	ldrb	r3, [r7, #15]
}
 800affa:	4618      	mov	r0, r3
 800affc:	3710      	adds	r7, #16
 800affe:	46bd      	mov	sp, r7
 800b000:	bd80      	pop	{r7, pc}
 800b002:	bf00      	nop

0800b004 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b004:	b580      	push	{r7, lr}
 800b006:	b084      	sub	sp, #16
 800b008:	af00      	add	r7, sp, #0
 800b00a:	6078      	str	r0, [r7, #4]
 800b00c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b00e:	2300      	movs	r3, #0
 800b010:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b012:	683b      	ldr	r3, [r7, #0]
 800b014:	781b      	ldrb	r3, [r3, #0]
 800b016:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b01a:	2b40      	cmp	r3, #64	; 0x40
 800b01c:	d005      	beq.n	800b02a <USBD_StdItfReq+0x26>
 800b01e:	2b40      	cmp	r3, #64	; 0x40
 800b020:	d852      	bhi.n	800b0c8 <USBD_StdItfReq+0xc4>
 800b022:	2b00      	cmp	r3, #0
 800b024:	d001      	beq.n	800b02a <USBD_StdItfReq+0x26>
 800b026:	2b20      	cmp	r3, #32
 800b028:	d14e      	bne.n	800b0c8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b030:	b2db      	uxtb	r3, r3
 800b032:	3b01      	subs	r3, #1
 800b034:	2b02      	cmp	r3, #2
 800b036:	d840      	bhi.n	800b0ba <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b038:	683b      	ldr	r3, [r7, #0]
 800b03a:	889b      	ldrh	r3, [r3, #4]
 800b03c:	b2db      	uxtb	r3, r3
 800b03e:	2b01      	cmp	r3, #1
 800b040:	d836      	bhi.n	800b0b0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800b042:	683b      	ldr	r3, [r7, #0]
 800b044:	889b      	ldrh	r3, [r3, #4]
 800b046:	b2db      	uxtb	r3, r3
 800b048:	4619      	mov	r1, r3
 800b04a:	6878      	ldr	r0, [r7, #4]
 800b04c:	f7ff fed9 	bl	800ae02 <USBD_CoreFindIF>
 800b050:	4603      	mov	r3, r0
 800b052:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b054:	7bbb      	ldrb	r3, [r7, #14]
 800b056:	2bff      	cmp	r3, #255	; 0xff
 800b058:	d01d      	beq.n	800b096 <USBD_StdItfReq+0x92>
 800b05a:	7bbb      	ldrb	r3, [r7, #14]
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d11a      	bne.n	800b096 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800b060:	7bba      	ldrb	r2, [r7, #14]
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	32ae      	adds	r2, #174	; 0xae
 800b066:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b06a:	689b      	ldr	r3, [r3, #8]
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d00f      	beq.n	800b090 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800b070:	7bba      	ldrb	r2, [r7, #14]
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b078:	7bba      	ldrb	r2, [r7, #14]
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	32ae      	adds	r2, #174	; 0xae
 800b07e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b082:	689b      	ldr	r3, [r3, #8]
 800b084:	6839      	ldr	r1, [r7, #0]
 800b086:	6878      	ldr	r0, [r7, #4]
 800b088:	4798      	blx	r3
 800b08a:	4603      	mov	r3, r0
 800b08c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b08e:	e004      	b.n	800b09a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800b090:	2303      	movs	r3, #3
 800b092:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b094:	e001      	b.n	800b09a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800b096:	2303      	movs	r3, #3
 800b098:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b09a:	683b      	ldr	r3, [r7, #0]
 800b09c:	88db      	ldrh	r3, [r3, #6]
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d110      	bne.n	800b0c4 <USBD_StdItfReq+0xc0>
 800b0a2:	7bfb      	ldrb	r3, [r7, #15]
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d10d      	bne.n	800b0c4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b0a8:	6878      	ldr	r0, [r7, #4]
 800b0aa:	f000 fdc7 	bl	800bc3c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b0ae:	e009      	b.n	800b0c4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800b0b0:	6839      	ldr	r1, [r7, #0]
 800b0b2:	6878      	ldr	r0, [r7, #4]
 800b0b4:	f000 fcf7 	bl	800baa6 <USBD_CtlError>
          break;
 800b0b8:	e004      	b.n	800b0c4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800b0ba:	6839      	ldr	r1, [r7, #0]
 800b0bc:	6878      	ldr	r0, [r7, #4]
 800b0be:	f000 fcf2 	bl	800baa6 <USBD_CtlError>
          break;
 800b0c2:	e000      	b.n	800b0c6 <USBD_StdItfReq+0xc2>
          break;
 800b0c4:	bf00      	nop
      }
      break;
 800b0c6:	e004      	b.n	800b0d2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800b0c8:	6839      	ldr	r1, [r7, #0]
 800b0ca:	6878      	ldr	r0, [r7, #4]
 800b0cc:	f000 fceb 	bl	800baa6 <USBD_CtlError>
      break;
 800b0d0:	bf00      	nop
  }

  return ret;
 800b0d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0d4:	4618      	mov	r0, r3
 800b0d6:	3710      	adds	r7, #16
 800b0d8:	46bd      	mov	sp, r7
 800b0da:	bd80      	pop	{r7, pc}

0800b0dc <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b0dc:	b580      	push	{r7, lr}
 800b0de:	b084      	sub	sp, #16
 800b0e0:	af00      	add	r7, sp, #0
 800b0e2:	6078      	str	r0, [r7, #4]
 800b0e4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800b0e6:	2300      	movs	r3, #0
 800b0e8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800b0ea:	683b      	ldr	r3, [r7, #0]
 800b0ec:	889b      	ldrh	r3, [r3, #4]
 800b0ee:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b0f0:	683b      	ldr	r3, [r7, #0]
 800b0f2:	781b      	ldrb	r3, [r3, #0]
 800b0f4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b0f8:	2b40      	cmp	r3, #64	; 0x40
 800b0fa:	d007      	beq.n	800b10c <USBD_StdEPReq+0x30>
 800b0fc:	2b40      	cmp	r3, #64	; 0x40
 800b0fe:	f200 817f 	bhi.w	800b400 <USBD_StdEPReq+0x324>
 800b102:	2b00      	cmp	r3, #0
 800b104:	d02a      	beq.n	800b15c <USBD_StdEPReq+0x80>
 800b106:	2b20      	cmp	r3, #32
 800b108:	f040 817a 	bne.w	800b400 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800b10c:	7bbb      	ldrb	r3, [r7, #14]
 800b10e:	4619      	mov	r1, r3
 800b110:	6878      	ldr	r0, [r7, #4]
 800b112:	f7ff fe83 	bl	800ae1c <USBD_CoreFindEP>
 800b116:	4603      	mov	r3, r0
 800b118:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b11a:	7b7b      	ldrb	r3, [r7, #13]
 800b11c:	2bff      	cmp	r3, #255	; 0xff
 800b11e:	f000 8174 	beq.w	800b40a <USBD_StdEPReq+0x32e>
 800b122:	7b7b      	ldrb	r3, [r7, #13]
 800b124:	2b00      	cmp	r3, #0
 800b126:	f040 8170 	bne.w	800b40a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800b12a:	7b7a      	ldrb	r2, [r7, #13]
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800b132:	7b7a      	ldrb	r2, [r7, #13]
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	32ae      	adds	r2, #174	; 0xae
 800b138:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b13c:	689b      	ldr	r3, [r3, #8]
 800b13e:	2b00      	cmp	r3, #0
 800b140:	f000 8163 	beq.w	800b40a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800b144:	7b7a      	ldrb	r2, [r7, #13]
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	32ae      	adds	r2, #174	; 0xae
 800b14a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b14e:	689b      	ldr	r3, [r3, #8]
 800b150:	6839      	ldr	r1, [r7, #0]
 800b152:	6878      	ldr	r0, [r7, #4]
 800b154:	4798      	blx	r3
 800b156:	4603      	mov	r3, r0
 800b158:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b15a:	e156      	b.n	800b40a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b15c:	683b      	ldr	r3, [r7, #0]
 800b15e:	785b      	ldrb	r3, [r3, #1]
 800b160:	2b03      	cmp	r3, #3
 800b162:	d008      	beq.n	800b176 <USBD_StdEPReq+0x9a>
 800b164:	2b03      	cmp	r3, #3
 800b166:	f300 8145 	bgt.w	800b3f4 <USBD_StdEPReq+0x318>
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	f000 809b 	beq.w	800b2a6 <USBD_StdEPReq+0x1ca>
 800b170:	2b01      	cmp	r3, #1
 800b172:	d03c      	beq.n	800b1ee <USBD_StdEPReq+0x112>
 800b174:	e13e      	b.n	800b3f4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b17c:	b2db      	uxtb	r3, r3
 800b17e:	2b02      	cmp	r3, #2
 800b180:	d002      	beq.n	800b188 <USBD_StdEPReq+0xac>
 800b182:	2b03      	cmp	r3, #3
 800b184:	d016      	beq.n	800b1b4 <USBD_StdEPReq+0xd8>
 800b186:	e02c      	b.n	800b1e2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b188:	7bbb      	ldrb	r3, [r7, #14]
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d00d      	beq.n	800b1aa <USBD_StdEPReq+0xce>
 800b18e:	7bbb      	ldrb	r3, [r7, #14]
 800b190:	2b80      	cmp	r3, #128	; 0x80
 800b192:	d00a      	beq.n	800b1aa <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b194:	7bbb      	ldrb	r3, [r7, #14]
 800b196:	4619      	mov	r1, r3
 800b198:	6878      	ldr	r0, [r7, #4]
 800b19a:	f00d fca9 	bl	8018af0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b19e:	2180      	movs	r1, #128	; 0x80
 800b1a0:	6878      	ldr	r0, [r7, #4]
 800b1a2:	f00d fca5 	bl	8018af0 <USBD_LL_StallEP>
 800b1a6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b1a8:	e020      	b.n	800b1ec <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800b1aa:	6839      	ldr	r1, [r7, #0]
 800b1ac:	6878      	ldr	r0, [r7, #4]
 800b1ae:	f000 fc7a 	bl	800baa6 <USBD_CtlError>
              break;
 800b1b2:	e01b      	b.n	800b1ec <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b1b4:	683b      	ldr	r3, [r7, #0]
 800b1b6:	885b      	ldrh	r3, [r3, #2]
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d10e      	bne.n	800b1da <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b1bc:	7bbb      	ldrb	r3, [r7, #14]
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d00b      	beq.n	800b1da <USBD_StdEPReq+0xfe>
 800b1c2:	7bbb      	ldrb	r3, [r7, #14]
 800b1c4:	2b80      	cmp	r3, #128	; 0x80
 800b1c6:	d008      	beq.n	800b1da <USBD_StdEPReq+0xfe>
 800b1c8:	683b      	ldr	r3, [r7, #0]
 800b1ca:	88db      	ldrh	r3, [r3, #6]
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d104      	bne.n	800b1da <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b1d0:	7bbb      	ldrb	r3, [r7, #14]
 800b1d2:	4619      	mov	r1, r3
 800b1d4:	6878      	ldr	r0, [r7, #4]
 800b1d6:	f00d fc8b 	bl	8018af0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b1da:	6878      	ldr	r0, [r7, #4]
 800b1dc:	f000 fd2e 	bl	800bc3c <USBD_CtlSendStatus>

              break;
 800b1e0:	e004      	b.n	800b1ec <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800b1e2:	6839      	ldr	r1, [r7, #0]
 800b1e4:	6878      	ldr	r0, [r7, #4]
 800b1e6:	f000 fc5e 	bl	800baa6 <USBD_CtlError>
              break;
 800b1ea:	bf00      	nop
          }
          break;
 800b1ec:	e107      	b.n	800b3fe <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b1f4:	b2db      	uxtb	r3, r3
 800b1f6:	2b02      	cmp	r3, #2
 800b1f8:	d002      	beq.n	800b200 <USBD_StdEPReq+0x124>
 800b1fa:	2b03      	cmp	r3, #3
 800b1fc:	d016      	beq.n	800b22c <USBD_StdEPReq+0x150>
 800b1fe:	e04b      	b.n	800b298 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b200:	7bbb      	ldrb	r3, [r7, #14]
 800b202:	2b00      	cmp	r3, #0
 800b204:	d00d      	beq.n	800b222 <USBD_StdEPReq+0x146>
 800b206:	7bbb      	ldrb	r3, [r7, #14]
 800b208:	2b80      	cmp	r3, #128	; 0x80
 800b20a:	d00a      	beq.n	800b222 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b20c:	7bbb      	ldrb	r3, [r7, #14]
 800b20e:	4619      	mov	r1, r3
 800b210:	6878      	ldr	r0, [r7, #4]
 800b212:	f00d fc6d 	bl	8018af0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b216:	2180      	movs	r1, #128	; 0x80
 800b218:	6878      	ldr	r0, [r7, #4]
 800b21a:	f00d fc69 	bl	8018af0 <USBD_LL_StallEP>
 800b21e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b220:	e040      	b.n	800b2a4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800b222:	6839      	ldr	r1, [r7, #0]
 800b224:	6878      	ldr	r0, [r7, #4]
 800b226:	f000 fc3e 	bl	800baa6 <USBD_CtlError>
              break;
 800b22a:	e03b      	b.n	800b2a4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b22c:	683b      	ldr	r3, [r7, #0]
 800b22e:	885b      	ldrh	r3, [r3, #2]
 800b230:	2b00      	cmp	r3, #0
 800b232:	d136      	bne.n	800b2a2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b234:	7bbb      	ldrb	r3, [r7, #14]
 800b236:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d004      	beq.n	800b248 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b23e:	7bbb      	ldrb	r3, [r7, #14]
 800b240:	4619      	mov	r1, r3
 800b242:	6878      	ldr	r0, [r7, #4]
 800b244:	f00d fc73 	bl	8018b2e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b248:	6878      	ldr	r0, [r7, #4]
 800b24a:	f000 fcf7 	bl	800bc3c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800b24e:	7bbb      	ldrb	r3, [r7, #14]
 800b250:	4619      	mov	r1, r3
 800b252:	6878      	ldr	r0, [r7, #4]
 800b254:	f7ff fde2 	bl	800ae1c <USBD_CoreFindEP>
 800b258:	4603      	mov	r3, r0
 800b25a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b25c:	7b7b      	ldrb	r3, [r7, #13]
 800b25e:	2bff      	cmp	r3, #255	; 0xff
 800b260:	d01f      	beq.n	800b2a2 <USBD_StdEPReq+0x1c6>
 800b262:	7b7b      	ldrb	r3, [r7, #13]
 800b264:	2b00      	cmp	r3, #0
 800b266:	d11c      	bne.n	800b2a2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800b268:	7b7a      	ldrb	r2, [r7, #13]
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800b270:	7b7a      	ldrb	r2, [r7, #13]
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	32ae      	adds	r2, #174	; 0xae
 800b276:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b27a:	689b      	ldr	r3, [r3, #8]
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d010      	beq.n	800b2a2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b280:	7b7a      	ldrb	r2, [r7, #13]
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	32ae      	adds	r2, #174	; 0xae
 800b286:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b28a:	689b      	ldr	r3, [r3, #8]
 800b28c:	6839      	ldr	r1, [r7, #0]
 800b28e:	6878      	ldr	r0, [r7, #4]
 800b290:	4798      	blx	r3
 800b292:	4603      	mov	r3, r0
 800b294:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800b296:	e004      	b.n	800b2a2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800b298:	6839      	ldr	r1, [r7, #0]
 800b29a:	6878      	ldr	r0, [r7, #4]
 800b29c:	f000 fc03 	bl	800baa6 <USBD_CtlError>
              break;
 800b2a0:	e000      	b.n	800b2a4 <USBD_StdEPReq+0x1c8>
              break;
 800b2a2:	bf00      	nop
          }
          break;
 800b2a4:	e0ab      	b.n	800b3fe <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b2ac:	b2db      	uxtb	r3, r3
 800b2ae:	2b02      	cmp	r3, #2
 800b2b0:	d002      	beq.n	800b2b8 <USBD_StdEPReq+0x1dc>
 800b2b2:	2b03      	cmp	r3, #3
 800b2b4:	d032      	beq.n	800b31c <USBD_StdEPReq+0x240>
 800b2b6:	e097      	b.n	800b3e8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b2b8:	7bbb      	ldrb	r3, [r7, #14]
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d007      	beq.n	800b2ce <USBD_StdEPReq+0x1f2>
 800b2be:	7bbb      	ldrb	r3, [r7, #14]
 800b2c0:	2b80      	cmp	r3, #128	; 0x80
 800b2c2:	d004      	beq.n	800b2ce <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800b2c4:	6839      	ldr	r1, [r7, #0]
 800b2c6:	6878      	ldr	r0, [r7, #4]
 800b2c8:	f000 fbed 	bl	800baa6 <USBD_CtlError>
                break;
 800b2cc:	e091      	b.n	800b3f2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b2ce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	da0b      	bge.n	800b2ee <USBD_StdEPReq+0x212>
 800b2d6:	7bbb      	ldrb	r3, [r7, #14]
 800b2d8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b2dc:	4613      	mov	r3, r2
 800b2de:	009b      	lsls	r3, r3, #2
 800b2e0:	4413      	add	r3, r2
 800b2e2:	009b      	lsls	r3, r3, #2
 800b2e4:	3310      	adds	r3, #16
 800b2e6:	687a      	ldr	r2, [r7, #4]
 800b2e8:	4413      	add	r3, r2
 800b2ea:	3304      	adds	r3, #4
 800b2ec:	e00b      	b.n	800b306 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b2ee:	7bbb      	ldrb	r3, [r7, #14]
 800b2f0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b2f4:	4613      	mov	r3, r2
 800b2f6:	009b      	lsls	r3, r3, #2
 800b2f8:	4413      	add	r3, r2
 800b2fa:	009b      	lsls	r3, r3, #2
 800b2fc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b300:	687a      	ldr	r2, [r7, #4]
 800b302:	4413      	add	r3, r2
 800b304:	3304      	adds	r3, #4
 800b306:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b308:	68bb      	ldr	r3, [r7, #8]
 800b30a:	2200      	movs	r2, #0
 800b30c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b30e:	68bb      	ldr	r3, [r7, #8]
 800b310:	2202      	movs	r2, #2
 800b312:	4619      	mov	r1, r3
 800b314:	6878      	ldr	r0, [r7, #4]
 800b316:	f000 fc37 	bl	800bb88 <USBD_CtlSendData>
              break;
 800b31a:	e06a      	b.n	800b3f2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b31c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b320:	2b00      	cmp	r3, #0
 800b322:	da11      	bge.n	800b348 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b324:	7bbb      	ldrb	r3, [r7, #14]
 800b326:	f003 020f 	and.w	r2, r3, #15
 800b32a:	6879      	ldr	r1, [r7, #4]
 800b32c:	4613      	mov	r3, r2
 800b32e:	009b      	lsls	r3, r3, #2
 800b330:	4413      	add	r3, r2
 800b332:	009b      	lsls	r3, r3, #2
 800b334:	440b      	add	r3, r1
 800b336:	3324      	adds	r3, #36	; 0x24
 800b338:	881b      	ldrh	r3, [r3, #0]
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d117      	bne.n	800b36e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b33e:	6839      	ldr	r1, [r7, #0]
 800b340:	6878      	ldr	r0, [r7, #4]
 800b342:	f000 fbb0 	bl	800baa6 <USBD_CtlError>
                  break;
 800b346:	e054      	b.n	800b3f2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b348:	7bbb      	ldrb	r3, [r7, #14]
 800b34a:	f003 020f 	and.w	r2, r3, #15
 800b34e:	6879      	ldr	r1, [r7, #4]
 800b350:	4613      	mov	r3, r2
 800b352:	009b      	lsls	r3, r3, #2
 800b354:	4413      	add	r3, r2
 800b356:	009b      	lsls	r3, r3, #2
 800b358:	440b      	add	r3, r1
 800b35a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b35e:	881b      	ldrh	r3, [r3, #0]
 800b360:	2b00      	cmp	r3, #0
 800b362:	d104      	bne.n	800b36e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b364:	6839      	ldr	r1, [r7, #0]
 800b366:	6878      	ldr	r0, [r7, #4]
 800b368:	f000 fb9d 	bl	800baa6 <USBD_CtlError>
                  break;
 800b36c:	e041      	b.n	800b3f2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b36e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b372:	2b00      	cmp	r3, #0
 800b374:	da0b      	bge.n	800b38e <USBD_StdEPReq+0x2b2>
 800b376:	7bbb      	ldrb	r3, [r7, #14]
 800b378:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b37c:	4613      	mov	r3, r2
 800b37e:	009b      	lsls	r3, r3, #2
 800b380:	4413      	add	r3, r2
 800b382:	009b      	lsls	r3, r3, #2
 800b384:	3310      	adds	r3, #16
 800b386:	687a      	ldr	r2, [r7, #4]
 800b388:	4413      	add	r3, r2
 800b38a:	3304      	adds	r3, #4
 800b38c:	e00b      	b.n	800b3a6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b38e:	7bbb      	ldrb	r3, [r7, #14]
 800b390:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b394:	4613      	mov	r3, r2
 800b396:	009b      	lsls	r3, r3, #2
 800b398:	4413      	add	r3, r2
 800b39a:	009b      	lsls	r3, r3, #2
 800b39c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b3a0:	687a      	ldr	r2, [r7, #4]
 800b3a2:	4413      	add	r3, r2
 800b3a4:	3304      	adds	r3, #4
 800b3a6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b3a8:	7bbb      	ldrb	r3, [r7, #14]
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d002      	beq.n	800b3b4 <USBD_StdEPReq+0x2d8>
 800b3ae:	7bbb      	ldrb	r3, [r7, #14]
 800b3b0:	2b80      	cmp	r3, #128	; 0x80
 800b3b2:	d103      	bne.n	800b3bc <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800b3b4:	68bb      	ldr	r3, [r7, #8]
 800b3b6:	2200      	movs	r2, #0
 800b3b8:	601a      	str	r2, [r3, #0]
 800b3ba:	e00e      	b.n	800b3da <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b3bc:	7bbb      	ldrb	r3, [r7, #14]
 800b3be:	4619      	mov	r1, r3
 800b3c0:	6878      	ldr	r0, [r7, #4]
 800b3c2:	f00d fbd3 	bl	8018b6c <USBD_LL_IsStallEP>
 800b3c6:	4603      	mov	r3, r0
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d003      	beq.n	800b3d4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800b3cc:	68bb      	ldr	r3, [r7, #8]
 800b3ce:	2201      	movs	r2, #1
 800b3d0:	601a      	str	r2, [r3, #0]
 800b3d2:	e002      	b.n	800b3da <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800b3d4:	68bb      	ldr	r3, [r7, #8]
 800b3d6:	2200      	movs	r2, #0
 800b3d8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b3da:	68bb      	ldr	r3, [r7, #8]
 800b3dc:	2202      	movs	r2, #2
 800b3de:	4619      	mov	r1, r3
 800b3e0:	6878      	ldr	r0, [r7, #4]
 800b3e2:	f000 fbd1 	bl	800bb88 <USBD_CtlSendData>
              break;
 800b3e6:	e004      	b.n	800b3f2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800b3e8:	6839      	ldr	r1, [r7, #0]
 800b3ea:	6878      	ldr	r0, [r7, #4]
 800b3ec:	f000 fb5b 	bl	800baa6 <USBD_CtlError>
              break;
 800b3f0:	bf00      	nop
          }
          break;
 800b3f2:	e004      	b.n	800b3fe <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800b3f4:	6839      	ldr	r1, [r7, #0]
 800b3f6:	6878      	ldr	r0, [r7, #4]
 800b3f8:	f000 fb55 	bl	800baa6 <USBD_CtlError>
          break;
 800b3fc:	bf00      	nop
      }
      break;
 800b3fe:	e005      	b.n	800b40c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800b400:	6839      	ldr	r1, [r7, #0]
 800b402:	6878      	ldr	r0, [r7, #4]
 800b404:	f000 fb4f 	bl	800baa6 <USBD_CtlError>
      break;
 800b408:	e000      	b.n	800b40c <USBD_StdEPReq+0x330>
      break;
 800b40a:	bf00      	nop
  }

  return ret;
 800b40c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b40e:	4618      	mov	r0, r3
 800b410:	3710      	adds	r7, #16
 800b412:	46bd      	mov	sp, r7
 800b414:	bd80      	pop	{r7, pc}
	...

0800b418 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b418:	b580      	push	{r7, lr}
 800b41a:	b084      	sub	sp, #16
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	6078      	str	r0, [r7, #4]
 800b420:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b422:	2300      	movs	r3, #0
 800b424:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b426:	2300      	movs	r3, #0
 800b428:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b42a:	2300      	movs	r3, #0
 800b42c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b42e:	683b      	ldr	r3, [r7, #0]
 800b430:	885b      	ldrh	r3, [r3, #2]
 800b432:	0a1b      	lsrs	r3, r3, #8
 800b434:	b29b      	uxth	r3, r3
 800b436:	3b01      	subs	r3, #1
 800b438:	2b06      	cmp	r3, #6
 800b43a:	f200 8128 	bhi.w	800b68e <USBD_GetDescriptor+0x276>
 800b43e:	a201      	add	r2, pc, #4	; (adr r2, 800b444 <USBD_GetDescriptor+0x2c>)
 800b440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b444:	0800b461 	.word	0x0800b461
 800b448:	0800b479 	.word	0x0800b479
 800b44c:	0800b4b9 	.word	0x0800b4b9
 800b450:	0800b68f 	.word	0x0800b68f
 800b454:	0800b68f 	.word	0x0800b68f
 800b458:	0800b62f 	.word	0x0800b62f
 800b45c:	0800b65b 	.word	0x0800b65b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	687a      	ldr	r2, [r7, #4]
 800b46a:	7c12      	ldrb	r2, [r2, #16]
 800b46c:	f107 0108 	add.w	r1, r7, #8
 800b470:	4610      	mov	r0, r2
 800b472:	4798      	blx	r3
 800b474:	60f8      	str	r0, [r7, #12]
      break;
 800b476:	e112      	b.n	800b69e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	7c1b      	ldrb	r3, [r3, #16]
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d10d      	bne.n	800b49c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b488:	f107 0208 	add.w	r2, r7, #8
 800b48c:	4610      	mov	r0, r2
 800b48e:	4798      	blx	r3
 800b490:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	3301      	adds	r3, #1
 800b496:	2202      	movs	r2, #2
 800b498:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b49a:	e100      	b.n	800b69e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b4a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4a4:	f107 0208 	add.w	r2, r7, #8
 800b4a8:	4610      	mov	r0, r2
 800b4aa:	4798      	blx	r3
 800b4ac:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	3301      	adds	r3, #1
 800b4b2:	2202      	movs	r2, #2
 800b4b4:	701a      	strb	r2, [r3, #0]
      break;
 800b4b6:	e0f2      	b.n	800b69e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b4b8:	683b      	ldr	r3, [r7, #0]
 800b4ba:	885b      	ldrh	r3, [r3, #2]
 800b4bc:	b2db      	uxtb	r3, r3
 800b4be:	2b05      	cmp	r3, #5
 800b4c0:	f200 80ac 	bhi.w	800b61c <USBD_GetDescriptor+0x204>
 800b4c4:	a201      	add	r2, pc, #4	; (adr r2, 800b4cc <USBD_GetDescriptor+0xb4>)
 800b4c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4ca:	bf00      	nop
 800b4cc:	0800b4e5 	.word	0x0800b4e5
 800b4d0:	0800b519 	.word	0x0800b519
 800b4d4:	0800b54d 	.word	0x0800b54d
 800b4d8:	0800b581 	.word	0x0800b581
 800b4dc:	0800b5b5 	.word	0x0800b5b5
 800b4e0:	0800b5e9 	.word	0x0800b5e9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b4ea:	685b      	ldr	r3, [r3, #4]
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d00b      	beq.n	800b508 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b4f6:	685b      	ldr	r3, [r3, #4]
 800b4f8:	687a      	ldr	r2, [r7, #4]
 800b4fa:	7c12      	ldrb	r2, [r2, #16]
 800b4fc:	f107 0108 	add.w	r1, r7, #8
 800b500:	4610      	mov	r0, r2
 800b502:	4798      	blx	r3
 800b504:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b506:	e091      	b.n	800b62c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b508:	6839      	ldr	r1, [r7, #0]
 800b50a:	6878      	ldr	r0, [r7, #4]
 800b50c:	f000 facb 	bl	800baa6 <USBD_CtlError>
            err++;
 800b510:	7afb      	ldrb	r3, [r7, #11]
 800b512:	3301      	adds	r3, #1
 800b514:	72fb      	strb	r3, [r7, #11]
          break;
 800b516:	e089      	b.n	800b62c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b51e:	689b      	ldr	r3, [r3, #8]
 800b520:	2b00      	cmp	r3, #0
 800b522:	d00b      	beq.n	800b53c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b52a:	689b      	ldr	r3, [r3, #8]
 800b52c:	687a      	ldr	r2, [r7, #4]
 800b52e:	7c12      	ldrb	r2, [r2, #16]
 800b530:	f107 0108 	add.w	r1, r7, #8
 800b534:	4610      	mov	r0, r2
 800b536:	4798      	blx	r3
 800b538:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b53a:	e077      	b.n	800b62c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b53c:	6839      	ldr	r1, [r7, #0]
 800b53e:	6878      	ldr	r0, [r7, #4]
 800b540:	f000 fab1 	bl	800baa6 <USBD_CtlError>
            err++;
 800b544:	7afb      	ldrb	r3, [r7, #11]
 800b546:	3301      	adds	r3, #1
 800b548:	72fb      	strb	r3, [r7, #11]
          break;
 800b54a:	e06f      	b.n	800b62c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b552:	68db      	ldr	r3, [r3, #12]
 800b554:	2b00      	cmp	r3, #0
 800b556:	d00b      	beq.n	800b570 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b55e:	68db      	ldr	r3, [r3, #12]
 800b560:	687a      	ldr	r2, [r7, #4]
 800b562:	7c12      	ldrb	r2, [r2, #16]
 800b564:	f107 0108 	add.w	r1, r7, #8
 800b568:	4610      	mov	r0, r2
 800b56a:	4798      	blx	r3
 800b56c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b56e:	e05d      	b.n	800b62c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b570:	6839      	ldr	r1, [r7, #0]
 800b572:	6878      	ldr	r0, [r7, #4]
 800b574:	f000 fa97 	bl	800baa6 <USBD_CtlError>
            err++;
 800b578:	7afb      	ldrb	r3, [r7, #11]
 800b57a:	3301      	adds	r3, #1
 800b57c:	72fb      	strb	r3, [r7, #11]
          break;
 800b57e:	e055      	b.n	800b62c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b586:	691b      	ldr	r3, [r3, #16]
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d00b      	beq.n	800b5a4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b592:	691b      	ldr	r3, [r3, #16]
 800b594:	687a      	ldr	r2, [r7, #4]
 800b596:	7c12      	ldrb	r2, [r2, #16]
 800b598:	f107 0108 	add.w	r1, r7, #8
 800b59c:	4610      	mov	r0, r2
 800b59e:	4798      	blx	r3
 800b5a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b5a2:	e043      	b.n	800b62c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b5a4:	6839      	ldr	r1, [r7, #0]
 800b5a6:	6878      	ldr	r0, [r7, #4]
 800b5a8:	f000 fa7d 	bl	800baa6 <USBD_CtlError>
            err++;
 800b5ac:	7afb      	ldrb	r3, [r7, #11]
 800b5ae:	3301      	adds	r3, #1
 800b5b0:	72fb      	strb	r3, [r7, #11]
          break;
 800b5b2:	e03b      	b.n	800b62c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b5ba:	695b      	ldr	r3, [r3, #20]
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d00b      	beq.n	800b5d8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b5c6:	695b      	ldr	r3, [r3, #20]
 800b5c8:	687a      	ldr	r2, [r7, #4]
 800b5ca:	7c12      	ldrb	r2, [r2, #16]
 800b5cc:	f107 0108 	add.w	r1, r7, #8
 800b5d0:	4610      	mov	r0, r2
 800b5d2:	4798      	blx	r3
 800b5d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b5d6:	e029      	b.n	800b62c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b5d8:	6839      	ldr	r1, [r7, #0]
 800b5da:	6878      	ldr	r0, [r7, #4]
 800b5dc:	f000 fa63 	bl	800baa6 <USBD_CtlError>
            err++;
 800b5e0:	7afb      	ldrb	r3, [r7, #11]
 800b5e2:	3301      	adds	r3, #1
 800b5e4:	72fb      	strb	r3, [r7, #11]
          break;
 800b5e6:	e021      	b.n	800b62c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b5ee:	699b      	ldr	r3, [r3, #24]
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d00b      	beq.n	800b60c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b5fa:	699b      	ldr	r3, [r3, #24]
 800b5fc:	687a      	ldr	r2, [r7, #4]
 800b5fe:	7c12      	ldrb	r2, [r2, #16]
 800b600:	f107 0108 	add.w	r1, r7, #8
 800b604:	4610      	mov	r0, r2
 800b606:	4798      	blx	r3
 800b608:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b60a:	e00f      	b.n	800b62c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b60c:	6839      	ldr	r1, [r7, #0]
 800b60e:	6878      	ldr	r0, [r7, #4]
 800b610:	f000 fa49 	bl	800baa6 <USBD_CtlError>
            err++;
 800b614:	7afb      	ldrb	r3, [r7, #11]
 800b616:	3301      	adds	r3, #1
 800b618:	72fb      	strb	r3, [r7, #11]
          break;
 800b61a:	e007      	b.n	800b62c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b61c:	6839      	ldr	r1, [r7, #0]
 800b61e:	6878      	ldr	r0, [r7, #4]
 800b620:	f000 fa41 	bl	800baa6 <USBD_CtlError>
          err++;
 800b624:	7afb      	ldrb	r3, [r7, #11]
 800b626:	3301      	adds	r3, #1
 800b628:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800b62a:	bf00      	nop
      }
      break;
 800b62c:	e037      	b.n	800b69e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	7c1b      	ldrb	r3, [r3, #16]
 800b632:	2b00      	cmp	r3, #0
 800b634:	d109      	bne.n	800b64a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b63c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b63e:	f107 0208 	add.w	r2, r7, #8
 800b642:	4610      	mov	r0, r2
 800b644:	4798      	blx	r3
 800b646:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b648:	e029      	b.n	800b69e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b64a:	6839      	ldr	r1, [r7, #0]
 800b64c:	6878      	ldr	r0, [r7, #4]
 800b64e:	f000 fa2a 	bl	800baa6 <USBD_CtlError>
        err++;
 800b652:	7afb      	ldrb	r3, [r7, #11]
 800b654:	3301      	adds	r3, #1
 800b656:	72fb      	strb	r3, [r7, #11]
      break;
 800b658:	e021      	b.n	800b69e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	7c1b      	ldrb	r3, [r3, #16]
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d10d      	bne.n	800b67e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b66a:	f107 0208 	add.w	r2, r7, #8
 800b66e:	4610      	mov	r0, r2
 800b670:	4798      	blx	r3
 800b672:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	3301      	adds	r3, #1
 800b678:	2207      	movs	r2, #7
 800b67a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b67c:	e00f      	b.n	800b69e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b67e:	6839      	ldr	r1, [r7, #0]
 800b680:	6878      	ldr	r0, [r7, #4]
 800b682:	f000 fa10 	bl	800baa6 <USBD_CtlError>
        err++;
 800b686:	7afb      	ldrb	r3, [r7, #11]
 800b688:	3301      	adds	r3, #1
 800b68a:	72fb      	strb	r3, [r7, #11]
      break;
 800b68c:	e007      	b.n	800b69e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b68e:	6839      	ldr	r1, [r7, #0]
 800b690:	6878      	ldr	r0, [r7, #4]
 800b692:	f000 fa08 	bl	800baa6 <USBD_CtlError>
      err++;
 800b696:	7afb      	ldrb	r3, [r7, #11]
 800b698:	3301      	adds	r3, #1
 800b69a:	72fb      	strb	r3, [r7, #11]
      break;
 800b69c:	bf00      	nop
  }

  if (err != 0U)
 800b69e:	7afb      	ldrb	r3, [r7, #11]
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d11e      	bne.n	800b6e2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800b6a4:	683b      	ldr	r3, [r7, #0]
 800b6a6:	88db      	ldrh	r3, [r3, #6]
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d016      	beq.n	800b6da <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800b6ac:	893b      	ldrh	r3, [r7, #8]
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d00e      	beq.n	800b6d0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800b6b2:	683b      	ldr	r3, [r7, #0]
 800b6b4:	88da      	ldrh	r2, [r3, #6]
 800b6b6:	893b      	ldrh	r3, [r7, #8]
 800b6b8:	4293      	cmp	r3, r2
 800b6ba:	bf28      	it	cs
 800b6bc:	4613      	movcs	r3, r2
 800b6be:	b29b      	uxth	r3, r3
 800b6c0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b6c2:	893b      	ldrh	r3, [r7, #8]
 800b6c4:	461a      	mov	r2, r3
 800b6c6:	68f9      	ldr	r1, [r7, #12]
 800b6c8:	6878      	ldr	r0, [r7, #4]
 800b6ca:	f000 fa5d 	bl	800bb88 <USBD_CtlSendData>
 800b6ce:	e009      	b.n	800b6e4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b6d0:	6839      	ldr	r1, [r7, #0]
 800b6d2:	6878      	ldr	r0, [r7, #4]
 800b6d4:	f000 f9e7 	bl	800baa6 <USBD_CtlError>
 800b6d8:	e004      	b.n	800b6e4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b6da:	6878      	ldr	r0, [r7, #4]
 800b6dc:	f000 faae 	bl	800bc3c <USBD_CtlSendStatus>
 800b6e0:	e000      	b.n	800b6e4 <USBD_GetDescriptor+0x2cc>
    return;
 800b6e2:	bf00      	nop
  }
}
 800b6e4:	3710      	adds	r7, #16
 800b6e6:	46bd      	mov	sp, r7
 800b6e8:	bd80      	pop	{r7, pc}
 800b6ea:	bf00      	nop

0800b6ec <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b6ec:	b580      	push	{r7, lr}
 800b6ee:	b084      	sub	sp, #16
 800b6f0:	af00      	add	r7, sp, #0
 800b6f2:	6078      	str	r0, [r7, #4]
 800b6f4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b6f6:	683b      	ldr	r3, [r7, #0]
 800b6f8:	889b      	ldrh	r3, [r3, #4]
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d131      	bne.n	800b762 <USBD_SetAddress+0x76>
 800b6fe:	683b      	ldr	r3, [r7, #0]
 800b700:	88db      	ldrh	r3, [r3, #6]
 800b702:	2b00      	cmp	r3, #0
 800b704:	d12d      	bne.n	800b762 <USBD_SetAddress+0x76>
 800b706:	683b      	ldr	r3, [r7, #0]
 800b708:	885b      	ldrh	r3, [r3, #2]
 800b70a:	2b7f      	cmp	r3, #127	; 0x7f
 800b70c:	d829      	bhi.n	800b762 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b70e:	683b      	ldr	r3, [r7, #0]
 800b710:	885b      	ldrh	r3, [r3, #2]
 800b712:	b2db      	uxtb	r3, r3
 800b714:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b718:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b720:	b2db      	uxtb	r3, r3
 800b722:	2b03      	cmp	r3, #3
 800b724:	d104      	bne.n	800b730 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b726:	6839      	ldr	r1, [r7, #0]
 800b728:	6878      	ldr	r0, [r7, #4]
 800b72a:	f000 f9bc 	bl	800baa6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b72e:	e01d      	b.n	800b76c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	7bfa      	ldrb	r2, [r7, #15]
 800b734:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b738:	7bfb      	ldrb	r3, [r7, #15]
 800b73a:	4619      	mov	r1, r3
 800b73c:	6878      	ldr	r0, [r7, #4]
 800b73e:	f00d fa41 	bl	8018bc4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b742:	6878      	ldr	r0, [r7, #4]
 800b744:	f000 fa7a 	bl	800bc3c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b748:	7bfb      	ldrb	r3, [r7, #15]
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d004      	beq.n	800b758 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	2202      	movs	r2, #2
 800b752:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b756:	e009      	b.n	800b76c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	2201      	movs	r2, #1
 800b75c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b760:	e004      	b.n	800b76c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b762:	6839      	ldr	r1, [r7, #0]
 800b764:	6878      	ldr	r0, [r7, #4]
 800b766:	f000 f99e 	bl	800baa6 <USBD_CtlError>
  }
}
 800b76a:	bf00      	nop
 800b76c:	bf00      	nop
 800b76e:	3710      	adds	r7, #16
 800b770:	46bd      	mov	sp, r7
 800b772:	bd80      	pop	{r7, pc}

0800b774 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b774:	b580      	push	{r7, lr}
 800b776:	b084      	sub	sp, #16
 800b778:	af00      	add	r7, sp, #0
 800b77a:	6078      	str	r0, [r7, #4]
 800b77c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b77e:	2300      	movs	r3, #0
 800b780:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b782:	683b      	ldr	r3, [r7, #0]
 800b784:	885b      	ldrh	r3, [r3, #2]
 800b786:	b2da      	uxtb	r2, r3
 800b788:	4b4e      	ldr	r3, [pc, #312]	; (800b8c4 <USBD_SetConfig+0x150>)
 800b78a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b78c:	4b4d      	ldr	r3, [pc, #308]	; (800b8c4 <USBD_SetConfig+0x150>)
 800b78e:	781b      	ldrb	r3, [r3, #0]
 800b790:	2b01      	cmp	r3, #1
 800b792:	d905      	bls.n	800b7a0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b794:	6839      	ldr	r1, [r7, #0]
 800b796:	6878      	ldr	r0, [r7, #4]
 800b798:	f000 f985 	bl	800baa6 <USBD_CtlError>
    return USBD_FAIL;
 800b79c:	2303      	movs	r3, #3
 800b79e:	e08c      	b.n	800b8ba <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b7a6:	b2db      	uxtb	r3, r3
 800b7a8:	2b02      	cmp	r3, #2
 800b7aa:	d002      	beq.n	800b7b2 <USBD_SetConfig+0x3e>
 800b7ac:	2b03      	cmp	r3, #3
 800b7ae:	d029      	beq.n	800b804 <USBD_SetConfig+0x90>
 800b7b0:	e075      	b.n	800b89e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b7b2:	4b44      	ldr	r3, [pc, #272]	; (800b8c4 <USBD_SetConfig+0x150>)
 800b7b4:	781b      	ldrb	r3, [r3, #0]
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d020      	beq.n	800b7fc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800b7ba:	4b42      	ldr	r3, [pc, #264]	; (800b8c4 <USBD_SetConfig+0x150>)
 800b7bc:	781b      	ldrb	r3, [r3, #0]
 800b7be:	461a      	mov	r2, r3
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b7c4:	4b3f      	ldr	r3, [pc, #252]	; (800b8c4 <USBD_SetConfig+0x150>)
 800b7c6:	781b      	ldrb	r3, [r3, #0]
 800b7c8:	4619      	mov	r1, r3
 800b7ca:	6878      	ldr	r0, [r7, #4]
 800b7cc:	f7fe ffe7 	bl	800a79e <USBD_SetClassConfig>
 800b7d0:	4603      	mov	r3, r0
 800b7d2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b7d4:	7bfb      	ldrb	r3, [r7, #15]
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d008      	beq.n	800b7ec <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800b7da:	6839      	ldr	r1, [r7, #0]
 800b7dc:	6878      	ldr	r0, [r7, #4]
 800b7de:	f000 f962 	bl	800baa6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	2202      	movs	r2, #2
 800b7e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b7ea:	e065      	b.n	800b8b8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b7ec:	6878      	ldr	r0, [r7, #4]
 800b7ee:	f000 fa25 	bl	800bc3c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	2203      	movs	r2, #3
 800b7f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b7fa:	e05d      	b.n	800b8b8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b7fc:	6878      	ldr	r0, [r7, #4]
 800b7fe:	f000 fa1d 	bl	800bc3c <USBD_CtlSendStatus>
      break;
 800b802:	e059      	b.n	800b8b8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b804:	4b2f      	ldr	r3, [pc, #188]	; (800b8c4 <USBD_SetConfig+0x150>)
 800b806:	781b      	ldrb	r3, [r3, #0]
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d112      	bne.n	800b832 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	2202      	movs	r2, #2
 800b810:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800b814:	4b2b      	ldr	r3, [pc, #172]	; (800b8c4 <USBD_SetConfig+0x150>)
 800b816:	781b      	ldrb	r3, [r3, #0]
 800b818:	461a      	mov	r2, r3
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b81e:	4b29      	ldr	r3, [pc, #164]	; (800b8c4 <USBD_SetConfig+0x150>)
 800b820:	781b      	ldrb	r3, [r3, #0]
 800b822:	4619      	mov	r1, r3
 800b824:	6878      	ldr	r0, [r7, #4]
 800b826:	f7fe ffd6 	bl	800a7d6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b82a:	6878      	ldr	r0, [r7, #4]
 800b82c:	f000 fa06 	bl	800bc3c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b830:	e042      	b.n	800b8b8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800b832:	4b24      	ldr	r3, [pc, #144]	; (800b8c4 <USBD_SetConfig+0x150>)
 800b834:	781b      	ldrb	r3, [r3, #0]
 800b836:	461a      	mov	r2, r3
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	685b      	ldr	r3, [r3, #4]
 800b83c:	429a      	cmp	r2, r3
 800b83e:	d02a      	beq.n	800b896 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	685b      	ldr	r3, [r3, #4]
 800b844:	b2db      	uxtb	r3, r3
 800b846:	4619      	mov	r1, r3
 800b848:	6878      	ldr	r0, [r7, #4]
 800b84a:	f7fe ffc4 	bl	800a7d6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b84e:	4b1d      	ldr	r3, [pc, #116]	; (800b8c4 <USBD_SetConfig+0x150>)
 800b850:	781b      	ldrb	r3, [r3, #0]
 800b852:	461a      	mov	r2, r3
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b858:	4b1a      	ldr	r3, [pc, #104]	; (800b8c4 <USBD_SetConfig+0x150>)
 800b85a:	781b      	ldrb	r3, [r3, #0]
 800b85c:	4619      	mov	r1, r3
 800b85e:	6878      	ldr	r0, [r7, #4]
 800b860:	f7fe ff9d 	bl	800a79e <USBD_SetClassConfig>
 800b864:	4603      	mov	r3, r0
 800b866:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b868:	7bfb      	ldrb	r3, [r7, #15]
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d00f      	beq.n	800b88e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800b86e:	6839      	ldr	r1, [r7, #0]
 800b870:	6878      	ldr	r0, [r7, #4]
 800b872:	f000 f918 	bl	800baa6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	685b      	ldr	r3, [r3, #4]
 800b87a:	b2db      	uxtb	r3, r3
 800b87c:	4619      	mov	r1, r3
 800b87e:	6878      	ldr	r0, [r7, #4]
 800b880:	f7fe ffa9 	bl	800a7d6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	2202      	movs	r2, #2
 800b888:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b88c:	e014      	b.n	800b8b8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b88e:	6878      	ldr	r0, [r7, #4]
 800b890:	f000 f9d4 	bl	800bc3c <USBD_CtlSendStatus>
      break;
 800b894:	e010      	b.n	800b8b8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b896:	6878      	ldr	r0, [r7, #4]
 800b898:	f000 f9d0 	bl	800bc3c <USBD_CtlSendStatus>
      break;
 800b89c:	e00c      	b.n	800b8b8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800b89e:	6839      	ldr	r1, [r7, #0]
 800b8a0:	6878      	ldr	r0, [r7, #4]
 800b8a2:	f000 f900 	bl	800baa6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b8a6:	4b07      	ldr	r3, [pc, #28]	; (800b8c4 <USBD_SetConfig+0x150>)
 800b8a8:	781b      	ldrb	r3, [r3, #0]
 800b8aa:	4619      	mov	r1, r3
 800b8ac:	6878      	ldr	r0, [r7, #4]
 800b8ae:	f7fe ff92 	bl	800a7d6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b8b2:	2303      	movs	r3, #3
 800b8b4:	73fb      	strb	r3, [r7, #15]
      break;
 800b8b6:	bf00      	nop
  }

  return ret;
 800b8b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8ba:	4618      	mov	r0, r3
 800b8bc:	3710      	adds	r7, #16
 800b8be:	46bd      	mov	sp, r7
 800b8c0:	bd80      	pop	{r7, pc}
 800b8c2:	bf00      	nop
 800b8c4:	20002a28 	.word	0x20002a28

0800b8c8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b8c8:	b580      	push	{r7, lr}
 800b8ca:	b082      	sub	sp, #8
 800b8cc:	af00      	add	r7, sp, #0
 800b8ce:	6078      	str	r0, [r7, #4]
 800b8d0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b8d2:	683b      	ldr	r3, [r7, #0]
 800b8d4:	88db      	ldrh	r3, [r3, #6]
 800b8d6:	2b01      	cmp	r3, #1
 800b8d8:	d004      	beq.n	800b8e4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b8da:	6839      	ldr	r1, [r7, #0]
 800b8dc:	6878      	ldr	r0, [r7, #4]
 800b8de:	f000 f8e2 	bl	800baa6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b8e2:	e023      	b.n	800b92c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b8ea:	b2db      	uxtb	r3, r3
 800b8ec:	2b02      	cmp	r3, #2
 800b8ee:	dc02      	bgt.n	800b8f6 <USBD_GetConfig+0x2e>
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	dc03      	bgt.n	800b8fc <USBD_GetConfig+0x34>
 800b8f4:	e015      	b.n	800b922 <USBD_GetConfig+0x5a>
 800b8f6:	2b03      	cmp	r3, #3
 800b8f8:	d00b      	beq.n	800b912 <USBD_GetConfig+0x4a>
 800b8fa:	e012      	b.n	800b922 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	2200      	movs	r2, #0
 800b900:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	3308      	adds	r3, #8
 800b906:	2201      	movs	r2, #1
 800b908:	4619      	mov	r1, r3
 800b90a:	6878      	ldr	r0, [r7, #4]
 800b90c:	f000 f93c 	bl	800bb88 <USBD_CtlSendData>
        break;
 800b910:	e00c      	b.n	800b92c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	3304      	adds	r3, #4
 800b916:	2201      	movs	r2, #1
 800b918:	4619      	mov	r1, r3
 800b91a:	6878      	ldr	r0, [r7, #4]
 800b91c:	f000 f934 	bl	800bb88 <USBD_CtlSendData>
        break;
 800b920:	e004      	b.n	800b92c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b922:	6839      	ldr	r1, [r7, #0]
 800b924:	6878      	ldr	r0, [r7, #4]
 800b926:	f000 f8be 	bl	800baa6 <USBD_CtlError>
        break;
 800b92a:	bf00      	nop
}
 800b92c:	bf00      	nop
 800b92e:	3708      	adds	r7, #8
 800b930:	46bd      	mov	sp, r7
 800b932:	bd80      	pop	{r7, pc}

0800b934 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b934:	b580      	push	{r7, lr}
 800b936:	b082      	sub	sp, #8
 800b938:	af00      	add	r7, sp, #0
 800b93a:	6078      	str	r0, [r7, #4]
 800b93c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b944:	b2db      	uxtb	r3, r3
 800b946:	3b01      	subs	r3, #1
 800b948:	2b02      	cmp	r3, #2
 800b94a:	d81e      	bhi.n	800b98a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b94c:	683b      	ldr	r3, [r7, #0]
 800b94e:	88db      	ldrh	r3, [r3, #6]
 800b950:	2b02      	cmp	r3, #2
 800b952:	d004      	beq.n	800b95e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b954:	6839      	ldr	r1, [r7, #0]
 800b956:	6878      	ldr	r0, [r7, #4]
 800b958:	f000 f8a5 	bl	800baa6 <USBD_CtlError>
        break;
 800b95c:	e01a      	b.n	800b994 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	2201      	movs	r2, #1
 800b962:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d005      	beq.n	800b97a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	68db      	ldr	r3, [r3, #12]
 800b972:	f043 0202 	orr.w	r2, r3, #2
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	330c      	adds	r3, #12
 800b97e:	2202      	movs	r2, #2
 800b980:	4619      	mov	r1, r3
 800b982:	6878      	ldr	r0, [r7, #4]
 800b984:	f000 f900 	bl	800bb88 <USBD_CtlSendData>
      break;
 800b988:	e004      	b.n	800b994 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b98a:	6839      	ldr	r1, [r7, #0]
 800b98c:	6878      	ldr	r0, [r7, #4]
 800b98e:	f000 f88a 	bl	800baa6 <USBD_CtlError>
      break;
 800b992:	bf00      	nop
  }
}
 800b994:	bf00      	nop
 800b996:	3708      	adds	r7, #8
 800b998:	46bd      	mov	sp, r7
 800b99a:	bd80      	pop	{r7, pc}

0800b99c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b99c:	b580      	push	{r7, lr}
 800b99e:	b082      	sub	sp, #8
 800b9a0:	af00      	add	r7, sp, #0
 800b9a2:	6078      	str	r0, [r7, #4]
 800b9a4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b9a6:	683b      	ldr	r3, [r7, #0]
 800b9a8:	885b      	ldrh	r3, [r3, #2]
 800b9aa:	2b01      	cmp	r3, #1
 800b9ac:	d107      	bne.n	800b9be <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	2201      	movs	r2, #1
 800b9b2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b9b6:	6878      	ldr	r0, [r7, #4]
 800b9b8:	f000 f940 	bl	800bc3c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b9bc:	e013      	b.n	800b9e6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b9be:	683b      	ldr	r3, [r7, #0]
 800b9c0:	885b      	ldrh	r3, [r3, #2]
 800b9c2:	2b02      	cmp	r3, #2
 800b9c4:	d10b      	bne.n	800b9de <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800b9c6:	683b      	ldr	r3, [r7, #0]
 800b9c8:	889b      	ldrh	r3, [r3, #4]
 800b9ca:	0a1b      	lsrs	r3, r3, #8
 800b9cc:	b29b      	uxth	r3, r3
 800b9ce:	b2da      	uxtb	r2, r3
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b9d6:	6878      	ldr	r0, [r7, #4]
 800b9d8:	f000 f930 	bl	800bc3c <USBD_CtlSendStatus>
}
 800b9dc:	e003      	b.n	800b9e6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b9de:	6839      	ldr	r1, [r7, #0]
 800b9e0:	6878      	ldr	r0, [r7, #4]
 800b9e2:	f000 f860 	bl	800baa6 <USBD_CtlError>
}
 800b9e6:	bf00      	nop
 800b9e8:	3708      	adds	r7, #8
 800b9ea:	46bd      	mov	sp, r7
 800b9ec:	bd80      	pop	{r7, pc}

0800b9ee <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b9ee:	b580      	push	{r7, lr}
 800b9f0:	b082      	sub	sp, #8
 800b9f2:	af00      	add	r7, sp, #0
 800b9f4:	6078      	str	r0, [r7, #4]
 800b9f6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b9fe:	b2db      	uxtb	r3, r3
 800ba00:	3b01      	subs	r3, #1
 800ba02:	2b02      	cmp	r3, #2
 800ba04:	d80b      	bhi.n	800ba1e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ba06:	683b      	ldr	r3, [r7, #0]
 800ba08:	885b      	ldrh	r3, [r3, #2]
 800ba0a:	2b01      	cmp	r3, #1
 800ba0c:	d10c      	bne.n	800ba28 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	2200      	movs	r2, #0
 800ba12:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ba16:	6878      	ldr	r0, [r7, #4]
 800ba18:	f000 f910 	bl	800bc3c <USBD_CtlSendStatus>
      }
      break;
 800ba1c:	e004      	b.n	800ba28 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800ba1e:	6839      	ldr	r1, [r7, #0]
 800ba20:	6878      	ldr	r0, [r7, #4]
 800ba22:	f000 f840 	bl	800baa6 <USBD_CtlError>
      break;
 800ba26:	e000      	b.n	800ba2a <USBD_ClrFeature+0x3c>
      break;
 800ba28:	bf00      	nop
  }
}
 800ba2a:	bf00      	nop
 800ba2c:	3708      	adds	r7, #8
 800ba2e:	46bd      	mov	sp, r7
 800ba30:	bd80      	pop	{r7, pc}

0800ba32 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ba32:	b580      	push	{r7, lr}
 800ba34:	b084      	sub	sp, #16
 800ba36:	af00      	add	r7, sp, #0
 800ba38:	6078      	str	r0, [r7, #4]
 800ba3a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800ba3c:	683b      	ldr	r3, [r7, #0]
 800ba3e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	781a      	ldrb	r2, [r3, #0]
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	3301      	adds	r3, #1
 800ba4c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	781a      	ldrb	r2, [r3, #0]
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	3301      	adds	r3, #1
 800ba5a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800ba5c:	68f8      	ldr	r0, [r7, #12]
 800ba5e:	f7ff fa41 	bl	800aee4 <SWAPBYTE>
 800ba62:	4603      	mov	r3, r0
 800ba64:	461a      	mov	r2, r3
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	3301      	adds	r3, #1
 800ba6e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	3301      	adds	r3, #1
 800ba74:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800ba76:	68f8      	ldr	r0, [r7, #12]
 800ba78:	f7ff fa34 	bl	800aee4 <SWAPBYTE>
 800ba7c:	4603      	mov	r3, r0
 800ba7e:	461a      	mov	r2, r3
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	3301      	adds	r3, #1
 800ba88:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	3301      	adds	r3, #1
 800ba8e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800ba90:	68f8      	ldr	r0, [r7, #12]
 800ba92:	f7ff fa27 	bl	800aee4 <SWAPBYTE>
 800ba96:	4603      	mov	r3, r0
 800ba98:	461a      	mov	r2, r3
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	80da      	strh	r2, [r3, #6]
}
 800ba9e:	bf00      	nop
 800baa0:	3710      	adds	r7, #16
 800baa2:	46bd      	mov	sp, r7
 800baa4:	bd80      	pop	{r7, pc}

0800baa6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800baa6:	b580      	push	{r7, lr}
 800baa8:	b082      	sub	sp, #8
 800baaa:	af00      	add	r7, sp, #0
 800baac:	6078      	str	r0, [r7, #4]
 800baae:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800bab0:	2180      	movs	r1, #128	; 0x80
 800bab2:	6878      	ldr	r0, [r7, #4]
 800bab4:	f00d f81c 	bl	8018af0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800bab8:	2100      	movs	r1, #0
 800baba:	6878      	ldr	r0, [r7, #4]
 800babc:	f00d f818 	bl	8018af0 <USBD_LL_StallEP>
}
 800bac0:	bf00      	nop
 800bac2:	3708      	adds	r7, #8
 800bac4:	46bd      	mov	sp, r7
 800bac6:	bd80      	pop	{r7, pc}

0800bac8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800bac8:	b580      	push	{r7, lr}
 800baca:	b086      	sub	sp, #24
 800bacc:	af00      	add	r7, sp, #0
 800bace:	60f8      	str	r0, [r7, #12]
 800bad0:	60b9      	str	r1, [r7, #8]
 800bad2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800bad4:	2300      	movs	r3, #0
 800bad6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	2b00      	cmp	r3, #0
 800badc:	d036      	beq.n	800bb4c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800bae2:	6938      	ldr	r0, [r7, #16]
 800bae4:	f000 f836 	bl	800bb54 <USBD_GetLen>
 800bae8:	4603      	mov	r3, r0
 800baea:	3301      	adds	r3, #1
 800baec:	b29b      	uxth	r3, r3
 800baee:	005b      	lsls	r3, r3, #1
 800baf0:	b29a      	uxth	r2, r3
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800baf6:	7dfb      	ldrb	r3, [r7, #23]
 800baf8:	68ba      	ldr	r2, [r7, #8]
 800bafa:	4413      	add	r3, r2
 800bafc:	687a      	ldr	r2, [r7, #4]
 800bafe:	7812      	ldrb	r2, [r2, #0]
 800bb00:	701a      	strb	r2, [r3, #0]
  idx++;
 800bb02:	7dfb      	ldrb	r3, [r7, #23]
 800bb04:	3301      	adds	r3, #1
 800bb06:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800bb08:	7dfb      	ldrb	r3, [r7, #23]
 800bb0a:	68ba      	ldr	r2, [r7, #8]
 800bb0c:	4413      	add	r3, r2
 800bb0e:	2203      	movs	r2, #3
 800bb10:	701a      	strb	r2, [r3, #0]
  idx++;
 800bb12:	7dfb      	ldrb	r3, [r7, #23]
 800bb14:	3301      	adds	r3, #1
 800bb16:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800bb18:	e013      	b.n	800bb42 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800bb1a:	7dfb      	ldrb	r3, [r7, #23]
 800bb1c:	68ba      	ldr	r2, [r7, #8]
 800bb1e:	4413      	add	r3, r2
 800bb20:	693a      	ldr	r2, [r7, #16]
 800bb22:	7812      	ldrb	r2, [r2, #0]
 800bb24:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800bb26:	693b      	ldr	r3, [r7, #16]
 800bb28:	3301      	adds	r3, #1
 800bb2a:	613b      	str	r3, [r7, #16]
    idx++;
 800bb2c:	7dfb      	ldrb	r3, [r7, #23]
 800bb2e:	3301      	adds	r3, #1
 800bb30:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800bb32:	7dfb      	ldrb	r3, [r7, #23]
 800bb34:	68ba      	ldr	r2, [r7, #8]
 800bb36:	4413      	add	r3, r2
 800bb38:	2200      	movs	r2, #0
 800bb3a:	701a      	strb	r2, [r3, #0]
    idx++;
 800bb3c:	7dfb      	ldrb	r3, [r7, #23]
 800bb3e:	3301      	adds	r3, #1
 800bb40:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800bb42:	693b      	ldr	r3, [r7, #16]
 800bb44:	781b      	ldrb	r3, [r3, #0]
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d1e7      	bne.n	800bb1a <USBD_GetString+0x52>
 800bb4a:	e000      	b.n	800bb4e <USBD_GetString+0x86>
    return;
 800bb4c:	bf00      	nop
  }
}
 800bb4e:	3718      	adds	r7, #24
 800bb50:	46bd      	mov	sp, r7
 800bb52:	bd80      	pop	{r7, pc}

0800bb54 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800bb54:	b480      	push	{r7}
 800bb56:	b085      	sub	sp, #20
 800bb58:	af00      	add	r7, sp, #0
 800bb5a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800bb5c:	2300      	movs	r3, #0
 800bb5e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800bb64:	e005      	b.n	800bb72 <USBD_GetLen+0x1e>
  {
    len++;
 800bb66:	7bfb      	ldrb	r3, [r7, #15]
 800bb68:	3301      	adds	r3, #1
 800bb6a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800bb6c:	68bb      	ldr	r3, [r7, #8]
 800bb6e:	3301      	adds	r3, #1
 800bb70:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800bb72:	68bb      	ldr	r3, [r7, #8]
 800bb74:	781b      	ldrb	r3, [r3, #0]
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d1f5      	bne.n	800bb66 <USBD_GetLen+0x12>
  }

  return len;
 800bb7a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb7c:	4618      	mov	r0, r3
 800bb7e:	3714      	adds	r7, #20
 800bb80:	46bd      	mov	sp, r7
 800bb82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb86:	4770      	bx	lr

0800bb88 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800bb88:	b580      	push	{r7, lr}
 800bb8a:	b084      	sub	sp, #16
 800bb8c:	af00      	add	r7, sp, #0
 800bb8e:	60f8      	str	r0, [r7, #12]
 800bb90:	60b9      	str	r1, [r7, #8]
 800bb92:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	2202      	movs	r2, #2
 800bb98:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	687a      	ldr	r2, [r7, #4]
 800bba0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	687a      	ldr	r2, [r7, #4]
 800bba6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	68ba      	ldr	r2, [r7, #8]
 800bbac:	2100      	movs	r1, #0
 800bbae:	68f8      	ldr	r0, [r7, #12]
 800bbb0:	f00d f827 	bl	8018c02 <USBD_LL_Transmit>

  return USBD_OK;
 800bbb4:	2300      	movs	r3, #0
}
 800bbb6:	4618      	mov	r0, r3
 800bbb8:	3710      	adds	r7, #16
 800bbba:	46bd      	mov	sp, r7
 800bbbc:	bd80      	pop	{r7, pc}

0800bbbe <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800bbbe:	b580      	push	{r7, lr}
 800bbc0:	b084      	sub	sp, #16
 800bbc2:	af00      	add	r7, sp, #0
 800bbc4:	60f8      	str	r0, [r7, #12]
 800bbc6:	60b9      	str	r1, [r7, #8]
 800bbc8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	68ba      	ldr	r2, [r7, #8]
 800bbce:	2100      	movs	r1, #0
 800bbd0:	68f8      	ldr	r0, [r7, #12]
 800bbd2:	f00d f816 	bl	8018c02 <USBD_LL_Transmit>

  return USBD_OK;
 800bbd6:	2300      	movs	r3, #0
}
 800bbd8:	4618      	mov	r0, r3
 800bbda:	3710      	adds	r7, #16
 800bbdc:	46bd      	mov	sp, r7
 800bbde:	bd80      	pop	{r7, pc}

0800bbe0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800bbe0:	b580      	push	{r7, lr}
 800bbe2:	b084      	sub	sp, #16
 800bbe4:	af00      	add	r7, sp, #0
 800bbe6:	60f8      	str	r0, [r7, #12]
 800bbe8:	60b9      	str	r1, [r7, #8]
 800bbea:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	2203      	movs	r2, #3
 800bbf0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	687a      	ldr	r2, [r7, #4]
 800bbf8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	687a      	ldr	r2, [r7, #4]
 800bc00:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	68ba      	ldr	r2, [r7, #8]
 800bc08:	2100      	movs	r1, #0
 800bc0a:	68f8      	ldr	r0, [r7, #12]
 800bc0c:	f00d f81a 	bl	8018c44 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bc10:	2300      	movs	r3, #0
}
 800bc12:	4618      	mov	r0, r3
 800bc14:	3710      	adds	r7, #16
 800bc16:	46bd      	mov	sp, r7
 800bc18:	bd80      	pop	{r7, pc}

0800bc1a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800bc1a:	b580      	push	{r7, lr}
 800bc1c:	b084      	sub	sp, #16
 800bc1e:	af00      	add	r7, sp, #0
 800bc20:	60f8      	str	r0, [r7, #12]
 800bc22:	60b9      	str	r1, [r7, #8]
 800bc24:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	68ba      	ldr	r2, [r7, #8]
 800bc2a:	2100      	movs	r1, #0
 800bc2c:	68f8      	ldr	r0, [r7, #12]
 800bc2e:	f00d f809 	bl	8018c44 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bc32:	2300      	movs	r3, #0
}
 800bc34:	4618      	mov	r0, r3
 800bc36:	3710      	adds	r7, #16
 800bc38:	46bd      	mov	sp, r7
 800bc3a:	bd80      	pop	{r7, pc}

0800bc3c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800bc3c:	b580      	push	{r7, lr}
 800bc3e:	b082      	sub	sp, #8
 800bc40:	af00      	add	r7, sp, #0
 800bc42:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	2204      	movs	r2, #4
 800bc48:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800bc4c:	2300      	movs	r3, #0
 800bc4e:	2200      	movs	r2, #0
 800bc50:	2100      	movs	r1, #0
 800bc52:	6878      	ldr	r0, [r7, #4]
 800bc54:	f00c ffd5 	bl	8018c02 <USBD_LL_Transmit>

  return USBD_OK;
 800bc58:	2300      	movs	r3, #0
}
 800bc5a:	4618      	mov	r0, r3
 800bc5c:	3708      	adds	r7, #8
 800bc5e:	46bd      	mov	sp, r7
 800bc60:	bd80      	pop	{r7, pc}

0800bc62 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800bc62:	b580      	push	{r7, lr}
 800bc64:	b082      	sub	sp, #8
 800bc66:	af00      	add	r7, sp, #0
 800bc68:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	2205      	movs	r2, #5
 800bc6e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bc72:	2300      	movs	r3, #0
 800bc74:	2200      	movs	r2, #0
 800bc76:	2100      	movs	r1, #0
 800bc78:	6878      	ldr	r0, [r7, #4]
 800bc7a:	f00c ffe3 	bl	8018c44 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bc7e:	2300      	movs	r3, #0
}
 800bc80:	4618      	mov	r0, r3
 800bc82:	3708      	adds	r7, #8
 800bc84:	46bd      	mov	sp, r7
 800bc86:	bd80      	pop	{r7, pc}

0800bc88 <arm_mat_scale_f32>:
#else
arm_status arm_mat_scale_f32(
  const arm_matrix_instance_f32 * pSrc,
        float32_t                 scale,
        arm_matrix_instance_f32 * pDst)
{
 800bc88:	b480      	push	{r7}
 800bc8a:	b08b      	sub	sp, #44	; 0x2c
 800bc8c:	af00      	add	r7, sp, #0
 800bc8e:	60f8      	str	r0, [r7, #12]
 800bc90:	ed87 0a02 	vstr	s0, [r7, #8]
 800bc94:	6079      	str	r1, [r7, #4]
  float32_t *pIn = pSrc->pData;                  /* Input data matrix pointer */
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	685b      	ldr	r3, [r3, #4]
 800bc9a:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	685b      	ldr	r3, [r3, #4]
 800bca0:	623b      	str	r3, [r7, #32]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrc->numRows * pSrc->numCols;
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	881b      	ldrh	r3, [r3, #0]
 800bca6:	461a      	mov	r2, r3
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	885b      	ldrh	r3, [r3, #2]
 800bcac:	fb02 f303 	mul.w	r3, r2, r3
 800bcb0:	61bb      	str	r3, [r7, #24]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 800bcb2:	69bb      	ldr	r3, [r7, #24]
 800bcb4:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 800bcb6:	e010      	b.n	800bcda <arm_mat_scale_f32+0x52>
    {
      /* C(m,n) = A(m,n) * scale */

      /* Scale and store result in destination buffer. */
      *pOut++ = (*pIn++) * scale;
 800bcb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcba:	1d1a      	adds	r2, r3, #4
 800bcbc:	627a      	str	r2, [r7, #36]	; 0x24
 800bcbe:	ed93 7a00 	vldr	s14, [r3]
 800bcc2:	6a3b      	ldr	r3, [r7, #32]
 800bcc4:	1d1a      	adds	r2, r3, #4
 800bcc6:	623a      	str	r2, [r7, #32]
 800bcc8:	edd7 7a02 	vldr	s15, [r7, #8]
 800bccc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bcd0:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 800bcd4:	69fb      	ldr	r3, [r7, #28]
 800bcd6:	3b01      	subs	r3, #1
 800bcd8:	61fb      	str	r3, [r7, #28]
    while (blkCnt > 0U)
 800bcda:	69fb      	ldr	r3, [r7, #28]
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d1eb      	bne.n	800bcb8 <arm_mat_scale_f32+0x30>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800bce0:	2300      	movs	r3, #0
 800bce2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return to application */
  return (status);
 800bce4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bce8:	4618      	mov	r0, r3
 800bcea:	372c      	adds	r7, #44	; 0x2c
 800bcec:	46bd      	mov	sp, r7
 800bcee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf2:	4770      	bx	lr

0800bcf4 <arm_mat_trans_f32>:
}
#else
arm_status arm_mat_trans_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 800bcf4:	b480      	push	{r7}
 800bcf6:	b08b      	sub	sp, #44	; 0x2c
 800bcf8:	af00      	add	r7, sp, #0
 800bcfa:	6078      	str	r0, [r7, #4]
 800bcfc:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	685b      	ldr	r3, [r3, #4]
 800bd02:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800bd04:	683b      	ldr	r3, [r7, #0]
 800bd06:	685b      	ldr	r3, [r3, #4]
 800bd08:	613b      	str	r3, [r7, #16]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  uint16_t nRows = pSrc->numRows;                /* number of rows */
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	881b      	ldrh	r3, [r3, #0]
 800bd0e:	81fb      	strh	r3, [r7, #14]
  uint16_t nCols = pSrc->numCols;                /* number of columns */
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	885b      	ldrh	r3, [r3, #2]
 800bd14:	81bb      	strh	r3, [r7, #12]
  uint32_t col, row = nRows, i = 0U;             /* Loop counters */
 800bd16:	89fb      	ldrh	r3, [r7, #14]
 800bd18:	61bb      	str	r3, [r7, #24]
 800bd1a:	2300      	movs	r3, #0
 800bd1c:	617b      	str	r3, [r7, #20]
    /* Matrix transpose by exchanging the rows with columns */
    /* row loop */
    do
    {
      /* Pointer px is set to starting address of column being processed */
      px = pOut + i;
 800bd1e:	697b      	ldr	r3, [r7, #20]
 800bd20:	009b      	lsls	r3, r3, #2
 800bd22:	693a      	ldr	r2, [r7, #16]
 800bd24:	4413      	add	r3, r2
 800bd26:	623b      	str	r3, [r7, #32]
      col = nCols % 0x4U;

#else

      /* Initialize col with number of samples */
      col = nCols;
 800bd28:	89bb      	ldrh	r3, [r7, #12]
 800bd2a:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

      while (col > 0U)
 800bd2c:	e00d      	b.n	800bd4a <arm_mat_trans_f32+0x56>
      {
        /* Read and store input element in destination */
        *px = *pIn++;
 800bd2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd30:	1d1a      	adds	r2, r3, #4
 800bd32:	627a      	str	r2, [r7, #36]	; 0x24
 800bd34:	681a      	ldr	r2, [r3, #0]
 800bd36:	6a3b      	ldr	r3, [r7, #32]
 800bd38:	601a      	str	r2, [r3, #0]

        /* Update pointer px to point to next row of transposed matrix */
        px += nRows;
 800bd3a:	89fb      	ldrh	r3, [r7, #14]
 800bd3c:	009b      	lsls	r3, r3, #2
 800bd3e:	6a3a      	ldr	r2, [r7, #32]
 800bd40:	4413      	add	r3, r2
 800bd42:	623b      	str	r3, [r7, #32]

        /* Decrement column loop counter */
        col--;
 800bd44:	69fb      	ldr	r3, [r7, #28]
 800bd46:	3b01      	subs	r3, #1
 800bd48:	61fb      	str	r3, [r7, #28]
      while (col > 0U)
 800bd4a:	69fb      	ldr	r3, [r7, #28]
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d1ee      	bne.n	800bd2e <arm_mat_trans_f32+0x3a>
      }

      i++;
 800bd50:	697b      	ldr	r3, [r7, #20]
 800bd52:	3301      	adds	r3, #1
 800bd54:	617b      	str	r3, [r7, #20]

      /* Decrement row loop counter */
      row--;
 800bd56:	69bb      	ldr	r3, [r7, #24]
 800bd58:	3b01      	subs	r3, #1
 800bd5a:	61bb      	str	r3, [r7, #24]

    } while (row > 0U);          /* row loop end */
 800bd5c:	69bb      	ldr	r3, [r7, #24]
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d1dd      	bne.n	800bd1e <arm_mat_trans_f32+0x2a>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800bd62:	2300      	movs	r3, #0
 800bd64:	72fb      	strb	r3, [r7, #11]
  }

  /* Return to application */
  return (status);
 800bd66:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800bd6a:	4618      	mov	r0, r3
 800bd6c:	372c      	adds	r7, #44	; 0x2c
 800bd6e:	46bd      	mov	sp, r7
 800bd70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd74:	4770      	bx	lr

0800bd76 <arm_max_f32>:
void arm_max_f32(
  const float32_t * pSrc,
        uint32_t blockSize,
        float32_t * pResult,
        uint32_t * pIndex)
{
 800bd76:	b480      	push	{r7}
 800bd78:	b089      	sub	sp, #36	; 0x24
 800bd7a:	af00      	add	r7, sp, #0
 800bd7c:	60f8      	str	r0, [r7, #12]
 800bd7e:	60b9      	str	r1, [r7, #8]
 800bd80:	607a      	str	r2, [r7, #4]
 800bd82:	603b      	str	r3, [r7, #0]
#if defined (ARM_MATH_LOOPUNROLL) && !defined(ARM_MATH_AUTOVECTORIZE)
        uint32_t index;                                /* index of maximum value */
#endif

  /* Initialise index value to zero. */
  outIndex = 0U;
 800bd84:	2300      	movs	r3, #0
 800bd86:	617b      	str	r3, [r7, #20]

  /* Load first input value that act as reference value for comparision */
  out = *pSrc++;
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	1d1a      	adds	r2, r3, #4
 800bd8c:	60fa      	str	r2, [r7, #12]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	61fb      	str	r3, [r7, #28]
  blkCnt = (blockSize - 1U) % 4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = (blockSize - 1U);
 800bd92:	68bb      	ldr	r3, [r7, #8]
 800bd94:	3b01      	subs	r3, #1
 800bd96:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 800bd98:	e016      	b.n	800bdc8 <arm_max_f32+0x52>
  {
    /* Initialize maxVal to the next consecutive values one by one */
    maxVal = *pSrc++;
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	1d1a      	adds	r2, r3, #4
 800bd9e:	60fa      	str	r2, [r7, #12]
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	613b      	str	r3, [r7, #16]

    /* compare for the maximum value */
    if (out < maxVal)
 800bda4:	ed97 7a07 	vldr	s14, [r7, #28]
 800bda8:	edd7 7a04 	vldr	s15, [r7, #16]
 800bdac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800bdb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bdb4:	d505      	bpl.n	800bdc2 <arm_max_f32+0x4c>
    {
      /* Update the maximum value and it's index */
      out = maxVal;
 800bdb6:	693b      	ldr	r3, [r7, #16]
 800bdb8:	61fb      	str	r3, [r7, #28]
      outIndex = blockSize - blkCnt;
 800bdba:	68ba      	ldr	r2, [r7, #8]
 800bdbc:	69bb      	ldr	r3, [r7, #24]
 800bdbe:	1ad3      	subs	r3, r2, r3
 800bdc0:	617b      	str	r3, [r7, #20]
    }

    /* Decrement loop counter */
    blkCnt--;
 800bdc2:	69bb      	ldr	r3, [r7, #24]
 800bdc4:	3b01      	subs	r3, #1
 800bdc6:	61bb      	str	r3, [r7, #24]
  while (blkCnt > 0U)
 800bdc8:	69bb      	ldr	r3, [r7, #24]
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d1e5      	bne.n	800bd9a <arm_max_f32+0x24>
  }

  /* Store the maximum value and it's index into destination pointers */
  *pResult = out;
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	69fa      	ldr	r2, [r7, #28]
 800bdd2:	601a      	str	r2, [r3, #0]
  *pIndex = outIndex;
 800bdd4:	683b      	ldr	r3, [r7, #0]
 800bdd6:	697a      	ldr	r2, [r7, #20]
 800bdd8:	601a      	str	r2, [r3, #0]
}
 800bdda:	bf00      	nop
 800bddc:	3724      	adds	r7, #36	; 0x24
 800bdde:	46bd      	mov	sp, r7
 800bde0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde4:	4770      	bx	lr

0800bde6 <arm_mean_f32>:
#else
void arm_mean_f32(
  const float32_t * pSrc,
        uint32_t blockSize,
        float32_t * pResult)
{
 800bde6:	b480      	push	{r7}
 800bde8:	b087      	sub	sp, #28
 800bdea:	af00      	add	r7, sp, #0
 800bdec:	60f8      	str	r0, [r7, #12]
 800bdee:	60b9      	str	r1, [r7, #8]
 800bdf0:	607a      	str	r2, [r7, #4]
        uint32_t blkCnt;                               /* Loop counter */
        float32_t sum = 0.0f;                          /* Temporary result storage */
 800bdf2:	f04f 0300 	mov.w	r3, #0
 800bdf6:	613b      	str	r3, [r7, #16]
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;
 800bdf8:	68bb      	ldr	r3, [r7, #8]
 800bdfa:	617b      	str	r3, [r7, #20]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 800bdfc:	e00d      	b.n	800be1a <arm_mean_f32+0x34>
  {
    /* C = (A[0] + A[1] + A[2] + ... + A[blockSize-1]) */
    sum += *pSrc++;
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	1d1a      	adds	r2, r3, #4
 800be02:	60fa      	str	r2, [r7, #12]
 800be04:	edd3 7a00 	vldr	s15, [r3]
 800be08:	ed97 7a04 	vldr	s14, [r7, #16]
 800be0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800be10:	edc7 7a04 	vstr	s15, [r7, #16]

    /* Decrement loop counter */
    blkCnt--;
 800be14:	697b      	ldr	r3, [r7, #20]
 800be16:	3b01      	subs	r3, #1
 800be18:	617b      	str	r3, [r7, #20]
  while (blkCnt > 0U)
 800be1a:	697b      	ldr	r3, [r7, #20]
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d1ee      	bne.n	800bdfe <arm_mean_f32+0x18>
  }

  /* C = (A[0] + A[1] + A[2] + ... + A[blockSize-1]) / blockSize  */
  /* Store result to destination */
  *pResult = (sum / blockSize);
 800be20:	68bb      	ldr	r3, [r7, #8]
 800be22:	ee07 3a90 	vmov	s15, r3
 800be26:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800be2a:	edd7 6a04 	vldr	s13, [r7, #16]
 800be2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	edc3 7a00 	vstr	s15, [r3]
}
 800be38:	bf00      	nop
 800be3a:	371c      	adds	r7, #28
 800be3c:	46bd      	mov	sp, r7
 800be3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be42:	4770      	bx	lr

0800be44 <arm_min_f32>:
void arm_min_f32(
  const float32_t * pSrc,
        uint32_t blockSize,
        float32_t * pResult,
        uint32_t * pIndex)
{
 800be44:	b480      	push	{r7}
 800be46:	b089      	sub	sp, #36	; 0x24
 800be48:	af00      	add	r7, sp, #0
 800be4a:	60f8      	str	r0, [r7, #12]
 800be4c:	60b9      	str	r1, [r7, #8]
 800be4e:	607a      	str	r2, [r7, #4]
 800be50:	603b      	str	r3, [r7, #0]
#if defined (ARM_MATH_LOOPUNROLL) && !defined(ARM_MATH_AUTOVECTORIZE)
        uint32_t index;                                /* index of maximum value */
#endif

  /* Initialise index value to zero. */
  outIndex = 0U;
 800be52:	2300      	movs	r3, #0
 800be54:	617b      	str	r3, [r7, #20]

  /* Load first input value that act as reference value for comparision */
  out = *pSrc++;
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	1d1a      	adds	r2, r3, #4
 800be5a:	60fa      	str	r2, [r7, #12]
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	61fb      	str	r3, [r7, #28]
  blkCnt = (blockSize - 1U) % 4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = (blockSize - 1U);
 800be60:	68bb      	ldr	r3, [r7, #8]
 800be62:	3b01      	subs	r3, #1
 800be64:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 800be66:	e016      	b.n	800be96 <arm_min_f32+0x52>
  {
    /* Initialize minVal to the next consecutive values one by one */
    minVal = *pSrc++;
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	1d1a      	adds	r2, r3, #4
 800be6c:	60fa      	str	r2, [r7, #12]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	613b      	str	r3, [r7, #16]

    /* compare for the minimum value */
    if (out > minVal)
 800be72:	ed97 7a07 	vldr	s14, [r7, #28]
 800be76:	edd7 7a04 	vldr	s15, [r7, #16]
 800be7a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800be7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be82:	dd05      	ble.n	800be90 <arm_min_f32+0x4c>
    {
      /* Update the minimum value and it's index */
      out = minVal;
 800be84:	693b      	ldr	r3, [r7, #16]
 800be86:	61fb      	str	r3, [r7, #28]
      outIndex = blockSize - blkCnt;
 800be88:	68ba      	ldr	r2, [r7, #8]
 800be8a:	69bb      	ldr	r3, [r7, #24]
 800be8c:	1ad3      	subs	r3, r2, r3
 800be8e:	617b      	str	r3, [r7, #20]
    }

    /* Decrement loop counter */
    blkCnt--;
 800be90:	69bb      	ldr	r3, [r7, #24]
 800be92:	3b01      	subs	r3, #1
 800be94:	61bb      	str	r3, [r7, #24]
  while (blkCnt > 0U)
 800be96:	69bb      	ldr	r3, [r7, #24]
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d1e5      	bne.n	800be68 <arm_min_f32+0x24>
  }

  /* Store the minimum value and it's index into destination pointers */
  *pResult = out;
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	69fa      	ldr	r2, [r7, #28]
 800bea0:	601a      	str	r2, [r3, #0]
  *pIndex = outIndex;
 800bea2:	683b      	ldr	r3, [r7, #0]
 800bea4:	697a      	ldr	r2, [r7, #20]
 800bea6:	601a      	str	r2, [r3, #0]
}
 800bea8:	bf00      	nop
 800beaa:	3724      	adds	r7, #36	; 0x24
 800beac:	46bd      	mov	sp, r7
 800beae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb2:	4770      	bx	lr

0800beb4 <arm_rms_f32>:
#else
void arm_rms_f32(
  const float32_t * pSrc,
        uint32_t blockSize,
        float32_t * pResult)
{
 800beb4:	b580      	push	{r7, lr}
 800beb6:	b08a      	sub	sp, #40	; 0x28
 800beb8:	af00      	add	r7, sp, #0
 800beba:	60f8      	str	r0, [r7, #12]
 800bebc:	60b9      	str	r1, [r7, #8]
 800bebe:	607a      	str	r2, [r7, #4]
        uint32_t blkCnt;                               /* Loop counter */
        float32_t sum = 0.0f;                          /* Temporary result storage */
 800bec0:	f04f 0300 	mov.w	r3, #0
 800bec4:	623b      	str	r3, [r7, #32]
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;
 800bec6:	68bb      	ldr	r3, [r7, #8]
 800bec8:	627b      	str	r3, [r7, #36]	; 0x24

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 800beca:	e011      	b.n	800bef0 <arm_rms_f32+0x3c>
  {
    /* C = A[0] * A[0] + A[1] * A[1] + ... + A[blockSize-1] * A[blockSize-1] */

    in = *pSrc++;
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	1d1a      	adds	r2, r3, #4
 800bed0:	60fa      	str	r2, [r7, #12]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	61fb      	str	r3, [r7, #28]
    /* Compute sum of squares and store result in a temporary variable. */
    sum += ( in * in);
 800bed6:	edd7 7a07 	vldr	s15, [r7, #28]
 800beda:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800bede:	ed97 7a08 	vldr	s14, [r7, #32]
 800bee2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bee6:	edc7 7a08 	vstr	s15, [r7, #32]

    /* Decrement loop counter */
    blkCnt--;
 800beea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800beec:	3b01      	subs	r3, #1
 800beee:	627b      	str	r3, [r7, #36]	; 0x24
  while (blkCnt > 0U)
 800bef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d1ea      	bne.n	800becc <arm_rms_f32+0x18>
  }

  /* Compute Rms and store result in destination */
  arm_sqrt_f32(sum / (float32_t) blockSize, pResult);
 800bef6:	68bb      	ldr	r3, [r7, #8]
 800bef8:	ee07 3a90 	vmov	s15, r3
 800befc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800bf00:	edd7 6a08 	vldr	s13, [r7, #32]
 800bf04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bf08:	edc7 7a06 	vstr	s15, [r7, #24]
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	617b      	str	r3, [r7, #20]
    if (in >= 0.0f)
 800bf10:	edd7 7a06 	vldr	s15, [r7, #24]
 800bf14:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800bf18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf1c:	db09      	blt.n	800bf32 <arm_rms_f32+0x7e>
      *pOut = sqrtf(in);
 800bf1e:	ed97 0a06 	vldr	s0, [r7, #24]
 800bf22:	f00d f91f 	bl	8019164 <sqrtf>
 800bf26:	eef0 7a40 	vmov.f32	s15, s0
 800bf2a:	697b      	ldr	r3, [r7, #20]
 800bf2c:	edc3 7a00 	vstr	s15, [r3]
      return (ARM_MATH_SUCCESS);
 800bf30:	e004      	b.n	800bf3c <arm_rms_f32+0x88>
      *pOut = 0.0f;
 800bf32:	697b      	ldr	r3, [r7, #20]
 800bf34:	f04f 0200 	mov.w	r2, #0
 800bf38:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 800bf3a:	bf00      	nop
}
 800bf3c:	bf00      	nop
 800bf3e:	3728      	adds	r7, #40	; 0x28
 800bf40:	46bd      	mov	sp, r7
 800bf42:	bd80      	pop	{r7, pc}

0800bf44 <arm_fully_connected_s8>:
                                  const q7_t *kernel,
                                  const cmsis_nn_dims *bias_dims,
                                  const int32_t *bias,
                                  const cmsis_nn_dims *output_dims,
                                  q7_t *output)
{
 800bf44:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bf46:	b093      	sub	sp, #76	; 0x4c
 800bf48:	af0a      	add	r7, sp, #40	; 0x28
 800bf4a:	6178      	str	r0, [r7, #20]
 800bf4c:	6139      	str	r1, [r7, #16]
 800bf4e:	60fa      	str	r2, [r7, #12]
 800bf50:	60bb      	str	r3, [r7, #8]
    (void)bias_dims;
    (void)ctx;
    int32_t batch_cnt = input_dims->n;
 800bf52:	68bb      	ldr	r3, [r7, #8]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	61fb      	str	r3, [r7, #28]

    while (batch_cnt)
 800bf58:	e033      	b.n	800bfc2 <arm_fully_connected_s8+0x7e>
    {
        arm_nn_vec_mat_mult_t_s8(input,
 800bf5a:	693b      	ldr	r3, [r7, #16]
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	607b      	str	r3, [r7, #4]
 800bf60:	693a      	ldr	r2, [r7, #16]
 800bf62:	6852      	ldr	r2, [r2, #4]
 800bf64:	6939      	ldr	r1, [r7, #16]
 800bf66:	6889      	ldr	r1, [r1, #8]
 800bf68:	68f8      	ldr	r0, [r7, #12]
 800bf6a:	6800      	ldr	r0, [r0, #0]
 800bf6c:	68fc      	ldr	r4, [r7, #12]
 800bf6e:	6864      	ldr	r4, [r4, #4]
 800bf70:	6bfd      	ldr	r5, [r7, #60]	; 0x3c
 800bf72:	682d      	ldr	r5, [r5, #0]
 800bf74:	6cfe      	ldr	r6, [r7, #76]	; 0x4c
 800bf76:	68f6      	ldr	r6, [r6, #12]
 800bf78:	693b      	ldr	r3, [r7, #16]
 800bf7a:	68db      	ldr	r3, [r3, #12]
 800bf7c:	603b      	str	r3, [r7, #0]
 800bf7e:	693b      	ldr	r3, [r7, #16]
 800bf80:	691b      	ldr	r3, [r3, #16]
 800bf82:	9308      	str	r3, [sp, #32]
 800bf84:	683b      	ldr	r3, [r7, #0]
 800bf86:	9307      	str	r3, [sp, #28]
 800bf88:	9606      	str	r6, [sp, #24]
 800bf8a:	9505      	str	r5, [sp, #20]
 800bf8c:	9404      	str	r4, [sp, #16]
 800bf8e:	9003      	str	r0, [sp, #12]
 800bf90:	9102      	str	r1, [sp, #8]
 800bf92:	9201      	str	r2, [sp, #4]
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	9300      	str	r3, [sp, #0]
 800bf98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bf9a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bf9c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bf9e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bfa0:	f000 f822 	bl	800bfe8 <arm_nn_vec_mat_mult_t_s8>
                                 quant_params->shift,
                                 filter_dims->n, /* col_dim or accum_depth */
                                 output_dims->c, /* row_dim or output_depth */
                                 fc_params->activation.min,
                                 fc_params->activation.max);
        input += filter_dims->n;
 800bfa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	461a      	mov	r2, r3
 800bfaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfac:	4413      	add	r3, r2
 800bfae:	63bb      	str	r3, [r7, #56]	; 0x38
        output += output_dims->c;
 800bfb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bfb2:	68db      	ldr	r3, [r3, #12]
 800bfb4:	461a      	mov	r2, r3
 800bfb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bfb8:	4413      	add	r3, r2
 800bfba:	653b      	str	r3, [r7, #80]	; 0x50
        batch_cnt--;
 800bfbc:	69fb      	ldr	r3, [r7, #28]
 800bfbe:	3b01      	subs	r3, #1
 800bfc0:	61fb      	str	r3, [r7, #28]
    while (batch_cnt)
 800bfc2:	69fb      	ldr	r3, [r7, #28]
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d1c8      	bne.n	800bf5a <arm_fully_connected_s8+0x16>
    }
    return (ARM_MATH_SUCCESS);
 800bfc8:	2300      	movs	r3, #0
}
 800bfca:	4618      	mov	r0, r3
 800bfcc:	3724      	adds	r7, #36	; 0x24
 800bfce:	46bd      	mov	sp, r7
 800bfd0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800bfd2 <arm_fully_connected_s8_get_buffer_size>:

int32_t arm_fully_connected_s8_get_buffer_size(const cmsis_nn_dims *filter_dims)
{
 800bfd2:	b480      	push	{r7}
 800bfd4:	b083      	sub	sp, #12
 800bfd6:	af00      	add	r7, sp, #0
 800bfd8:	6078      	str	r0, [r7, #4]
    (void)filter_dims;
    return 0;
 800bfda:	2300      	movs	r3, #0
}
 800bfdc:	4618      	mov	r0, r3
 800bfde:	370c      	adds	r7, #12
 800bfe0:	46bd      	mov	sp, r7
 800bfe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfe6:	4770      	bx	lr

0800bfe8 <arm_nn_vec_mat_mult_t_s8>:
                                    const int32_t dst_shift,
                                    const int32_t rhs_cols,
                                    const int32_t rhs_rows,
                                    const int32_t activation_min,
                                    const int32_t activation_max)
{
 800bfe8:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800bfec:	f5ad 6dc6 	sub.w	sp, sp, #1584	; 0x630
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	f507 64c6 	add.w	r4, r7, #1584	; 0x630
 800bff6:	f2a4 54dc 	subw	r4, r4, #1500	; 0x5dc
 800bffa:	6020      	str	r0, [r4, #0]
 800bffc:	f507 60c6 	add.w	r0, r7, #1584	; 0x630
 800c000:	f5a0 60bc 	sub.w	r0, r0, #1504	; 0x5e0
 800c004:	6001      	str	r1, [r0, #0]
 800c006:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 800c00a:	f2a1 51e4 	subw	r1, r1, #1508	; 0x5e4
 800c00e:	600a      	str	r2, [r1, #0]
 800c010:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800c014:	f5a2 62bd 	sub.w	r2, r2, #1512	; 0x5e8
 800c018:	6013      	str	r3, [r2, #0]
        *dst = MIN(acc_0, activation_max);
        dst++;
    }

#elif defined(ARM_MATH_DSP)
    const int32_t off0 = rhs_cols - 4;
 800c01a:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 800c01e:	3b04      	subs	r3, #4
 800c020:	f8c7 3614 	str.w	r3, [r7, #1556]	; 0x614
    const int16_t lhs_offset_s16 = lhs_offset;
 800c024:	f8d7 3650 	ldr.w	r3, [r7, #1616]	; 0x650
 800c028:	f8a7 3612 	strh.w	r3, [r7, #1554]	; 0x612
    const int16_t rhs_offset_s16 = rhs_offset;
 800c02c:	f8d7 3654 	ldr.w	r3, [r7, #1620]	; 0x654
 800c030:	f8a7 3610 	strh.w	r3, [r7, #1552]	; 0x610

    const uint32_t lhs_offset_s16x2 = __PKHBT(lhs_offset_s16, lhs_offset_s16, 16);
 800c034:	f9b7 3612 	ldrsh.w	r3, [r7, #1554]	; 0x612
 800c038:	f8c7 360c 	str.w	r3, [r7, #1548]	; 0x60c
 800c03c:	f9b7 3612 	ldrsh.w	r3, [r7, #1554]	; 0x612
 800c040:	f8c7 3608 	str.w	r3, [r7, #1544]	; 0x608
 800c044:	f8d7 260c 	ldr.w	r2, [r7, #1548]	; 0x60c
 800c048:	f8d7 3608 	ldr.w	r3, [r7, #1544]	; 0x608
 800c04c:	eac2 4303 	pkhbt	r3, r2, r3, lsl #16
 800c050:	f8c7 3604 	str.w	r3, [r7, #1540]	; 0x604
 800c054:	f8d7 3604 	ldr.w	r3, [r7, #1540]	; 0x604
 800c058:	f8c7 3600 	str.w	r3, [r7, #1536]	; 0x600
    const uint32_t rhs_offset_s16x2 = __PKHBT(rhs_offset_s16, rhs_offset_s16, 16);
 800c05c:	f9b7 3610 	ldrsh.w	r3, [r7, #1552]	; 0x610
 800c060:	f8c7 35fc 	str.w	r3, [r7, #1532]	; 0x5fc
 800c064:	f9b7 3610 	ldrsh.w	r3, [r7, #1552]	; 0x610
 800c068:	f8c7 35f8 	str.w	r3, [r7, #1528]	; 0x5f8
 800c06c:	f8d7 25fc 	ldr.w	r2, [r7, #1532]	; 0x5fc
 800c070:	f8d7 35f8 	ldr.w	r3, [r7, #1528]	; 0x5f8
 800c074:	eac2 4303 	pkhbt	r3, r2, r3, lsl #16
 800c078:	f8c7 35f4 	str.w	r3, [r7, #1524]	; 0x5f4
 800c07c:	f8d7 35f4 	ldr.w	r3, [r7, #1524]	; 0x5f4
 800c080:	f8c7 35f0 	str.w	r3, [r7, #1520]	; 0x5f0

    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
 800c084:	2300      	movs	r3, #0
 800c086:	f8c7 362c 	str.w	r3, [r7, #1580]	; 0x62c
 800c08a:	f001 bd13 	b.w	800dab4 <arm_nn_vec_mat_mult_t_s8+0x1acc>
    {
        const q7_t *lhs_ptr = &lhs[0];
 800c08e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c092:	f5a3 62ac 	sub.w	r2, r3, #1376	; 0x560
 800c096:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c09a:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	6013      	str	r3, [r2, #0]
        const q7_t *rhs_ptr = &rhs[0];
 800c0a2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c0a6:	f2a3 5264 	subw	r2, r3, #1380	; 0x564
 800c0aa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c0ae:	f5a3 63bc 	sub.w	r3, r3, #1504	; 0x5e0
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	6013      	str	r3, [r2, #0]

        q31_t res00 = 0;
 800c0b6:	2300      	movs	r3, #0
 800c0b8:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
        q31_t res01 = 0;
 800c0bc:	2300      	movs	r3, #0
 800c0be:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
        if (bias)
 800c0c2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c0c6:	f2a3 53e4 	subw	r3, r3, #1508	; 0x5e4
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d01b      	beq.n	800c108 <arm_nn_vec_mat_mult_t_s8+0x120>
        {
            res00 = *bias++;
 800c0d0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c0d4:	f2a3 53e4 	subw	r3, r3, #1508	; 0x5e4
 800c0d8:	6819      	ldr	r1, [r3, #0]
 800c0da:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c0de:	f2a3 52e4 	subw	r2, r3, #1508	; 0x5e4
 800c0e2:	1d0b      	adds	r3, r1, #4
 800c0e4:	6013      	str	r3, [r2, #0]
 800c0e6:	680b      	ldr	r3, [r1, #0]
 800c0e8:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            res01 = *bias++;
 800c0ec:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c0f0:	f2a3 53e4 	subw	r3, r3, #1508	; 0x5e4
 800c0f4:	6819      	ldr	r1, [r3, #0]
 800c0f6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c0fa:	f2a3 52e4 	subw	r2, r3, #1508	; 0x5e4
 800c0fe:	1d0b      	adds	r3, r1, #4
 800c100:	6013      	str	r3, [r2, #0]
 800c102:	680b      	ldr	r3, [r1, #0]
 800c104:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
        }

        int32_t rhs_cols_idx = 0;
 800c108:	2300      	movs	r3, #0
 800c10a:	f8c7 3620 	str.w	r3, [r7, #1568]	; 0x620

        q31_t val0, val1, val2, val3, val4, val5;
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 800c10e:	f001 b9db 	b.w	800d4c8 <arm_nn_vec_mat_mult_t_s8+0x14e0>
 800c112:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c116:	f5a3 724b 	sub.w	r2, r3, #812	; 0x32c
 800c11a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800c11e:	6013      	str	r3, [r2, #0]
  @return        q31 value
 */
__STATIC_FORCEINLINE q31_t arm_nn_read_q7x4_ia(const q7_t **in_q7)
{
    q31_t val;
    memcpy(&val, *in_q7, 4);
 800c120:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c124:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	461a      	mov	r2, r3
 800c130:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c134:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 800c138:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800c13a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c13e:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	1d1a      	adds	r2, r3, #4
 800c148:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c14c:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	601a      	str	r2, [r3, #0]

    return (val);
 800c154:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c158:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 800c15c:	681b      	ldr	r3, [r3, #0]
        {
            // Read 4 x int8 values from the RHS matrix
            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 800c15e:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
            val2 = __SXTAB16(rhs_offset_s16x2, val0);
 800c162:	f8d7 15c8 	ldr.w	r1, [r7, #1480]	; 0x5c8
 800c166:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c16a:	f5a3 7248 	sub.w	r2, r3, #800	; 0x320
 800c16e:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 800c172:	6013      	str	r3, [r2, #0]
 800c174:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c178:	f5a3 7349 	sub.w	r3, r3, #804	; 0x324
 800c17c:	6019      	str	r1, [r3, #0]

__STATIC_FORCEINLINE uint32_t __SXTAB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800c17e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c182:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 800c186:	681a      	ldr	r2, [r3, #0]
 800c188:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c18c:	f5a3 7349 	sub.w	r3, r3, #804	; 0x324
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	fa22 f283 	sxtab16	r2, r2, r3
 800c196:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c19a:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 800c19e:	601a      	str	r2, [r3, #0]
  return(result);
 800c1a0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c1a4:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	f8c7 35c4 	str.w	r3, [r7, #1476]	; 0x5c4
 800c1ae:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c1b2:	f5a3 7247 	sub.w	r2, r3, #796	; 0x31c
 800c1b6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800c1ba:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 800c1bc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c1c0:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	461a      	mov	r2, r3
 800c1cc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c1d0:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 800c1d4:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800c1d6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c1da:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	1d1a      	adds	r2, r3, #4
 800c1e4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c1e8:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	601a      	str	r2, [r3, #0]
    return (val);
 800c1f0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c1f4:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 800c1f8:	681b      	ldr	r3, [r3, #0]
            // Read 4 x int8 values from the LHS vector
            val1 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 800c1fa:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0
            val0 = __SXTAB16(rhs_offset_s16x2, __ROR(val0, 8));
 800c1fe:	f8d7 25c8 	ldr.w	r2, [r7, #1480]	; 0x5c8
 800c202:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c206:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 800c20a:	601a      	str	r2, [r3, #0]
 800c20c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c210:	f5a3 7246 	sub.w	r2, r3, #792	; 0x318
 800c214:	2308      	movs	r3, #8
 800c216:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 800c218:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c21c:	f5a3 7246 	sub.w	r2, r3, #792	; 0x318
 800c220:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c224:	f5a3 7346 	sub.w	r3, r3, #792	; 0x318
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	f003 031f 	and.w	r3, r3, #31
 800c22e:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 800c230:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c234:	f5a3 7346 	sub.w	r3, r3, #792	; 0x318
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d105      	bne.n	800c24a <arm_nn_vec_mat_mult_t_s8+0x262>
    return op1;
 800c23e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c242:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 800c246:	6819      	ldr	r1, [r3, #0]
 800c248:	e00b      	b.n	800c262 <arm_nn_vec_mat_mult_t_s8+0x27a>
  return (op1 >> op2) | (op1 << (32U - op2));
 800c24a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c24e:	f5a3 7245 	sub.w	r2, r3, #788	; 0x314
 800c252:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c256:	f5a3 7346 	sub.w	r3, r3, #792	; 0x318
 800c25a:	6812      	ldr	r2, [r2, #0]
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	fa62 f103 	ror.w	r1, r2, r3
 800c262:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c266:	f5a3 7242 	sub.w	r2, r3, #776	; 0x308
 800c26a:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 800c26e:	6013      	str	r3, [r2, #0]
 800c270:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c274:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 800c278:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800c27a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c27e:	f5a3 7342 	sub.w	r3, r3, #776	; 0x308
 800c282:	681a      	ldr	r2, [r3, #0]
 800c284:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c288:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	fa22 f283 	sxtab16	r2, r2, r3
 800c292:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c296:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 800c29a:	601a      	str	r2, [r3, #0]
  return(result);
 800c29c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c2a0:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
            val3 = __SXTAB16(lhs_offset_s16x2, val1);
 800c2aa:	f8d7 15c0 	ldr.w	r1, [r7, #1472]	; 0x5c0
 800c2ae:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c2b2:	f5a3 723f 	sub.w	r2, r3, #764	; 0x2fc
 800c2b6:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 800c2ba:	6013      	str	r3, [r2, #0]
 800c2bc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c2c0:	f5a3 7340 	sub.w	r3, r3, #768	; 0x300
 800c2c4:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800c2c6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c2ca:	f5a3 733f 	sub.w	r3, r3, #764	; 0x2fc
 800c2ce:	681a      	ldr	r2, [r3, #0]
 800c2d0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c2d4:	f5a3 7340 	sub.w	r3, r3, #768	; 0x300
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	fa22 f283 	sxtab16	r2, r2, r3
 800c2de:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c2e2:	f5a3 7341 	sub.w	r3, r3, #772	; 0x304
 800c2e6:	601a      	str	r2, [r3, #0]
  return(result);
 800c2e8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c2ec:	f5a3 7341 	sub.w	r3, r3, #772	; 0x304
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	f8c7 35bc 	str.w	r3, [r7, #1468]	; 0x5bc
            // Read 4 x int8 values from the RHS matrix
            val4 = arm_nn_read_q7x4((const q7_t *)rhs_ptr + off0);
 800c2f6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c2fa:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 800c2fe:	681a      	ldr	r2, [r3, #0]
 800c300:	f8d7 3614 	ldr.w	r3, [r7, #1556]	; 0x614
 800c304:	441a      	add	r2, r3
 800c306:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c30a:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 800c30e:	601a      	str	r2, [r3, #0]
 800c310:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c314:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	461a      	mov	r2, r3
  @return        q31 value
 */
__STATIC_FORCEINLINE q31_t arm_nn_read_q7x4(const q7_t *in_q7)
{
    q31_t val;
    memcpy(&val, in_q7, 4);
 800c31e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c322:	f2a3 5384 	subw	r3, r3, #1412	; 0x584
 800c326:	601a      	str	r2, [r3, #0]

    return (val);
 800c328:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c32c:	f2a3 5384 	subw	r3, r3, #1412	; 0x584
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
            val1 = __SXTAB16(lhs_offset_s16x2, __ROR(val1, 8));
 800c336:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 800c33a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c33e:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 800c342:	601a      	str	r2, [r3, #0]
 800c344:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c348:	f5a3 723d 	sub.w	r2, r3, #756	; 0x2f4
 800c34c:	2308      	movs	r3, #8
 800c34e:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 800c350:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c354:	f5a3 723d 	sub.w	r2, r3, #756	; 0x2f4
 800c358:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c35c:	f5a3 733d 	sub.w	r3, r3, #756	; 0x2f4
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	f003 031f 	and.w	r3, r3, #31
 800c366:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 800c368:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c36c:	f5a3 733d 	sub.w	r3, r3, #756	; 0x2f4
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	2b00      	cmp	r3, #0
 800c374:	d105      	bne.n	800c382 <arm_nn_vec_mat_mult_t_s8+0x39a>
    return op1;
 800c376:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c37a:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 800c37e:	6819      	ldr	r1, [r3, #0]
 800c380:	e00b      	b.n	800c39a <arm_nn_vec_mat_mult_t_s8+0x3b2>
  return (op1 >> op2) | (op1 << (32U - op2));
 800c382:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c386:	f5a3 723c 	sub.w	r2, r3, #752	; 0x2f0
 800c38a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c38e:	f5a3 733d 	sub.w	r3, r3, #756	; 0x2f4
 800c392:	6812      	ldr	r2, [r2, #0]
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	fa62 f103 	ror.w	r1, r2, r3
 800c39a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c39e:	f5a3 7239 	sub.w	r2, r3, #740	; 0x2e4
 800c3a2:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 800c3a6:	6013      	str	r3, [r2, #0]
 800c3a8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c3ac:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 800c3b0:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800c3b2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c3b6:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 800c3ba:	681a      	ldr	r2, [r3, #0]
 800c3bc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c3c0:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	fa22 f283 	sxtab16	r2, r2, r3
 800c3ca:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c3ce:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 800c3d2:	601a      	str	r2, [r3, #0]
  return(result);
 800c3d4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c3d8:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0

            // Perform the accumulations
            res00 = __SMLAD(val3, val2, res00);
 800c3e2:	f8d7 25bc 	ldr.w	r2, [r7, #1468]	; 0x5bc
 800c3e6:	f8d7 15c4 	ldr.w	r1, [r7, #1476]	; 0x5c4
 800c3ea:	f8d7 0628 	ldr.w	r0, [r7, #1576]	; 0x628
 800c3ee:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c3f2:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 800c3f6:	601a      	str	r2, [r3, #0]
 800c3f8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c3fc:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 800c400:	6019      	str	r1, [r3, #0]
 800c402:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c406:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 800c40a:	6018      	str	r0, [r3, #0]

__STATIC_FORCEINLINE uint32_t __SMLAD (uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800c40c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c410:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 800c414:	6819      	ldr	r1, [r3, #0]
 800c416:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c41a:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 800c41e:	681a      	ldr	r2, [r3, #0]
 800c420:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c424:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	fb21 3202 	smlad	r2, r1, r2, r3
 800c42e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c432:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800c436:	601a      	str	r2, [r3, #0]
  return(result);
 800c438:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c43c:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            val5 = __SXTAB16(rhs_offset_s16x2, val4);
 800c446:	f8d7 15b8 	ldr.w	r1, [r7, #1464]	; 0x5b8
 800c44a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c44e:	f5a3 7232 	sub.w	r2, r3, #712	; 0x2c8
 800c452:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 800c456:	6013      	str	r3, [r2, #0]
 800c458:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c45c:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 800c460:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800c462:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c466:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 800c46a:	681a      	ldr	r2, [r3, #0]
 800c46c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c470:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	fa22 f283 	sxtab16	r2, r2, r3
 800c47a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c47e:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 800c482:	601a      	str	r2, [r3, #0]
  return(result);
 800c484:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c488:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
            res00 = __SMLAD(val1, val0, res00);
 800c492:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 800c496:	f8d7 15c8 	ldr.w	r1, [r7, #1480]	; 0x5c8
 800c49a:	f8d7 0628 	ldr.w	r0, [r7, #1576]	; 0x628
 800c49e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c4a2:	f5a3 732e 	sub.w	r3, r3, #696	; 0x2b8
 800c4a6:	601a      	str	r2, [r3, #0]
 800c4a8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c4ac:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 800c4b0:	6019      	str	r1, [r3, #0]
 800c4b2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c4b6:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 800c4ba:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800c4bc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c4c0:	f5a3 732e 	sub.w	r3, r3, #696	; 0x2b8
 800c4c4:	6819      	ldr	r1, [r3, #0]
 800c4c6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c4ca:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 800c4ce:	681a      	ldr	r2, [r3, #0]
 800c4d0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c4d4:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	fb21 3202 	smlad	r2, r1, r2, r3
 800c4de:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c4e2:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 800c4e6:	601a      	str	r2, [r3, #0]
  return(result);
 800c4e8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c4ec:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            val4 = __SXTAB16(rhs_offset_s16x2, __ROR(val4, 8));
 800c4f6:	f8d7 25b8 	ldr.w	r2, [r7, #1464]	; 0x5b8
 800c4fa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c4fe:	f5a3 732c 	sub.w	r3, r3, #688	; 0x2b0
 800c502:	601a      	str	r2, [r3, #0]
 800c504:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c508:	f5a3 722d 	sub.w	r2, r3, #692	; 0x2b4
 800c50c:	2308      	movs	r3, #8
 800c50e:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 800c510:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c514:	f5a3 722d 	sub.w	r2, r3, #692	; 0x2b4
 800c518:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c51c:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	f003 031f 	and.w	r3, r3, #31
 800c526:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 800c528:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c52c:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	2b00      	cmp	r3, #0
 800c534:	d105      	bne.n	800c542 <arm_nn_vec_mat_mult_t_s8+0x55a>
    return op1;
 800c536:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c53a:	f5a3 732c 	sub.w	r3, r3, #688	; 0x2b0
 800c53e:	6819      	ldr	r1, [r3, #0]
 800c540:	e00b      	b.n	800c55a <arm_nn_vec_mat_mult_t_s8+0x572>
  return (op1 >> op2) | (op1 << (32U - op2));
 800c542:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c546:	f5a3 722c 	sub.w	r2, r3, #688	; 0x2b0
 800c54a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c54e:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 800c552:	6812      	ldr	r2, [r2, #0]
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	fa62 f103 	ror.w	r1, r2, r3
 800c55a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c55e:	f5a3 7229 	sub.w	r2, r3, #676	; 0x2a4
 800c562:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 800c566:	6013      	str	r3, [r2, #0]
 800c568:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c56c:	f5a3 732a 	sub.w	r3, r3, #680	; 0x2a8
 800c570:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800c572:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c576:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 800c57a:	681a      	ldr	r2, [r3, #0]
 800c57c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c580:	f5a3 732a 	sub.w	r3, r3, #680	; 0x2a8
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	fa22 f283 	sxtab16	r2, r2, r3
 800c58a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c58e:	f5a3 732b 	sub.w	r3, r3, #684	; 0x2ac
 800c592:	601a      	str	r2, [r3, #0]
  return(result);
 800c594:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c598:	f5a3 732b 	sub.w	r3, r3, #684	; 0x2ac
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
 800c5a2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c5a6:	f5a3 7228 	sub.w	r2, r3, #672	; 0x2a0
 800c5aa:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800c5ae:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 800c5b0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c5b4:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	461a      	mov	r2, r3
 800c5c0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c5c4:	f5a3 63b1 	sub.w	r3, r3, #1416	; 0x588
 800c5c8:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800c5ca:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c5ce:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	1d1a      	adds	r2, r3, #4
 800c5d8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c5dc:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	601a      	str	r2, [r3, #0]
    return (val);
 800c5e4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c5e8:	f5a3 63b1 	sub.w	r3, r3, #1416	; 0x588
 800c5ec:	681b      	ldr	r3, [r3, #0]
            // Read 4 x int8 values from the RHS matrix
            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 800c5ee:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
            res01 = __SMLAD(val3, val5, res01);
 800c5f2:	f8d7 25bc 	ldr.w	r2, [r7, #1468]	; 0x5bc
 800c5f6:	f8d7 15b4 	ldr.w	r1, [r7, #1460]	; 0x5b4
 800c5fa:	f8d7 0624 	ldr.w	r0, [r7, #1572]	; 0x624
 800c5fe:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c602:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 800c606:	601a      	str	r2, [r3, #0]
 800c608:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c60c:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 800c610:	6019      	str	r1, [r3, #0]
 800c612:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c616:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 800c61a:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800c61c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c620:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 800c624:	6819      	ldr	r1, [r3, #0]
 800c626:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c62a:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 800c62e:	681a      	ldr	r2, [r3, #0]
 800c630:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c634:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	fb21 3202 	smlad	r2, r1, r2, r3
 800c63e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c642:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 800c646:	601a      	str	r2, [r3, #0]
  return(result);
 800c648:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c64c:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
            res01 = __SMLAD(val1, val4, res01);
 800c656:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 800c65a:	f8d7 15b8 	ldr.w	r1, [r7, #1464]	; 0x5b8
 800c65e:	f8d7 0624 	ldr.w	r0, [r7, #1572]	; 0x624
 800c662:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c666:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 800c66a:	601a      	str	r2, [r3, #0]
 800c66c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c670:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 800c674:	6019      	str	r1, [r3, #0]
 800c676:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c67a:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 800c67e:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800c680:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c684:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 800c688:	6819      	ldr	r1, [r3, #0]
 800c68a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c68e:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 800c692:	681a      	ldr	r2, [r3, #0]
 800c694:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c698:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	fb21 3202 	smlad	r2, r1, r2, r3
 800c6a2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c6a6:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 800c6aa:	601a      	str	r2, [r3, #0]
  return(result);
 800c6ac:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c6b0:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624

            val2 = __SXTAB16(rhs_offset_s16x2, val0);
 800c6ba:	f8d7 15c8 	ldr.w	r1, [r7, #1480]	; 0x5c8
 800c6be:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c6c2:	f5a3 721d 	sub.w	r2, r3, #628	; 0x274
 800c6c6:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 800c6ca:	6013      	str	r3, [r2, #0]
 800c6cc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c6d0:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 800c6d4:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800c6d6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c6da:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 800c6de:	681a      	ldr	r2, [r3, #0]
 800c6e0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c6e4:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	fa22 f283 	sxtab16	r2, r2, r3
 800c6ee:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c6f2:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 800c6f6:	601a      	str	r2, [r3, #0]
  return(result);
 800c6f8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c6fc:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	f8c7 35c4 	str.w	r3, [r7, #1476]	; 0x5c4
 800c706:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c70a:	f5a3 721c 	sub.w	r2, r3, #624	; 0x270
 800c70e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800c712:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 800c714:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c718:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	461a      	mov	r2, r3
 800c724:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c728:	f2a3 538c 	subw	r3, r3, #1420	; 0x58c
 800c72c:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800c72e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c732:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	1d1a      	adds	r2, r3, #4
 800c73c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c740:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	601a      	str	r2, [r3, #0]
    return (val);
 800c748:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c74c:	f2a3 538c 	subw	r3, r3, #1420	; 0x58c
 800c750:	681b      	ldr	r3, [r3, #0]
            // Read 4 x int8 values from the LHS vector
            val1 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 800c752:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0
            val0 = __SXTAB16(rhs_offset_s16x2, __ROR(val0, 8));
 800c756:	f8d7 25c8 	ldr.w	r2, [r7, #1480]	; 0x5c8
 800c75a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c75e:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 800c762:	601a      	str	r2, [r3, #0]
 800c764:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c768:	f5a3 721b 	sub.w	r2, r3, #620	; 0x26c
 800c76c:	2308      	movs	r3, #8
 800c76e:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 800c770:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c774:	f5a3 721b 	sub.w	r2, r3, #620	; 0x26c
 800c778:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c77c:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	f003 031f 	and.w	r3, r3, #31
 800c786:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 800c788:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c78c:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	2b00      	cmp	r3, #0
 800c794:	d105      	bne.n	800c7a2 <arm_nn_vec_mat_mult_t_s8+0x7ba>
    return op1;
 800c796:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c79a:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 800c79e:	6819      	ldr	r1, [r3, #0]
 800c7a0:	e00b      	b.n	800c7ba <arm_nn_vec_mat_mult_t_s8+0x7d2>
  return (op1 >> op2) | (op1 << (32U - op2));
 800c7a2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c7a6:	f5a3 721a 	sub.w	r2, r3, #616	; 0x268
 800c7aa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c7ae:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 800c7b2:	6812      	ldr	r2, [r2, #0]
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	fa62 f103 	ror.w	r1, r2, r3
 800c7ba:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c7be:	f5a3 7217 	sub.w	r2, r3, #604	; 0x25c
 800c7c2:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 800c7c6:	6013      	str	r3, [r2, #0]
 800c7c8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c7cc:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 800c7d0:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800c7d2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c7d6:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800c7da:	681a      	ldr	r2, [r3, #0]
 800c7dc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c7e0:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	fa22 f283 	sxtab16	r2, r2, r3
 800c7ea:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c7ee:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800c7f2:	601a      	str	r2, [r3, #0]
  return(result);
 800c7f4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c7f8:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
            val3 = __SXTAB16(lhs_offset_s16x2, val1);
 800c802:	f8d7 15c0 	ldr.w	r1, [r7, #1472]	; 0x5c0
 800c806:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c80a:	f5a3 7214 	sub.w	r2, r3, #592	; 0x250
 800c80e:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 800c812:	6013      	str	r3, [r2, #0]
 800c814:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c818:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 800c81c:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800c81e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c822:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 800c826:	681a      	ldr	r2, [r3, #0]
 800c828:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c82c:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	fa22 f283 	sxtab16	r2, r2, r3
 800c836:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c83a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800c83e:	601a      	str	r2, [r3, #0]
  return(result);
 800c840:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c844:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	f8c7 35bc 	str.w	r3, [r7, #1468]	; 0x5bc
            // Read 4 x int8 values from the RHS matrix
            val4 = arm_nn_read_q7x4((const q7_t *)rhs_ptr + off0);
 800c84e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c852:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 800c856:	681a      	ldr	r2, [r3, #0]
 800c858:	f8d7 3614 	ldr.w	r3, [r7, #1556]	; 0x614
 800c85c:	441a      	add	r2, r3
 800c85e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c862:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800c866:	601a      	str	r2, [r3, #0]
 800c868:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c86c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 800c876:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c87a:	f5a3 63b2 	sub.w	r3, r3, #1424	; 0x590
 800c87e:	601a      	str	r2, [r3, #0]
    return (val);
 800c880:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c884:	f5a3 63b2 	sub.w	r3, r3, #1424	; 0x590
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
            val1 = __SXTAB16(lhs_offset_s16x2, __ROR(val1, 8));
 800c88e:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 800c892:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c896:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800c89a:	601a      	str	r2, [r3, #0]
 800c89c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c8a0:	f5a3 7212 	sub.w	r2, r3, #584	; 0x248
 800c8a4:	2308      	movs	r3, #8
 800c8a6:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 800c8a8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c8ac:	f5a3 7212 	sub.w	r2, r3, #584	; 0x248
 800c8b0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c8b4:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	f003 031f 	and.w	r3, r3, #31
 800c8be:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 800c8c0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c8c4:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d105      	bne.n	800c8da <arm_nn_vec_mat_mult_t_s8+0x8f2>
    return op1;
 800c8ce:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c8d2:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800c8d6:	6819      	ldr	r1, [r3, #0]
 800c8d8:	e00b      	b.n	800c8f2 <arm_nn_vec_mat_mult_t_s8+0x90a>
  return (op1 >> op2) | (op1 << (32U - op2));
 800c8da:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c8de:	f5a3 7211 	sub.w	r2, r3, #580	; 0x244
 800c8e2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c8e6:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 800c8ea:	6812      	ldr	r2, [r2, #0]
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	fa62 f103 	ror.w	r1, r2, r3
 800c8f2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c8f6:	f5a3 720e 	sub.w	r2, r3, #568	; 0x238
 800c8fa:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 800c8fe:	6013      	str	r3, [r2, #0]
 800c900:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c904:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 800c908:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800c90a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c90e:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 800c912:	681a      	ldr	r2, [r3, #0]
 800c914:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c918:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	fa22 f283 	sxtab16	r2, r2, r3
 800c922:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c926:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 800c92a:	601a      	str	r2, [r3, #0]
  return(result);
 800c92c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c930:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0

            // Perform the accumulations
            res00 = __SMLAD(val3, val2, res00);
 800c93a:	f8d7 25bc 	ldr.w	r2, [r7, #1468]	; 0x5bc
 800c93e:	f8d7 15c4 	ldr.w	r1, [r7, #1476]	; 0x5c4
 800c942:	f8d7 0628 	ldr.w	r0, [r7, #1576]	; 0x628
 800c946:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c94a:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 800c94e:	601a      	str	r2, [r3, #0]
 800c950:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c954:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 800c958:	6019      	str	r1, [r3, #0]
 800c95a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c95e:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800c962:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800c964:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c968:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 800c96c:	6819      	ldr	r1, [r3, #0]
 800c96e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c972:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 800c976:	681a      	ldr	r2, [r3, #0]
 800c978:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c97c:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	fb21 3202 	smlad	r2, r1, r2, r3
 800c986:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c98a:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 800c98e:	601a      	str	r2, [r3, #0]
  return(result);
 800c990:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c994:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            val5 = __SXTAB16(rhs_offset_s16x2, val4);
 800c99e:	f8d7 15b8 	ldr.w	r1, [r7, #1464]	; 0x5b8
 800c9a2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c9a6:	f5a3 7207 	sub.w	r2, r3, #540	; 0x21c
 800c9aa:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 800c9ae:	6013      	str	r3, [r2, #0]
 800c9b0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c9b4:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 800c9b8:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800c9ba:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c9be:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 800c9c2:	681a      	ldr	r2, [r3, #0]
 800c9c4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c9c8:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	fa22 f283 	sxtab16	r2, r2, r3
 800c9d2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c9d6:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 800c9da:	601a      	str	r2, [r3, #0]
  return(result);
 800c9dc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c9e0:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
            res00 = __SMLAD(val1, val0, res00);
 800c9ea:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 800c9ee:	f8d7 15c8 	ldr.w	r1, [r7, #1480]	; 0x5c8
 800c9f2:	f8d7 0628 	ldr.w	r0, [r7, #1576]	; 0x628
 800c9f6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c9fa:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 800c9fe:	601a      	str	r2, [r3, #0]
 800ca00:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ca04:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 800ca08:	6019      	str	r1, [r3, #0]
 800ca0a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ca0e:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 800ca12:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800ca14:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ca18:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 800ca1c:	6819      	ldr	r1, [r3, #0]
 800ca1e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ca22:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 800ca26:	681a      	ldr	r2, [r3, #0]
 800ca28:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ca2c:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	fb21 3202 	smlad	r2, r1, r2, r3
 800ca36:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ca3a:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 800ca3e:	601a      	str	r2, [r3, #0]
  return(result);
 800ca40:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ca44:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            val4 = __SXTAB16(rhs_offset_s16x2, __ROR(val4, 8));
 800ca4e:	f8d7 25b8 	ldr.w	r2, [r7, #1464]	; 0x5b8
 800ca52:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ca56:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800ca5a:	601a      	str	r2, [r3, #0]
 800ca5c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ca60:	f5a3 7202 	sub.w	r2, r3, #520	; 0x208
 800ca64:	2308      	movs	r3, #8
 800ca66:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 800ca68:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ca6c:	f5a3 7202 	sub.w	r2, r3, #520	; 0x208
 800ca70:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ca74:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	f003 031f 	and.w	r3, r3, #31
 800ca7e:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 800ca80:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ca84:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d105      	bne.n	800ca9a <arm_nn_vec_mat_mult_t_s8+0xab2>
    return op1;
 800ca8e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ca92:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800ca96:	6819      	ldr	r1, [r3, #0]
 800ca98:	e00b      	b.n	800cab2 <arm_nn_vec_mat_mult_t_s8+0xaca>
  return (op1 >> op2) | (op1 << (32U - op2));
 800ca9a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ca9e:	f5a3 7201 	sub.w	r2, r3, #516	; 0x204
 800caa2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800caa6:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 800caaa:	6812      	ldr	r2, [r2, #0]
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	fa62 f103 	ror.w	r1, r2, r3
 800cab2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cab6:	f5a3 72fc 	sub.w	r2, r3, #504	; 0x1f8
 800caba:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 800cabe:	6013      	str	r3, [r2, #0]
 800cac0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cac4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800cac8:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800caca:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cace:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800cad2:	681a      	ldr	r2, [r3, #0]
 800cad4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cad8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	fa22 f283 	sxtab16	r2, r2, r3
 800cae2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cae6:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 800caea:	601a      	str	r2, [r3, #0]
  return(result);
 800caec:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800caf0:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
 800cafa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cafe:	f5a3 72fa 	sub.w	r2, r3, #500	; 0x1f4
 800cb02:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800cb06:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 800cb08:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cb0c:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	461a      	mov	r2, r3
 800cb18:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cb1c:	f2a3 5394 	subw	r3, r3, #1428	; 0x594
 800cb20:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800cb22:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cb26:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	1d1a      	adds	r2, r3, #4
 800cb30:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cb34:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	601a      	str	r2, [r3, #0]
    return (val);
 800cb3c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cb40:	f2a3 5394 	subw	r3, r3, #1428	; 0x594
 800cb44:	681b      	ldr	r3, [r3, #0]
            // Read 4 x int8 values from the RHS matrix
            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 800cb46:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
            res01 = __SMLAD(val3, val5, res01);
 800cb4a:	f8d7 25bc 	ldr.w	r2, [r7, #1468]	; 0x5bc
 800cb4e:	f8d7 15b4 	ldr.w	r1, [r7, #1460]	; 0x5b4
 800cb52:	f8d7 0624 	ldr.w	r0, [r7, #1572]	; 0x624
 800cb56:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cb5a:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800cb5e:	601a      	str	r2, [r3, #0]
 800cb60:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cb64:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800cb68:	6019      	str	r1, [r3, #0]
 800cb6a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cb6e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800cb72:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800cb74:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cb78:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800cb7c:	6819      	ldr	r1, [r3, #0]
 800cb7e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cb82:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800cb86:	681a      	ldr	r2, [r3, #0]
 800cb88:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cb8c:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	fb21 3202 	smlad	r2, r1, r2, r3
 800cb96:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cb9a:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 800cb9e:	601a      	str	r2, [r3, #0]
  return(result);
 800cba0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cba4:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
            res01 = __SMLAD(val1, val4, res01);
 800cbae:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 800cbb2:	f8d7 15b8 	ldr.w	r1, [r7, #1464]	; 0x5b8
 800cbb6:	f8d7 0624 	ldr.w	r0, [r7, #1572]	; 0x624
 800cbba:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cbbe:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800cbc2:	601a      	str	r2, [r3, #0]
 800cbc4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cbc8:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800cbcc:	6019      	str	r1, [r3, #0]
 800cbce:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cbd2:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800cbd6:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800cbd8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cbdc:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800cbe0:	6819      	ldr	r1, [r3, #0]
 800cbe2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cbe6:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800cbea:	681a      	ldr	r2, [r3, #0]
 800cbec:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cbf0:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	fb21 3202 	smlad	r2, r1, r2, r3
 800cbfa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cbfe:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800cc02:	601a      	str	r2, [r3, #0]
  return(result);
 800cc04:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cc08:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624

            val2 = __SXTAB16(rhs_offset_s16x2, val0);
 800cc12:	f8d7 15c8 	ldr.w	r1, [r7, #1480]	; 0x5c8
 800cc16:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cc1a:	f5a3 72e4 	sub.w	r2, r3, #456	; 0x1c8
 800cc1e:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 800cc22:	6013      	str	r3, [r2, #0]
 800cc24:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cc28:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 800cc2c:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800cc2e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cc32:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 800cc36:	681a      	ldr	r2, [r3, #0]
 800cc38:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cc3c:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	fa22 f283 	sxtab16	r2, r2, r3
 800cc46:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cc4a:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800cc4e:	601a      	str	r2, [r3, #0]
  return(result);
 800cc50:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cc54:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	f8c7 35c4 	str.w	r3, [r7, #1476]	; 0x5c4
 800cc5e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cc62:	f5a3 72e2 	sub.w	r2, r3, #452	; 0x1c4
 800cc66:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800cc6a:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 800cc6c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cc70:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	461a      	mov	r2, r3
 800cc7c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cc80:	f5a3 63b3 	sub.w	r3, r3, #1432	; 0x598
 800cc84:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800cc86:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cc8a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	1d1a      	adds	r2, r3, #4
 800cc94:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cc98:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	601a      	str	r2, [r3, #0]
    return (val);
 800cca0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cca4:	f5a3 63b3 	sub.w	r3, r3, #1432	; 0x598
 800cca8:	681b      	ldr	r3, [r3, #0]
            // Read 4 x int8 values from the LHS vector
            val1 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 800ccaa:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0
            val0 = __SXTAB16(rhs_offset_s16x2, __ROR(val0, 8));
 800ccae:	f8d7 25c8 	ldr.w	r2, [r7, #1480]	; 0x5c8
 800ccb2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ccb6:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800ccba:	601a      	str	r2, [r3, #0]
 800ccbc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ccc0:	f5a3 72e0 	sub.w	r2, r3, #448	; 0x1c0
 800ccc4:	2308      	movs	r3, #8
 800ccc6:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 800ccc8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cccc:	f5a3 72e0 	sub.w	r2, r3, #448	; 0x1c0
 800ccd0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ccd4:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	f003 031f 	and.w	r3, r3, #31
 800ccde:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 800cce0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cce4:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d105      	bne.n	800ccfa <arm_nn_vec_mat_mult_t_s8+0xd12>
    return op1;
 800ccee:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ccf2:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800ccf6:	6819      	ldr	r1, [r3, #0]
 800ccf8:	e00b      	b.n	800cd12 <arm_nn_vec_mat_mult_t_s8+0xd2a>
  return (op1 >> op2) | (op1 << (32U - op2));
 800ccfa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ccfe:	f5a3 72de 	sub.w	r2, r3, #444	; 0x1bc
 800cd02:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cd06:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800cd0a:	6812      	ldr	r2, [r2, #0]
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	fa62 f103 	ror.w	r1, r2, r3
 800cd12:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cd16:	f5a3 72d8 	sub.w	r2, r3, #432	; 0x1b0
 800cd1a:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 800cd1e:	6013      	str	r3, [r2, #0]
 800cd20:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cd24:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800cd28:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800cd2a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cd2e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800cd32:	681a      	ldr	r2, [r3, #0]
 800cd34:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cd38:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	fa22 f283 	sxtab16	r2, r2, r3
 800cd42:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cd46:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800cd4a:	601a      	str	r2, [r3, #0]
  return(result);
 800cd4c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cd50:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
            val3 = __SXTAB16(lhs_offset_s16x2, val1);
 800cd5a:	f8d7 15c0 	ldr.w	r1, [r7, #1472]	; 0x5c0
 800cd5e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cd62:	f5a3 72d2 	sub.w	r2, r3, #420	; 0x1a4
 800cd66:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 800cd6a:	6013      	str	r3, [r2, #0]
 800cd6c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cd70:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800cd74:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800cd76:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cd7a:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 800cd7e:	681a      	ldr	r2, [r3, #0]
 800cd80:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cd84:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	fa22 f283 	sxtab16	r2, r2, r3
 800cd8e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cd92:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800cd96:	601a      	str	r2, [r3, #0]
  return(result);
 800cd98:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cd9c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	f8c7 35bc 	str.w	r3, [r7, #1468]	; 0x5bc
            // Read 4 x int8 values from the RHS matrix
            val4 = arm_nn_read_q7x4((const q7_t *)rhs_ptr + off0);
 800cda6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cdaa:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 800cdae:	681a      	ldr	r2, [r3, #0]
 800cdb0:	f8d7 3614 	ldr.w	r3, [r7, #1556]	; 0x614
 800cdb4:	441a      	add	r2, r3
 800cdb6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cdba:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 800cdbe:	601a      	str	r2, [r3, #0]
 800cdc0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cdc4:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 800cdce:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cdd2:	f2a3 539c 	subw	r3, r3, #1436	; 0x59c
 800cdd6:	601a      	str	r2, [r3, #0]
    return (val);
 800cdd8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cddc:	f2a3 539c 	subw	r3, r3, #1436	; 0x59c
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
            val1 = __SXTAB16(lhs_offset_s16x2, __ROR(val1, 8));
 800cde6:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 800cdea:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cdee:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800cdf2:	601a      	str	r2, [r3, #0]
 800cdf4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cdf8:	f5a3 72ce 	sub.w	r2, r3, #412	; 0x19c
 800cdfc:	2308      	movs	r3, #8
 800cdfe:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 800ce00:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ce04:	f5a3 72ce 	sub.w	r2, r3, #412	; 0x19c
 800ce08:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ce0c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	f003 031f 	and.w	r3, r3, #31
 800ce16:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 800ce18:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ce1c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d105      	bne.n	800ce32 <arm_nn_vec_mat_mult_t_s8+0xe4a>
    return op1;
 800ce26:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ce2a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800ce2e:	6819      	ldr	r1, [r3, #0]
 800ce30:	e00b      	b.n	800ce4a <arm_nn_vec_mat_mult_t_s8+0xe62>
  return (op1 >> op2) | (op1 << (32U - op2));
 800ce32:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ce36:	f5a3 72cc 	sub.w	r2, r3, #408	; 0x198
 800ce3a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ce3e:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800ce42:	6812      	ldr	r2, [r2, #0]
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	fa62 f103 	ror.w	r1, r2, r3
 800ce4a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ce4e:	f5a3 72c6 	sub.w	r2, r3, #396	; 0x18c
 800ce52:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 800ce56:	6013      	str	r3, [r2, #0]
 800ce58:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ce5c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800ce60:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800ce62:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ce66:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800ce6a:	681a      	ldr	r2, [r3, #0]
 800ce6c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ce70:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	fa22 f283 	sxtab16	r2, r2, r3
 800ce7a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ce7e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800ce82:	601a      	str	r2, [r3, #0]
  return(result);
 800ce84:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ce88:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0

            // Perform the accumulations
            res00 = __SMLAD(val3, val2, res00);
 800ce92:	f8d7 25bc 	ldr.w	r2, [r7, #1468]	; 0x5bc
 800ce96:	f8d7 15c4 	ldr.w	r1, [r7, #1476]	; 0x5c4
 800ce9a:	f8d7 0628 	ldr.w	r0, [r7, #1576]	; 0x628
 800ce9e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cea2:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800cea6:	601a      	str	r2, [r3, #0]
 800cea8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ceac:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800ceb0:	6019      	str	r1, [r3, #0]
 800ceb2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ceb6:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800ceba:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800cebc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cec0:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800cec4:	6819      	ldr	r1, [r3, #0]
 800cec6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ceca:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800cece:	681a      	ldr	r2, [r3, #0]
 800ced0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ced4:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	fb21 3202 	smlad	r2, r1, r2, r3
 800cede:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cee2:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800cee6:	601a      	str	r2, [r3, #0]
  return(result);
 800cee8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ceec:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            val5 = __SXTAB16(rhs_offset_s16x2, val4);
 800cef6:	f8d7 15b8 	ldr.w	r1, [r7, #1464]	; 0x5b8
 800cefa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cefe:	f5a3 72b8 	sub.w	r2, r3, #368	; 0x170
 800cf02:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 800cf06:	6013      	str	r3, [r2, #0]
 800cf08:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cf0c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800cf10:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800cf12:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cf16:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800cf1a:	681a      	ldr	r2, [r3, #0]
 800cf1c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cf20:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	fa22 f283 	sxtab16	r2, r2, r3
 800cf2a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cf2e:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 800cf32:	601a      	str	r2, [r3, #0]
  return(result);
 800cf34:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cf38:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
            res00 = __SMLAD(val1, val0, res00);
 800cf42:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 800cf46:	f8d7 15c8 	ldr.w	r1, [r7, #1480]	; 0x5c8
 800cf4a:	f8d7 0628 	ldr.w	r0, [r7, #1576]	; 0x628
 800cf4e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cf52:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800cf56:	601a      	str	r2, [r3, #0]
 800cf58:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cf5c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800cf60:	6019      	str	r1, [r3, #0]
 800cf62:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cf66:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800cf6a:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800cf6c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cf70:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800cf74:	6819      	ldr	r1, [r3, #0]
 800cf76:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cf7a:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800cf7e:	681a      	ldr	r2, [r3, #0]
 800cf80:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cf84:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	fb21 3202 	smlad	r2, r1, r2, r3
 800cf8e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cf92:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800cf96:	601a      	str	r2, [r3, #0]
  return(result);
 800cf98:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cf9c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            val4 = __SXTAB16(rhs_offset_s16x2, __ROR(val4, 8));
 800cfa6:	f8d7 25b8 	ldr.w	r2, [r7, #1464]	; 0x5b8
 800cfaa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cfae:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 800cfb2:	601a      	str	r2, [r3, #0]
 800cfb4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cfb8:	f5a3 72ae 	sub.w	r2, r3, #348	; 0x15c
 800cfbc:	2308      	movs	r3, #8
 800cfbe:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 800cfc0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cfc4:	f5a3 72ae 	sub.w	r2, r3, #348	; 0x15c
 800cfc8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cfcc:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	f003 031f 	and.w	r3, r3, #31
 800cfd6:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 800cfd8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cfdc:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d105      	bne.n	800cff2 <arm_nn_vec_mat_mult_t_s8+0x100a>
    return op1;
 800cfe6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cfea:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 800cfee:	6819      	ldr	r1, [r3, #0]
 800cff0:	e00b      	b.n	800d00a <arm_nn_vec_mat_mult_t_s8+0x1022>
  return (op1 >> op2) | (op1 << (32U - op2));
 800cff2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cff6:	f5a3 72ac 	sub.w	r2, r3, #344	; 0x158
 800cffa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cffe:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800d002:	6812      	ldr	r2, [r2, #0]
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	fa62 f103 	ror.w	r1, r2, r3
 800d00a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d00e:	f5a3 72a6 	sub.w	r2, r3, #332	; 0x14c
 800d012:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 800d016:	6013      	str	r3, [r2, #0]
 800d018:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d01c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800d020:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800d022:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d026:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800d02a:	681a      	ldr	r2, [r3, #0]
 800d02c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d030:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	fa22 f283 	sxtab16	r2, r2, r3
 800d03a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d03e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800d042:	601a      	str	r2, [r3, #0]
  return(result);
 800d044:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d048:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
 800d052:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d056:	f5a3 72a4 	sub.w	r2, r3, #328	; 0x148
 800d05a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800d05e:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 800d060:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d064:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	461a      	mov	r2, r3
 800d070:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d074:	f5a3 63b4 	sub.w	r3, r3, #1440	; 0x5a0
 800d078:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800d07a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d07e:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	1d1a      	adds	r2, r3, #4
 800d088:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d08c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	601a      	str	r2, [r3, #0]
    return (val);
 800d094:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d098:	f5a3 63b4 	sub.w	r3, r3, #1440	; 0x5a0
 800d09c:	681b      	ldr	r3, [r3, #0]
            // Read 4 x int8 values from the RHS matrix
            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 800d09e:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
            res01 = __SMLAD(val3, val5, res01);
 800d0a2:	f8d7 25bc 	ldr.w	r2, [r7, #1468]	; 0x5bc
 800d0a6:	f8d7 15b4 	ldr.w	r1, [r7, #1460]	; 0x5b4
 800d0aa:	f8d7 0624 	ldr.w	r0, [r7, #1572]	; 0x624
 800d0ae:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d0b2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800d0b6:	601a      	str	r2, [r3, #0]
 800d0b8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d0bc:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800d0c0:	6019      	str	r1, [r3, #0]
 800d0c2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d0c6:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800d0ca:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800d0cc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d0d0:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800d0d4:	6819      	ldr	r1, [r3, #0]
 800d0d6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d0da:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800d0de:	681a      	ldr	r2, [r3, #0]
 800d0e0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d0e4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	fb21 3202 	smlad	r2, r1, r2, r3
 800d0ee:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d0f2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800d0f6:	601a      	str	r2, [r3, #0]
  return(result);
 800d0f8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d0fc:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
            res01 = __SMLAD(val1, val4, res01);
 800d106:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 800d10a:	f8d7 15b8 	ldr.w	r1, [r7, #1464]	; 0x5b8
 800d10e:	f8d7 0624 	ldr.w	r0, [r7, #1572]	; 0x624
 800d112:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d116:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800d11a:	601a      	str	r2, [r3, #0]
 800d11c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d120:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800d124:	6019      	str	r1, [r3, #0]
 800d126:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d12a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800d12e:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800d130:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d134:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800d138:	6819      	ldr	r1, [r3, #0]
 800d13a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d13e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800d142:	681a      	ldr	r2, [r3, #0]
 800d144:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d148:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	fb21 3202 	smlad	r2, r1, r2, r3
 800d152:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d156:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800d15a:	601a      	str	r2, [r3, #0]
  return(result);
 800d15c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d160:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800d164:	681b      	ldr	r3, [r3, #0]
 800d166:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624

            val2 = __SXTAB16(rhs_offset_s16x2, val0);
 800d16a:	f8d7 15c8 	ldr.w	r1, [r7, #1480]	; 0x5c8
 800d16e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d172:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 800d176:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 800d17a:	6013      	str	r3, [r2, #0]
 800d17c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d180:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800d184:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800d186:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d18a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800d18e:	681a      	ldr	r2, [r3, #0]
 800d190:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d194:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	fa22 f283 	sxtab16	r2, r2, r3
 800d19e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d1a2:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800d1a6:	601a      	str	r2, [r3, #0]
  return(result);
 800d1a8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d1ac:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	f8c7 35c4 	str.w	r3, [r7, #1476]	; 0x5c4
 800d1b6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d1ba:	f5a3 728c 	sub.w	r2, r3, #280	; 0x118
 800d1be:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800d1c2:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 800d1c4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d1c8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	461a      	mov	r2, r3
 800d1d4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d1d8:	f2a3 53a4 	subw	r3, r3, #1444	; 0x5a4
 800d1dc:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800d1de:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d1e2:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	1d1a      	adds	r2, r3, #4
 800d1ec:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d1f0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	601a      	str	r2, [r3, #0]
    return (val);
 800d1f8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d1fc:	f2a3 53a4 	subw	r3, r3, #1444	; 0x5a4
 800d200:	681b      	ldr	r3, [r3, #0]
            // Read 4 x int8 values from the LHS vector
            val1 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 800d202:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0
            val0 = __SXTAB16(rhs_offset_s16x2, __ROR(val0, 8));
 800d206:	f8d7 25c8 	ldr.w	r2, [r7, #1480]	; 0x5c8
 800d20a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d20e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800d212:	601a      	str	r2, [r3, #0]
 800d214:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d218:	f5a3 728a 	sub.w	r2, r3, #276	; 0x114
 800d21c:	2308      	movs	r3, #8
 800d21e:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 800d220:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d224:	f5a3 728a 	sub.w	r2, r3, #276	; 0x114
 800d228:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d22c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	f003 031f 	and.w	r3, r3, #31
 800d236:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 800d238:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d23c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	2b00      	cmp	r3, #0
 800d244:	d105      	bne.n	800d252 <arm_nn_vec_mat_mult_t_s8+0x126a>
    return op1;
 800d246:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d24a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800d24e:	6819      	ldr	r1, [r3, #0]
 800d250:	e00b      	b.n	800d26a <arm_nn_vec_mat_mult_t_s8+0x1282>
  return (op1 >> op2) | (op1 << (32U - op2));
 800d252:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d256:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 800d25a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d25e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800d262:	6812      	ldr	r2, [r2, #0]
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	fa62 f103 	ror.w	r1, r2, r3
 800d26a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d26e:	f5a3 7282 	sub.w	r2, r3, #260	; 0x104
 800d272:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 800d276:	6013      	str	r3, [r2, #0]
 800d278:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d27c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d280:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800d282:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d286:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d28a:	681a      	ldr	r2, [r3, #0]
 800d28c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d290:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d294:	681b      	ldr	r3, [r3, #0]
 800d296:	fa22 f283 	sxtab16	r2, r2, r3
 800d29a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d29e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800d2a2:	601a      	str	r2, [r3, #0]
  return(result);
 800d2a4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d2a8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
            val3 = __SXTAB16(lhs_offset_s16x2, val1);
 800d2b2:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 800d2b6:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 800d2ba:	f8c7 3538 	str.w	r3, [r7, #1336]	; 0x538
 800d2be:	f8c7 2534 	str.w	r2, [r7, #1332]	; 0x534
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800d2c2:	f8d7 2538 	ldr.w	r2, [r7, #1336]	; 0x538
 800d2c6:	f8d7 3534 	ldr.w	r3, [r7, #1332]	; 0x534
 800d2ca:	fa22 f283 	sxtab16	r2, r2, r3
 800d2ce:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d2d2:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800d2d6:	601a      	str	r2, [r3, #0]
  return(result);
 800d2d8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d2dc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800d2e0:	681b      	ldr	r3, [r3, #0]
 800d2e2:	f8c7 35bc 	str.w	r3, [r7, #1468]	; 0x5bc
            // Read 4 x int8 values from the RHS matrix
            val4 = arm_nn_read_q7x4((const q7_t *)rhs_ptr + off0);
 800d2e6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d2ea:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 800d2ee:	681a      	ldr	r2, [r3, #0]
 800d2f0:	f8d7 3614 	ldr.w	r3, [r7, #1556]	; 0x614
 800d2f4:	4413      	add	r3, r2
 800d2f6:	f8c7 353c 	str.w	r3, [r7, #1340]	; 0x53c
 800d2fa:	f8d7 353c 	ldr.w	r3, [r7, #1340]	; 0x53c
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 800d302:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d306:	f5a3 63b5 	sub.w	r3, r3, #1448	; 0x5a8
 800d30a:	601a      	str	r2, [r3, #0]
    return (val);
 800d30c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d310:	f5a3 63b5 	sub.w	r3, r3, #1448	; 0x5a8
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
            val1 = __SXTAB16(lhs_offset_s16x2, __ROR(val1, 8));
 800d31a:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	; 0x5c0
 800d31e:	f8c7 3544 	str.w	r3, [r7, #1348]	; 0x544
 800d322:	2308      	movs	r3, #8
 800d324:	f8c7 3540 	str.w	r3, [r7, #1344]	; 0x540
  op2 %= 32U;
 800d328:	f8d7 3540 	ldr.w	r3, [r7, #1344]	; 0x540
 800d32c:	f003 031f 	and.w	r3, r3, #31
 800d330:	f8c7 3540 	str.w	r3, [r7, #1344]	; 0x540
  if (op2 == 0U)
 800d334:	f8d7 3540 	ldr.w	r3, [r7, #1344]	; 0x540
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d102      	bne.n	800d342 <arm_nn_vec_mat_mult_t_s8+0x135a>
    return op1;
 800d33c:	f8d7 2544 	ldr.w	r2, [r7, #1348]	; 0x544
 800d340:	e004      	b.n	800d34c <arm_nn_vec_mat_mult_t_s8+0x1364>
  return (op1 >> op2) | (op1 << (32U - op2));
 800d342:	f8d7 2544 	ldr.w	r2, [r7, #1348]	; 0x544
 800d346:	f8d7 3540 	ldr.w	r3, [r7, #1344]	; 0x540
 800d34a:	41da      	rors	r2, r3
 800d34c:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 800d350:	f8c7 3550 	str.w	r3, [r7, #1360]	; 0x550
 800d354:	f8c7 254c 	str.w	r2, [r7, #1356]	; 0x54c
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800d358:	f8d7 2550 	ldr.w	r2, [r7, #1360]	; 0x550
 800d35c:	f8d7 354c 	ldr.w	r3, [r7, #1356]	; 0x54c
 800d360:	fa22 f383 	sxtab16	r3, r2, r3
 800d364:	f8c7 3548 	str.w	r3, [r7, #1352]	; 0x548
  return(result);
 800d368:	f8d7 3548 	ldr.w	r3, [r7, #1352]	; 0x548
 800d36c:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0

            // Perform the accumulations
            res00 = __SMLAD(val3, val2, res00);
 800d370:	f8d7 15bc 	ldr.w	r1, [r7, #1468]	; 0x5bc
 800d374:	f8d7 25c4 	ldr.w	r2, [r7, #1476]	; 0x5c4
 800d378:	f8d7 3628 	ldr.w	r3, [r7, #1576]	; 0x628
 800d37c:	f8c7 1560 	str.w	r1, [r7, #1376]	; 0x560
 800d380:	f8c7 255c 	str.w	r2, [r7, #1372]	; 0x55c
 800d384:	f8c7 3558 	str.w	r3, [r7, #1368]	; 0x558
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800d388:	f8d7 1560 	ldr.w	r1, [r7, #1376]	; 0x560
 800d38c:	f8d7 255c 	ldr.w	r2, [r7, #1372]	; 0x55c
 800d390:	f8d7 3558 	ldr.w	r3, [r7, #1368]	; 0x558
 800d394:	fb21 3302 	smlad	r3, r1, r2, r3
 800d398:	f8c7 3554 	str.w	r3, [r7, #1364]	; 0x554
  return(result);
 800d39c:	f8d7 3554 	ldr.w	r3, [r7, #1364]	; 0x554
 800d3a0:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            val5 = __SXTAB16(rhs_offset_s16x2, val4);
 800d3a4:	f8d7 25b8 	ldr.w	r2, [r7, #1464]	; 0x5b8
 800d3a8:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 800d3ac:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 800d3b0:	f8c7 2568 	str.w	r2, [r7, #1384]	; 0x568
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800d3b4:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 800d3b8:	f8d7 3568 	ldr.w	r3, [r7, #1384]	; 0x568
 800d3bc:	fa22 f383 	sxtab16	r3, r2, r3
 800d3c0:	f8c7 3564 	str.w	r3, [r7, #1380]	; 0x564
  return(result);
 800d3c4:	f8d7 3564 	ldr.w	r3, [r7, #1380]	; 0x564
 800d3c8:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
            res00 = __SMLAD(val1, val0, res00);
 800d3cc:	f8d7 15c0 	ldr.w	r1, [r7, #1472]	; 0x5c0
 800d3d0:	f8d7 25c8 	ldr.w	r2, [r7, #1480]	; 0x5c8
 800d3d4:	f8d7 3628 	ldr.w	r3, [r7, #1576]	; 0x628
 800d3d8:	f8c7 157c 	str.w	r1, [r7, #1404]	; 0x57c
 800d3dc:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 800d3e0:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800d3e4:	f8d7 157c 	ldr.w	r1, [r7, #1404]	; 0x57c
 800d3e8:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 800d3ec:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 800d3f0:	fb21 3302 	smlad	r3, r1, r2, r3
 800d3f4:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
  return(result);
 800d3f8:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 800d3fc:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            val4 = __SXTAB16(rhs_offset_s16x2, __ROR(val4, 8));
 800d400:	f8d7 35b8 	ldr.w	r3, [r7, #1464]	; 0x5b8
 800d404:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
 800d408:	2308      	movs	r3, #8
 800d40a:	f8c7 3580 	str.w	r3, [r7, #1408]	; 0x580
  op2 %= 32U;
 800d40e:	f8d7 3580 	ldr.w	r3, [r7, #1408]	; 0x580
 800d412:	f003 031f 	and.w	r3, r3, #31
 800d416:	f8c7 3580 	str.w	r3, [r7, #1408]	; 0x580
  if (op2 == 0U)
 800d41a:	f8d7 3580 	ldr.w	r3, [r7, #1408]	; 0x580
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d102      	bne.n	800d428 <arm_nn_vec_mat_mult_t_s8+0x1440>
    return op1;
 800d422:	f8d7 2584 	ldr.w	r2, [r7, #1412]	; 0x584
 800d426:	e004      	b.n	800d432 <arm_nn_vec_mat_mult_t_s8+0x144a>
  return (op1 >> op2) | (op1 << (32U - op2));
 800d428:	f8d7 2584 	ldr.w	r2, [r7, #1412]	; 0x584
 800d42c:	f8d7 3580 	ldr.w	r3, [r7, #1408]	; 0x580
 800d430:	41da      	rors	r2, r3
 800d432:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 800d436:	f8c7 3590 	str.w	r3, [r7, #1424]	; 0x590
 800d43a:	f8c7 258c 	str.w	r2, [r7, #1420]	; 0x58c
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800d43e:	f8d7 2590 	ldr.w	r2, [r7, #1424]	; 0x590
 800d442:	f8d7 358c 	ldr.w	r3, [r7, #1420]	; 0x58c
 800d446:	fa22 f383 	sxtab16	r3, r2, r3
 800d44a:	f8c7 3588 	str.w	r3, [r7, #1416]	; 0x588
  return(result);
 800d44e:	f8d7 3588 	ldr.w	r3, [r7, #1416]	; 0x588
 800d452:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
            res01 = __SMLAD(val3, val5, res01);
 800d456:	f8d7 15bc 	ldr.w	r1, [r7, #1468]	; 0x5bc
 800d45a:	f8d7 25b4 	ldr.w	r2, [r7, #1460]	; 0x5b4
 800d45e:	f8d7 3624 	ldr.w	r3, [r7, #1572]	; 0x624
 800d462:	f8c7 15a0 	str.w	r1, [r7, #1440]	; 0x5a0
 800d466:	f8c7 259c 	str.w	r2, [r7, #1436]	; 0x59c
 800d46a:	f8c7 3598 	str.w	r3, [r7, #1432]	; 0x598
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800d46e:	f8d7 15a0 	ldr.w	r1, [r7, #1440]	; 0x5a0
 800d472:	f8d7 259c 	ldr.w	r2, [r7, #1436]	; 0x59c
 800d476:	f8d7 3598 	ldr.w	r3, [r7, #1432]	; 0x598
 800d47a:	fb21 3302 	smlad	r3, r1, r2, r3
 800d47e:	f8c7 3594 	str.w	r3, [r7, #1428]	; 0x594
  return(result);
 800d482:	f8d7 3594 	ldr.w	r3, [r7, #1428]	; 0x594
 800d486:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
            res01 = __SMLAD(val1, val4, res01);
 800d48a:	f8d7 15c0 	ldr.w	r1, [r7, #1472]	; 0x5c0
 800d48e:	f8d7 25b8 	ldr.w	r2, [r7, #1464]	; 0x5b8
 800d492:	f8d7 3624 	ldr.w	r3, [r7, #1572]	; 0x624
 800d496:	f8c7 15b0 	str.w	r1, [r7, #1456]	; 0x5b0
 800d49a:	f8c7 25ac 	str.w	r2, [r7, #1452]	; 0x5ac
 800d49e:	f8c7 35a8 	str.w	r3, [r7, #1448]	; 0x5a8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800d4a2:	f8d7 15b0 	ldr.w	r1, [r7, #1456]	; 0x5b0
 800d4a6:	f8d7 25ac 	ldr.w	r2, [r7, #1452]	; 0x5ac
 800d4aa:	f8d7 35a8 	ldr.w	r3, [r7, #1448]	; 0x5a8
 800d4ae:	fb21 3302 	smlad	r3, r1, r2, r3
 800d4b2:	f8c7 35a4 	str.w	r3, [r7, #1444]	; 0x5a4
  return(result);
 800d4b6:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	; 0x5a4
 800d4ba:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 800d4be:	f8d7 3620 	ldr.w	r3, [r7, #1568]	; 0x620
 800d4c2:	3310      	adds	r3, #16
 800d4c4:	f8c7 3620 	str.w	r3, [r7, #1568]	; 0x620
 800d4c8:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 800d4cc:	f1a3 020f 	sub.w	r2, r3, #15
 800d4d0:	f8d7 3620 	ldr.w	r3, [r7, #1568]	; 0x620
 800d4d4:	4293      	cmp	r3, r2
 800d4d6:	f6fe ae1c 	blt.w	800c112 <arm_nn_vec_mat_mult_t_s8+0x12a>
        }

        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800d4da:	e05a      	b.n	800d592 <arm_nn_vec_mat_mult_t_s8+0x15aa>
        {
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 800d4dc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d4e0:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	f993 3000 	ldrsb.w	r3, [r3]
 800d4ea:	461a      	mov	r2, r3
 800d4ec:	f8d7 3654 	ldr.w	r3, [r7, #1620]	; 0x654
 800d4f0:	4413      	add	r3, r2
 800d4f2:	f8c7 35d4 	str.w	r3, [r7, #1492]	; 0x5d4
            q31_t rhs_value1 = rhs_ptr[rhs_cols] + rhs_offset;
 800d4f6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d4fa:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 800d4fe:	681a      	ldr	r2, [r3, #0]
 800d500:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 800d504:	4413      	add	r3, r2
 800d506:	f993 3000 	ldrsb.w	r3, [r3]
 800d50a:	461a      	mov	r2, r3
 800d50c:	f8d7 3654 	ldr.w	r3, [r7, #1620]	; 0x654
 800d510:	4413      	add	r3, r2
 800d512:	f8c7 35d0 	str.w	r3, [r7, #1488]	; 0x5d0
            q31_t lhs_value = lhs_ptr[0] + lhs_offset;
 800d516:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d51a:	f5a3 63ac 	sub.w	r3, r3, #1376	; 0x560
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	f993 3000 	ldrsb.w	r3, [r3]
 800d524:	461a      	mov	r2, r3
 800d526:	f8d7 3650 	ldr.w	r3, [r7, #1616]	; 0x650
 800d52a:	4413      	add	r3, r2
 800d52c:	f8c7 35cc 	str.w	r3, [r7, #1484]	; 0x5cc

            res00 += lhs_value * rhs_value0;
 800d530:	f8d7 25cc 	ldr.w	r2, [r7, #1484]	; 0x5cc
 800d534:	f8d7 35d4 	ldr.w	r3, [r7, #1492]	; 0x5d4
 800d538:	fb03 f202 	mul.w	r2, r3, r2
 800d53c:	f8d7 3628 	ldr.w	r3, [r7, #1576]	; 0x628
 800d540:	4413      	add	r3, r2
 800d542:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            res01 += lhs_value * rhs_value1;
 800d546:	f8d7 25cc 	ldr.w	r2, [r7, #1484]	; 0x5cc
 800d54a:	f8d7 35d0 	ldr.w	r3, [r7, #1488]	; 0x5d0
 800d54e:	fb03 f202 	mul.w	r2, r3, r2
 800d552:	f8d7 3624 	ldr.w	r3, [r7, #1572]	; 0x624
 800d556:	4413      	add	r3, r2
 800d558:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624

            ++rhs_ptr;
 800d55c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d560:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	1c5a      	adds	r2, r3, #1
 800d568:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d56c:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 800d570:	601a      	str	r2, [r3, #0]
            ++lhs_ptr;
 800d572:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d576:	f5a3 63ac 	sub.w	r3, r3, #1376	; 0x560
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	1c5a      	adds	r2, r3, #1
 800d57e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d582:	f5a3 63ac 	sub.w	r3, r3, #1376	; 0x560
 800d586:	601a      	str	r2, [r3, #0]
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800d588:	f8d7 3620 	ldr.w	r3, [r7, #1568]	; 0x620
 800d58c:	3301      	adds	r3, #1
 800d58e:	f8c7 3620 	str.w	r3, [r7, #1568]	; 0x620
 800d592:	f8d7 2620 	ldr.w	r2, [r7, #1568]	; 0x620
 800d596:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 800d59a:	429a      	cmp	r2, r3
 800d59c:	db9e      	blt.n	800d4dc <arm_nn_vec_mat_mult_t_s8+0x14f4>
 800d59e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d5a2:	f5a3 7258 	sub.w	r2, r3, #864	; 0x360
 800d5a6:	f8d7 3628 	ldr.w	r3, [r7, #1576]	; 0x628
 800d5aa:	6013      	str	r3, [r2, #0]
 800d5ac:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d5b0:	f5a3 7259 	sub.w	r2, r3, #868	; 0x364
 800d5b4:	f8d7 365c 	ldr.w	r3, [r7, #1628]	; 0x65c
 800d5b8:	6013      	str	r3, [r2, #0]
 800d5ba:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d5be:	f5a3 725a 	sub.w	r2, r3, #872	; 0x368
 800d5c2:	f8d7 3660 	ldr.w	r3, [r7, #1632]	; 0x660
 800d5c6:	6013      	str	r3, [r2, #0]
 * @return          Returns (val * multiplier)/(2 ^ shift)
 *
 */
__STATIC_FORCEINLINE q31_t arm_nn_requantize(const q31_t val, const q31_t multiplier, const q31_t shift)
{
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800d5c8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d5cc:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 800d5d6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d5da:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	fa03 f202 	lsl.w	r2, r3, r2
 800d5e4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d5e8:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 800d5ec:	601a      	str	r2, [r3, #0]
 800d5ee:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d5f2:	f5a3 725c 	sub.w	r2, r3, #880	; 0x370
 800d5f6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d5fa:	f5a3 7359 	sub.w	r3, r3, #868	; 0x364
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 800d602:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d606:	f5a3 725d 	sub.w	r2, r3, #884	; 0x374
 800d60a:	2300      	movs	r3, #0
 800d60c:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 800d60e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800d612:	461a      	mov	r2, r3
 800d614:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d618:	6013      	str	r3, [r2, #0]
    mult.word.high = 0;
 800d61a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800d61e:	461a      	mov	r2, r3
 800d620:	2300      	movs	r3, #0
 800d622:	6053      	str	r3, [r2, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800d624:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800d628:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d62c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d630:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	17da      	asrs	r2, r3, #31
 800d638:	633b      	str	r3, [r7, #48]	; 0x30
 800d63a:	637a      	str	r2, [r7, #52]	; 0x34
 800d63c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d640:	f5a3 735c 	sub.w	r3, r3, #880	; 0x370
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	17da      	asrs	r2, r3, #31
 800d648:	62bb      	str	r3, [r7, #40]	; 0x28
 800d64a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d64c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d64e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d650:	fb02 f203 	mul.w	r2, r2, r3
 800d654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d656:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800d658:	fb04 f303 	mul.w	r3, r4, r3
 800d65c:	4413      	add	r3, r2
 800d65e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d660:	6abc      	ldr	r4, [r7, #40]	; 0x28
 800d662:	fba2 5604 	umull	r5, r6, r2, r4
 800d666:	4433      	add	r3, r6
 800d668:	461e      	mov	r6, r3
 800d66a:	1943      	adds	r3, r0, r5
 800d66c:	61bb      	str	r3, [r7, #24]
 800d66e:	eb41 0306 	adc.w	r3, r1, r6
 800d672:	61fb      	str	r3, [r7, #28]
 800d674:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800d678:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800d67c:	e9c3 1200 	strd	r1, r2, [r3]
    result = (int32_t)(mult.long_long >> 31);
 800d680:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800d684:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d688:	f04f 0000 	mov.w	r0, #0
 800d68c:	f04f 0100 	mov.w	r1, #0
 800d690:	0fd0      	lsrs	r0, r2, #31
 800d692:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800d696:	17d9      	asrs	r1, r3, #31
 800d698:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d69c:	f5a3 725d 	sub.w	r2, r3, #884	; 0x374
 800d6a0:	4603      	mov	r3, r0
 800d6a2:	6013      	str	r3, [r2, #0]
    return result;
 800d6a4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d6a8:	f5a3 735d 	sub.w	r3, r3, #884	; 0x374
 800d6ac:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800d6ae:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d6b2:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	dc06      	bgt.n	800d6ca <arm_nn_vec_mat_mult_t_s8+0x16e2>
 800d6bc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d6c0:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 800d6c4:	681b      	ldr	r3, [r3, #0]
 800d6c6:	425a      	negs	r2, r3
 800d6c8:	e000      	b.n	800d6cc <arm_nn_vec_mat_mult_t_s8+0x16e4>
 800d6ca:	2200      	movs	r2, #0
 800d6cc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d6d0:	f5a3 735e 	sub.w	r3, r3, #888	; 0x378
 800d6d4:	6019      	str	r1, [r3, #0]
 800d6d6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d6da:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 800d6de:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 800d6e0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d6e4:	f5a3 7260 	sub.w	r2, r3, #896	; 0x380
 800d6e8:	2300      	movs	r3, #0
 800d6ea:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 800d6ec:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d6f0:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 800d6f4:	2201      	movs	r2, #1
 800d6f6:	681b      	ldr	r3, [r3, #0]
 800d6f8:	fa02 f103 	lsl.w	r1, r2, r3
 800d6fc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d700:	f5a3 7261 	sub.w	r2, r3, #900	; 0x384
 800d704:	1e4b      	subs	r3, r1, #1
 800d706:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 800d708:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d70c:	f5a3 7162 	sub.w	r1, r3, #904	; 0x388
 800d710:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d714:	f5a3 725e 	sub.w	r2, r3, #888	; 0x378
 800d718:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d71c:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 800d720:	6812      	ldr	r2, [r2, #0]
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	4013      	ands	r3, r2
 800d726:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 800d728:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d72c:	f5a3 7160 	sub.w	r1, r3, #896	; 0x380
 800d730:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d734:	f5a3 725e 	sub.w	r2, r3, #888	; 0x378
 800d738:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d73c:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 800d740:	6812      	ldr	r2, [r2, #0]
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	fa42 f303 	asr.w	r3, r2, r3
 800d748:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 800d74a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d74e:	f5a3 7263 	sub.w	r2, r3, #908	; 0x38c
 800d752:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d756:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	105b      	asrs	r3, r3, #1
 800d75e:	6013      	str	r3, [r2, #0]
    if (result < 0)
 800d760:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d764:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 800d768:	681b      	ldr	r3, [r3, #0]
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	da0a      	bge.n	800d784 <arm_nn_vec_mat_mult_t_s8+0x179c>
        threshold++;
 800d76e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d772:	f5a3 7263 	sub.w	r2, r3, #908	; 0x38c
 800d776:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d77a:	f5a3 7363 	sub.w	r3, r3, #908	; 0x38c
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	3301      	adds	r3, #1
 800d782:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 800d784:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d788:	f5a3 7262 	sub.w	r2, r3, #904	; 0x388
 800d78c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d790:	f5a3 7363 	sub.w	r3, r3, #908	; 0x38c
 800d794:	6812      	ldr	r2, [r2, #0]
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	429a      	cmp	r2, r3
 800d79a:	dd0a      	ble.n	800d7b2 <arm_nn_vec_mat_mult_t_s8+0x17ca>
        result++;
 800d79c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d7a0:	f5a3 7260 	sub.w	r2, r3, #896	; 0x380
 800d7a4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d7a8:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	3301      	adds	r3, #1
 800d7b0:	6013      	str	r3, [r2, #0]
    return result;
 800d7b2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d7b6:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 800d7ba:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800d7bc:	bf00      	nop
        }

        // Quantize down
        res00 = arm_nn_requantize(res00, dst_multiplier, dst_shift);
 800d7be:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
 800d7c2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d7c6:	f5a3 724c 	sub.w	r2, r3, #816	; 0x330
 800d7ca:	f8d7 3624 	ldr.w	r3, [r7, #1572]	; 0x624
 800d7ce:	6013      	str	r3, [r2, #0]
 800d7d0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d7d4:	f5a3 724d 	sub.w	r2, r3, #820	; 0x334
 800d7d8:	f8d7 365c 	ldr.w	r3, [r7, #1628]	; 0x65c
 800d7dc:	6013      	str	r3, [r2, #0]
 800d7de:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d7e2:	f5a3 724e 	sub.w	r2, r3, #824	; 0x338
 800d7e6:	f8d7 3660 	ldr.w	r3, [r7, #1632]	; 0x660
 800d7ea:	6013      	str	r3, [r2, #0]
 800d7ec:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d7f0:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 800d7fa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d7fe:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	fa03 f202 	lsl.w	r2, r3, r2
 800d808:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d80c:	f5a3 734f 	sub.w	r3, r3, #828	; 0x33c
 800d810:	601a      	str	r2, [r3, #0]
 800d812:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d816:	f5a3 7250 	sub.w	r2, r3, #832	; 0x340
 800d81a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d81e:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 800d826:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d82a:	f5a3 7251 	sub.w	r2, r3, #836	; 0x344
 800d82e:	2300      	movs	r3, #0
 800d830:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 800d832:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800d836:	461a      	mov	r2, r3
 800d838:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d83c:	f842 3c08 	str.w	r3, [r2, #-8]
    mult.word.high = 0;
 800d840:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800d844:	461a      	mov	r2, r3
 800d846:	2300      	movs	r3, #0
 800d848:	f842 3c04 	str.w	r3, [r2, #-4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800d84c:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800d850:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800d854:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d858:	f5a3 734f 	sub.w	r3, r3, #828	; 0x33c
 800d85c:	681b      	ldr	r3, [r3, #0]
 800d85e:	17da      	asrs	r2, r3, #31
 800d860:	643b      	str	r3, [r7, #64]	; 0x40
 800d862:	647a      	str	r2, [r7, #68]	; 0x44
 800d864:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d868:	f5a3 7350 	sub.w	r3, r3, #832	; 0x340
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	17da      	asrs	r2, r3, #31
 800d870:	63bb      	str	r3, [r7, #56]	; 0x38
 800d872:	63fa      	str	r2, [r7, #60]	; 0x3c
 800d874:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d876:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d878:	fb02 f203 	mul.w	r2, r2, r3
 800d87c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d87e:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 800d880:	fb04 f303 	mul.w	r3, r4, r3
 800d884:	4413      	add	r3, r2
 800d886:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d888:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 800d88a:	fba2 ab04 	umull	sl, fp, r2, r4
 800d88e:	445b      	add	r3, fp
 800d890:	469b      	mov	fp, r3
 800d892:	eb10 030a 	adds.w	r3, r0, sl
 800d896:	623b      	str	r3, [r7, #32]
 800d898:	eb41 030b 	adc.w	r3, r1, fp
 800d89c:	627b      	str	r3, [r7, #36]	; 0x24
 800d89e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800d8a2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800d8a6:	e943 1202 	strd	r1, r2, [r3, #-8]
    result = (int32_t)(mult.long_long >> 31);
 800d8aa:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800d8ae:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d8b2:	f04f 0000 	mov.w	r0, #0
 800d8b6:	f04f 0100 	mov.w	r1, #0
 800d8ba:	0fd0      	lsrs	r0, r2, #31
 800d8bc:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800d8c0:	17d9      	asrs	r1, r3, #31
 800d8c2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d8c6:	f5a3 7251 	sub.w	r2, r3, #836	; 0x344
 800d8ca:	4603      	mov	r3, r0
 800d8cc:	6013      	str	r3, [r2, #0]
    return result;
 800d8ce:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d8d2:	f5a3 7351 	sub.w	r3, r3, #836	; 0x344
 800d8d6:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800d8d8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d8dc:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	dc06      	bgt.n	800d8f4 <arm_nn_vec_mat_mult_t_s8+0x190c>
 800d8e6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d8ea:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	425a      	negs	r2, r3
 800d8f2:	e000      	b.n	800d8f6 <arm_nn_vec_mat_mult_t_s8+0x190e>
 800d8f4:	2200      	movs	r2, #0
 800d8f6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d8fa:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 800d8fe:	6019      	str	r1, [r3, #0]
 800d900:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d904:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 800d908:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 800d90a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d90e:	f5a3 7254 	sub.w	r2, r3, #848	; 0x350
 800d912:	2300      	movs	r3, #0
 800d914:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 800d916:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d91a:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 800d91e:	2201      	movs	r2, #1
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	fa02 f103 	lsl.w	r1, r2, r3
 800d926:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d92a:	f5a3 7255 	sub.w	r2, r3, #852	; 0x354
 800d92e:	1e4b      	subs	r3, r1, #1
 800d930:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 800d932:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d936:	f5a3 7156 	sub.w	r1, r3, #856	; 0x358
 800d93a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d93e:	f5a3 7252 	sub.w	r2, r3, #840	; 0x348
 800d942:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d946:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 800d94a:	6812      	ldr	r2, [r2, #0]
 800d94c:	681b      	ldr	r3, [r3, #0]
 800d94e:	4013      	ands	r3, r2
 800d950:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 800d952:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d956:	f5a3 7154 	sub.w	r1, r3, #848	; 0x350
 800d95a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d95e:	f5a3 7252 	sub.w	r2, r3, #840	; 0x348
 800d962:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d966:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 800d96a:	6812      	ldr	r2, [r2, #0]
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	fa42 f303 	asr.w	r3, r2, r3
 800d972:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 800d974:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d978:	f5a3 7257 	sub.w	r2, r3, #860	; 0x35c
 800d97c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d980:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 800d984:	681b      	ldr	r3, [r3, #0]
 800d986:	105b      	asrs	r3, r3, #1
 800d988:	6013      	str	r3, [r2, #0]
    if (result < 0)
 800d98a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d98e:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	2b00      	cmp	r3, #0
 800d996:	da0a      	bge.n	800d9ae <arm_nn_vec_mat_mult_t_s8+0x19c6>
        threshold++;
 800d998:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d99c:	f5a3 7257 	sub.w	r2, r3, #860	; 0x35c
 800d9a0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d9a4:	f5a3 7357 	sub.w	r3, r3, #860	; 0x35c
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	3301      	adds	r3, #1
 800d9ac:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 800d9ae:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d9b2:	f5a3 7256 	sub.w	r2, r3, #856	; 0x358
 800d9b6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d9ba:	f5a3 7357 	sub.w	r3, r3, #860	; 0x35c
 800d9be:	6812      	ldr	r2, [r2, #0]
 800d9c0:	681b      	ldr	r3, [r3, #0]
 800d9c2:	429a      	cmp	r2, r3
 800d9c4:	dd0a      	ble.n	800d9dc <arm_nn_vec_mat_mult_t_s8+0x19f4>
        result++;
 800d9c6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d9ca:	f5a3 7254 	sub.w	r2, r3, #848	; 0x350
 800d9ce:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d9d2:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 800d9d6:	681b      	ldr	r3, [r3, #0]
 800d9d8:	3301      	adds	r3, #1
 800d9da:	6013      	str	r3, [r2, #0]
    return result;
 800d9dc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d9e0:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 800d9e4:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800d9e6:	bf00      	nop
        res01 = arm_nn_requantize(res01, dst_multiplier, dst_shift);
 800d9e8:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624

        // Add offset
        res00 += dst_offset;
 800d9ec:	f8d7 2628 	ldr.w	r2, [r7, #1576]	; 0x628
 800d9f0:	f8d7 3658 	ldr.w	r3, [r7, #1624]	; 0x658
 800d9f4:	4413      	add	r3, r2
 800d9f6:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
        res01 += dst_offset;
 800d9fa:	f8d7 2624 	ldr.w	r2, [r7, #1572]	; 0x624
 800d9fe:	f8d7 3658 	ldr.w	r3, [r7, #1624]	; 0x658
 800da02:	4413      	add	r3, r2
 800da04:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624

        // Clamp the result
        res00 = MAX(res00, activation_min);
 800da08:	f8d7 2628 	ldr.w	r2, [r7, #1576]	; 0x628
 800da0c:	f8d7 366c 	ldr.w	r3, [r7, #1644]	; 0x66c
 800da10:	4293      	cmp	r3, r2
 800da12:	bfb8      	it	lt
 800da14:	4613      	movlt	r3, r2
 800da16:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
        res00 = MIN(res00, activation_max);
 800da1a:	f8d7 2628 	ldr.w	r2, [r7, #1576]	; 0x628
 800da1e:	f8d7 3670 	ldr.w	r3, [r7, #1648]	; 0x670
 800da22:	4293      	cmp	r3, r2
 800da24:	bfa8      	it	ge
 800da26:	4613      	movge	r3, r2
 800da28:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
        res01 = MAX(res01, activation_min);
 800da2c:	f8d7 2624 	ldr.w	r2, [r7, #1572]	; 0x624
 800da30:	f8d7 366c 	ldr.w	r3, [r7, #1644]	; 0x66c
 800da34:	4293      	cmp	r3, r2
 800da36:	bfb8      	it	lt
 800da38:	4613      	movlt	r3, r2
 800da3a:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
        res01 = MIN(res01, activation_max);
 800da3e:	f8d7 2624 	ldr.w	r2, [r7, #1572]	; 0x624
 800da42:	f8d7 3670 	ldr.w	r3, [r7, #1648]	; 0x670
 800da46:	4293      	cmp	r3, r2
 800da48:	bfa8      	it	ge
 800da4a:	4613      	movge	r3, r2
 800da4c:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624

        *dst++ = (q7_t)res00;
 800da50:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800da54:	f5a3 63bd 	sub.w	r3, r3, #1512	; 0x5e8
 800da58:	6819      	ldr	r1, [r3, #0]
 800da5a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800da5e:	f5a3 62bd 	sub.w	r2, r3, #1512	; 0x5e8
 800da62:	1c4b      	adds	r3, r1, #1
 800da64:	6013      	str	r3, [r2, #0]
 800da66:	f8d7 3628 	ldr.w	r3, [r7, #1576]	; 0x628
 800da6a:	b25b      	sxtb	r3, r3
 800da6c:	700b      	strb	r3, [r1, #0]
        *dst++ = (q7_t)res01;
 800da6e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800da72:	f5a3 63bd 	sub.w	r3, r3, #1512	; 0x5e8
 800da76:	6819      	ldr	r1, [r3, #0]
 800da78:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800da7c:	f5a3 62bd 	sub.w	r2, r3, #1512	; 0x5e8
 800da80:	1c4b      	adds	r3, r1, #1
 800da82:	6013      	str	r3, [r2, #0]
 800da84:	f8d7 3624 	ldr.w	r3, [r7, #1572]	; 0x624
 800da88:	b25b      	sxtb	r3, r3
 800da8a:	700b      	strb	r3, [r1, #0]

        rhs += 2 * rhs_cols;
 800da8c:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 800da90:	005b      	lsls	r3, r3, #1
 800da92:	4619      	mov	r1, r3
 800da94:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800da98:	f5a3 62bc 	sub.w	r2, r3, #1504	; 0x5e0
 800da9c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800daa0:	f5a3 63bc 	sub.w	r3, r3, #1504	; 0x5e0
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	440b      	add	r3, r1
 800daa8:	6013      	str	r3, [r2, #0]
    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
 800daaa:	f8d7 362c 	ldr.w	r3, [r7, #1580]	; 0x62c
 800daae:	3302      	adds	r3, #2
 800dab0:	f8c7 362c 	str.w	r3, [r7, #1580]	; 0x62c
 800dab4:	f8d7 3668 	ldr.w	r3, [r7, #1640]	; 0x668
 800dab8:	1e5a      	subs	r2, r3, #1
 800daba:	f8d7 362c 	ldr.w	r3, [r7, #1580]	; 0x62c
 800dabe:	4293      	cmp	r3, r2
 800dac0:	f6fe aae5 	blt.w	800c08e <arm_nn_vec_mat_mult_t_s8+0xa6>
    }

    if (rhs_rows % 2)
 800dac4:	f8d7 3668 	ldr.w	r3, [r7, #1640]	; 0x668
 800dac8:	f003 0301 	and.w	r3, r3, #1
 800dacc:	2b00      	cmp	r3, #0
 800dace:	f001 806e 	beq.w	800ebae <arm_nn_vec_mat_mult_t_s8+0x2bc6>
    {
        const q7_t *lhs_ptr = &lhs[0];
 800dad2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dad6:	f2a3 53ac 	subw	r3, r3, #1452	; 0x5ac
 800dada:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800dade:	f2a2 52dc 	subw	r2, r2, #1500	; 0x5dc
 800dae2:	6812      	ldr	r2, [r2, #0]
 800dae4:	601a      	str	r2, [r3, #0]
        const q7_t *rhs_ptr = &rhs[0];
 800dae6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800daea:	f5a3 63b6 	sub.w	r3, r3, #1456	; 0x5b0
 800daee:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800daf2:	f5a2 62bc 	sub.w	r2, r2, #1504	; 0x5e0
 800daf6:	6812      	ldr	r2, [r2, #0]
 800daf8:	601a      	str	r2, [r3, #0]

        q31_t res00 = 0;
 800dafa:	2300      	movs	r3, #0
 800dafc:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
        if (bias)
 800db00:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800db04:	f2a3 53e4 	subw	r3, r3, #1508	; 0x5e4
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d00d      	beq.n	800db2a <arm_nn_vec_mat_mult_t_s8+0x1b42>
        {
            res00 = *bias++;
 800db0e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800db12:	f2a3 53e4 	subw	r3, r3, #1508	; 0x5e4
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800db1c:	f2a2 52e4 	subw	r2, r2, #1508	; 0x5e4
 800db20:	1d19      	adds	r1, r3, #4
 800db22:	6011      	str	r1, [r2, #0]
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
        }

        int32_t rhs_cols_idx = 0;
 800db2a:	2300      	movs	r3, #0
 800db2c:	f8c7 3618 	str.w	r3, [r7, #1560]	; 0x618

        q31_t val0, val1, val2, val3;
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 800db30:	f000 beb5 	b.w	800e89e <arm_nn_vec_mat_mult_t_s8+0x28b6>
 800db34:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800db38:	f2a3 532c 	subw	r3, r3, #1324	; 0x52c
 800db3c:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800db40:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 800db42:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800db46:	f2a3 532c 	subw	r3, r3, #1324	; 0x52c
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	461a      	mov	r2, r3
 800db52:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800db56:	f2a3 53bc 	subw	r3, r3, #1468	; 0x5bc
 800db5a:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800db5c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800db60:	f2a3 532c 	subw	r3, r3, #1324	; 0x52c
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	1d1a      	adds	r2, r3, #4
 800db6a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800db6e:	f2a3 532c 	subw	r3, r3, #1324	; 0x52c
 800db72:	681b      	ldr	r3, [r3, #0]
 800db74:	601a      	str	r2, [r3, #0]
    return (val);
 800db76:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800db7a:	f2a3 53bc 	subw	r3, r3, #1468	; 0x5bc
 800db7e:	681b      	ldr	r3, [r3, #0]
        {
            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 800db80:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
            val1 = __SXTAB16(rhs_offset_s16x2, val0);
 800db84:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	; 0x5e4
 800db88:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800db8c:	f5a3 63a4 	sub.w	r3, r3, #1312	; 0x520
 800db90:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
 800db94:	6019      	str	r1, [r3, #0]
 800db96:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800db9a:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 800db9e:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800dba0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dba4:	f5a3 63a4 	sub.w	r3, r3, #1312	; 0x520
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800dbae:	f2a2 5224 	subw	r2, r2, #1316	; 0x524
 800dbb2:	6812      	ldr	r2, [r2, #0]
 800dbb4:	fa23 f282 	sxtab16	r2, r3, r2
 800dbb8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dbbc:	f5a3 63a5 	sub.w	r3, r3, #1320	; 0x528
 800dbc0:	601a      	str	r2, [r3, #0]
  return(result);
 800dbc2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dbc6:	f5a3 63a5 	sub.w	r3, r3, #1320	; 0x528
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	f8c7 35e0 	str.w	r3, [r7, #1504]	; 0x5e0
 800dbd0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dbd4:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 800dbd8:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800dbdc:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 800dbde:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dbe2:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	681b      	ldr	r3, [r3, #0]
 800dbec:	461a      	mov	r2, r3
 800dbee:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dbf2:	f5a3 63b8 	sub.w	r3, r3, #1472	; 0x5c0
 800dbf6:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800dbf8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dbfc:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	681b      	ldr	r3, [r3, #0]
 800dc04:	1d1a      	adds	r2, r3, #4
 800dc06:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dc0a:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	601a      	str	r2, [r3, #0]
    return (val);
 800dc12:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dc16:	f5a3 63b8 	sub.w	r3, r3, #1472	; 0x5c0
 800dc1a:	681b      	ldr	r3, [r3, #0]
            val2 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 800dc1c:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc
            val0 = __SXTAB16(rhs_offset_s16x2, __ROR(val0, 8));
 800dc20:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	; 0x5e4
 800dc24:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dc28:	f2a3 5314 	subw	r3, r3, #1300	; 0x514
 800dc2c:	601a      	str	r2, [r3, #0]
 800dc2e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dc32:	f5a3 63a3 	sub.w	r3, r3, #1304	; 0x518
 800dc36:	2208      	movs	r2, #8
 800dc38:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 800dc3a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dc3e:	f5a3 63a3 	sub.w	r3, r3, #1304	; 0x518
 800dc42:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800dc46:	f5a2 62a3 	sub.w	r2, r2, #1304	; 0x518
 800dc4a:	6812      	ldr	r2, [r2, #0]
 800dc4c:	f002 021f 	and.w	r2, r2, #31
 800dc50:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 800dc52:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dc56:	f5a3 63a3 	sub.w	r3, r3, #1304	; 0x518
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d105      	bne.n	800dc6c <arm_nn_vec_mat_mult_t_s8+0x1c84>
    return op1;
 800dc60:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dc64:	f2a3 5314 	subw	r3, r3, #1300	; 0x514
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	e00b      	b.n	800dc84 <arm_nn_vec_mat_mult_t_s8+0x1c9c>
  return (op1 >> op2) | (op1 << (32U - op2));
 800dc6c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dc70:	f2a3 5214 	subw	r2, r3, #1300	; 0x514
 800dc74:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dc78:	f5a3 63a3 	sub.w	r3, r3, #1304	; 0x518
 800dc7c:	6812      	ldr	r2, [r2, #0]
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	fa62 f303 	ror.w	r3, r2, r3
 800dc84:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800dc88:	f5a2 62a1 	sub.w	r2, r2, #1288	; 0x508
 800dc8c:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
 800dc90:	6011      	str	r1, [r2, #0]
 800dc92:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800dc96:	f2a2 520c 	subw	r2, r2, #1292	; 0x50c
 800dc9a:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800dc9c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dca0:	f5a3 63a1 	sub.w	r3, r3, #1288	; 0x508
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800dcaa:	f2a2 520c 	subw	r2, r2, #1292	; 0x50c
 800dcae:	6812      	ldr	r2, [r2, #0]
 800dcb0:	fa23 f282 	sxtab16	r2, r3, r2
 800dcb4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dcb8:	f5a3 63a2 	sub.w	r3, r3, #1296	; 0x510
 800dcbc:	601a      	str	r2, [r3, #0]
  return(result);
 800dcbe:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dcc2:	f5a3 63a2 	sub.w	r3, r3, #1296	; 0x510
 800dcc6:	681b      	ldr	r3, [r3, #0]
 800dcc8:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
            val3 = __SXTAB16(lhs_offset_s16x2, val2);
 800dccc:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	; 0x5dc
 800dcd0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dcd4:	f2a3 43fc 	subw	r3, r3, #1276	; 0x4fc
 800dcd8:	f8d7 1600 	ldr.w	r1, [r7, #1536]	; 0x600
 800dcdc:	6019      	str	r1, [r3, #0]
 800dcde:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dce2:	f5a3 63a0 	sub.w	r3, r3, #1280	; 0x500
 800dce6:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800dce8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dcec:	f2a3 43fc 	subw	r3, r3, #1276	; 0x4fc
 800dcf0:	681b      	ldr	r3, [r3, #0]
 800dcf2:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800dcf6:	f5a2 62a0 	sub.w	r2, r2, #1280	; 0x500
 800dcfa:	6812      	ldr	r2, [r2, #0]
 800dcfc:	fa23 f282 	sxtab16	r2, r3, r2
 800dd00:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dd04:	f2a3 5304 	subw	r3, r3, #1284	; 0x504
 800dd08:	601a      	str	r2, [r3, #0]
  return(result);
 800dd0a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dd0e:	f2a3 5304 	subw	r3, r3, #1284	; 0x504
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	f8c7 35d8 	str.w	r3, [r7, #1496]	; 0x5d8
            val2 = __SXTAB16(lhs_offset_s16x2, __ROR(val2, 8));
 800dd18:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	; 0x5dc
 800dd1c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dd20:	f2a3 43f4 	subw	r3, r3, #1268	; 0x4f4
 800dd24:	601a      	str	r2, [r3, #0]
 800dd26:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dd2a:	f5a3 639f 	sub.w	r3, r3, #1272	; 0x4f8
 800dd2e:	2208      	movs	r2, #8
 800dd30:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 800dd32:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dd36:	f5a3 639f 	sub.w	r3, r3, #1272	; 0x4f8
 800dd3a:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800dd3e:	f5a2 629f 	sub.w	r2, r2, #1272	; 0x4f8
 800dd42:	6812      	ldr	r2, [r2, #0]
 800dd44:	f002 021f 	and.w	r2, r2, #31
 800dd48:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 800dd4a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dd4e:	f5a3 639f 	sub.w	r3, r3, #1272	; 0x4f8
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d105      	bne.n	800dd64 <arm_nn_vec_mat_mult_t_s8+0x1d7c>
    return op1;
 800dd58:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dd5c:	f2a3 43f4 	subw	r3, r3, #1268	; 0x4f4
 800dd60:	681b      	ldr	r3, [r3, #0]
 800dd62:	e00b      	b.n	800dd7c <arm_nn_vec_mat_mult_t_s8+0x1d94>
  return (op1 >> op2) | (op1 << (32U - op2));
 800dd64:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dd68:	f2a3 42f4 	subw	r2, r3, #1268	; 0x4f4
 800dd6c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dd70:	f5a3 639f 	sub.w	r3, r3, #1272	; 0x4f8
 800dd74:	6812      	ldr	r2, [r2, #0]
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	fa62 f303 	ror.w	r3, r2, r3
 800dd7c:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800dd80:	f5a2 629d 	sub.w	r2, r2, #1256	; 0x4e8
 800dd84:	f8d7 1600 	ldr.w	r1, [r7, #1536]	; 0x600
 800dd88:	6011      	str	r1, [r2, #0]
 800dd8a:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800dd8e:	f2a2 42ec 	subw	r2, r2, #1260	; 0x4ec
 800dd92:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800dd94:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dd98:	f5a3 639d 	sub.w	r3, r3, #1256	; 0x4e8
 800dd9c:	681b      	ldr	r3, [r3, #0]
 800dd9e:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800dda2:	f2a2 42ec 	subw	r2, r2, #1260	; 0x4ec
 800dda6:	6812      	ldr	r2, [r2, #0]
 800dda8:	fa23 f282 	sxtab16	r2, r3, r2
 800ddac:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ddb0:	f5a3 639e 	sub.w	r3, r3, #1264	; 0x4f0
 800ddb4:	601a      	str	r2, [r3, #0]
  return(result);
 800ddb6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ddba:	f5a3 639e 	sub.w	r3, r3, #1264	; 0x4f0
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc

            // Partial accumulations
            res00 = __SMLAD(val3, val1, res00);
 800ddc4:	f8d7 05d8 	ldr.w	r0, [r7, #1496]	; 0x5d8
 800ddc8:	f8d7 15e0 	ldr.w	r1, [r7, #1504]	; 0x5e0
 800ddcc:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 800ddd0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ddd4:	f5a3 639b 	sub.w	r3, r3, #1240	; 0x4d8
 800ddd8:	6018      	str	r0, [r3, #0]
 800ddda:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ddde:	f2a3 43dc 	subw	r3, r3, #1244	; 0x4dc
 800dde2:	6019      	str	r1, [r3, #0]
 800dde4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dde8:	f5a3 639c 	sub.w	r3, r3, #1248	; 0x4e0
 800ddec:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800ddee:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ddf2:	f5a3 639b 	sub.w	r3, r3, #1240	; 0x4d8
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800ddfc:	f2a2 42dc 	subw	r2, r2, #1244	; 0x4dc
 800de00:	6812      	ldr	r2, [r2, #0]
 800de02:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 800de06:	f5a1 619c 	sub.w	r1, r1, #1248	; 0x4e0
 800de0a:	6809      	ldr	r1, [r1, #0]
 800de0c:	fb23 1202 	smlad	r2, r3, r2, r1
 800de10:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800de14:	f2a3 43e4 	subw	r3, r3, #1252	; 0x4e4
 800de18:	601a      	str	r2, [r3, #0]
  return(result);
 800de1a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800de1e:	f2a3 43e4 	subw	r3, r3, #1252	; 0x4e4
 800de22:	681b      	ldr	r3, [r3, #0]
 800de24:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
            res00 = __SMLAD(val2, val0, res00);
 800de28:	f8d7 05dc 	ldr.w	r0, [r7, #1500]	; 0x5dc
 800de2c:	f8d7 15e4 	ldr.w	r1, [r7, #1508]	; 0x5e4
 800de30:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 800de34:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800de38:	f5a3 6399 	sub.w	r3, r3, #1224	; 0x4c8
 800de3c:	6018      	str	r0, [r3, #0]
 800de3e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800de42:	f2a3 43cc 	subw	r3, r3, #1228	; 0x4cc
 800de46:	6019      	str	r1, [r3, #0]
 800de48:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800de4c:	f5a3 639a 	sub.w	r3, r3, #1232	; 0x4d0
 800de50:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800de52:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800de56:	f5a3 6399 	sub.w	r3, r3, #1224	; 0x4c8
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800de60:	f2a2 42cc 	subw	r2, r2, #1228	; 0x4cc
 800de64:	6812      	ldr	r2, [r2, #0]
 800de66:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 800de6a:	f5a1 619a 	sub.w	r1, r1, #1232	; 0x4d0
 800de6e:	6809      	ldr	r1, [r1, #0]
 800de70:	fb23 1202 	smlad	r2, r3, r2, r1
 800de74:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800de78:	f2a3 43d4 	subw	r3, r3, #1236	; 0x4d4
 800de7c:	601a      	str	r2, [r3, #0]
  return(result);
 800de7e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800de82:	f2a3 43d4 	subw	r3, r3, #1236	; 0x4d4
 800de86:	681b      	ldr	r3, [r3, #0]
 800de88:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
 800de8c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800de90:	f2a3 43c4 	subw	r3, r3, #1220	; 0x4c4
 800de94:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800de98:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 800de9a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800de9e:	f2a3 43c4 	subw	r3, r3, #1220	; 0x4c4
 800dea2:	681b      	ldr	r3, [r3, #0]
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	681b      	ldr	r3, [r3, #0]
 800dea8:	461a      	mov	r2, r3
 800deaa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800deae:	f2a3 53c4 	subw	r3, r3, #1476	; 0x5c4
 800deb2:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800deb4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800deb8:	f2a3 43c4 	subw	r3, r3, #1220	; 0x4c4
 800debc:	681b      	ldr	r3, [r3, #0]
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	1d1a      	adds	r2, r3, #4
 800dec2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dec6:	f2a3 43c4 	subw	r3, r3, #1220	; 0x4c4
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	601a      	str	r2, [r3, #0]
    return (val);
 800dece:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ded2:	f2a3 53c4 	subw	r3, r3, #1476	; 0x5c4
 800ded6:	681b      	ldr	r3, [r3, #0]

            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 800ded8:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
            val1 = __SXTAB16(rhs_offset_s16x2, val0);
 800dedc:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	; 0x5e4
 800dee0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dee4:	f5a3 6397 	sub.w	r3, r3, #1208	; 0x4b8
 800dee8:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
 800deec:	6019      	str	r1, [r3, #0]
 800deee:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800def2:	f2a3 43bc 	subw	r3, r3, #1212	; 0x4bc
 800def6:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800def8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800defc:	f5a3 6397 	sub.w	r3, r3, #1208	; 0x4b8
 800df00:	681b      	ldr	r3, [r3, #0]
 800df02:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800df06:	f2a2 42bc 	subw	r2, r2, #1212	; 0x4bc
 800df0a:	6812      	ldr	r2, [r2, #0]
 800df0c:	fa23 f282 	sxtab16	r2, r3, r2
 800df10:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800df14:	f5a3 6398 	sub.w	r3, r3, #1216	; 0x4c0
 800df18:	601a      	str	r2, [r3, #0]
  return(result);
 800df1a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800df1e:	f5a3 6398 	sub.w	r3, r3, #1216	; 0x4c0
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	f8c7 35e0 	str.w	r3, [r7, #1504]	; 0x5e0
 800df28:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800df2c:	f2a3 43b4 	subw	r3, r3, #1204	; 0x4b4
 800df30:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800df34:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 800df36:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800df3a:	f2a3 43b4 	subw	r3, r3, #1204	; 0x4b4
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	681b      	ldr	r3, [r3, #0]
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	461a      	mov	r2, r3
 800df46:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800df4a:	f5a3 63b9 	sub.w	r3, r3, #1480	; 0x5c8
 800df4e:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800df50:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800df54:	f2a3 43b4 	subw	r3, r3, #1204	; 0x4b4
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	1d1a      	adds	r2, r3, #4
 800df5e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800df62:	f2a3 43b4 	subw	r3, r3, #1204	; 0x4b4
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	601a      	str	r2, [r3, #0]
    return (val);
 800df6a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800df6e:	f5a3 63b9 	sub.w	r3, r3, #1480	; 0x5c8
 800df72:	681b      	ldr	r3, [r3, #0]
            val2 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 800df74:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc
            val0 = __SXTAB16(rhs_offset_s16x2, __ROR(val0, 8));
 800df78:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	; 0x5e4
 800df7c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800df80:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 800df84:	601a      	str	r2, [r3, #0]
 800df86:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800df8a:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 800df8e:	2208      	movs	r2, #8
 800df90:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 800df92:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800df96:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 800df9a:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800df9e:	f5a2 6296 	sub.w	r2, r2, #1200	; 0x4b0
 800dfa2:	6812      	ldr	r2, [r2, #0]
 800dfa4:	f002 021f 	and.w	r2, r2, #31
 800dfa8:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 800dfaa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dfae:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d105      	bne.n	800dfc4 <arm_nn_vec_mat_mult_t_s8+0x1fdc>
    return op1;
 800dfb8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dfbc:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 800dfc0:	681b      	ldr	r3, [r3, #0]
 800dfc2:	e00b      	b.n	800dfdc <arm_nn_vec_mat_mult_t_s8+0x1ff4>
  return (op1 >> op2) | (op1 << (32U - op2));
 800dfc4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dfc8:	f2a3 42ac 	subw	r2, r3, #1196	; 0x4ac
 800dfcc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dfd0:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 800dfd4:	6812      	ldr	r2, [r2, #0]
 800dfd6:	681b      	ldr	r3, [r3, #0]
 800dfd8:	fa62 f303 	ror.w	r3, r2, r3
 800dfdc:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800dfe0:	f5a2 6294 	sub.w	r2, r2, #1184	; 0x4a0
 800dfe4:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
 800dfe8:	6011      	str	r1, [r2, #0]
 800dfea:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800dfee:	f2a2 42a4 	subw	r2, r2, #1188	; 0x4a4
 800dff2:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800dff4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dff8:	f5a3 6394 	sub.w	r3, r3, #1184	; 0x4a0
 800dffc:	681b      	ldr	r3, [r3, #0]
 800dffe:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800e002:	f2a2 42a4 	subw	r2, r2, #1188	; 0x4a4
 800e006:	6812      	ldr	r2, [r2, #0]
 800e008:	fa23 f282 	sxtab16	r2, r3, r2
 800e00c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e010:	f5a3 6395 	sub.w	r3, r3, #1192	; 0x4a8
 800e014:	601a      	str	r2, [r3, #0]
  return(result);
 800e016:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e01a:	f5a3 6395 	sub.w	r3, r3, #1192	; 0x4a8
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
            val3 = __SXTAB16(lhs_offset_s16x2, val2);
 800e024:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	; 0x5dc
 800e028:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e02c:	f2a3 4394 	subw	r3, r3, #1172	; 0x494
 800e030:	f8d7 1600 	ldr.w	r1, [r7, #1536]	; 0x600
 800e034:	6019      	str	r1, [r3, #0]
 800e036:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e03a:	f5a3 6393 	sub.w	r3, r3, #1176	; 0x498
 800e03e:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800e040:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e044:	f2a3 4394 	subw	r3, r3, #1172	; 0x494
 800e048:	681b      	ldr	r3, [r3, #0]
 800e04a:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800e04e:	f5a2 6293 	sub.w	r2, r2, #1176	; 0x498
 800e052:	6812      	ldr	r2, [r2, #0]
 800e054:	fa23 f282 	sxtab16	r2, r3, r2
 800e058:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e05c:	f2a3 439c 	subw	r3, r3, #1180	; 0x49c
 800e060:	601a      	str	r2, [r3, #0]
  return(result);
 800e062:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e066:	f2a3 439c 	subw	r3, r3, #1180	; 0x49c
 800e06a:	681b      	ldr	r3, [r3, #0]
 800e06c:	f8c7 35d8 	str.w	r3, [r7, #1496]	; 0x5d8
            val2 = __SXTAB16(lhs_offset_s16x2, __ROR(val2, 8));
 800e070:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	; 0x5dc
 800e074:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e078:	f2a3 438c 	subw	r3, r3, #1164	; 0x48c
 800e07c:	601a      	str	r2, [r3, #0]
 800e07e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e082:	f5a3 6392 	sub.w	r3, r3, #1168	; 0x490
 800e086:	2208      	movs	r2, #8
 800e088:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 800e08a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e08e:	f5a3 6392 	sub.w	r3, r3, #1168	; 0x490
 800e092:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800e096:	f5a2 6292 	sub.w	r2, r2, #1168	; 0x490
 800e09a:	6812      	ldr	r2, [r2, #0]
 800e09c:	f002 021f 	and.w	r2, r2, #31
 800e0a0:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 800e0a2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e0a6:	f5a3 6392 	sub.w	r3, r3, #1168	; 0x490
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d105      	bne.n	800e0bc <arm_nn_vec_mat_mult_t_s8+0x20d4>
    return op1;
 800e0b0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e0b4:	f2a3 438c 	subw	r3, r3, #1164	; 0x48c
 800e0b8:	681b      	ldr	r3, [r3, #0]
 800e0ba:	e00b      	b.n	800e0d4 <arm_nn_vec_mat_mult_t_s8+0x20ec>
  return (op1 >> op2) | (op1 << (32U - op2));
 800e0bc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e0c0:	f2a3 428c 	subw	r2, r3, #1164	; 0x48c
 800e0c4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e0c8:	f5a3 6392 	sub.w	r3, r3, #1168	; 0x490
 800e0cc:	6812      	ldr	r2, [r2, #0]
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	fa62 f303 	ror.w	r3, r2, r3
 800e0d4:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800e0d8:	f5a2 6290 	sub.w	r2, r2, #1152	; 0x480
 800e0dc:	f8d7 1600 	ldr.w	r1, [r7, #1536]	; 0x600
 800e0e0:	6011      	str	r1, [r2, #0]
 800e0e2:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800e0e6:	f2a2 4284 	subw	r2, r2, #1156	; 0x484
 800e0ea:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800e0ec:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e0f0:	f5a3 6390 	sub.w	r3, r3, #1152	; 0x480
 800e0f4:	681b      	ldr	r3, [r3, #0]
 800e0f6:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800e0fa:	f2a2 4284 	subw	r2, r2, #1156	; 0x484
 800e0fe:	6812      	ldr	r2, [r2, #0]
 800e100:	fa23 f282 	sxtab16	r2, r3, r2
 800e104:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e108:	f5a3 6391 	sub.w	r3, r3, #1160	; 0x488
 800e10c:	601a      	str	r2, [r3, #0]
  return(result);
 800e10e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e112:	f5a3 6391 	sub.w	r3, r3, #1160	; 0x488
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc

            // Partial accumulations
            res00 = __SMLAD(val3, val1, res00);
 800e11c:	f8d7 05d8 	ldr.w	r0, [r7, #1496]	; 0x5d8
 800e120:	f8d7 15e0 	ldr.w	r1, [r7, #1504]	; 0x5e0
 800e124:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 800e128:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e12c:	f5a3 638e 	sub.w	r3, r3, #1136	; 0x470
 800e130:	6018      	str	r0, [r3, #0]
 800e132:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e136:	f2a3 4374 	subw	r3, r3, #1140	; 0x474
 800e13a:	6019      	str	r1, [r3, #0]
 800e13c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e140:	f5a3 638f 	sub.w	r3, r3, #1144	; 0x478
 800e144:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800e146:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e14a:	f5a3 638e 	sub.w	r3, r3, #1136	; 0x470
 800e14e:	681b      	ldr	r3, [r3, #0]
 800e150:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800e154:	f2a2 4274 	subw	r2, r2, #1140	; 0x474
 800e158:	6812      	ldr	r2, [r2, #0]
 800e15a:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 800e15e:	f5a1 618f 	sub.w	r1, r1, #1144	; 0x478
 800e162:	6809      	ldr	r1, [r1, #0]
 800e164:	fb23 1202 	smlad	r2, r3, r2, r1
 800e168:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e16c:	f2a3 437c 	subw	r3, r3, #1148	; 0x47c
 800e170:	601a      	str	r2, [r3, #0]
  return(result);
 800e172:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e176:	f2a3 437c 	subw	r3, r3, #1148	; 0x47c
 800e17a:	681b      	ldr	r3, [r3, #0]
 800e17c:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
            res00 = __SMLAD(val2, val0, res00);
 800e180:	f8d7 05dc 	ldr.w	r0, [r7, #1500]	; 0x5dc
 800e184:	f8d7 15e4 	ldr.w	r1, [r7, #1508]	; 0x5e4
 800e188:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 800e18c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e190:	f5a3 638c 	sub.w	r3, r3, #1120	; 0x460
 800e194:	6018      	str	r0, [r3, #0]
 800e196:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e19a:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 800e19e:	6019      	str	r1, [r3, #0]
 800e1a0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e1a4:	f5a3 638d 	sub.w	r3, r3, #1128	; 0x468
 800e1a8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800e1aa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e1ae:	f5a3 638c 	sub.w	r3, r3, #1120	; 0x460
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800e1b8:	f2a2 4264 	subw	r2, r2, #1124	; 0x464
 800e1bc:	6812      	ldr	r2, [r2, #0]
 800e1be:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 800e1c2:	f5a1 618d 	sub.w	r1, r1, #1128	; 0x468
 800e1c6:	6809      	ldr	r1, [r1, #0]
 800e1c8:	fb23 1202 	smlad	r2, r3, r2, r1
 800e1cc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e1d0:	f2a3 436c 	subw	r3, r3, #1132	; 0x46c
 800e1d4:	601a      	str	r2, [r3, #0]
  return(result);
 800e1d6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e1da:	f2a3 436c 	subw	r3, r3, #1132	; 0x46c
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
 800e1e4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e1e8:	f2a3 435c 	subw	r3, r3, #1116	; 0x45c
 800e1ec:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800e1f0:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 800e1f2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e1f6:	f2a3 435c 	subw	r3, r3, #1116	; 0x45c
 800e1fa:	681b      	ldr	r3, [r3, #0]
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	681b      	ldr	r3, [r3, #0]
 800e200:	461a      	mov	r2, r3
 800e202:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e206:	f2a3 53cc 	subw	r3, r3, #1484	; 0x5cc
 800e20a:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800e20c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e210:	f2a3 435c 	subw	r3, r3, #1116	; 0x45c
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	681b      	ldr	r3, [r3, #0]
 800e218:	1d1a      	adds	r2, r3, #4
 800e21a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e21e:	f2a3 435c 	subw	r3, r3, #1116	; 0x45c
 800e222:	681b      	ldr	r3, [r3, #0]
 800e224:	601a      	str	r2, [r3, #0]
    return (val);
 800e226:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e22a:	f2a3 53cc 	subw	r3, r3, #1484	; 0x5cc
 800e22e:	681b      	ldr	r3, [r3, #0]

            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 800e230:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
            val1 = __SXTAB16(rhs_offset_s16x2, val0);
 800e234:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	; 0x5e4
 800e238:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e23c:	f5a3 638a 	sub.w	r3, r3, #1104	; 0x450
 800e240:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
 800e244:	6019      	str	r1, [r3, #0]
 800e246:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e24a:	f2a3 4354 	subw	r3, r3, #1108	; 0x454
 800e24e:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800e250:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e254:	f5a3 638a 	sub.w	r3, r3, #1104	; 0x450
 800e258:	681b      	ldr	r3, [r3, #0]
 800e25a:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800e25e:	f2a2 4254 	subw	r2, r2, #1108	; 0x454
 800e262:	6812      	ldr	r2, [r2, #0]
 800e264:	fa23 f282 	sxtab16	r2, r3, r2
 800e268:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e26c:	f5a3 638b 	sub.w	r3, r3, #1112	; 0x458
 800e270:	601a      	str	r2, [r3, #0]
  return(result);
 800e272:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e276:	f5a3 638b 	sub.w	r3, r3, #1112	; 0x458
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	f8c7 35e0 	str.w	r3, [r7, #1504]	; 0x5e0
 800e280:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e284:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800e288:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800e28c:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 800e28e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e292:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800e296:	681b      	ldr	r3, [r3, #0]
 800e298:	681b      	ldr	r3, [r3, #0]
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	461a      	mov	r2, r3
 800e29e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e2a2:	f5a3 63ba 	sub.w	r3, r3, #1488	; 0x5d0
 800e2a6:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800e2a8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e2ac:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800e2b0:	681b      	ldr	r3, [r3, #0]
 800e2b2:	681b      	ldr	r3, [r3, #0]
 800e2b4:	1d1a      	adds	r2, r3, #4
 800e2b6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e2ba:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	601a      	str	r2, [r3, #0]
    return (val);
 800e2c2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e2c6:	f5a3 63ba 	sub.w	r3, r3, #1488	; 0x5d0
 800e2ca:	681b      	ldr	r3, [r3, #0]
            val2 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 800e2cc:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc
            val0 = __SXTAB16(rhs_offset_s16x2, __ROR(val0, 8));
 800e2d0:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	; 0x5e4
 800e2d4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e2d8:	f2a3 4344 	subw	r3, r3, #1092	; 0x444
 800e2dc:	601a      	str	r2, [r3, #0]
 800e2de:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e2e2:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 800e2e6:	2208      	movs	r2, #8
 800e2e8:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 800e2ea:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e2ee:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 800e2f2:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800e2f6:	f5a2 6289 	sub.w	r2, r2, #1096	; 0x448
 800e2fa:	6812      	ldr	r2, [r2, #0]
 800e2fc:	f002 021f 	and.w	r2, r2, #31
 800e300:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 800e302:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e306:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 800e30a:	681b      	ldr	r3, [r3, #0]
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d105      	bne.n	800e31c <arm_nn_vec_mat_mult_t_s8+0x2334>
    return op1;
 800e310:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e314:	f2a3 4344 	subw	r3, r3, #1092	; 0x444
 800e318:	681b      	ldr	r3, [r3, #0]
 800e31a:	e00b      	b.n	800e334 <arm_nn_vec_mat_mult_t_s8+0x234c>
  return (op1 >> op2) | (op1 << (32U - op2));
 800e31c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e320:	f2a3 4244 	subw	r2, r3, #1092	; 0x444
 800e324:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e328:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 800e32c:	6812      	ldr	r2, [r2, #0]
 800e32e:	681b      	ldr	r3, [r3, #0]
 800e330:	fa62 f303 	ror.w	r3, r2, r3
 800e334:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800e338:	f5a2 6287 	sub.w	r2, r2, #1080	; 0x438
 800e33c:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
 800e340:	6011      	str	r1, [r2, #0]
 800e342:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800e346:	f2a2 423c 	subw	r2, r2, #1084	; 0x43c
 800e34a:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800e34c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e350:	f5a3 6387 	sub.w	r3, r3, #1080	; 0x438
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800e35a:	f2a2 423c 	subw	r2, r2, #1084	; 0x43c
 800e35e:	6812      	ldr	r2, [r2, #0]
 800e360:	fa23 f282 	sxtab16	r2, r3, r2
 800e364:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e368:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 800e36c:	601a      	str	r2, [r3, #0]
  return(result);
 800e36e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e372:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 800e376:	681b      	ldr	r3, [r3, #0]
 800e378:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
            val3 = __SXTAB16(lhs_offset_s16x2, val2);
 800e37c:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	; 0x5dc
 800e380:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e384:	f2a3 432c 	subw	r3, r3, #1068	; 0x42c
 800e388:	f8d7 1600 	ldr.w	r1, [r7, #1536]	; 0x600
 800e38c:	6019      	str	r1, [r3, #0]
 800e38e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e392:	f5a3 6386 	sub.w	r3, r3, #1072	; 0x430
 800e396:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800e398:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e39c:	f2a3 432c 	subw	r3, r3, #1068	; 0x42c
 800e3a0:	681b      	ldr	r3, [r3, #0]
 800e3a2:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800e3a6:	f5a2 6286 	sub.w	r2, r2, #1072	; 0x430
 800e3aa:	6812      	ldr	r2, [r2, #0]
 800e3ac:	fa23 f282 	sxtab16	r2, r3, r2
 800e3b0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e3b4:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 800e3b8:	601a      	str	r2, [r3, #0]
  return(result);
 800e3ba:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e3be:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	f8c7 35d8 	str.w	r3, [r7, #1496]	; 0x5d8
            val2 = __SXTAB16(lhs_offset_s16x2, __ROR(val2, 8));
 800e3c8:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	; 0x5dc
 800e3cc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e3d0:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800e3d4:	601a      	str	r2, [r3, #0]
 800e3d6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e3da:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 800e3de:	2208      	movs	r2, #8
 800e3e0:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 800e3e2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e3e6:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 800e3ea:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800e3ee:	f5a2 6285 	sub.w	r2, r2, #1064	; 0x428
 800e3f2:	6812      	ldr	r2, [r2, #0]
 800e3f4:	f002 021f 	and.w	r2, r2, #31
 800e3f8:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 800e3fa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e3fe:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 800e402:	681b      	ldr	r3, [r3, #0]
 800e404:	2b00      	cmp	r3, #0
 800e406:	d105      	bne.n	800e414 <arm_nn_vec_mat_mult_t_s8+0x242c>
    return op1;
 800e408:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e40c:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800e410:	681b      	ldr	r3, [r3, #0]
 800e412:	e00b      	b.n	800e42c <arm_nn_vec_mat_mult_t_s8+0x2444>
  return (op1 >> op2) | (op1 << (32U - op2));
 800e414:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e418:	f2a3 4224 	subw	r2, r3, #1060	; 0x424
 800e41c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e420:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 800e424:	6812      	ldr	r2, [r2, #0]
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	fa62 f303 	ror.w	r3, r2, r3
 800e42c:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800e430:	f5a2 6283 	sub.w	r2, r2, #1048	; 0x418
 800e434:	f8d7 1600 	ldr.w	r1, [r7, #1536]	; 0x600
 800e438:	6011      	str	r1, [r2, #0]
 800e43a:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800e43e:	f2a2 421c 	subw	r2, r2, #1052	; 0x41c
 800e442:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800e444:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e448:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800e452:	f2a2 421c 	subw	r2, r2, #1052	; 0x41c
 800e456:	6812      	ldr	r2, [r2, #0]
 800e458:	fa23 f282 	sxtab16	r2, r3, r2
 800e45c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e460:	f5a3 6384 	sub.w	r3, r3, #1056	; 0x420
 800e464:	601a      	str	r2, [r3, #0]
  return(result);
 800e466:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e46a:	f5a3 6384 	sub.w	r3, r3, #1056	; 0x420
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc

            // Partial accumulations
            res00 = __SMLAD(val3, val1, res00);
 800e474:	f8d7 05d8 	ldr.w	r0, [r7, #1496]	; 0x5d8
 800e478:	f8d7 15e0 	ldr.w	r1, [r7, #1504]	; 0x5e0
 800e47c:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 800e480:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e484:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 800e488:	6018      	str	r0, [r3, #0]
 800e48a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e48e:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 800e492:	6019      	str	r1, [r3, #0]
 800e494:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e498:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 800e49c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800e49e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e4a2:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 800e4a6:	681b      	ldr	r3, [r3, #0]
 800e4a8:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800e4ac:	f2a2 420c 	subw	r2, r2, #1036	; 0x40c
 800e4b0:	6812      	ldr	r2, [r2, #0]
 800e4b2:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 800e4b6:	f5a1 6182 	sub.w	r1, r1, #1040	; 0x410
 800e4ba:	6809      	ldr	r1, [r1, #0]
 800e4bc:	fb23 1202 	smlad	r2, r3, r2, r1
 800e4c0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e4c4:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 800e4c8:	601a      	str	r2, [r3, #0]
  return(result);
 800e4ca:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e4ce:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 800e4d2:	681b      	ldr	r3, [r3, #0]
 800e4d4:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
            res00 = __SMLAD(val2, val0, res00);
 800e4d8:	f8d7 05dc 	ldr.w	r0, [r7, #1500]	; 0x5dc
 800e4dc:	f8d7 15e4 	ldr.w	r1, [r7, #1508]	; 0x5e4
 800e4e0:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 800e4e4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e4e8:	f5a3 737e 	sub.w	r3, r3, #1016	; 0x3f8
 800e4ec:	6018      	str	r0, [r3, #0]
 800e4ee:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e4f2:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 800e4f6:	6019      	str	r1, [r3, #0]
 800e4f8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e4fc:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800e500:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800e502:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e506:	f5a3 737e 	sub.w	r3, r3, #1016	; 0x3f8
 800e50a:	681b      	ldr	r3, [r3, #0]
 800e50c:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800e510:	f5a2 727f 	sub.w	r2, r2, #1020	; 0x3fc
 800e514:	6812      	ldr	r2, [r2, #0]
 800e516:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 800e51a:	f5a1 6180 	sub.w	r1, r1, #1024	; 0x400
 800e51e:	6809      	ldr	r1, [r1, #0]
 800e520:	fb23 1202 	smlad	r2, r3, r2, r1
 800e524:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e528:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 800e52c:	601a      	str	r2, [r3, #0]
  return(result);
 800e52e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e532:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 800e536:	681b      	ldr	r3, [r3, #0]
 800e538:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
 800e53c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e540:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 800e544:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800e548:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 800e54a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e54e:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	681b      	ldr	r3, [r3, #0]
 800e556:	681b      	ldr	r3, [r3, #0]
 800e558:	461a      	mov	r2, r3
 800e55a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e55e:	f2a3 53d4 	subw	r3, r3, #1492	; 0x5d4
 800e562:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800e564:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e568:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 800e56c:	681b      	ldr	r3, [r3, #0]
 800e56e:	681b      	ldr	r3, [r3, #0]
 800e570:	1d1a      	adds	r2, r3, #4
 800e572:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e576:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	601a      	str	r2, [r3, #0]
    return (val);
 800e57e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e582:	f2a3 53d4 	subw	r3, r3, #1492	; 0x5d4
 800e586:	681b      	ldr	r3, [r3, #0]

            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 800e588:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
            val1 = __SXTAB16(rhs_offset_s16x2, val0);
 800e58c:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	; 0x5e4
 800e590:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e594:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800e598:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
 800e59c:	6019      	str	r1, [r3, #0]
 800e59e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e5a2:	f5a3 737b 	sub.w	r3, r3, #1004	; 0x3ec
 800e5a6:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800e5a8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e5ac:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800e5b0:	681b      	ldr	r3, [r3, #0]
 800e5b2:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800e5b6:	f5a2 727b 	sub.w	r2, r2, #1004	; 0x3ec
 800e5ba:	6812      	ldr	r2, [r2, #0]
 800e5bc:	fa23 f282 	sxtab16	r2, r3, r2
 800e5c0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e5c4:	f5a3 737c 	sub.w	r3, r3, #1008	; 0x3f0
 800e5c8:	601a      	str	r2, [r3, #0]
  return(result);
 800e5ca:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e5ce:	f5a3 737c 	sub.w	r3, r3, #1008	; 0x3f0
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	f8c7 35e0 	str.w	r3, [r7, #1504]	; 0x5e0
 800e5d8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e5dc:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 800e5e0:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800e5e4:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 800e5e6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e5ea:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	681b      	ldr	r3, [r3, #0]
 800e5f2:	681b      	ldr	r3, [r3, #0]
 800e5f4:	461a      	mov	r2, r3
 800e5f6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e5fa:	f5a3 63bb 	sub.w	r3, r3, #1496	; 0x5d8
 800e5fe:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800e600:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e604:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 800e608:	681b      	ldr	r3, [r3, #0]
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	1d1a      	adds	r2, r3, #4
 800e60e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e612:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 800e616:	681b      	ldr	r3, [r3, #0]
 800e618:	601a      	str	r2, [r3, #0]
    return (val);
 800e61a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e61e:	f5a3 63bb 	sub.w	r3, r3, #1496	; 0x5d8
 800e622:	681b      	ldr	r3, [r3, #0]
            val2 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 800e624:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc
            val0 = __SXTAB16(rhs_offset_s16x2, __ROR(val0, 8));
 800e628:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	; 0x5e4
 800e62c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e630:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 800e634:	601a      	str	r2, [r3, #0]
 800e636:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e63a:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 800e63e:	2208      	movs	r2, #8
 800e640:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 800e642:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e646:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 800e64a:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800e64e:	f5a2 7278 	sub.w	r2, r2, #992	; 0x3e0
 800e652:	6812      	ldr	r2, [r2, #0]
 800e654:	f002 021f 	and.w	r2, r2, #31
 800e658:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 800e65a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e65e:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 800e662:	681b      	ldr	r3, [r3, #0]
 800e664:	2b00      	cmp	r3, #0
 800e666:	d105      	bne.n	800e674 <arm_nn_vec_mat_mult_t_s8+0x268c>
    return op1;
 800e668:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e66c:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 800e670:	681b      	ldr	r3, [r3, #0]
 800e672:	e00b      	b.n	800e68c <arm_nn_vec_mat_mult_t_s8+0x26a4>
  return (op1 >> op2) | (op1 << (32U - op2));
 800e674:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e678:	f5a3 7277 	sub.w	r2, r3, #988	; 0x3dc
 800e67c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e680:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 800e684:	6812      	ldr	r2, [r2, #0]
 800e686:	681b      	ldr	r3, [r3, #0]
 800e688:	fa62 f303 	ror.w	r3, r2, r3
 800e68c:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800e690:	f5a2 7274 	sub.w	r2, r2, #976	; 0x3d0
 800e694:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
 800e698:	6011      	str	r1, [r2, #0]
 800e69a:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800e69e:	f5a2 7275 	sub.w	r2, r2, #980	; 0x3d4
 800e6a2:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800e6a4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e6a8:	f5a3 7374 	sub.w	r3, r3, #976	; 0x3d0
 800e6ac:	681b      	ldr	r3, [r3, #0]
 800e6ae:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800e6b2:	f5a2 7275 	sub.w	r2, r2, #980	; 0x3d4
 800e6b6:	6812      	ldr	r2, [r2, #0]
 800e6b8:	fa23 f282 	sxtab16	r2, r3, r2
 800e6bc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e6c0:	f5a3 7376 	sub.w	r3, r3, #984	; 0x3d8
 800e6c4:	601a      	str	r2, [r3, #0]
  return(result);
 800e6c6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e6ca:	f5a3 7376 	sub.w	r3, r3, #984	; 0x3d8
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
            val3 = __SXTAB16(lhs_offset_s16x2, val2);
 800e6d4:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	; 0x5dc
 800e6d8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e6dc:	f5a3 7371 	sub.w	r3, r3, #964	; 0x3c4
 800e6e0:	f8d7 1600 	ldr.w	r1, [r7, #1536]	; 0x600
 800e6e4:	6019      	str	r1, [r3, #0]
 800e6e6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e6ea:	f5a3 7372 	sub.w	r3, r3, #968	; 0x3c8
 800e6ee:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800e6f0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e6f4:	f5a3 7371 	sub.w	r3, r3, #964	; 0x3c4
 800e6f8:	681b      	ldr	r3, [r3, #0]
 800e6fa:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800e6fe:	f5a2 7272 	sub.w	r2, r2, #968	; 0x3c8
 800e702:	6812      	ldr	r2, [r2, #0]
 800e704:	fa23 f282 	sxtab16	r2, r3, r2
 800e708:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e70c:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 800e710:	601a      	str	r2, [r3, #0]
  return(result);
 800e712:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e716:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 800e71a:	681b      	ldr	r3, [r3, #0]
 800e71c:	f8c7 35d8 	str.w	r3, [r7, #1496]	; 0x5d8
            val2 = __SXTAB16(lhs_offset_s16x2, __ROR(val2, 8));
 800e720:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	; 0x5dc
 800e724:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e728:	f5a3 736f 	sub.w	r3, r3, #956	; 0x3bc
 800e72c:	601a      	str	r2, [r3, #0]
 800e72e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e732:	f5a3 7370 	sub.w	r3, r3, #960	; 0x3c0
 800e736:	2208      	movs	r2, #8
 800e738:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 800e73a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e73e:	f5a3 7370 	sub.w	r3, r3, #960	; 0x3c0
 800e742:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800e746:	f5a2 7270 	sub.w	r2, r2, #960	; 0x3c0
 800e74a:	6812      	ldr	r2, [r2, #0]
 800e74c:	f002 021f 	and.w	r2, r2, #31
 800e750:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 800e752:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e756:	f5a3 7370 	sub.w	r3, r3, #960	; 0x3c0
 800e75a:	681b      	ldr	r3, [r3, #0]
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	d105      	bne.n	800e76c <arm_nn_vec_mat_mult_t_s8+0x2784>
    return op1;
 800e760:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e764:	f5a3 736f 	sub.w	r3, r3, #956	; 0x3bc
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	e00b      	b.n	800e784 <arm_nn_vec_mat_mult_t_s8+0x279c>
  return (op1 >> op2) | (op1 << (32U - op2));
 800e76c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e770:	f5a3 726f 	sub.w	r2, r3, #956	; 0x3bc
 800e774:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e778:	f5a3 7370 	sub.w	r3, r3, #960	; 0x3c0
 800e77c:	6812      	ldr	r2, [r2, #0]
 800e77e:	681b      	ldr	r3, [r3, #0]
 800e780:	fa62 f303 	ror.w	r3, r2, r3
 800e784:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800e788:	f5a2 726c 	sub.w	r2, r2, #944	; 0x3b0
 800e78c:	f8d7 1600 	ldr.w	r1, [r7, #1536]	; 0x600
 800e790:	6011      	str	r1, [r2, #0]
 800e792:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800e796:	f5a2 726d 	sub.w	r2, r2, #948	; 0x3b4
 800e79a:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800e79c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e7a0:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 800e7a4:	681b      	ldr	r3, [r3, #0]
 800e7a6:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800e7aa:	f5a2 726d 	sub.w	r2, r2, #948	; 0x3b4
 800e7ae:	6812      	ldr	r2, [r2, #0]
 800e7b0:	fa23 f282 	sxtab16	r2, r3, r2
 800e7b4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e7b8:	f5a3 736e 	sub.w	r3, r3, #952	; 0x3b8
 800e7bc:	601a      	str	r2, [r3, #0]
  return(result);
 800e7be:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e7c2:	f5a3 736e 	sub.w	r3, r3, #952	; 0x3b8
 800e7c6:	681b      	ldr	r3, [r3, #0]
 800e7c8:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc

            // Partial accumulations
            res00 = __SMLAD(val3, val1, res00);
 800e7cc:	f8d7 05d8 	ldr.w	r0, [r7, #1496]	; 0x5d8
 800e7d0:	f8d7 15e0 	ldr.w	r1, [r7, #1504]	; 0x5e0
 800e7d4:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 800e7d8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e7dc:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 800e7e0:	6018      	str	r0, [r3, #0]
 800e7e2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e7e6:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 800e7ea:	6019      	str	r1, [r3, #0]
 800e7ec:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e7f0:	f5a3 736a 	sub.w	r3, r3, #936	; 0x3a8
 800e7f4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800e7f6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e7fa:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 800e7fe:	681b      	ldr	r3, [r3, #0]
 800e800:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800e804:	f5a2 7269 	sub.w	r2, r2, #932	; 0x3a4
 800e808:	6812      	ldr	r2, [r2, #0]
 800e80a:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 800e80e:	f5a1 716a 	sub.w	r1, r1, #936	; 0x3a8
 800e812:	6809      	ldr	r1, [r1, #0]
 800e814:	fb23 1202 	smlad	r2, r3, r2, r1
 800e818:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e81c:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 800e820:	601a      	str	r2, [r3, #0]
  return(result);
 800e822:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e826:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 800e82a:	681b      	ldr	r3, [r3, #0]
 800e82c:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
            res00 = __SMLAD(val2, val0, res00);
 800e830:	f8d7 05dc 	ldr.w	r0, [r7, #1500]	; 0x5dc
 800e834:	f8d7 15e4 	ldr.w	r1, [r7, #1508]	; 0x5e4
 800e838:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 800e83c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e840:	f5a3 7364 	sub.w	r3, r3, #912	; 0x390
 800e844:	6018      	str	r0, [r3, #0]
 800e846:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e84a:	f5a3 7365 	sub.w	r3, r3, #916	; 0x394
 800e84e:	6019      	str	r1, [r3, #0]
 800e850:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e854:	f5a3 7366 	sub.w	r3, r3, #920	; 0x398
 800e858:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800e85a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e85e:	f5a3 7364 	sub.w	r3, r3, #912	; 0x390
 800e862:	681b      	ldr	r3, [r3, #0]
 800e864:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800e868:	f5a2 7265 	sub.w	r2, r2, #916	; 0x394
 800e86c:	6812      	ldr	r2, [r2, #0]
 800e86e:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 800e872:	f5a1 7166 	sub.w	r1, r1, #920	; 0x398
 800e876:	6809      	ldr	r1, [r1, #0]
 800e878:	fb23 1202 	smlad	r2, r3, r2, r1
 800e87c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e880:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 800e884:	601a      	str	r2, [r3, #0]
  return(result);
 800e886:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e88a:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 800e88e:	681b      	ldr	r3, [r3, #0]
 800e890:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 800e894:	f8d7 3618 	ldr.w	r3, [r7, #1560]	; 0x618
 800e898:	3310      	adds	r3, #16
 800e89a:	f8c7 3618 	str.w	r3, [r7, #1560]	; 0x618
 800e89e:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 800e8a2:	3b0f      	subs	r3, #15
 800e8a4:	f8d7 2618 	ldr.w	r2, [r7, #1560]	; 0x618
 800e8a8:	429a      	cmp	r2, r3
 800e8aa:	f6ff a943 	blt.w	800db34 <arm_nn_vec_mat_mult_t_s8+0x1b4c>
        }

        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800e8ae:	e03f      	b.n	800e930 <arm_nn_vec_mat_mult_t_s8+0x2948>
        {
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 800e8b0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e8b4:	f5a3 63b6 	sub.w	r3, r3, #1456	; 0x5b0
 800e8b8:	681b      	ldr	r3, [r3, #0]
 800e8ba:	f993 3000 	ldrsb.w	r3, [r3]
 800e8be:	461a      	mov	r2, r3
 800e8c0:	f8d7 3654 	ldr.w	r3, [r7, #1620]	; 0x654
 800e8c4:	4413      	add	r3, r2
 800e8c6:	f8c7 35ec 	str.w	r3, [r7, #1516]	; 0x5ec
            q31_t lhs_value = lhs_ptr[0] + lhs_offset;
 800e8ca:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e8ce:	f2a3 53ac 	subw	r3, r3, #1452	; 0x5ac
 800e8d2:	681b      	ldr	r3, [r3, #0]
 800e8d4:	f993 3000 	ldrsb.w	r3, [r3]
 800e8d8:	461a      	mov	r2, r3
 800e8da:	f8d7 3650 	ldr.w	r3, [r7, #1616]	; 0x650
 800e8de:	4413      	add	r3, r2
 800e8e0:	f8c7 35e8 	str.w	r3, [r7, #1512]	; 0x5e8

            res00 += lhs_value * rhs_value0;
 800e8e4:	f8d7 35e8 	ldr.w	r3, [r7, #1512]	; 0x5e8
 800e8e8:	f8d7 25ec 	ldr.w	r2, [r7, #1516]	; 0x5ec
 800e8ec:	fb02 f303 	mul.w	r3, r2, r3
 800e8f0:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 800e8f4:	4413      	add	r3, r2
 800e8f6:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c

            ++rhs_ptr;
 800e8fa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e8fe:	f5a3 63b6 	sub.w	r3, r3, #1456	; 0x5b0
 800e902:	681b      	ldr	r3, [r3, #0]
 800e904:	1c5a      	adds	r2, r3, #1
 800e906:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e90a:	f5a3 63b6 	sub.w	r3, r3, #1456	; 0x5b0
 800e90e:	601a      	str	r2, [r3, #0]
            ++lhs_ptr;
 800e910:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e914:	f2a3 53ac 	subw	r3, r3, #1452	; 0x5ac
 800e918:	681b      	ldr	r3, [r3, #0]
 800e91a:	1c5a      	adds	r2, r3, #1
 800e91c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e920:	f2a3 53ac 	subw	r3, r3, #1452	; 0x5ac
 800e924:	601a      	str	r2, [r3, #0]
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800e926:	f8d7 3618 	ldr.w	r3, [r7, #1560]	; 0x618
 800e92a:	3301      	adds	r3, #1
 800e92c:	f8c7 3618 	str.w	r3, [r7, #1560]	; 0x618
 800e930:	f8d7 2618 	ldr.w	r2, [r7, #1560]	; 0x618
 800e934:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 800e938:	429a      	cmp	r2, r3
 800e93a:	dbb9      	blt.n	800e8b0 <arm_nn_vec_mat_mult_t_s8+0x28c8>
 800e93c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e940:	f5a3 63a6 	sub.w	r3, r3, #1328	; 0x530
 800e944:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 800e948:	601a      	str	r2, [r3, #0]
 800e94a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e94e:	f2a3 5334 	subw	r3, r3, #1332	; 0x534
 800e952:	f8d7 265c 	ldr.w	r2, [r7, #1628]	; 0x65c
 800e956:	601a      	str	r2, [r3, #0]
 800e958:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e95c:	f5a3 63a7 	sub.w	r3, r3, #1336	; 0x538
 800e960:	f8d7 2660 	ldr.w	r2, [r7, #1632]	; 0x660
 800e964:	601a      	str	r2, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800e966:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e96a:	f5a3 63a7 	sub.w	r3, r3, #1336	; 0x538
 800e96e:	681b      	ldr	r3, [r3, #0]
 800e970:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800e974:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800e978:	f5a2 62a6 	sub.w	r2, r2, #1328	; 0x530
 800e97c:	6812      	ldr	r2, [r2, #0]
 800e97e:	409a      	lsls	r2, r3
 800e980:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e984:	f2a3 533c 	subw	r3, r3, #1340	; 0x53c
 800e988:	601a      	str	r2, [r3, #0]
 800e98a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e98e:	f5a3 63a8 	sub.w	r3, r3, #1344	; 0x540
 800e992:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800e996:	f2a2 5234 	subw	r2, r2, #1332	; 0x534
 800e99a:	6812      	ldr	r2, [r2, #0]
 800e99c:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 800e99e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e9a2:	f2a3 5344 	subw	r3, r3, #1348	; 0x544
 800e9a6:	2200      	movs	r2, #0
 800e9a8:	601a      	str	r2, [r3, #0]
    mult.word.low = 1 << 30;
 800e9aa:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800e9ae:	461a      	mov	r2, r3
 800e9b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e9b4:	f842 3c08 	str.w	r3, [r2, #-8]
    mult.word.high = 0;
 800e9b8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800e9bc:	461a      	mov	r2, r3
 800e9be:	2300      	movs	r3, #0
 800e9c0:	f842 3c04 	str.w	r3, [r2, #-4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800e9c4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800e9c8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e9cc:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 800e9d0:	f2a1 513c 	subw	r1, r1, #1340	; 0x53c
 800e9d4:	6809      	ldr	r1, [r1, #0]
 800e9d6:	17c8      	asrs	r0, r1, #31
 800e9d8:	6139      	str	r1, [r7, #16]
 800e9da:	6178      	str	r0, [r7, #20]
 800e9dc:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 800e9e0:	f5a1 61a8 	sub.w	r1, r1, #1344	; 0x540
 800e9e4:	6809      	ldr	r1, [r1, #0]
 800e9e6:	17c8      	asrs	r0, r1, #31
 800e9e8:	60b9      	str	r1, [r7, #8]
 800e9ea:	60f8      	str	r0, [r7, #12]
 800e9ec:	e9d7 5604 	ldrd	r5, r6, [r7, #16]
 800e9f0:	4631      	mov	r1, r6
 800e9f2:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800e9f6:	4650      	mov	r0, sl
 800e9f8:	fb00 f001 	mul.w	r0, r0, r1
 800e9fc:	4659      	mov	r1, fp
 800e9fe:	462c      	mov	r4, r5
 800ea00:	fb04 f101 	mul.w	r1, r4, r1
 800ea04:	4401      	add	r1, r0
 800ea06:	4628      	mov	r0, r5
 800ea08:	4654      	mov	r4, sl
 800ea0a:	fba0 8904 	umull	r8, r9, r0, r4
 800ea0e:	4449      	add	r1, r9
 800ea10:	4689      	mov	r9, r1
 800ea12:	eb12 0108 	adds.w	r1, r2, r8
 800ea16:	6039      	str	r1, [r7, #0]
 800ea18:	eb43 0309 	adc.w	r3, r3, r9
 800ea1c:	607b      	str	r3, [r7, #4]
 800ea1e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800ea22:	e9d7 1200 	ldrd	r1, r2, [r7]
 800ea26:	e943 1202 	strd	r1, r2, [r3, #-8]
    result = (int32_t)(mult.long_long >> 31);
 800ea2a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800ea2e:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800ea32:	f04f 0200 	mov.w	r2, #0
 800ea36:	f04f 0300 	mov.w	r3, #0
 800ea3a:	0fc2      	lsrs	r2, r0, #31
 800ea3c:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 800ea40:	17cb      	asrs	r3, r1, #31
 800ea42:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 800ea46:	f2a1 5144 	subw	r1, r1, #1348	; 0x544
 800ea4a:	4613      	mov	r3, r2
 800ea4c:	600b      	str	r3, [r1, #0]
    return result;
 800ea4e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ea52:	f2a3 5344 	subw	r3, r3, #1348	; 0x544
 800ea56:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800ea58:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ea5c:	f5a3 63a7 	sub.w	r3, r3, #1336	; 0x538
 800ea60:	681b      	ldr	r3, [r3, #0]
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	dc06      	bgt.n	800ea74 <arm_nn_vec_mat_mult_t_s8+0x2a8c>
 800ea66:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ea6a:	f5a3 63a7 	sub.w	r3, r3, #1336	; 0x538
 800ea6e:	681b      	ldr	r3, [r3, #0]
 800ea70:	425b      	negs	r3, r3
 800ea72:	e000      	b.n	800ea76 <arm_nn_vec_mat_mult_t_s8+0x2a8e>
 800ea74:	2300      	movs	r3, #0
 800ea76:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800ea7a:	f5a2 62a9 	sub.w	r2, r2, #1352	; 0x548
 800ea7e:	6011      	str	r1, [r2, #0]
 800ea80:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800ea84:	f2a2 524c 	subw	r2, r2, #1356	; 0x54c
 800ea88:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 800ea8a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ea8e:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 800ea92:	2200      	movs	r2, #0
 800ea94:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 800ea96:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ea9a:	f2a3 534c 	subw	r3, r3, #1356	; 0x54c
 800ea9e:	2201      	movs	r2, #1
 800eaa0:	681b      	ldr	r3, [r3, #0]
 800eaa2:	409a      	lsls	r2, r3
 800eaa4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800eaa8:	f2a3 5354 	subw	r3, r3, #1364	; 0x554
 800eaac:	3a01      	subs	r2, #1
 800eaae:	601a      	str	r2, [r3, #0]
    int32_t remainder = remainder_mask & dividend;
 800eab0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800eab4:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 800eab8:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800eabc:	f5a2 61a9 	sub.w	r1, r2, #1352	; 0x548
 800eac0:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800eac4:	f2a2 5254 	subw	r2, r2, #1364	; 0x554
 800eac8:	6809      	ldr	r1, [r1, #0]
 800eaca:	6812      	ldr	r2, [r2, #0]
 800eacc:	400a      	ands	r2, r1
 800eace:	601a      	str	r2, [r3, #0]
    result = dividend >> exponent;
 800ead0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ead4:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 800ead8:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800eadc:	f5a2 61a9 	sub.w	r1, r2, #1352	; 0x548
 800eae0:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800eae4:	f2a2 524c 	subw	r2, r2, #1356	; 0x54c
 800eae8:	6809      	ldr	r1, [r1, #0]
 800eaea:	6812      	ldr	r2, [r2, #0]
 800eaec:	fa41 f202 	asr.w	r2, r1, r2
 800eaf0:	601a      	str	r2, [r3, #0]
    q31_t threshold = remainder_mask >> 1;
 800eaf2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800eaf6:	f2a3 535c 	subw	r3, r3, #1372	; 0x55c
 800eafa:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800eafe:	f2a2 5254 	subw	r2, r2, #1364	; 0x554
 800eb02:	6812      	ldr	r2, [r2, #0]
 800eb04:	1052      	asrs	r2, r2, #1
 800eb06:	601a      	str	r2, [r3, #0]
    if (result < 0)
 800eb08:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800eb0c:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 800eb10:	681b      	ldr	r3, [r3, #0]
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	da0a      	bge.n	800eb2c <arm_nn_vec_mat_mult_t_s8+0x2b44>
        threshold++;
 800eb16:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800eb1a:	f2a3 535c 	subw	r3, r3, #1372	; 0x55c
 800eb1e:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800eb22:	f2a2 525c 	subw	r2, r2, #1372	; 0x55c
 800eb26:	6812      	ldr	r2, [r2, #0]
 800eb28:	3201      	adds	r2, #1
 800eb2a:	601a      	str	r2, [r3, #0]
    if (remainder > threshold)
 800eb2c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800eb30:	f5a3 62ab 	sub.w	r2, r3, #1368	; 0x558
 800eb34:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800eb38:	f2a3 535c 	subw	r3, r3, #1372	; 0x55c
 800eb3c:	6812      	ldr	r2, [r2, #0]
 800eb3e:	681b      	ldr	r3, [r3, #0]
 800eb40:	429a      	cmp	r2, r3
 800eb42:	dd0a      	ble.n	800eb5a <arm_nn_vec_mat_mult_t_s8+0x2b72>
        result++;
 800eb44:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800eb48:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 800eb4c:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800eb50:	f5a2 62aa 	sub.w	r2, r2, #1360	; 0x550
 800eb54:	6812      	ldr	r2, [r2, #0]
 800eb56:	3201      	adds	r2, #1
 800eb58:	601a      	str	r2, [r3, #0]
    return result;
 800eb5a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800eb5e:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 800eb62:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800eb64:	bf00      	nop
        }

        // Quantize down
        res00 = arm_nn_requantize(res00, dst_multiplier, dst_shift);
 800eb66:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c

        // Add offset
        res00 += dst_offset;
 800eb6a:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 800eb6e:	f8d7 3658 	ldr.w	r3, [r7, #1624]	; 0x658
 800eb72:	4413      	add	r3, r2
 800eb74:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c

        // Clamp the result
        res00 = MAX(res00, activation_min);
 800eb78:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 800eb7c:	f8d7 366c 	ldr.w	r3, [r7, #1644]	; 0x66c
 800eb80:	4293      	cmp	r3, r2
 800eb82:	bfb8      	it	lt
 800eb84:	4613      	movlt	r3, r2
 800eb86:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
        res00 = MIN(res00, activation_max);
 800eb8a:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 800eb8e:	f8d7 3670 	ldr.w	r3, [r7, #1648]	; 0x670
 800eb92:	4293      	cmp	r3, r2
 800eb94:	bfa8      	it	ge
 800eb96:	4613      	movge	r3, r2
 800eb98:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c

        *dst = (q7_t)res00;
 800eb9c:	f8d7 361c 	ldr.w	r3, [r7, #1564]	; 0x61c
 800eba0:	b25a      	sxtb	r2, r3
 800eba2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800eba6:	f5a3 63bd 	sub.w	r3, r3, #1512	; 0x5e8
 800ebaa:	681b      	ldr	r3, [r3, #0]
 800ebac:	701a      	strb	r2, [r3, #0]

        *dst = (q7_t)res00;
    }
#endif

    return ARM_MATH_SUCCESS;
 800ebae:	2300      	movs	r3, #0
}
 800ebb0:	4618      	mov	r0, r3
 800ebb2:	f507 67c6 	add.w	r7, r7, #1584	; 0x630
 800ebb6:	46bd      	mov	sp, r7
 800ebb8:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800ebbc:	4770      	bx	lr
	...

0800ebc0 <arm_softmax_s8>:
                    const int32_t row_size,
                    const int32_t mult,
                    const int32_t shift,
                    const int32_t diff_min,
                    int8_t *output)
{
 800ebc0:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800ebc4:	f6ad 1da8 	subw	sp, sp, #2472	; 0x9a8
 800ebc8:	af00      	add	r7, sp, #0
 800ebca:	f607 14a8 	addw	r4, r7, #2472	; 0x9a8
 800ebce:	f5a4 7471 	sub.w	r4, r4, #964	; 0x3c4
 800ebd2:	6020      	str	r0, [r4, #0]
 800ebd4:	f607 10a8 	addw	r0, r7, #2472	; 0x9a8
 800ebd8:	f5a0 7072 	sub.w	r0, r0, #968	; 0x3c8
 800ebdc:	6001      	str	r1, [r0, #0]
 800ebde:	f607 11a8 	addw	r1, r7, #2472	; 0x9a8
 800ebe2:	f5a1 7173 	sub.w	r1, r1, #972	; 0x3cc
 800ebe6:	600a      	str	r2, [r1, #0]
 800ebe8:	f607 12a8 	addw	r2, r7, #2472	; 0x9a8
 800ebec:	f5a2 7274 	sub.w	r2, r2, #976	; 0x3d0
 800ebf0:	6013      	str	r3, [r2, #0]

        input += row_size;
        output += row_size;
    }
#else
    const int32_t mask = (1 << shift);
 800ebf2:	2201      	movs	r2, #1
 800ebf4:	f8d7 39c8 	ldr.w	r3, [r7, #2504]	; 0x9c8
 800ebf8:	fa02 f303 	lsl.w	r3, r2, r3
 800ebfc:	f8c7 3994 	str.w	r3, [r7, #2452]	; 0x994

    int32_t col = 0;
 800ec00:	2300      	movs	r3, #0
 800ec02:	f8c7 39a4 	str.w	r3, [r7, #2468]	; 0x9a4
    int32_t row_idx;

    for (row_idx = 0; row_idx < num_rows; ++row_idx)
 800ec06:	2300      	movs	r3, #0
 800ec08:	f8c7 39a0 	str.w	r3, [r7, #2464]	; 0x9a0
 800ec0c:	f004 b863 	b.w	8012cd6 <arm_softmax_s8+0x4116>
    {
        // Find the maximum value in order to ensure numerical stability
        int8_t max = *input;
 800ec10:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ec14:	f5a3 7371 	sub.w	r3, r3, #964	; 0x3c4
 800ec18:	681b      	ldr	r3, [r3, #0]
 800ec1a:	781b      	ldrb	r3, [r3, #0]
 800ec1c:	f887 399f 	strb.w	r3, [r7, #2463]	; 0x99f

        for (col = 1; col < row_size; ++col)
 800ec20:	2301      	movs	r3, #1
 800ec22:	f8c7 39a4 	str.w	r3, [r7, #2468]	; 0x9a4
 800ec26:	e015      	b.n	800ec54 <arm_softmax_s8+0x94>
        {
            max = MAX(max, input[col]);
 800ec28:	f8d7 29a4 	ldr.w	r2, [r7, #2468]	; 0x9a4
 800ec2c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ec30:	f5a3 7371 	sub.w	r3, r3, #964	; 0x3c4
 800ec34:	681b      	ldr	r3, [r3, #0]
 800ec36:	4413      	add	r3, r2
 800ec38:	f993 2000 	ldrsb.w	r2, [r3]
 800ec3c:	f997 399f 	ldrsb.w	r3, [r7, #2463]	; 0x99f
 800ec40:	4293      	cmp	r3, r2
 800ec42:	bfb8      	it	lt
 800ec44:	4613      	movlt	r3, r2
 800ec46:	f887 399f 	strb.w	r3, [r7, #2463]	; 0x99f
        for (col = 1; col < row_size; ++col)
 800ec4a:	f8d7 39a4 	ldr.w	r3, [r7, #2468]	; 0x9a4
 800ec4e:	3301      	adds	r3, #1
 800ec50:	f8c7 39a4 	str.w	r3, [r7, #2468]	; 0x9a4
 800ec54:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ec58:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 800ec5c:	f8d7 29a4 	ldr.w	r2, [r7, #2468]	; 0x9a4
 800ec60:	681b      	ldr	r3, [r3, #0]
 800ec62:	429a      	cmp	r2, r3
 800ec64:	dbe0      	blt.n	800ec28 <arm_softmax_s8+0x68>
        }

        int32_t diff = 0;
 800ec66:	2300      	movs	r3, #0
 800ec68:	f8c7 3990 	str.w	r3, [r7, #2448]	; 0x990
        int32_t sum = 0;
 800ec6c:	2300      	movs	r3, #0
 800ec6e:	f8c7 3998 	str.w	r3, [r7, #2456]	; 0x998

        for (col = 0; col < row_size; ++col)
 800ec72:	2300      	movs	r3, #0
 800ec74:	f8c7 39a4 	str.w	r3, [r7, #2468]	; 0x9a4
 800ec78:	f001 ba24 	b.w	80100c4 <arm_softmax_s8+0x1504>
        {
            diff = input[col] - max;
 800ec7c:	f8d7 29a4 	ldr.w	r2, [r7, #2468]	; 0x9a4
 800ec80:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ec84:	f5a3 7371 	sub.w	r3, r3, #964	; 0x3c4
 800ec88:	681b      	ldr	r3, [r3, #0]
 800ec8a:	4413      	add	r3, r2
 800ec8c:	f993 3000 	ldrsb.w	r3, [r3]
 800ec90:	461a      	mov	r2, r3
 800ec92:	f997 399f 	ldrsb.w	r3, [r7, #2463]	; 0x99f
 800ec96:	1ad3      	subs	r3, r2, r3
 800ec98:	f8c7 3990 	str.w	r3, [r7, #2448]	; 0x990
            if (diff >= diff_min)
 800ec9c:	f8d7 2990 	ldr.w	r2, [r7, #2448]	; 0x990
 800eca0:	f8d7 39cc 	ldr.w	r3, [r7, #2508]	; 0x9cc
 800eca4:	429a      	cmp	r2, r3
 800eca6:	f2c1 8208 	blt.w	80100ba <arm_softmax_s8+0x14fa>
            {
                sum += DIV_POW2(EXP_ON_NEG(MUL_SAT(diff * mask, mult)), ACCUM_BITS);
 800ecaa:	f8d7 2990 	ldr.w	r2, [r7, #2448]	; 0x990
 800ecae:	f8d7 3994 	ldr.w	r3, [r7, #2452]	; 0x994
 800ecb2:	fb03 f202 	mul.w	r2, r3, r2
 800ecb6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ecba:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800ecbe:	601a      	str	r2, [r3, #0]
 800ecc0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ecc4:	f5a3 72b0 	sub.w	r2, r3, #352	; 0x160
 800ecc8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800eccc:	f5a3 7374 	sub.w	r3, r3, #976	; 0x3d0
 800ecd0:	681b      	ldr	r3, [r3, #0]
 800ecd2:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 800ecd4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ecd8:	f5a3 72b2 	sub.w	r2, r3, #356	; 0x164
 800ecdc:	2300      	movs	r3, #0
 800ecde:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 800ece0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800ece4:	f04f 0300 	mov.w	r3, #0
 800ece8:	f607 0138 	addw	r1, r7, #2104	; 0x838
 800ecec:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 800ecf0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ecf4:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800ecf8:	681b      	ldr	r3, [r3, #0]
 800ecfa:	0fdb      	lsrs	r3, r3, #31
 800ecfc:	b2da      	uxtb	r2, r3
 800ecfe:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ed02:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800ed06:	681b      	ldr	r3, [r3, #0]
 800ed08:	0fdb      	lsrs	r3, r3, #31
 800ed0a:	b2db      	uxtb	r3, r3
 800ed0c:	4053      	eors	r3, r2
 800ed0e:	b2db      	uxtb	r3, r3
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d012      	beq.n	800ed3a <arm_softmax_s8+0x17a>
        mult = 1 - mult;
 800ed14:	f607 0338 	addw	r3, r7, #2104	; 0x838
 800ed18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed1c:	2100      	movs	r1, #0
 800ed1e:	f1d2 0001 	rsbs	r0, r2, #1
 800ed22:	f8c7 0330 	str.w	r0, [r7, #816]	; 0x330
 800ed26:	eb61 0303 	sbc.w	r3, r1, r3
 800ed2a:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
 800ed2e:	e9d7 34cc 	ldrd	r3, r4, [r7, #816]	; 0x330
 800ed32:	f607 0238 	addw	r2, r7, #2104	; 0x838
 800ed36:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 800ed3a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ed3e:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800ed42:	681b      	ldr	r3, [r3, #0]
 800ed44:	17da      	asrs	r2, r3, #31
 800ed46:	f8c7 3460 	str.w	r3, [r7, #1120]	; 0x460
 800ed4a:	f8c7 2464 	str.w	r2, [r7, #1124]	; 0x464
 800ed4e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ed52:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800ed56:	681b      	ldr	r3, [r3, #0]
 800ed58:	17da      	asrs	r2, r3, #31
 800ed5a:	f8c7 3458 	str.w	r3, [r7, #1112]	; 0x458
 800ed5e:	f8c7 245c 	str.w	r2, [r7, #1116]	; 0x45c
 800ed62:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 800ed66:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ed6a:	460b      	mov	r3, r1
 800ed6c:	f8d7 2458 	ldr.w	r2, [r7, #1112]	; 0x458
 800ed70:	fb02 f203 	mul.w	r2, r2, r3
 800ed74:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 800ed78:	f507 648c 	add.w	r4, r7, #1120	; 0x460
 800ed7c:	e9c4 0100 	strd	r0, r1, [r4]
 800ed80:	4601      	mov	r1, r0
 800ed82:	fb01 f303 	mul.w	r3, r1, r3
 800ed86:	4413      	add	r3, r2
 800ed88:	f8d7 2460 	ldr.w	r2, [r7, #1120]	; 0x460
 800ed8c:	f8d7 1458 	ldr.w	r1, [r7, #1112]	; 0x458
 800ed90:	fba2 1201 	umull	r1, r2, r2, r1
 800ed94:	f8c7 258c 	str.w	r2, [r7, #1420]	; 0x58c
 800ed98:	460a      	mov	r2, r1
 800ed9a:	f8c7 2588 	str.w	r2, [r7, #1416]	; 0x588
 800ed9e:	f8d7 258c 	ldr.w	r2, [r7, #1420]	; 0x58c
 800eda2:	4413      	add	r3, r2
 800eda4:	f8c7 358c 	str.w	r3, [r7, #1420]	; 0x58c
 800eda8:	f607 0338 	addw	r3, r7, #2104	; 0x838
 800edac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edb0:	f8d7 1588 	ldr.w	r1, [r7, #1416]	; 0x588
 800edb4:	1851      	adds	r1, r2, r1
 800edb6:	f8c7 1328 	str.w	r1, [r7, #808]	; 0x328
 800edba:	f8d7 158c 	ldr.w	r1, [r7, #1420]	; 0x58c
 800edbe:	414b      	adcs	r3, r1
 800edc0:	f8c7 332c 	str.w	r3, [r7, #812]	; 0x32c
 800edc4:	e9d7 34ca 	ldrd	r3, r4, [r7, #808]	; 0x328
 800edc8:	f607 0238 	addw	r2, r7, #2104	; 0x838
 800edcc:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 800edd0:	f607 0338 	addw	r3, r7, #2104	; 0x838
 800edd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edd8:	2b00      	cmp	r3, #0
 800edda:	da0a      	bge.n	800edf2 <arm_softmax_s8+0x232>
 800eddc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ede0:	1851      	adds	r1, r2, r1
 800ede2:	f8c7 1320 	str.w	r1, [r7, #800]	; 0x320
 800ede6:	f143 0300 	adc.w	r3, r3, #0
 800edea:	f8c7 3324 	str.w	r3, [r7, #804]	; 0x324
 800edee:	e9d7 23c8 	ldrd	r2, r3, [r7, #800]	; 0x320
 800edf2:	f04f 0000 	mov.w	r0, #0
 800edf6:	f04f 0100 	mov.w	r1, #0
 800edfa:	0fd0      	lsrs	r0, r2, #31
 800edfc:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800ee00:	17d9      	asrs	r1, r3, #31
 800ee02:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ee06:	f5a3 72b2 	sub.w	r2, r3, #356	; 0x164
 800ee0a:	4603      	mov	r3, r0
 800ee0c:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 800ee0e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ee12:	f5a3 72ae 	sub.w	r2, r3, #348	; 0x15c
 800ee16:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ee1a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800ee1e:	6812      	ldr	r2, [r2, #0]
 800ee20:	681b      	ldr	r3, [r3, #0]
 800ee22:	429a      	cmp	r2, r3
 800ee24:	d10e      	bne.n	800ee44 <arm_softmax_s8+0x284>
 800ee26:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ee2a:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800ee2e:	681b      	ldr	r3, [r3, #0]
 800ee30:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ee34:	d106      	bne.n	800ee44 <arm_softmax_s8+0x284>
        result = Q31_MAX;
 800ee36:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ee3a:	f5a3 72b2 	sub.w	r2, r3, #356	; 0x164
 800ee3e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800ee42:	6013      	str	r3, [r2, #0]
    return result;
 800ee44:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ee48:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800ee4c:	681b      	ldr	r3, [r3, #0]
 800ee4e:	f8c7 3968 	str.w	r3, [r7, #2408]	; 0x968

// @note The following functions are used only for softmax layer, scaled bits = 5 assumed

__STATIC_FORCEINLINE int32_t arm_nn_exp_on_negative_values(int32_t val)
{
    int32_t mask = 0;
 800ee52:	2300      	movs	r3, #0
 800ee54:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
    int32_t shift = 24;
 800ee58:	2318      	movs	r3, #24
 800ee5a:	f8c7 3960 	str.w	r3, [r7, #2400]	; 0x960

    const int32_t val_mod_minus_quarter = (val & ((1 << shift) - 1)) - (1 << shift);
 800ee5e:	2201      	movs	r2, #1
 800ee60:	f8d7 3960 	ldr.w	r3, [r7, #2400]	; 0x960
 800ee64:	fa02 f303 	lsl.w	r3, r2, r3
 800ee68:	1e5a      	subs	r2, r3, #1
 800ee6a:	f8d7 3968 	ldr.w	r3, [r7, #2408]	; 0x968
 800ee6e:	ea02 0103 	and.w	r1, r2, r3
 800ee72:	2201      	movs	r2, #1
 800ee74:	f8d7 3960 	ldr.w	r3, [r7, #2400]	; 0x960
 800ee78:	fa02 f303 	lsl.w	r3, r2, r3
 800ee7c:	1acb      	subs	r3, r1, r3
 800ee7e:	f8c7 395c 	str.w	r3, [r7, #2396]	; 0x95c
    const int32_t remainder = val_mod_minus_quarter - val;
 800ee82:	f8d7 295c 	ldr.w	r2, [r7, #2396]	; 0x95c
 800ee86:	f8d7 3968 	ldr.w	r3, [r7, #2408]	; 0x968
 800ee8a:	1ad3      	subs	r3, r2, r3
 800ee8c:	f8c7 3958 	str.w	r3, [r7, #2392]	; 0x958
    const int32_t x = (val_mod_minus_quarter << 5) + (1 << 28);
 800ee90:	f8d7 395c 	ldr.w	r3, [r7, #2396]	; 0x95c
 800ee94:	015b      	lsls	r3, r3, #5
 800ee96:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 800ee9a:	f8c7 3954 	str.w	r3, [r7, #2388]	; 0x954
 800ee9e:	f8d7 3954 	ldr.w	r3, [r7, #2388]	; 0x954
 800eea2:	f8c7 3950 	str.w	r3, [r7, #2384]	; 0x950
 800eea6:	f8d7 3954 	ldr.w	r3, [r7, #2388]	; 0x954
 800eeaa:	f8c7 394c 	str.w	r3, [r7, #2380]	; 0x94c
    q31_t result = 0;
 800eeae:	2300      	movs	r3, #0
 800eeb0:	f8c7 3948 	str.w	r3, [r7, #2376]	; 0x948
    q63_t mult = 1 << 30;
 800eeb4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800eeb8:	f04f 0300 	mov.w	r3, #0
 800eebc:	f507 6114 	add.w	r1, r7, #2368	; 0x940
 800eec0:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 800eec4:	f8d7 3950 	ldr.w	r3, [r7, #2384]	; 0x950
 800eec8:	0fdb      	lsrs	r3, r3, #31
 800eeca:	b2da      	uxtb	r2, r3
 800eecc:	f8d7 394c 	ldr.w	r3, [r7, #2380]	; 0x94c
 800eed0:	0fdb      	lsrs	r3, r3, #31
 800eed2:	b2db      	uxtb	r3, r3
 800eed4:	4053      	eors	r3, r2
 800eed6:	b2db      	uxtb	r3, r3
 800eed8:	2b00      	cmp	r3, #0
 800eeda:	d012      	beq.n	800ef02 <arm_softmax_s8+0x342>
        mult = 1 - mult;
 800eedc:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 800eee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eee4:	2100      	movs	r1, #0
 800eee6:	f1d2 0001 	rsbs	r0, r2, #1
 800eeea:	f8c7 0318 	str.w	r0, [r7, #792]	; 0x318
 800eeee:	eb61 0303 	sbc.w	r3, r1, r3
 800eef2:	f8c7 331c 	str.w	r3, [r7, #796]	; 0x31c
 800eef6:	e9d7 34c6 	ldrd	r3, r4, [r7, #792]	; 0x318
 800eefa:	f507 6214 	add.w	r2, r7, #2368	; 0x940
 800eefe:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 800ef02:	f8d7 3950 	ldr.w	r3, [r7, #2384]	; 0x950
 800ef06:	17da      	asrs	r2, r3, #31
 800ef08:	f8c7 34d8 	str.w	r3, [r7, #1240]	; 0x4d8
 800ef0c:	f8c7 24dc 	str.w	r2, [r7, #1244]	; 0x4dc
 800ef10:	f8d7 394c 	ldr.w	r3, [r7, #2380]	; 0x94c
 800ef14:	17da      	asrs	r2, r3, #31
 800ef16:	f8c7 34d0 	str.w	r3, [r7, #1232]	; 0x4d0
 800ef1a:	f8c7 24d4 	str.w	r2, [r7, #1236]	; 0x4d4
 800ef1e:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 800ef22:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ef26:	460b      	mov	r3, r1
 800ef28:	f8d7 24d0 	ldr.w	r2, [r7, #1232]	; 0x4d0
 800ef2c:	fb02 f203 	mul.w	r2, r2, r3
 800ef30:	f8d7 34d4 	ldr.w	r3, [r7, #1236]	; 0x4d4
 800ef34:	f507 649b 	add.w	r4, r7, #1240	; 0x4d8
 800ef38:	e9c4 0100 	strd	r0, r1, [r4]
 800ef3c:	4601      	mov	r1, r0
 800ef3e:	fb01 f303 	mul.w	r3, r1, r3
 800ef42:	4413      	add	r3, r2
 800ef44:	f8d7 24d8 	ldr.w	r2, [r7, #1240]	; 0x4d8
 800ef48:	f8d7 14d0 	ldr.w	r1, [r7, #1232]	; 0x4d0
 800ef4c:	fba2 8901 	umull	r8, r9, r2, r1
 800ef50:	444b      	add	r3, r9
 800ef52:	4699      	mov	r9, r3
 800ef54:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 800ef58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef5c:	eb12 0108 	adds.w	r1, r2, r8
 800ef60:	f8c7 1310 	str.w	r1, [r7, #784]	; 0x310
 800ef64:	eb43 0309 	adc.w	r3, r3, r9
 800ef68:	f8c7 3314 	str.w	r3, [r7, #788]	; 0x314
 800ef6c:	e9d7 34c4 	ldrd	r3, r4, [r7, #784]	; 0x310
 800ef70:	f507 6214 	add.w	r2, r7, #2368	; 0x940
 800ef74:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 800ef78:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 800ef7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	da0a      	bge.n	800ef9a <arm_softmax_s8+0x3da>
 800ef84:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ef88:	1851      	adds	r1, r2, r1
 800ef8a:	f8c7 1308 	str.w	r1, [r7, #776]	; 0x308
 800ef8e:	f143 0300 	adc.w	r3, r3, #0
 800ef92:	f8c7 330c 	str.w	r3, [r7, #780]	; 0x30c
 800ef96:	e9d7 23c2 	ldrd	r2, r3, [r7, #776]	; 0x308
 800ef9a:	f04f 0000 	mov.w	r0, #0
 800ef9e:	f04f 0100 	mov.w	r1, #0
 800efa2:	0fd0      	lsrs	r0, r2, #31
 800efa4:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800efa8:	17d9      	asrs	r1, r3, #31
 800efaa:	4602      	mov	r2, r0
 800efac:	460b      	mov	r3, r1
 800efae:	4613      	mov	r3, r2
 800efb0:	f8c7 3948 	str.w	r3, [r7, #2376]	; 0x948
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 800efb4:	f8d7 2950 	ldr.w	r2, [r7, #2384]	; 0x950
 800efb8:	f8d7 394c 	ldr.w	r3, [r7, #2380]	; 0x94c
 800efbc:	429a      	cmp	r2, r3
 800efbe:	d108      	bne.n	800efd2 <arm_softmax_s8+0x412>
 800efc0:	f8d7 3950 	ldr.w	r3, [r7, #2384]	; 0x950
 800efc4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800efc8:	d103      	bne.n	800efd2 <arm_softmax_s8+0x412>
        result = Q31_MAX;
 800efca:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800efce:	f8c7 3948 	str.w	r3, [r7, #2376]	; 0x948
    return result;
 800efd2:	f8d7 3948 	ldr.w	r3, [r7, #2376]	; 0x948
    const int32_t x2 = MUL_SAT(x, x);
 800efd6:	f8c7 393c 	str.w	r3, [r7, #2364]	; 0x93c
 800efda:	f8d7 393c 	ldr.w	r3, [r7, #2364]	; 0x93c
 800efde:	f8c7 3938 	str.w	r3, [r7, #2360]	; 0x938
 800efe2:	f8d7 393c 	ldr.w	r3, [r7, #2364]	; 0x93c
 800efe6:	f8c7 3934 	str.w	r3, [r7, #2356]	; 0x934
    q31_t result = 0;
 800efea:	2300      	movs	r3, #0
 800efec:	f8c7 3930 	str.w	r3, [r7, #2352]	; 0x930
    q63_t mult = 1 << 30;
 800eff0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800eff4:	f04f 0300 	mov.w	r3, #0
 800eff8:	f607 1128 	addw	r1, r7, #2344	; 0x928
 800effc:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 800f000:	f8d7 3938 	ldr.w	r3, [r7, #2360]	; 0x938
 800f004:	0fdb      	lsrs	r3, r3, #31
 800f006:	b2da      	uxtb	r2, r3
 800f008:	f8d7 3934 	ldr.w	r3, [r7, #2356]	; 0x934
 800f00c:	0fdb      	lsrs	r3, r3, #31
 800f00e:	b2db      	uxtb	r3, r3
 800f010:	4053      	eors	r3, r2
 800f012:	b2db      	uxtb	r3, r3
 800f014:	2b00      	cmp	r3, #0
 800f016:	d012      	beq.n	800f03e <arm_softmax_s8+0x47e>
        mult = 1 - mult;
 800f018:	f607 1328 	addw	r3, r7, #2344	; 0x928
 800f01c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f020:	2100      	movs	r1, #0
 800f022:	f1d2 0001 	rsbs	r0, r2, #1
 800f026:	f8c7 0300 	str.w	r0, [r7, #768]	; 0x300
 800f02a:	eb61 0303 	sbc.w	r3, r1, r3
 800f02e:	f8c7 3304 	str.w	r3, [r7, #772]	; 0x304
 800f032:	e9d7 34c0 	ldrd	r3, r4, [r7, #768]	; 0x300
 800f036:	f607 1228 	addw	r2, r7, #2344	; 0x928
 800f03a:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 800f03e:	f8d7 3938 	ldr.w	r3, [r7, #2360]	; 0x938
 800f042:	17da      	asrs	r2, r3, #31
 800f044:	f8c7 34c8 	str.w	r3, [r7, #1224]	; 0x4c8
 800f048:	f8c7 24cc 	str.w	r2, [r7, #1228]	; 0x4cc
 800f04c:	f8d7 3934 	ldr.w	r3, [r7, #2356]	; 0x934
 800f050:	17da      	asrs	r2, r3, #31
 800f052:	f8c7 34c0 	str.w	r3, [r7, #1216]	; 0x4c0
 800f056:	f8c7 24c4 	str.w	r2, [r7, #1220]	; 0x4c4
 800f05a:	f507 6399 	add.w	r3, r7, #1224	; 0x4c8
 800f05e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f062:	460b      	mov	r3, r1
 800f064:	f8d7 24c0 	ldr.w	r2, [r7, #1216]	; 0x4c0
 800f068:	fb02 f203 	mul.w	r2, r2, r3
 800f06c:	f8d7 34c4 	ldr.w	r3, [r7, #1220]	; 0x4c4
 800f070:	f507 6499 	add.w	r4, r7, #1224	; 0x4c8
 800f074:	e9c4 0100 	strd	r0, r1, [r4]
 800f078:	4601      	mov	r1, r0
 800f07a:	fb01 f303 	mul.w	r3, r1, r3
 800f07e:	4413      	add	r3, r2
 800f080:	f8d7 24c8 	ldr.w	r2, [r7, #1224]	; 0x4c8
 800f084:	f8d7 14c0 	ldr.w	r1, [r7, #1216]	; 0x4c0
 800f088:	fba2 ab01 	umull	sl, fp, r2, r1
 800f08c:	445b      	add	r3, fp
 800f08e:	469b      	mov	fp, r3
 800f090:	f607 1328 	addw	r3, r7, #2344	; 0x928
 800f094:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f098:	eb12 010a 	adds.w	r1, r2, sl
 800f09c:	f8c7 12f8 	str.w	r1, [r7, #760]	; 0x2f8
 800f0a0:	eb43 030b 	adc.w	r3, r3, fp
 800f0a4:	f8c7 32fc 	str.w	r3, [r7, #764]	; 0x2fc
 800f0a8:	e9d7 34be 	ldrd	r3, r4, [r7, #760]	; 0x2f8
 800f0ac:	f607 1228 	addw	r2, r7, #2344	; 0x928
 800f0b0:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 800f0b4:	f607 1328 	addw	r3, r7, #2344	; 0x928
 800f0b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	da0a      	bge.n	800f0d6 <arm_softmax_s8+0x516>
 800f0c0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f0c4:	1851      	adds	r1, r2, r1
 800f0c6:	f8c7 12f0 	str.w	r1, [r7, #752]	; 0x2f0
 800f0ca:	f143 0300 	adc.w	r3, r3, #0
 800f0ce:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4
 800f0d2:	e9d7 23bc 	ldrd	r2, r3, [r7, #752]	; 0x2f0
 800f0d6:	f04f 0000 	mov.w	r0, #0
 800f0da:	f04f 0100 	mov.w	r1, #0
 800f0de:	0fd0      	lsrs	r0, r2, #31
 800f0e0:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800f0e4:	17d9      	asrs	r1, r3, #31
 800f0e6:	4602      	mov	r2, r0
 800f0e8:	460b      	mov	r3, r1
 800f0ea:	4613      	mov	r3, r2
 800f0ec:	f8c7 3930 	str.w	r3, [r7, #2352]	; 0x930
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 800f0f0:	f8d7 2938 	ldr.w	r2, [r7, #2360]	; 0x938
 800f0f4:	f8d7 3934 	ldr.w	r3, [r7, #2356]	; 0x934
 800f0f8:	429a      	cmp	r2, r3
 800f0fa:	d108      	bne.n	800f10e <arm_softmax_s8+0x54e>
 800f0fc:	f8d7 3938 	ldr.w	r3, [r7, #2360]	; 0x938
 800f100:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f104:	d103      	bne.n	800f10e <arm_softmax_s8+0x54e>
        result = Q31_MAX;
 800f106:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800f10a:	f8c7 3930 	str.w	r3, [r7, #2352]	; 0x930
    return result;
 800f10e:	f8d7 3930 	ldr.w	r3, [r7, #2352]	; 0x930
 800f112:	f8c7 3924 	str.w	r3, [r7, #2340]	; 0x924
    q31_t result = 0;
 800f116:	2300      	movs	r3, #0
 800f118:	f8c7 3920 	str.w	r3, [r7, #2336]	; 0x920
    const q31_t remainder_mask = (1 << exponent) - 1;
 800f11c:	2304      	movs	r3, #4
 800f11e:	3b01      	subs	r3, #1
 800f120:	f8c7 391c 	str.w	r3, [r7, #2332]	; 0x91c
    int32_t remainder = remainder_mask & dividend;
 800f124:	f8d7 2924 	ldr.w	r2, [r7, #2340]	; 0x924
 800f128:	f8d7 391c 	ldr.w	r3, [r7, #2332]	; 0x91c
 800f12c:	4013      	ands	r3, r2
 800f12e:	f8c7 3918 	str.w	r3, [r7, #2328]	; 0x918
    result = dividend >> exponent;
 800f132:	f8d7 3924 	ldr.w	r3, [r7, #2340]	; 0x924
 800f136:	109b      	asrs	r3, r3, #2
 800f138:	f8c7 3920 	str.w	r3, [r7, #2336]	; 0x920
    q31_t threshold = remainder_mask >> 1;
 800f13c:	f8d7 391c 	ldr.w	r3, [r7, #2332]	; 0x91c
 800f140:	105b      	asrs	r3, r3, #1
 800f142:	f8c7 3914 	str.w	r3, [r7, #2324]	; 0x914
    if (result < 0)
 800f146:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	da04      	bge.n	800f158 <arm_softmax_s8+0x598>
        threshold++;
 800f14e:	f8d7 3914 	ldr.w	r3, [r7, #2324]	; 0x914
 800f152:	3301      	adds	r3, #1
 800f154:	f8c7 3914 	str.w	r3, [r7, #2324]	; 0x914
    if (remainder > threshold)
 800f158:	f8d7 2918 	ldr.w	r2, [r7, #2328]	; 0x918
 800f15c:	f8d7 3914 	ldr.w	r3, [r7, #2324]	; 0x914
 800f160:	429a      	cmp	r2, r3
 800f162:	dd04      	ble.n	800f16e <arm_softmax_s8+0x5ae>
        result++;
 800f164:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 800f168:	3301      	adds	r3, #1
 800f16a:	f8c7 3920 	str.w	r3, [r7, #2336]	; 0x920
    return result;
 800f16e:	f8d7 4920 	ldr.w	r4, [r7, #2336]	; 0x920
 800f172:	f8d7 393c 	ldr.w	r3, [r7, #2364]	; 0x93c
 800f176:	f8c7 3910 	str.w	r3, [r7, #2320]	; 0x910
 800f17a:	f8d7 3954 	ldr.w	r3, [r7, #2388]	; 0x954
 800f17e:	f8c7 390c 	str.w	r3, [r7, #2316]	; 0x90c
    q31_t result = 0;
 800f182:	2300      	movs	r3, #0
 800f184:	f8c7 3908 	str.w	r3, [r7, #2312]	; 0x908
    q63_t mult = 1 << 30;
 800f188:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800f18c:	f04f 0300 	mov.w	r3, #0
 800f190:	f507 6110 	add.w	r1, r7, #2304	; 0x900
 800f194:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 800f198:	f8d7 3910 	ldr.w	r3, [r7, #2320]	; 0x910
 800f19c:	0fdb      	lsrs	r3, r3, #31
 800f19e:	b2da      	uxtb	r2, r3
 800f1a0:	f8d7 390c 	ldr.w	r3, [r7, #2316]	; 0x90c
 800f1a4:	0fdb      	lsrs	r3, r3, #31
 800f1a6:	b2db      	uxtb	r3, r3
 800f1a8:	4053      	eors	r3, r2
 800f1aa:	b2db      	uxtb	r3, r3
 800f1ac:	2b00      	cmp	r3, #0
 800f1ae:	d012      	beq.n	800f1d6 <arm_softmax_s8+0x616>
        mult = 1 - mult;
 800f1b0:	f507 6310 	add.w	r3, r7, #2304	; 0x900
 800f1b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1b8:	2100      	movs	r1, #0
 800f1ba:	f1d2 0001 	rsbs	r0, r2, #1
 800f1be:	f8c7 02e8 	str.w	r0, [r7, #744]	; 0x2e8
 800f1c2:	eb61 0303 	sbc.w	r3, r1, r3
 800f1c6:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
 800f1ca:	e9d7 23ba 	ldrd	r2, r3, [r7, #744]	; 0x2e8
 800f1ce:	f507 6110 	add.w	r1, r7, #2304	; 0x900
 800f1d2:	e9c1 2300 	strd	r2, r3, [r1]
    mult = mult + (q63_t)m1 * m2;
 800f1d6:	f8d7 3910 	ldr.w	r3, [r7, #2320]	; 0x910
 800f1da:	17da      	asrs	r2, r3, #31
 800f1dc:	f8c7 34b8 	str.w	r3, [r7, #1208]	; 0x4b8
 800f1e0:	f8c7 24bc 	str.w	r2, [r7, #1212]	; 0x4bc
 800f1e4:	f8d7 390c 	ldr.w	r3, [r7, #2316]	; 0x90c
 800f1e8:	17da      	asrs	r2, r3, #31
 800f1ea:	f8c7 34b0 	str.w	r3, [r7, #1200]	; 0x4b0
 800f1ee:	f8c7 24b4 	str.w	r2, [r7, #1204]	; 0x4b4
 800f1f2:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 800f1f6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f1fa:	460b      	mov	r3, r1
 800f1fc:	f8d7 24b0 	ldr.w	r2, [r7, #1200]	; 0x4b0
 800f200:	fb02 f203 	mul.w	r2, r2, r3
 800f204:	f8d7 34b4 	ldr.w	r3, [r7, #1204]	; 0x4b4
 800f208:	f507 6c97 	add.w	ip, r7, #1208	; 0x4b8
 800f20c:	e9cc 0100 	strd	r0, r1, [ip]
 800f210:	4601      	mov	r1, r0
 800f212:	fb01 f303 	mul.w	r3, r1, r3
 800f216:	4413      	add	r3, r2
 800f218:	f8d7 24b8 	ldr.w	r2, [r7, #1208]	; 0x4b8
 800f21c:	f8d7 14b0 	ldr.w	r1, [r7, #1200]	; 0x4b0
 800f220:	fba2 5601 	umull	r5, r6, r2, r1
 800f224:	4433      	add	r3, r6
 800f226:	461e      	mov	r6, r3
 800f228:	f507 6310 	add.w	r3, r7, #2304	; 0x900
 800f22c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f230:	1951      	adds	r1, r2, r5
 800f232:	f8c7 12e0 	str.w	r1, [r7, #736]	; 0x2e0
 800f236:	4173      	adcs	r3, r6
 800f238:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 800f23c:	e9d7 23b8 	ldrd	r2, r3, [r7, #736]	; 0x2e0
 800f240:	f507 6110 	add.w	r1, r7, #2304	; 0x900
 800f244:	e9c1 2300 	strd	r2, r3, [r1]
    result = (int32_t)(mult / (1ll << 31));
 800f248:	f507 6310 	add.w	r3, r7, #2304	; 0x900
 800f24c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f250:	2b00      	cmp	r3, #0
 800f252:	da0a      	bge.n	800f26a <arm_softmax_s8+0x6aa>
 800f254:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f258:	1851      	adds	r1, r2, r1
 800f25a:	f8c7 12d8 	str.w	r1, [r7, #728]	; 0x2d8
 800f25e:	f143 0300 	adc.w	r3, r3, #0
 800f262:	f8c7 32dc 	str.w	r3, [r7, #732]	; 0x2dc
 800f266:	e9d7 23b6 	ldrd	r2, r3, [r7, #728]	; 0x2d8
 800f26a:	f04f 0000 	mov.w	r0, #0
 800f26e:	f04f 0100 	mov.w	r1, #0
 800f272:	0fd0      	lsrs	r0, r2, #31
 800f274:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800f278:	17d9      	asrs	r1, r3, #31
 800f27a:	4602      	mov	r2, r0
 800f27c:	460b      	mov	r3, r1
 800f27e:	4613      	mov	r3, r2
 800f280:	f8c7 3908 	str.w	r3, [r7, #2312]	; 0x908
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 800f284:	f8d7 2910 	ldr.w	r2, [r7, #2320]	; 0x910
 800f288:	f8d7 390c 	ldr.w	r3, [r7, #2316]	; 0x90c
 800f28c:	429a      	cmp	r2, r3
 800f28e:	d108      	bne.n	800f2a2 <arm_softmax_s8+0x6e2>
 800f290:	f8d7 3910 	ldr.w	r3, [r7, #2320]	; 0x910
 800f294:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f298:	d103      	bne.n	800f2a2 <arm_softmax_s8+0x6e2>
        result = Q31_MAX;
 800f29a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800f29e:	f8c7 3908 	str.w	r3, [r7, #2312]	; 0x908
    return result;
 800f2a2:	f8d7 3908 	ldr.w	r3, [r7, #2312]	; 0x908

    int32_t result = 1895147668 +
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 800f2a6:	4423      	add	r3, r4
 800f2a8:	f8c7 38fc 	str.w	r3, [r7, #2300]	; 0x8fc
    q31_t result = 0;
 800f2ac:	2300      	movs	r3, #0
 800f2ae:	f8c7 38f8 	str.w	r3, [r7, #2296]	; 0x8f8
    q63_t mult = 1 << 30;
 800f2b2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800f2b6:	f04f 0300 	mov.w	r3, #0
 800f2ba:	f507 610f 	add.w	r1, r7, #2288	; 0x8f0
 800f2be:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 800f2c2:	f8d7 38fc 	ldr.w	r3, [r7, #2300]	; 0x8fc
 800f2c6:	0fdb      	lsrs	r3, r3, #31
 800f2c8:	b2da      	uxtb	r2, r3
 800f2ca:	2300      	movs	r3, #0
 800f2cc:	4053      	eors	r3, r2
 800f2ce:	b2db      	uxtb	r3, r3
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	d012      	beq.n	800f2fa <arm_softmax_s8+0x73a>
        mult = 1 - mult;
 800f2d4:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 800f2d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2dc:	2100      	movs	r1, #0
 800f2de:	f1d2 0001 	rsbs	r0, r2, #1
 800f2e2:	f8c7 02d0 	str.w	r0, [r7, #720]	; 0x2d0
 800f2e6:	eb61 0303 	sbc.w	r3, r1, r3
 800f2ea:	f8c7 32d4 	str.w	r3, [r7, #724]	; 0x2d4
 800f2ee:	e9d7 34b4 	ldrd	r3, r4, [r7, #720]	; 0x2d0
 800f2f2:	f507 620f 	add.w	r2, r7, #2288	; 0x8f0
 800f2f6:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 800f2fa:	f8d7 38fc 	ldr.w	r3, [r7, #2300]	; 0x8fc
 800f2fe:	17da      	asrs	r2, r3, #31
 800f300:	f8c7 34a8 	str.w	r3, [r7, #1192]	; 0x4a8
 800f304:	f8c7 24ac 	str.w	r2, [r7, #1196]	; 0x4ac
 800f308:	a3f0      	add	r3, pc, #960	; (adr r3, 800f6cc <arm_softmax_s8+0xb0c>)
 800f30a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f30e:	f8d7 14ac 	ldr.w	r1, [r7, #1196]	; 0x4ac
 800f312:	fb02 f001 	mul.w	r0, r2, r1
 800f316:	f8d7 14a8 	ldr.w	r1, [r7, #1192]	; 0x4a8
 800f31a:	fb01 f103 	mul.w	r1, r1, r3
 800f31e:	4401      	add	r1, r0
 800f320:	f8d7 04a8 	ldr.w	r0, [r7, #1192]	; 0x4a8
 800f324:	fba0 2302 	umull	r2, r3, r0, r2
 800f328:	f8c7 35d4 	str.w	r3, [r7, #1492]	; 0x5d4
 800f32c:	4613      	mov	r3, r2
 800f32e:	f8c7 35d0 	str.w	r3, [r7, #1488]	; 0x5d0
 800f332:	f8d7 35d4 	ldr.w	r3, [r7, #1492]	; 0x5d4
 800f336:	18cb      	adds	r3, r1, r3
 800f338:	f8c7 35d4 	str.w	r3, [r7, #1492]	; 0x5d4
 800f33c:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 800f340:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f344:	f8d7 15d0 	ldr.w	r1, [r7, #1488]	; 0x5d0
 800f348:	1851      	adds	r1, r2, r1
 800f34a:	f8c7 12c8 	str.w	r1, [r7, #712]	; 0x2c8
 800f34e:	f8d7 15d4 	ldr.w	r1, [r7, #1492]	; 0x5d4
 800f352:	414b      	adcs	r3, r1
 800f354:	f8c7 32cc 	str.w	r3, [r7, #716]	; 0x2cc
 800f358:	e9d7 34b2 	ldrd	r3, r4, [r7, #712]	; 0x2c8
 800f35c:	f507 620f 	add.w	r2, r7, #2288	; 0x8f0
 800f360:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 800f364:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 800f368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f36c:	2b00      	cmp	r3, #0
 800f36e:	da0a      	bge.n	800f386 <arm_softmax_s8+0x7c6>
 800f370:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f374:	1851      	adds	r1, r2, r1
 800f376:	f8c7 12c0 	str.w	r1, [r7, #704]	; 0x2c0
 800f37a:	f143 0300 	adc.w	r3, r3, #0
 800f37e:	f8c7 32c4 	str.w	r3, [r7, #708]	; 0x2c4
 800f382:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	; 0x2c0
 800f386:	f04f 0000 	mov.w	r0, #0
 800f38a:	f04f 0100 	mov.w	r1, #0
 800f38e:	0fd0      	lsrs	r0, r2, #31
 800f390:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800f394:	17d9      	asrs	r1, r3, #31
 800f396:	4602      	mov	r2, r0
 800f398:	460b      	mov	r3, r1
 800f39a:	4613      	mov	r3, r2
 800f39c:	f8c7 38f8 	str.w	r3, [r7, #2296]	; 0x8f8
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 800f3a0:	f8d7 28fc 	ldr.w	r2, [r7, #2300]	; 0x8fc
 800f3a4:	4bc6      	ldr	r3, [pc, #792]	; (800f6c0 <arm_softmax_s8+0xb00>)
 800f3a6:	429a      	cmp	r2, r3
 800f3a8:	d108      	bne.n	800f3bc <arm_softmax_s8+0x7fc>
 800f3aa:	f8d7 38fc 	ldr.w	r3, [r7, #2300]	; 0x8fc
 800f3ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f3b2:	d103      	bne.n	800f3bc <arm_softmax_s8+0x7fc>
        result = Q31_MAX;
 800f3b4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800f3b8:	f8c7 38f8 	str.w	r3, [r7, #2296]	; 0x8f8
    return result;
 800f3bc:	f8d7 28f8 	ldr.w	r2, [r7, #2296]	; 0x8f8
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 800f3c0:	f8d7 393c 	ldr.w	r3, [r7, #2364]	; 0x93c
 800f3c4:	4413      	add	r3, r2
 800f3c6:	f8c7 38ec 	str.w	r3, [r7, #2284]	; 0x8ec
    q31_t result = 0;
 800f3ca:	2300      	movs	r3, #0
 800f3cc:	f8c7 38e8 	str.w	r3, [r7, #2280]	; 0x8e8
    const q31_t remainder_mask = (1 << exponent) - 1;
 800f3d0:	2302      	movs	r3, #2
 800f3d2:	3b01      	subs	r3, #1
 800f3d4:	f8c7 38e4 	str.w	r3, [r7, #2276]	; 0x8e4
    int32_t remainder = remainder_mask & dividend;
 800f3d8:	f8d7 28ec 	ldr.w	r2, [r7, #2284]	; 0x8ec
 800f3dc:	f8d7 38e4 	ldr.w	r3, [r7, #2276]	; 0x8e4
 800f3e0:	4013      	ands	r3, r2
 800f3e2:	f8c7 38e0 	str.w	r3, [r7, #2272]	; 0x8e0
    result = dividend >> exponent;
 800f3e6:	f8d7 38ec 	ldr.w	r3, [r7, #2284]	; 0x8ec
 800f3ea:	105b      	asrs	r3, r3, #1
 800f3ec:	f8c7 38e8 	str.w	r3, [r7, #2280]	; 0x8e8
    q31_t threshold = remainder_mask >> 1;
 800f3f0:	f8d7 38e4 	ldr.w	r3, [r7, #2276]	; 0x8e4
 800f3f4:	105b      	asrs	r3, r3, #1
 800f3f6:	f8c7 38dc 	str.w	r3, [r7, #2268]	; 0x8dc
    if (result < 0)
 800f3fa:	f8d7 38e8 	ldr.w	r3, [r7, #2280]	; 0x8e8
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	da04      	bge.n	800f40c <arm_softmax_s8+0x84c>
        threshold++;
 800f402:	f8d7 38dc 	ldr.w	r3, [r7, #2268]	; 0x8dc
 800f406:	3301      	adds	r3, #1
 800f408:	f8c7 38dc 	str.w	r3, [r7, #2268]	; 0x8dc
    if (remainder > threshold)
 800f40c:	f8d7 28e0 	ldr.w	r2, [r7, #2272]	; 0x8e0
 800f410:	f8d7 38dc 	ldr.w	r3, [r7, #2268]	; 0x8dc
 800f414:	429a      	cmp	r2, r3
 800f416:	dd04      	ble.n	800f422 <arm_softmax_s8+0x862>
        result++;
 800f418:	f8d7 38e8 	ldr.w	r3, [r7, #2280]	; 0x8e8
 800f41c:	3301      	adds	r3, #1
 800f41e:	f8c7 38e8 	str.w	r3, [r7, #2280]	; 0x8e8
    return result;
 800f422:	f8d7 28e8 	ldr.w	r2, [r7, #2280]	; 0x8e8
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 800f426:	f8d7 3954 	ldr.w	r3, [r7, #2388]	; 0x954
 800f42a:	4413      	add	r3, r2
 800f42c:	f8c7 38d8 	str.w	r3, [r7, #2264]	; 0x8d8
    q31_t result = 0;
 800f430:	2300      	movs	r3, #0
 800f432:	f8c7 38d4 	str.w	r3, [r7, #2260]	; 0x8d4
    q63_t mult = 1 << 30;
 800f436:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800f43a:	f04f 0300 	mov.w	r3, #0
 800f43e:	f607 01c8 	addw	r1, r7, #2248	; 0x8c8
 800f442:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 800f446:	2200      	movs	r2, #0
 800f448:	f8d7 38d8 	ldr.w	r3, [r7, #2264]	; 0x8d8
 800f44c:	0fdb      	lsrs	r3, r3, #31
 800f44e:	b2db      	uxtb	r3, r3
 800f450:	4053      	eors	r3, r2
 800f452:	b2db      	uxtb	r3, r3
 800f454:	2b00      	cmp	r3, #0
 800f456:	d012      	beq.n	800f47e <arm_softmax_s8+0x8be>
        mult = 1 - mult;
 800f458:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 800f45c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f460:	2100      	movs	r1, #0
 800f462:	f1d2 0001 	rsbs	r0, r2, #1
 800f466:	f8c7 02b8 	str.w	r0, [r7, #696]	; 0x2b8
 800f46a:	eb61 0303 	sbc.w	r3, r1, r3
 800f46e:	f8c7 32bc 	str.w	r3, [r7, #700]	; 0x2bc
 800f472:	e9d7 34ae 	ldrd	r3, r4, [r7, #696]	; 0x2b8
 800f476:	f607 02c8 	addw	r2, r7, #2248	; 0x8c8
 800f47a:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 800f47e:	a18c      	add	r1, pc, #560	; (adr r1, 800f6b0 <arm_softmax_s8+0xaf0>)
 800f480:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f484:	f8d7 38d8 	ldr.w	r3, [r7, #2264]	; 0x8d8
 800f488:	17da      	asrs	r2, r3, #31
 800f48a:	f8c7 34a0 	str.w	r3, [r7, #1184]	; 0x4a0
 800f48e:	f8c7 24a4 	str.w	r2, [r7, #1188]	; 0x4a4
 800f492:	f8d7 34a0 	ldr.w	r3, [r7, #1184]	; 0x4a0
 800f496:	fb03 f201 	mul.w	r2, r3, r1
 800f49a:	f8d7 34a4 	ldr.w	r3, [r7, #1188]	; 0x4a4
 800f49e:	fb00 f303 	mul.w	r3, r0, r3
 800f4a2:	4413      	add	r3, r2
 800f4a4:	f8d7 24a0 	ldr.w	r2, [r7, #1184]	; 0x4a0
 800f4a8:	fba0 1202 	umull	r1, r2, r0, r2
 800f4ac:	f8c7 25cc 	str.w	r2, [r7, #1484]	; 0x5cc
 800f4b0:	460a      	mov	r2, r1
 800f4b2:	f8c7 25c8 	str.w	r2, [r7, #1480]	; 0x5c8
 800f4b6:	f8d7 25cc 	ldr.w	r2, [r7, #1484]	; 0x5cc
 800f4ba:	4413      	add	r3, r2
 800f4bc:	f8c7 35cc 	str.w	r3, [r7, #1484]	; 0x5cc
 800f4c0:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 800f4c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4c8:	f8d7 15c8 	ldr.w	r1, [r7, #1480]	; 0x5c8
 800f4cc:	1851      	adds	r1, r2, r1
 800f4ce:	f8c7 12b0 	str.w	r1, [r7, #688]	; 0x2b0
 800f4d2:	f8d7 15cc 	ldr.w	r1, [r7, #1484]	; 0x5cc
 800f4d6:	414b      	adcs	r3, r1
 800f4d8:	f8c7 32b4 	str.w	r3, [r7, #692]	; 0x2b4
 800f4dc:	e9d7 34ac 	ldrd	r3, r4, [r7, #688]	; 0x2b0
 800f4e0:	f607 02c8 	addw	r2, r7, #2248	; 0x8c8
 800f4e4:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 800f4e8:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 800f4ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4f0:	2b00      	cmp	r3, #0
 800f4f2:	da0a      	bge.n	800f50a <arm_softmax_s8+0x94a>
 800f4f4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f4f8:	1851      	adds	r1, r2, r1
 800f4fa:	f8c7 12a8 	str.w	r1, [r7, #680]	; 0x2a8
 800f4fe:	f143 0300 	adc.w	r3, r3, #0
 800f502:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
 800f506:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	; 0x2a8
 800f50a:	f04f 0000 	mov.w	r0, #0
 800f50e:	f04f 0100 	mov.w	r1, #0
 800f512:	0fd0      	lsrs	r0, r2, #31
 800f514:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800f518:	17d9      	asrs	r1, r3, #31
 800f51a:	4602      	mov	r2, r0
 800f51c:	460b      	mov	r3, r1
 800f51e:	4613      	mov	r3, r2
 800f520:	f8c7 38d4 	str.w	r3, [r7, #2260]	; 0x8d4
    return result;
 800f524:	f8d7 28d4 	ldr.w	r2, [r7, #2260]	; 0x8d4
    int32_t result = 1895147668 +
 800f528:	4b66      	ldr	r3, [pc, #408]	; (800f6c4 <arm_softmax_s8+0xb04>)
 800f52a:	4413      	add	r3, r2
 800f52c:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
    {                                                                                                                  \
        mask = MASK_IF_NON_ZERO(remainder & (1 << shift++));                                                           \
        result = SELECT_USING_MASK(mask, MUL_SAT(result, x), result);                                                  \
    }

    SELECT_IF_NON_ZERO(1672461947)
 800f530:	f8d7 2960 	ldr.w	r2, [r7, #2400]	; 0x960
 800f534:	1c53      	adds	r3, r2, #1
 800f536:	f8c7 3960 	str.w	r3, [r7, #2400]	; 0x960
 800f53a:	2301      	movs	r3, #1
 800f53c:	fa03 f202 	lsl.w	r2, r3, r2
 800f540:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 800f544:	4013      	ands	r3, r2
 800f546:	2b00      	cmp	r3, #0
 800f548:	d002      	beq.n	800f550 <arm_softmax_s8+0x990>
 800f54a:	f04f 33ff 	mov.w	r3, #4294967295
 800f54e:	e000      	b.n	800f552 <arm_softmax_s8+0x992>
 800f550:	2300      	movs	r3, #0
 800f552:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
 800f556:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800f55a:	f8c7 38c0 	str.w	r3, [r7, #2240]	; 0x8c0
    q31_t result = 0;
 800f55e:	2300      	movs	r3, #0
 800f560:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
    q63_t mult = 1 << 30;
 800f564:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800f568:	f04f 0300 	mov.w	r3, #0
 800f56c:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 800f570:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 800f574:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 800f578:	0fdb      	lsrs	r3, r3, #31
 800f57a:	b2da      	uxtb	r2, r3
 800f57c:	2300      	movs	r3, #0
 800f57e:	4053      	eors	r3, r2
 800f580:	b2db      	uxtb	r3, r3
 800f582:	2b00      	cmp	r3, #0
 800f584:	d012      	beq.n	800f5ac <arm_softmax_s8+0x9ec>
        mult = 1 - mult;
 800f586:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800f58a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f58e:	2100      	movs	r1, #0
 800f590:	f1d2 0001 	rsbs	r0, r2, #1
 800f594:	f8c7 02a0 	str.w	r0, [r7, #672]	; 0x2a0
 800f598:	eb61 0303 	sbc.w	r3, r1, r3
 800f59c:	f8c7 32a4 	str.w	r3, [r7, #676]	; 0x2a4
 800f5a0:	e9d7 34a8 	ldrd	r3, r4, [r7, #672]	; 0x2a0
 800f5a4:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 800f5a8:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 800f5ac:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 800f5b0:	17da      	asrs	r2, r3, #31
 800f5b2:	f8c7 3498 	str.w	r3, [r7, #1176]	; 0x498
 800f5b6:	f8c7 249c 	str.w	r2, [r7, #1180]	; 0x49c
 800f5ba:	a33f      	add	r3, pc, #252	; (adr r3, 800f6b8 <arm_softmax_s8+0xaf8>)
 800f5bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5c0:	f8d7 149c 	ldr.w	r1, [r7, #1180]	; 0x49c
 800f5c4:	fb02 f001 	mul.w	r0, r2, r1
 800f5c8:	f8d7 1498 	ldr.w	r1, [r7, #1176]	; 0x498
 800f5cc:	fb01 f103 	mul.w	r1, r1, r3
 800f5d0:	4401      	add	r1, r0
 800f5d2:	f8d7 0498 	ldr.w	r0, [r7, #1176]	; 0x498
 800f5d6:	fba0 2302 	umull	r2, r3, r0, r2
 800f5da:	f8c7 35c4 	str.w	r3, [r7, #1476]	; 0x5c4
 800f5de:	4613      	mov	r3, r2
 800f5e0:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0
 800f5e4:	f8d7 35c4 	ldr.w	r3, [r7, #1476]	; 0x5c4
 800f5e8:	18cb      	adds	r3, r1, r3
 800f5ea:	f8c7 35c4 	str.w	r3, [r7, #1476]	; 0x5c4
 800f5ee:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800f5f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5f6:	f8d7 15c0 	ldr.w	r1, [r7, #1472]	; 0x5c0
 800f5fa:	1851      	adds	r1, r2, r1
 800f5fc:	f8c7 1298 	str.w	r1, [r7, #664]	; 0x298
 800f600:	f8d7 15c4 	ldr.w	r1, [r7, #1476]	; 0x5c4
 800f604:	414b      	adcs	r3, r1
 800f606:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 800f60a:	e9d7 34a6 	ldrd	r3, r4, [r7, #664]	; 0x298
 800f60e:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 800f612:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 800f616:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800f61a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f61e:	2b00      	cmp	r3, #0
 800f620:	da0a      	bge.n	800f638 <arm_softmax_s8+0xa78>
 800f622:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f626:	1851      	adds	r1, r2, r1
 800f628:	f8c7 1290 	str.w	r1, [r7, #656]	; 0x290
 800f62c:	f143 0300 	adc.w	r3, r3, #0
 800f630:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
 800f634:	e9d7 23a4 	ldrd	r2, r3, [r7, #656]	; 0x290
 800f638:	f04f 0000 	mov.w	r0, #0
 800f63c:	f04f 0100 	mov.w	r1, #0
 800f640:	0fd0      	lsrs	r0, r2, #31
 800f642:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800f646:	17d9      	asrs	r1, r3, #31
 800f648:	4602      	mov	r2, r0
 800f64a:	460b      	mov	r3, r1
 800f64c:	4613      	mov	r3, r2
 800f64e:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 800f652:	f8d7 28c0 	ldr.w	r2, [r7, #2240]	; 0x8c0
 800f656:	4b1c      	ldr	r3, [pc, #112]	; (800f6c8 <arm_softmax_s8+0xb08>)
 800f658:	429a      	cmp	r2, r3
 800f65a:	d108      	bne.n	800f66e <arm_softmax_s8+0xaae>
 800f65c:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 800f660:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f664:	d103      	bne.n	800f66e <arm_softmax_s8+0xaae>
        result = Q31_MAX;
 800f666:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800f66a:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
    return result;
 800f66e:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
    SELECT_IF_NON_ZERO(1672461947)
 800f672:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 800f676:	ea02 0103 	and.w	r1, r2, r3
 800f67a:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 800f67e:	43da      	mvns	r2, r3
 800f680:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800f684:	4013      	ands	r3, r2
 800f686:	404b      	eors	r3, r1
 800f688:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
    SELECT_IF_NON_ZERO(1302514674)
 800f68c:	f8d7 2960 	ldr.w	r2, [r7, #2400]	; 0x960
 800f690:	1c53      	adds	r3, r2, #1
 800f692:	f8c7 3960 	str.w	r3, [r7, #2400]	; 0x960
 800f696:	2301      	movs	r3, #1
 800f698:	fa03 f202 	lsl.w	r2, r3, r2
 800f69c:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 800f6a0:	4013      	ands	r3, r2
 800f6a2:	2b00      	cmp	r3, #0
 800f6a4:	d016      	beq.n	800f6d4 <arm_softmax_s8+0xb14>
 800f6a6:	f04f 33ff 	mov.w	r3, #4294967295
 800f6aa:	e014      	b.n	800f6d6 <arm_softmax_s8+0xb16>
 800f6ac:	f3af 8000 	nop.w
 800f6b0:	70f5a894 	.word	0x70f5a894
 800f6b4:	00000000 	.word	0x00000000
 800f6b8:	63afbe7b 	.word	0x63afbe7b
 800f6bc:	00000000 	.word	0x00000000
 800f6c0:	2aaaaaab 	.word	0x2aaaaaab
 800f6c4:	70f5a894 	.word	0x70f5a894
 800f6c8:	63afbe7b 	.word	0x63afbe7b
 800f6cc:	2aaaaaab 	.word	0x2aaaaaab
 800f6d0:	00000000 	.word	0x00000000
 800f6d4:	2300      	movs	r3, #0
 800f6d6:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
 800f6da:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800f6de:	f8c7 38ac 	str.w	r3, [r7, #2220]	; 0x8ac
    q31_t result = 0;
 800f6e2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f6e6:	f5a3 7280 	sub.w	r2, r3, #256	; 0x100
 800f6ea:	2300      	movs	r3, #0
 800f6ec:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 800f6ee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800f6f2:	f04f 0300 	mov.w	r3, #0
 800f6f6:	f507 610a 	add.w	r1, r7, #2208	; 0x8a0
 800f6fa:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 800f6fe:	f8d7 38ac 	ldr.w	r3, [r7, #2220]	; 0x8ac
 800f702:	0fdb      	lsrs	r3, r3, #31
 800f704:	b2da      	uxtb	r2, r3
 800f706:	2300      	movs	r3, #0
 800f708:	4053      	eors	r3, r2
 800f70a:	b2db      	uxtb	r3, r3
 800f70c:	2b00      	cmp	r3, #0
 800f70e:	d012      	beq.n	800f736 <arm_softmax_s8+0xb76>
        mult = 1 - mult;
 800f710:	f507 630a 	add.w	r3, r7, #2208	; 0x8a0
 800f714:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f718:	2100      	movs	r1, #0
 800f71a:	f1d2 0001 	rsbs	r0, r2, #1
 800f71e:	f8c7 0288 	str.w	r0, [r7, #648]	; 0x288
 800f722:	eb61 0303 	sbc.w	r3, r1, r3
 800f726:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 800f72a:	e9d7 34a2 	ldrd	r3, r4, [r7, #648]	; 0x288
 800f72e:	f507 620a 	add.w	r2, r7, #2208	; 0x8a0
 800f732:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 800f736:	f8d7 38ac 	ldr.w	r3, [r7, #2220]	; 0x8ac
 800f73a:	17da      	asrs	r2, r3, #31
 800f73c:	f8c7 3490 	str.w	r3, [r7, #1168]	; 0x490
 800f740:	f8c7 2494 	str.w	r2, [r7, #1172]	; 0x494
 800f744:	a3a8      	add	r3, pc, #672	; (adr r3, 800f9e8 <arm_softmax_s8+0xe28>)
 800f746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f74a:	f8d7 1494 	ldr.w	r1, [r7, #1172]	; 0x494
 800f74e:	fb02 f001 	mul.w	r0, r2, r1
 800f752:	f8d7 1490 	ldr.w	r1, [r7, #1168]	; 0x490
 800f756:	fb01 f103 	mul.w	r1, r1, r3
 800f75a:	4401      	add	r1, r0
 800f75c:	f8d7 0490 	ldr.w	r0, [r7, #1168]	; 0x490
 800f760:	fba0 2302 	umull	r2, r3, r0, r2
 800f764:	f8c7 35bc 	str.w	r3, [r7, #1468]	; 0x5bc
 800f768:	4613      	mov	r3, r2
 800f76a:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
 800f76e:	f8d7 35bc 	ldr.w	r3, [r7, #1468]	; 0x5bc
 800f772:	18cb      	adds	r3, r1, r3
 800f774:	f8c7 35bc 	str.w	r3, [r7, #1468]	; 0x5bc
 800f778:	f507 630a 	add.w	r3, r7, #2208	; 0x8a0
 800f77c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f780:	f8d7 15b8 	ldr.w	r1, [r7, #1464]	; 0x5b8
 800f784:	1851      	adds	r1, r2, r1
 800f786:	f8c7 1280 	str.w	r1, [r7, #640]	; 0x280
 800f78a:	f8d7 15bc 	ldr.w	r1, [r7, #1468]	; 0x5bc
 800f78e:	414b      	adcs	r3, r1
 800f790:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 800f794:	e9d7 34a0 	ldrd	r3, r4, [r7, #640]	; 0x280
 800f798:	f507 620a 	add.w	r2, r7, #2208	; 0x8a0
 800f79c:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 800f7a0:	f507 630a 	add.w	r3, r7, #2208	; 0x8a0
 800f7a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7a8:	2b00      	cmp	r3, #0
 800f7aa:	da0a      	bge.n	800f7c2 <arm_softmax_s8+0xc02>
 800f7ac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f7b0:	1851      	adds	r1, r2, r1
 800f7b2:	f8c7 1278 	str.w	r1, [r7, #632]	; 0x278
 800f7b6:	f143 0300 	adc.w	r3, r3, #0
 800f7ba:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
 800f7be:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 800f7c2:	f04f 0000 	mov.w	r0, #0
 800f7c6:	f04f 0100 	mov.w	r1, #0
 800f7ca:	0fd0      	lsrs	r0, r2, #31
 800f7cc:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800f7d0:	17d9      	asrs	r1, r3, #31
 800f7d2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f7d6:	f5a3 7280 	sub.w	r2, r3, #256	; 0x100
 800f7da:	4603      	mov	r3, r0
 800f7dc:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 800f7de:	f8d7 28ac 	ldr.w	r2, [r7, #2220]	; 0x8ac
 800f7e2:	4b7f      	ldr	r3, [pc, #508]	; (800f9e0 <arm_softmax_s8+0xe20>)
 800f7e4:	429a      	cmp	r2, r3
 800f7e6:	d10b      	bne.n	800f800 <arm_softmax_s8+0xc40>
 800f7e8:	f8d7 38ac 	ldr.w	r3, [r7, #2220]	; 0x8ac
 800f7ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f7f0:	d106      	bne.n	800f800 <arm_softmax_s8+0xc40>
        result = Q31_MAX;
 800f7f2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f7f6:	f5a3 7280 	sub.w	r2, r3, #256	; 0x100
 800f7fa:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800f7fe:	6013      	str	r3, [r2, #0]
    return result;
 800f800:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f804:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800f808:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(1302514674)
 800f80a:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 800f80e:	ea02 0103 	and.w	r1, r2, r3
 800f812:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 800f816:	43da      	mvns	r2, r3
 800f818:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800f81c:	4013      	ands	r3, r2
 800f81e:	404b      	eors	r3, r1
 800f820:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
    SELECT_IF_NON_ZERO(790015084)
 800f824:	f8d7 2960 	ldr.w	r2, [r7, #2400]	; 0x960
 800f828:	1c53      	adds	r3, r2, #1
 800f82a:	f8c7 3960 	str.w	r3, [r7, #2400]	; 0x960
 800f82e:	2301      	movs	r3, #1
 800f830:	fa03 f202 	lsl.w	r2, r3, r2
 800f834:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 800f838:	4013      	ands	r3, r2
 800f83a:	2b00      	cmp	r3, #0
 800f83c:	d002      	beq.n	800f844 <arm_softmax_s8+0xc84>
 800f83e:	f04f 33ff 	mov.w	r3, #4294967295
 800f842:	e000      	b.n	800f846 <arm_softmax_s8+0xc86>
 800f844:	2300      	movs	r3, #0
 800f846:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
 800f84a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f84e:	f5a3 7286 	sub.w	r2, r3, #268	; 0x10c
 800f852:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800f856:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 800f858:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f85c:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 800f860:	2300      	movs	r3, #0
 800f862:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 800f864:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800f868:	f04f 0300 	mov.w	r3, #0
 800f86c:	f507 6109 	add.w	r1, r7, #2192	; 0x890
 800f870:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 800f874:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f878:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800f87c:	681b      	ldr	r3, [r3, #0]
 800f87e:	0fdb      	lsrs	r3, r3, #31
 800f880:	b2da      	uxtb	r2, r3
 800f882:	2300      	movs	r3, #0
 800f884:	4053      	eors	r3, r2
 800f886:	b2db      	uxtb	r3, r3
 800f888:	2b00      	cmp	r3, #0
 800f88a:	d012      	beq.n	800f8b2 <arm_softmax_s8+0xcf2>
        mult = 1 - mult;
 800f88c:	f507 6309 	add.w	r3, r7, #2192	; 0x890
 800f890:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f894:	2100      	movs	r1, #0
 800f896:	f1d2 0001 	rsbs	r0, r2, #1
 800f89a:	f8c7 0270 	str.w	r0, [r7, #624]	; 0x270
 800f89e:	eb61 0303 	sbc.w	r3, r1, r3
 800f8a2:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
 800f8a6:	e9d7 349c 	ldrd	r3, r4, [r7, #624]	; 0x270
 800f8aa:	f507 6209 	add.w	r2, r7, #2192	; 0x890
 800f8ae:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 800f8b2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f8b6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800f8ba:	681b      	ldr	r3, [r3, #0]
 800f8bc:	17da      	asrs	r2, r3, #31
 800f8be:	f8c7 3488 	str.w	r3, [r7, #1160]	; 0x488
 800f8c2:	f8c7 248c 	str.w	r2, [r7, #1164]	; 0x48c
 800f8c6:	a344      	add	r3, pc, #272	; (adr r3, 800f9d8 <arm_softmax_s8+0xe18>)
 800f8c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8cc:	f8d7 148c 	ldr.w	r1, [r7, #1164]	; 0x48c
 800f8d0:	fb02 f001 	mul.w	r0, r2, r1
 800f8d4:	f8d7 1488 	ldr.w	r1, [r7, #1160]	; 0x488
 800f8d8:	fb01 f103 	mul.w	r1, r1, r3
 800f8dc:	4401      	add	r1, r0
 800f8de:	f8d7 0488 	ldr.w	r0, [r7, #1160]	; 0x488
 800f8e2:	fba0 2302 	umull	r2, r3, r0, r2
 800f8e6:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
 800f8ea:	4613      	mov	r3, r2
 800f8ec:	f8c7 35b0 	str.w	r3, [r7, #1456]	; 0x5b0
 800f8f0:	f8d7 35b4 	ldr.w	r3, [r7, #1460]	; 0x5b4
 800f8f4:	18cb      	adds	r3, r1, r3
 800f8f6:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
 800f8fa:	f507 6309 	add.w	r3, r7, #2192	; 0x890
 800f8fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f902:	f8d7 15b0 	ldr.w	r1, [r7, #1456]	; 0x5b0
 800f906:	1851      	adds	r1, r2, r1
 800f908:	f8c7 1268 	str.w	r1, [r7, #616]	; 0x268
 800f90c:	f8d7 15b4 	ldr.w	r1, [r7, #1460]	; 0x5b4
 800f910:	414b      	adcs	r3, r1
 800f912:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
 800f916:	e9d7 349a 	ldrd	r3, r4, [r7, #616]	; 0x268
 800f91a:	f507 6209 	add.w	r2, r7, #2192	; 0x890
 800f91e:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 800f922:	f507 6309 	add.w	r3, r7, #2192	; 0x890
 800f926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f92a:	2b00      	cmp	r3, #0
 800f92c:	da0a      	bge.n	800f944 <arm_softmax_s8+0xd84>
 800f92e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f932:	1851      	adds	r1, r2, r1
 800f934:	f8c7 1260 	str.w	r1, [r7, #608]	; 0x260
 800f938:	f143 0300 	adc.w	r3, r3, #0
 800f93c:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 800f940:	e9d7 2398 	ldrd	r2, r3, [r7, #608]	; 0x260
 800f944:	f04f 0000 	mov.w	r0, #0
 800f948:	f04f 0100 	mov.w	r1, #0
 800f94c:	0fd0      	lsrs	r0, r2, #31
 800f94e:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800f952:	17d9      	asrs	r1, r3, #31
 800f954:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f958:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 800f95c:	4603      	mov	r3, r0
 800f95e:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 800f960:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f964:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800f968:	681a      	ldr	r2, [r3, #0]
 800f96a:	4b1e      	ldr	r3, [pc, #120]	; (800f9e4 <arm_softmax_s8+0xe24>)
 800f96c:	429a      	cmp	r2, r3
 800f96e:	d10e      	bne.n	800f98e <arm_softmax_s8+0xdce>
 800f970:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f974:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800f978:	681b      	ldr	r3, [r3, #0]
 800f97a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f97e:	d106      	bne.n	800f98e <arm_softmax_s8+0xdce>
        result = Q31_MAX;
 800f980:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f984:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 800f988:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800f98c:	6013      	str	r3, [r2, #0]
    return result;
 800f98e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f992:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800f996:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(790015084)
 800f998:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 800f99c:	ea02 0103 	and.w	r1, r2, r3
 800f9a0:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 800f9a4:	43da      	mvns	r2, r3
 800f9a6:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800f9aa:	4013      	ands	r3, r2
 800f9ac:	404b      	eors	r3, r1
 800f9ae:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
    SELECT_IF_NON_ZERO(290630308)
 800f9b2:	f8d7 2960 	ldr.w	r2, [r7, #2400]	; 0x960
 800f9b6:	1c53      	adds	r3, r2, #1
 800f9b8:	f8c7 3960 	str.w	r3, [r7, #2400]	; 0x960
 800f9bc:	2301      	movs	r3, #1
 800f9be:	fa03 f202 	lsl.w	r2, r3, r2
 800f9c2:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 800f9c6:	4013      	ands	r3, r2
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	d011      	beq.n	800f9f0 <arm_softmax_s8+0xe30>
 800f9cc:	f04f 33ff 	mov.w	r3, #4294967295
 800f9d0:	e00f      	b.n	800f9f2 <arm_softmax_s8+0xe32>
 800f9d2:	bf00      	nop
 800f9d4:	f3af 8000 	nop.w
 800f9d8:	2f16ac6c 	.word	0x2f16ac6c
 800f9dc:	00000000 	.word	0x00000000
 800f9e0:	4da2cbf2 	.word	0x4da2cbf2
 800f9e4:	2f16ac6c 	.word	0x2f16ac6c
 800f9e8:	4da2cbf2 	.word	0x4da2cbf2
 800f9ec:	00000000 	.word	0x00000000
 800f9f0:	2300      	movs	r3, #0
 800f9f2:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
 800f9f6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f9fa:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 800f9fe:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800fa02:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 800fa04:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fa08:	f5a3 7290 	sub.w	r2, r3, #288	; 0x120
 800fa0c:	2300      	movs	r3, #0
 800fa0e:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 800fa10:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800fa14:	f04f 0300 	mov.w	r3, #0
 800fa18:	f507 6108 	add.w	r1, r7, #2176	; 0x880
 800fa1c:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 800fa20:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fa24:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800fa28:	681b      	ldr	r3, [r3, #0]
 800fa2a:	0fdb      	lsrs	r3, r3, #31
 800fa2c:	b2da      	uxtb	r2, r3
 800fa2e:	2300      	movs	r3, #0
 800fa30:	4053      	eors	r3, r2
 800fa32:	b2db      	uxtb	r3, r3
 800fa34:	2b00      	cmp	r3, #0
 800fa36:	d012      	beq.n	800fa5e <arm_softmax_s8+0xe9e>
        mult = 1 - mult;
 800fa38:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 800fa3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa40:	2100      	movs	r1, #0
 800fa42:	f1d2 0001 	rsbs	r0, r2, #1
 800fa46:	f8c7 0258 	str.w	r0, [r7, #600]	; 0x258
 800fa4a:	eb61 0303 	sbc.w	r3, r1, r3
 800fa4e:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 800fa52:	e9d7 3496 	ldrd	r3, r4, [r7, #600]	; 0x258
 800fa56:	f507 6208 	add.w	r2, r7, #2176	; 0x880
 800fa5a:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 800fa5e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fa62:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800fa66:	681b      	ldr	r3, [r3, #0]
 800fa68:	17da      	asrs	r2, r3, #31
 800fa6a:	f8c7 3480 	str.w	r3, [r7, #1152]	; 0x480
 800fa6e:	f8c7 2484 	str.w	r2, [r7, #1156]	; 0x484
 800fa72:	a3ab      	add	r3, pc, #684	; (adr r3, 800fd20 <arm_softmax_s8+0x1160>)
 800fa74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa78:	f8d7 1484 	ldr.w	r1, [r7, #1156]	; 0x484
 800fa7c:	fb02 f001 	mul.w	r0, r2, r1
 800fa80:	f8d7 1480 	ldr.w	r1, [r7, #1152]	; 0x480
 800fa84:	fb01 f103 	mul.w	r1, r1, r3
 800fa88:	4401      	add	r1, r0
 800fa8a:	f8d7 0480 	ldr.w	r0, [r7, #1152]	; 0x480
 800fa8e:	fba0 2302 	umull	r2, r3, r0, r2
 800fa92:	f8c7 35ac 	str.w	r3, [r7, #1452]	; 0x5ac
 800fa96:	4613      	mov	r3, r2
 800fa98:	f8c7 35a8 	str.w	r3, [r7, #1448]	; 0x5a8
 800fa9c:	f8d7 35ac 	ldr.w	r3, [r7, #1452]	; 0x5ac
 800faa0:	18cb      	adds	r3, r1, r3
 800faa2:	f8c7 35ac 	str.w	r3, [r7, #1452]	; 0x5ac
 800faa6:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 800faaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800faae:	f8d7 15a8 	ldr.w	r1, [r7, #1448]	; 0x5a8
 800fab2:	1851      	adds	r1, r2, r1
 800fab4:	f8c7 1250 	str.w	r1, [r7, #592]	; 0x250
 800fab8:	f8d7 15ac 	ldr.w	r1, [r7, #1452]	; 0x5ac
 800fabc:	414b      	adcs	r3, r1
 800fabe:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 800fac2:	e9d7 3494 	ldrd	r3, r4, [r7, #592]	; 0x250
 800fac6:	f507 6208 	add.w	r2, r7, #2176	; 0x880
 800faca:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 800face:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 800fad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fad6:	2b00      	cmp	r3, #0
 800fad8:	da0a      	bge.n	800faf0 <arm_softmax_s8+0xf30>
 800fada:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800fade:	1851      	adds	r1, r2, r1
 800fae0:	f8c7 1248 	str.w	r1, [r7, #584]	; 0x248
 800fae4:	f143 0300 	adc.w	r3, r3, #0
 800fae8:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 800faec:	e9d7 2392 	ldrd	r2, r3, [r7, #584]	; 0x248
 800faf0:	f04f 0000 	mov.w	r0, #0
 800faf4:	f04f 0100 	mov.w	r1, #0
 800faf8:	0fd0      	lsrs	r0, r2, #31
 800fafa:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800fafe:	17d9      	asrs	r1, r3, #31
 800fb00:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fb04:	f5a3 7290 	sub.w	r2, r3, #288	; 0x120
 800fb08:	4603      	mov	r3, r0
 800fb0a:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 800fb0c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fb10:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800fb14:	681a      	ldr	r2, [r3, #0]
 800fb16:	4b80      	ldr	r3, [pc, #512]	; (800fd18 <arm_softmax_s8+0x1158>)
 800fb18:	429a      	cmp	r2, r3
 800fb1a:	d10e      	bne.n	800fb3a <arm_softmax_s8+0xf7a>
 800fb1c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fb20:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800fb24:	681b      	ldr	r3, [r3, #0]
 800fb26:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fb2a:	d106      	bne.n	800fb3a <arm_softmax_s8+0xf7a>
        result = Q31_MAX;
 800fb2c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fb30:	f5a3 7290 	sub.w	r2, r3, #288	; 0x120
 800fb34:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800fb38:	6013      	str	r3, [r2, #0]
    return result;
 800fb3a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fb3e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800fb42:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(290630308)
 800fb44:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 800fb48:	ea02 0103 	and.w	r1, r2, r3
 800fb4c:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 800fb50:	43da      	mvns	r2, r3
 800fb52:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800fb56:	4013      	ands	r3, r2
 800fb58:	404b      	eors	r3, r1
 800fb5a:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
    SELECT_IF_NON_ZERO(39332535)
 800fb5e:	f8d7 2960 	ldr.w	r2, [r7, #2400]	; 0x960
 800fb62:	1c53      	adds	r3, r2, #1
 800fb64:	f8c7 3960 	str.w	r3, [r7, #2400]	; 0x960
 800fb68:	2301      	movs	r3, #1
 800fb6a:	fa03 f202 	lsl.w	r2, r3, r2
 800fb6e:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 800fb72:	4013      	ands	r3, r2
 800fb74:	2b00      	cmp	r3, #0
 800fb76:	d002      	beq.n	800fb7e <arm_softmax_s8+0xfbe>
 800fb78:	f04f 33ff 	mov.w	r3, #4294967295
 800fb7c:	e000      	b.n	800fb80 <arm_softmax_s8+0xfc0>
 800fb7e:	2300      	movs	r3, #0
 800fb80:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
 800fb84:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fb88:	f5a3 7296 	sub.w	r2, r3, #300	; 0x12c
 800fb8c:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800fb90:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 800fb92:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fb96:	f5a3 7298 	sub.w	r2, r3, #304	; 0x130
 800fb9a:	2300      	movs	r3, #0
 800fb9c:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 800fb9e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800fba2:	f04f 0300 	mov.w	r3, #0
 800fba6:	f507 6107 	add.w	r1, r7, #2160	; 0x870
 800fbaa:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 800fbae:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fbb2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800fbb6:	681b      	ldr	r3, [r3, #0]
 800fbb8:	0fdb      	lsrs	r3, r3, #31
 800fbba:	b2da      	uxtb	r2, r3
 800fbbc:	2300      	movs	r3, #0
 800fbbe:	4053      	eors	r3, r2
 800fbc0:	b2db      	uxtb	r3, r3
 800fbc2:	2b00      	cmp	r3, #0
 800fbc4:	d012      	beq.n	800fbec <arm_softmax_s8+0x102c>
        mult = 1 - mult;
 800fbc6:	f507 6307 	add.w	r3, r7, #2160	; 0x870
 800fbca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbce:	2100      	movs	r1, #0
 800fbd0:	f1d2 0001 	rsbs	r0, r2, #1
 800fbd4:	f8c7 0240 	str.w	r0, [r7, #576]	; 0x240
 800fbd8:	eb61 0303 	sbc.w	r3, r1, r3
 800fbdc:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 800fbe0:	e9d7 3490 	ldrd	r3, r4, [r7, #576]	; 0x240
 800fbe4:	f507 6207 	add.w	r2, r7, #2160	; 0x870
 800fbe8:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 800fbec:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fbf0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800fbf4:	681b      	ldr	r3, [r3, #0]
 800fbf6:	17da      	asrs	r2, r3, #31
 800fbf8:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
 800fbfc:	f8c7 247c 	str.w	r2, [r7, #1148]	; 0x47c
 800fc00:	a343      	add	r3, pc, #268	; (adr r3, 800fd10 <arm_softmax_s8+0x1150>)
 800fc02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc06:	f8d7 147c 	ldr.w	r1, [r7, #1148]	; 0x47c
 800fc0a:	fb02 f001 	mul.w	r0, r2, r1
 800fc0e:	f8d7 1478 	ldr.w	r1, [r7, #1144]	; 0x478
 800fc12:	fb01 f103 	mul.w	r1, r1, r3
 800fc16:	4401      	add	r1, r0
 800fc18:	f8d7 0478 	ldr.w	r0, [r7, #1144]	; 0x478
 800fc1c:	fba0 2302 	umull	r2, r3, r0, r2
 800fc20:	f8c7 35a4 	str.w	r3, [r7, #1444]	; 0x5a4
 800fc24:	4613      	mov	r3, r2
 800fc26:	f8c7 35a0 	str.w	r3, [r7, #1440]	; 0x5a0
 800fc2a:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	; 0x5a4
 800fc2e:	18cb      	adds	r3, r1, r3
 800fc30:	f8c7 35a4 	str.w	r3, [r7, #1444]	; 0x5a4
 800fc34:	f507 6307 	add.w	r3, r7, #2160	; 0x870
 800fc38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc3c:	f8d7 15a0 	ldr.w	r1, [r7, #1440]	; 0x5a0
 800fc40:	1851      	adds	r1, r2, r1
 800fc42:	f8c7 1238 	str.w	r1, [r7, #568]	; 0x238
 800fc46:	f8d7 15a4 	ldr.w	r1, [r7, #1444]	; 0x5a4
 800fc4a:	414b      	adcs	r3, r1
 800fc4c:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
 800fc50:	e9d7 348e 	ldrd	r3, r4, [r7, #568]	; 0x238
 800fc54:	f507 6207 	add.w	r2, r7, #2160	; 0x870
 800fc58:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 800fc5c:	f507 6307 	add.w	r3, r7, #2160	; 0x870
 800fc60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc64:	2b00      	cmp	r3, #0
 800fc66:	da0a      	bge.n	800fc7e <arm_softmax_s8+0x10be>
 800fc68:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800fc6c:	1851      	adds	r1, r2, r1
 800fc6e:	f8c7 1230 	str.w	r1, [r7, #560]	; 0x230
 800fc72:	f143 0300 	adc.w	r3, r3, #0
 800fc76:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
 800fc7a:	e9d7 238c 	ldrd	r2, r3, [r7, #560]	; 0x230
 800fc7e:	f04f 0000 	mov.w	r0, #0
 800fc82:	f04f 0100 	mov.w	r1, #0
 800fc86:	0fd0      	lsrs	r0, r2, #31
 800fc88:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800fc8c:	17d9      	asrs	r1, r3, #31
 800fc8e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fc92:	f5a3 7298 	sub.w	r2, r3, #304	; 0x130
 800fc96:	4603      	mov	r3, r0
 800fc98:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 800fc9a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fc9e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800fca2:	681a      	ldr	r2, [r3, #0]
 800fca4:	4b1d      	ldr	r3, [pc, #116]	; (800fd1c <arm_softmax_s8+0x115c>)
 800fca6:	429a      	cmp	r2, r3
 800fca8:	d10e      	bne.n	800fcc8 <arm_softmax_s8+0x1108>
 800fcaa:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fcae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800fcb2:	681b      	ldr	r3, [r3, #0]
 800fcb4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fcb8:	d106      	bne.n	800fcc8 <arm_softmax_s8+0x1108>
        result = Q31_MAX;
 800fcba:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fcbe:	f5a3 7298 	sub.w	r2, r3, #304	; 0x130
 800fcc2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800fcc6:	6013      	str	r3, [r2, #0]
    return result;
 800fcc8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fccc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800fcd0:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(39332535)
 800fcd2:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 800fcd6:	ea02 0103 	and.w	r1, r2, r3
 800fcda:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 800fcde:	43da      	mvns	r2, r3
 800fce0:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800fce4:	4013      	ands	r3, r2
 800fce6:	404b      	eors	r3, r1
 800fce8:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
    SELECT_IF_NON_ZERO(720401)
 800fcec:	f8d7 2960 	ldr.w	r2, [r7, #2400]	; 0x960
 800fcf0:	1c53      	adds	r3, r2, #1
 800fcf2:	f8c7 3960 	str.w	r3, [r7, #2400]	; 0x960
 800fcf6:	2301      	movs	r3, #1
 800fcf8:	fa03 f202 	lsl.w	r2, r3, r2
 800fcfc:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 800fd00:	4013      	ands	r3, r2
 800fd02:	2b00      	cmp	r3, #0
 800fd04:	d010      	beq.n	800fd28 <arm_softmax_s8+0x1168>
 800fd06:	f04f 33ff 	mov.w	r3, #4294967295
 800fd0a:	e00e      	b.n	800fd2a <arm_softmax_s8+0x116a>
 800fd0c:	f3af 8000 	nop.w
 800fd10:	02582ab7 	.word	0x02582ab7
 800fd14:	00000000 	.word	0x00000000
 800fd18:	1152aaa4 	.word	0x1152aaa4
 800fd1c:	02582ab7 	.word	0x02582ab7
 800fd20:	1152aaa4 	.word	0x1152aaa4
 800fd24:	00000000 	.word	0x00000000
 800fd28:	2300      	movs	r3, #0
 800fd2a:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
 800fd2e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fd32:	f5a3 729e 	sub.w	r2, r3, #316	; 0x13c
 800fd36:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800fd3a:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 800fd3c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fd40:	f5a3 72a0 	sub.w	r2, r3, #320	; 0x140
 800fd44:	2300      	movs	r3, #0
 800fd46:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 800fd48:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800fd4c:	f04f 0300 	mov.w	r3, #0
 800fd50:	f507 6106 	add.w	r1, r7, #2144	; 0x860
 800fd54:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 800fd58:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fd5c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800fd60:	681b      	ldr	r3, [r3, #0]
 800fd62:	0fdb      	lsrs	r3, r3, #31
 800fd64:	b2da      	uxtb	r2, r3
 800fd66:	2300      	movs	r3, #0
 800fd68:	4053      	eors	r3, r2
 800fd6a:	b2db      	uxtb	r3, r3
 800fd6c:	2b00      	cmp	r3, #0
 800fd6e:	d012      	beq.n	800fd96 <arm_softmax_s8+0x11d6>
        mult = 1 - mult;
 800fd70:	f507 6306 	add.w	r3, r7, #2144	; 0x860
 800fd74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd78:	2100      	movs	r1, #0
 800fd7a:	f1d2 0001 	rsbs	r0, r2, #1
 800fd7e:	f8c7 0228 	str.w	r0, [r7, #552]	; 0x228
 800fd82:	eb61 0303 	sbc.w	r3, r1, r3
 800fd86:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 800fd8a:	e9d7 348a 	ldrd	r3, r4, [r7, #552]	; 0x228
 800fd8e:	f507 6206 	add.w	r2, r7, #2144	; 0x860
 800fd92:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 800fd96:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fd9a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800fd9e:	681b      	ldr	r3, [r3, #0]
 800fda0:	17da      	asrs	r2, r3, #31
 800fda2:	f8c7 3470 	str.w	r3, [r7, #1136]	; 0x470
 800fda6:	f8c7 2474 	str.w	r2, [r7, #1140]	; 0x474
 800fdaa:	4ad3      	ldr	r2, [pc, #844]	; (80100f8 <arm_softmax_s8+0x1538>)
 800fdac:	f04f 0300 	mov.w	r3, #0
 800fdb0:	f8d7 1474 	ldr.w	r1, [r7, #1140]	; 0x474
 800fdb4:	fb02 f001 	mul.w	r0, r2, r1
 800fdb8:	f8d7 1470 	ldr.w	r1, [r7, #1136]	; 0x470
 800fdbc:	fb01 f103 	mul.w	r1, r1, r3
 800fdc0:	4401      	add	r1, r0
 800fdc2:	f8d7 0470 	ldr.w	r0, [r7, #1136]	; 0x470
 800fdc6:	fba0 2302 	umull	r2, r3, r0, r2
 800fdca:	f8c7 359c 	str.w	r3, [r7, #1436]	; 0x59c
 800fdce:	4613      	mov	r3, r2
 800fdd0:	f8c7 3598 	str.w	r3, [r7, #1432]	; 0x598
 800fdd4:	f8d7 359c 	ldr.w	r3, [r7, #1436]	; 0x59c
 800fdd8:	18cb      	adds	r3, r1, r3
 800fdda:	f8c7 359c 	str.w	r3, [r7, #1436]	; 0x59c
 800fdde:	f507 6306 	add.w	r3, r7, #2144	; 0x860
 800fde2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fde6:	f8d7 1598 	ldr.w	r1, [r7, #1432]	; 0x598
 800fdea:	1851      	adds	r1, r2, r1
 800fdec:	f8c7 1220 	str.w	r1, [r7, #544]	; 0x220
 800fdf0:	f8d7 159c 	ldr.w	r1, [r7, #1436]	; 0x59c
 800fdf4:	414b      	adcs	r3, r1
 800fdf6:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 800fdfa:	e9d7 3488 	ldrd	r3, r4, [r7, #544]	; 0x220
 800fdfe:	f507 6206 	add.w	r2, r7, #2144	; 0x860
 800fe02:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 800fe06:	f507 6306 	add.w	r3, r7, #2144	; 0x860
 800fe0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe0e:	2b00      	cmp	r3, #0
 800fe10:	da0a      	bge.n	800fe28 <arm_softmax_s8+0x1268>
 800fe12:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800fe16:	1851      	adds	r1, r2, r1
 800fe18:	f8c7 1218 	str.w	r1, [r7, #536]	; 0x218
 800fe1c:	f143 0300 	adc.w	r3, r3, #0
 800fe20:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 800fe24:	e9d7 2386 	ldrd	r2, r3, [r7, #536]	; 0x218
 800fe28:	f04f 0000 	mov.w	r0, #0
 800fe2c:	f04f 0100 	mov.w	r1, #0
 800fe30:	0fd0      	lsrs	r0, r2, #31
 800fe32:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800fe36:	17d9      	asrs	r1, r3, #31
 800fe38:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fe3c:	f5a3 72a0 	sub.w	r2, r3, #320	; 0x140
 800fe40:	4603      	mov	r3, r0
 800fe42:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 800fe44:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fe48:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800fe4c:	681a      	ldr	r2, [r3, #0]
 800fe4e:	4baa      	ldr	r3, [pc, #680]	; (80100f8 <arm_softmax_s8+0x1538>)
 800fe50:	429a      	cmp	r2, r3
 800fe52:	d10e      	bne.n	800fe72 <arm_softmax_s8+0x12b2>
 800fe54:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fe58:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800fe5c:	681b      	ldr	r3, [r3, #0]
 800fe5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fe62:	d106      	bne.n	800fe72 <arm_softmax_s8+0x12b2>
        result = Q31_MAX;
 800fe64:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fe68:	f5a3 72a0 	sub.w	r2, r3, #320	; 0x140
 800fe6c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800fe70:	6013      	str	r3, [r2, #0]
    return result;
 800fe72:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fe76:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800fe7a:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(720401)
 800fe7c:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 800fe80:	ea02 0103 	and.w	r1, r2, r3
 800fe84:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 800fe88:	43da      	mvns	r2, r3
 800fe8a:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800fe8e:	4013      	ands	r3, r2
 800fe90:	404b      	eors	r3, r1
 800fe92:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
    SELECT_IF_NON_ZERO(242)
 800fe96:	f8d7 2960 	ldr.w	r2, [r7, #2400]	; 0x960
 800fe9a:	1c53      	adds	r3, r2, #1
 800fe9c:	f8c7 3960 	str.w	r3, [r7, #2400]	; 0x960
 800fea0:	2301      	movs	r3, #1
 800fea2:	fa03 f202 	lsl.w	r2, r3, r2
 800fea6:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 800feaa:	4013      	ands	r3, r2
 800feac:	2b00      	cmp	r3, #0
 800feae:	d002      	beq.n	800feb6 <arm_softmax_s8+0x12f6>
 800feb0:	f04f 33ff 	mov.w	r3, #4294967295
 800feb4:	e000      	b.n	800feb8 <arm_softmax_s8+0x12f8>
 800feb6:	2300      	movs	r3, #0
 800feb8:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
 800febc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fec0:	f5a3 72a6 	sub.w	r2, r3, #332	; 0x14c
 800fec4:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800fec8:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 800feca:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fece:	f5a3 72a8 	sub.w	r2, r3, #336	; 0x150
 800fed2:	2300      	movs	r3, #0
 800fed4:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 800fed6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800feda:	f04f 0300 	mov.w	r3, #0
 800fede:	f507 6105 	add.w	r1, r7, #2128	; 0x850
 800fee2:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 800fee6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800feea:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800feee:	681b      	ldr	r3, [r3, #0]
 800fef0:	0fdb      	lsrs	r3, r3, #31
 800fef2:	b2da      	uxtb	r2, r3
 800fef4:	2300      	movs	r3, #0
 800fef6:	4053      	eors	r3, r2
 800fef8:	b2db      	uxtb	r3, r3
 800fefa:	2b00      	cmp	r3, #0
 800fefc:	d012      	beq.n	800ff24 <arm_softmax_s8+0x1364>
        mult = 1 - mult;
 800fefe:	f507 6305 	add.w	r3, r7, #2128	; 0x850
 800ff02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff06:	2100      	movs	r1, #0
 800ff08:	f1d2 0001 	rsbs	r0, r2, #1
 800ff0c:	f8c7 0210 	str.w	r0, [r7, #528]	; 0x210
 800ff10:	eb61 0303 	sbc.w	r3, r1, r3
 800ff14:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 800ff18:	e9d7 3484 	ldrd	r3, r4, [r7, #528]	; 0x210
 800ff1c:	f507 6205 	add.w	r2, r7, #2128	; 0x850
 800ff20:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 800ff24:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ff28:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800ff2c:	681b      	ldr	r3, [r3, #0]
 800ff2e:	17da      	asrs	r2, r3, #31
 800ff30:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
 800ff34:	f8c7 246c 	str.w	r2, [r7, #1132]	; 0x46c
 800ff38:	f04f 02f2 	mov.w	r2, #242	; 0xf2
 800ff3c:	f04f 0300 	mov.w	r3, #0
 800ff40:	f8d7 146c 	ldr.w	r1, [r7, #1132]	; 0x46c
 800ff44:	fb02 f001 	mul.w	r0, r2, r1
 800ff48:	f8d7 1468 	ldr.w	r1, [r7, #1128]	; 0x468
 800ff4c:	fb01 f103 	mul.w	r1, r1, r3
 800ff50:	4401      	add	r1, r0
 800ff52:	f8d7 0468 	ldr.w	r0, [r7, #1128]	; 0x468
 800ff56:	fba0 2302 	umull	r2, r3, r0, r2
 800ff5a:	f8c7 3594 	str.w	r3, [r7, #1428]	; 0x594
 800ff5e:	4613      	mov	r3, r2
 800ff60:	f8c7 3590 	str.w	r3, [r7, #1424]	; 0x590
 800ff64:	f8d7 3594 	ldr.w	r3, [r7, #1428]	; 0x594
 800ff68:	18cb      	adds	r3, r1, r3
 800ff6a:	f8c7 3594 	str.w	r3, [r7, #1428]	; 0x594
 800ff6e:	f507 6305 	add.w	r3, r7, #2128	; 0x850
 800ff72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff76:	f8d7 1590 	ldr.w	r1, [r7, #1424]	; 0x590
 800ff7a:	1851      	adds	r1, r2, r1
 800ff7c:	f8c7 1208 	str.w	r1, [r7, #520]	; 0x208
 800ff80:	f8d7 1594 	ldr.w	r1, [r7, #1428]	; 0x594
 800ff84:	414b      	adcs	r3, r1
 800ff86:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 800ff8a:	e9d7 3482 	ldrd	r3, r4, [r7, #520]	; 0x208
 800ff8e:	f507 6205 	add.w	r2, r7, #2128	; 0x850
 800ff92:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 800ff96:	f507 6305 	add.w	r3, r7, #2128	; 0x850
 800ff9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff9e:	2b00      	cmp	r3, #0
 800ffa0:	da0a      	bge.n	800ffb8 <arm_softmax_s8+0x13f8>
 800ffa2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ffa6:	1851      	adds	r1, r2, r1
 800ffa8:	f8c7 1200 	str.w	r1, [r7, #512]	; 0x200
 800ffac:	f143 0300 	adc.w	r3, r3, #0
 800ffb0:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 800ffb4:	e9d7 2380 	ldrd	r2, r3, [r7, #512]	; 0x200
 800ffb8:	f04f 0000 	mov.w	r0, #0
 800ffbc:	f04f 0100 	mov.w	r1, #0
 800ffc0:	0fd0      	lsrs	r0, r2, #31
 800ffc2:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800ffc6:	17d9      	asrs	r1, r3, #31
 800ffc8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ffcc:	f5a3 72a8 	sub.w	r2, r3, #336	; 0x150
 800ffd0:	4603      	mov	r3, r0
 800ffd2:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 800ffd4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ffd8:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800ffdc:	681b      	ldr	r3, [r3, #0]
 800ffde:	2bf2      	cmp	r3, #242	; 0xf2
 800ffe0:	d10e      	bne.n	8010000 <arm_softmax_s8+0x1440>
 800ffe2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ffe6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800ffea:	681b      	ldr	r3, [r3, #0]
 800ffec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fff0:	d106      	bne.n	8010000 <arm_softmax_s8+0x1440>
        result = Q31_MAX;
 800fff2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fff6:	f5a3 72a8 	sub.w	r2, r3, #336	; 0x150
 800fffa:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800fffe:	6013      	str	r3, [r2, #0]
    return result;
 8010000:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010004:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8010008:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(242)
 801000a:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 801000e:	ea02 0103 	and.w	r1, r2, r3
 8010012:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 8010016:	43da      	mvns	r2, r3
 8010018:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 801001c:	4013      	ands	r3, r2
 801001e:	404b      	eors	r3, r1
 8010020:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4

#undef SELECT_IF_NON_ZERO

    mask = MASK_IF_ZERO(val);
 8010024:	f8d7 3968 	ldr.w	r3, [r7, #2408]	; 0x968
 8010028:	2b00      	cmp	r3, #0
 801002a:	d102      	bne.n	8010032 <arm_softmax_s8+0x1472>
 801002c:	f04f 33ff 	mov.w	r3, #4294967295
 8010030:	e000      	b.n	8010034 <arm_softmax_s8+0x1474>
 8010032:	2300      	movs	r3, #0
 8010034:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
    return SELECT_USING_MASK(mask, Q31_MAX, result);
 8010038:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 801003c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8010040:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 8010044:	43da      	mvns	r2, r3
 8010046:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 801004a:	4013      	ands	r3, r2
 801004c:	404b      	eors	r3, r1
 801004e:	f8c7 397c 	str.w	r3, [r7, #2428]	; 0x97c
    q31_t result = 0;
 8010052:	2300      	movs	r3, #0
 8010054:	f8c7 3978 	str.w	r3, [r7, #2424]	; 0x978
    const q31_t remainder_mask = (1 << exponent) - 1;
 8010058:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801005c:	3b01      	subs	r3, #1
 801005e:	f8c7 3974 	str.w	r3, [r7, #2420]	; 0x974
    int32_t remainder = remainder_mask & dividend;
 8010062:	f8d7 297c 	ldr.w	r2, [r7, #2428]	; 0x97c
 8010066:	f8d7 3974 	ldr.w	r3, [r7, #2420]	; 0x974
 801006a:	4013      	ands	r3, r2
 801006c:	f8c7 3970 	str.w	r3, [r7, #2416]	; 0x970
    result = dividend >> exponent;
 8010070:	f8d7 397c 	ldr.w	r3, [r7, #2428]	; 0x97c
 8010074:	131b      	asrs	r3, r3, #12
 8010076:	f8c7 3978 	str.w	r3, [r7, #2424]	; 0x978
    q31_t threshold = remainder_mask >> 1;
 801007a:	f8d7 3974 	ldr.w	r3, [r7, #2420]	; 0x974
 801007e:	105b      	asrs	r3, r3, #1
 8010080:	f8c7 396c 	str.w	r3, [r7, #2412]	; 0x96c
    if (result < 0)
 8010084:	f8d7 3978 	ldr.w	r3, [r7, #2424]	; 0x978
 8010088:	2b00      	cmp	r3, #0
 801008a:	da04      	bge.n	8010096 <arm_softmax_s8+0x14d6>
        threshold++;
 801008c:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 8010090:	3301      	adds	r3, #1
 8010092:	f8c7 396c 	str.w	r3, [r7, #2412]	; 0x96c
    if (remainder > threshold)
 8010096:	f8d7 2970 	ldr.w	r2, [r7, #2416]	; 0x970
 801009a:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 801009e:	429a      	cmp	r2, r3
 80100a0:	dd04      	ble.n	80100ac <arm_softmax_s8+0x14ec>
        result++;
 80100a2:	f8d7 3978 	ldr.w	r3, [r7, #2424]	; 0x978
 80100a6:	3301      	adds	r3, #1
 80100a8:	f8c7 3978 	str.w	r3, [r7, #2424]	; 0x978
    return result;
 80100ac:	f8d7 2978 	ldr.w	r2, [r7, #2424]	; 0x978
 80100b0:	f8d7 3998 	ldr.w	r3, [r7, #2456]	; 0x998
 80100b4:	4413      	add	r3, r2
 80100b6:	f8c7 3998 	str.w	r3, [r7, #2456]	; 0x998
        for (col = 0; col < row_size; ++col)
 80100ba:	f8d7 39a4 	ldr.w	r3, [r7, #2468]	; 0x9a4
 80100be:	3301      	adds	r3, #1
 80100c0:	f8c7 39a4 	str.w	r3, [r7, #2468]	; 0x9a4
 80100c4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80100c8:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 80100cc:	f8d7 29a4 	ldr.w	r2, [r7, #2468]	; 0x9a4
 80100d0:	681b      	ldr	r3, [r3, #0]
 80100d2:	429a      	cmp	r2, r3
 80100d4:	f6fe add2 	blt.w	800ec7c <arm_softmax_s8+0xbc>
            }
        }

        const int32_t headroom = __CLZ(sum);
 80100d8:	f8d7 2998 	ldr.w	r2, [r7, #2456]	; 0x998
 80100dc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80100e0:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80100e4:	601a      	str	r2, [r3, #0]
  if (value == 0U)
 80100e6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80100ea:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80100ee:	681b      	ldr	r3, [r3, #0]
 80100f0:	2b00      	cmp	r3, #0
 80100f2:	d103      	bne.n	80100fc <arm_softmax_s8+0x153c>
    return 32U;
 80100f4:	2320      	movs	r3, #32
 80100f6:	e009      	b.n	801010c <arm_softmax_s8+0x154c>
 80100f8:	000afe11 	.word	0x000afe11
  return __builtin_clz(value);
 80100fc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010100:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8010104:	681b      	ldr	r3, [r3, #0]
 8010106:	fab3 f383 	clz	r3, r3
 801010a:	b2db      	uxtb	r3, r3
 801010c:	f8c7 398c 	str.w	r3, [r7, #2444]	; 0x98c
        const int32_t bits_over_unit = ACCUM_BITS - headroom + 23;
 8010110:	f8d7 398c 	ldr.w	r3, [r7, #2444]	; 0x98c
 8010114:	f1c3 0323 	rsb	r3, r3, #35	; 0x23
 8010118:	f8c7 3988 	str.w	r3, [r7, #2440]	; 0x988
        const int32_t shifted_scale = ONE_OVER1((sum << headroom) - (1 << 31));
 801011c:	f8d7 2998 	ldr.w	r2, [r7, #2456]	; 0x998
 8010120:	f8d7 398c 	ldr.w	r3, [r7, #2444]	; 0x98c
 8010124:	fa02 f303 	lsl.w	r3, r2, r3
 8010128:	f103 4200 	add.w	r2, r3, #2147483648	; 0x80000000
 801012c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010130:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8010134:	601a      	str	r2, [r3, #0]
    return result;
}

__STATIC_FORCEINLINE int32_t arm_nn_one_over_one_plus_x_for_x_in_0_1(int32_t val)
{
    const int64_t sum = (int64_t)val + (int64_t)Q31_MAX;
 8010136:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801013a:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 801013e:	681b      	ldr	r3, [r3, #0]
 8010140:	17da      	asrs	r2, r3, #31
 8010142:	f8c7 3340 	str.w	r3, [r7, #832]	; 0x340
 8010146:	f8c7 2344 	str.w	r2, [r7, #836]	; 0x344
 801014a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801014e:	e9d7 01d0 	ldrd	r0, r1, [r7, #832]	; 0x340
 8010152:	4602      	mov	r2, r0
 8010154:	18d3      	adds	r3, r2, r3
 8010156:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 801015a:	460b      	mov	r3, r1
 801015c:	f143 0300 	adc.w	r3, r3, #0
 8010160:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 8010164:	e9d7 347e 	ldrd	r3, r4, [r7, #504]	; 0x1f8
 8010168:	f607 0228 	addw	r2, r7, #2088	; 0x828
 801016c:	e9c2 3400 	strd	r3, r4, [r2]
    const int32_t half_denominator = (int32_t)((sum + (sum >= 0 ? 1 : -1)) / 2L);
 8010170:	f607 0328 	addw	r3, r7, #2088	; 0x828
 8010174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010178:	2b00      	cmp	r3, #0
 801017a:	db04      	blt.n	8010186 <arm_softmax_s8+0x15c6>
 801017c:	f04f 0001 	mov.w	r0, #1
 8010180:	f04f 0100 	mov.w	r1, #0
 8010184:	e003      	b.n	801018e <arm_softmax_s8+0x15ce>
 8010186:	f04f 30ff 	mov.w	r0, #4294967295
 801018a:	f04f 31ff 	mov.w	r1, #4294967295
 801018e:	f607 0328 	addw	r3, r7, #2088	; 0x828
 8010192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010196:	1884      	adds	r4, r0, r2
 8010198:	f8c7 4338 	str.w	r4, [r7, #824]	; 0x338
 801019c:	eb41 0303 	adc.w	r3, r1, r3
 80101a0:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
 80101a4:	e9d7 01ce 	ldrd	r0, r1, [r7, #824]	; 0x338
 80101a8:	460b      	mov	r3, r1
 80101aa:	0fdb      	lsrs	r3, r3, #31
 80101ac:	2200      	movs	r2, #0
 80101ae:	f8c7 3348 	str.w	r3, [r7, #840]	; 0x348
 80101b2:	f8c7 234c 	str.w	r2, [r7, #844]	; 0x34c
 80101b6:	f8d7 3348 	ldr.w	r3, [r7, #840]	; 0x348
 80101ba:	4602      	mov	r2, r0
 80101bc:	189b      	adds	r3, r3, r2
 80101be:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 80101c2:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 80101c6:	460a      	mov	r2, r1
 80101c8:	4153      	adcs	r3, r2
 80101ca:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 80101ce:	f04f 0200 	mov.w	r2, #0
 80101d2:	f04f 0300 	mov.w	r3, #0
 80101d6:	f8d7 1350 	ldr.w	r1, [r7, #848]	; 0x350
 80101da:	084a      	lsrs	r2, r1, #1
 80101dc:	f8d7 1354 	ldr.w	r1, [r7, #852]	; 0x354
 80101e0:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 80101e4:	f8d7 1354 	ldr.w	r1, [r7, #852]	; 0x354
 80101e8:	104b      	asrs	r3, r1, #1
 80101ea:	4610      	mov	r0, r2
 80101ec:	4619      	mov	r1, r3
 80101ee:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80101f2:	f5a3 72c2 	sub.w	r2, r3, #388	; 0x184
 80101f6:	4603      	mov	r3, r0
 80101f8:	6013      	str	r3, [r2, #0]
 80101fa:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80101fe:	f5a3 72c4 	sub.w	r2, r3, #392	; 0x188
 8010202:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010206:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 801020a:	681b      	ldr	r3, [r3, #0]
 801020c:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801020e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010212:	f5a3 72c6 	sub.w	r2, r3, #396	; 0x18c
 8010216:	2300      	movs	r3, #0
 8010218:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 801021a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801021e:	f04f 0300 	mov.w	r3, #0
 8010222:	f507 6101 	add.w	r1, r7, #2064	; 0x810
 8010226:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 801022a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801022e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8010232:	681b      	ldr	r3, [r3, #0]
 8010234:	0fdb      	lsrs	r3, r3, #31
 8010236:	b2da      	uxtb	r2, r3
 8010238:	2301      	movs	r3, #1
 801023a:	4053      	eors	r3, r2
 801023c:	b2db      	uxtb	r3, r3
 801023e:	2b00      	cmp	r3, #0
 8010240:	d012      	beq.n	8010268 <arm_softmax_s8+0x16a8>
        mult = 1 - mult;
 8010242:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8010246:	e9d3 2300 	ldrd	r2, r3, [r3]
 801024a:	2100      	movs	r1, #0
 801024c:	f1d2 0001 	rsbs	r0, r2, #1
 8010250:	f8c7 01f0 	str.w	r0, [r7, #496]	; 0x1f0
 8010254:	eb61 0303 	sbc.w	r3, r1, r3
 8010258:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
 801025c:	e9d7 347c 	ldrd	r3, r4, [r7, #496]	; 0x1f0
 8010260:	f507 6201 	add.w	r2, r7, #2064	; 0x810
 8010264:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8010268:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801026c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8010270:	681b      	ldr	r3, [r3, #0]
 8010272:	17da      	asrs	r2, r3, #31
 8010274:	f8c7 3450 	str.w	r3, [r7, #1104]	; 0x450
 8010278:	f8c7 2454 	str.w	r2, [r7, #1108]	; 0x454
 801027c:	f60f 53a0 	addw	r3, pc, #3488	; 0xda0
 8010280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010284:	f8d7 1454 	ldr.w	r1, [r7, #1108]	; 0x454
 8010288:	fb02 f001 	mul.w	r0, r2, r1
 801028c:	f8d7 1450 	ldr.w	r1, [r7, #1104]	; 0x450
 8010290:	fb01 f103 	mul.w	r1, r1, r3
 8010294:	4401      	add	r1, r0
 8010296:	f8d7 0450 	ldr.w	r0, [r7, #1104]	; 0x450
 801029a:	fba0 2302 	umull	r2, r3, r0, r2
 801029e:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
 80102a2:	4613      	mov	r3, r2
 80102a4:	f8c7 3580 	str.w	r3, [r7, #1408]	; 0x580
 80102a8:	f8d7 3584 	ldr.w	r3, [r7, #1412]	; 0x584
 80102ac:	18cb      	adds	r3, r1, r3
 80102ae:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
 80102b2:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 80102b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102ba:	f8d7 1580 	ldr.w	r1, [r7, #1408]	; 0x580
 80102be:	1851      	adds	r1, r2, r1
 80102c0:	f8c7 11e8 	str.w	r1, [r7, #488]	; 0x1e8
 80102c4:	f8d7 1584 	ldr.w	r1, [r7, #1412]	; 0x584
 80102c8:	414b      	adcs	r3, r1
 80102ca:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 80102ce:	e9d7 347a 	ldrd	r3, r4, [r7, #488]	; 0x1e8
 80102d2:	f507 6201 	add.w	r2, r7, #2064	; 0x810
 80102d6:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 80102da:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 80102de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102e2:	2b00      	cmp	r3, #0
 80102e4:	da0a      	bge.n	80102fc <arm_softmax_s8+0x173c>
 80102e6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80102ea:	1851      	adds	r1, r2, r1
 80102ec:	f8c7 11e0 	str.w	r1, [r7, #480]	; 0x1e0
 80102f0:	f143 0300 	adc.w	r3, r3, #0
 80102f4:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80102f8:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	; 0x1e0
 80102fc:	f04f 0000 	mov.w	r0, #0
 8010300:	f04f 0100 	mov.w	r1, #0
 8010304:	0fd0      	lsrs	r0, r2, #31
 8010306:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801030a:	17d9      	asrs	r1, r3, #31
 801030c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010310:	f5a3 72c6 	sub.w	r2, r3, #396	; 0x18c
 8010314:	4603      	mov	r3, r0
 8010316:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8010318:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801031c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8010320:	681b      	ldr	r3, [r3, #0]
 8010322:	f113 3f3c 	cmn.w	r3, #1010580540	; 0x3c3c3c3c
 8010326:	d10e      	bne.n	8010346 <arm_softmax_s8+0x1786>
 8010328:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801032c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8010330:	681b      	ldr	r3, [r3, #0]
 8010332:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010336:	d106      	bne.n	8010346 <arm_softmax_s8+0x1786>
        result = Q31_MAX;
 8010338:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801033c:	f5a3 72c6 	sub.w	r2, r3, #396	; 0x18c
 8010340:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8010344:	6013      	str	r3, [r2, #0]
    return result;
 8010346:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801034a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 801034e:	6819      	ldr	r1, [r3, #0]
    int32_t x = 1515870810 + MUL_SAT(half_denominator, -1010580540);
 8010350:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010354:	f5a3 72ce 	sub.w	r2, r3, #412	; 0x19c
 8010358:	f101 335a 	add.w	r3, r1, #1515870810	; 0x5a5a5a5a
 801035c:	6013      	str	r3, [r2, #0]

    const int32_t shift = (1 << 29);
 801035e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010362:	f5a3 72d0 	sub.w	r2, r3, #416	; 0x1a0
 8010366:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 801036a:	6013      	str	r3, [r2, #0]
 801036c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010370:	f5a3 72d2 	sub.w	r2, r3, #420	; 0x1a4
 8010374:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010378:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 801037c:	681b      	ldr	r3, [r3, #0]
 801037e:	6013      	str	r3, [r2, #0]
 8010380:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010384:	f5a3 72d4 	sub.w	r2, r3, #424	; 0x1a8
 8010388:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801038c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8010390:	681b      	ldr	r3, [r3, #0]
 8010392:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8010394:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010398:	f5a3 72d6 	sub.w	r2, r3, #428	; 0x1ac
 801039c:	2300      	movs	r3, #0
 801039e:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 80103a0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80103a4:	f04f 0300 	mov.w	r3, #0
 80103a8:	f507 61fe 	add.w	r1, r7, #2032	; 0x7f0
 80103ac:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 80103b0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80103b4:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 80103b8:	681b      	ldr	r3, [r3, #0]
 80103ba:	0fdb      	lsrs	r3, r3, #31
 80103bc:	b2da      	uxtb	r2, r3
 80103be:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80103c2:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80103c6:	681b      	ldr	r3, [r3, #0]
 80103c8:	0fdb      	lsrs	r3, r3, #31
 80103ca:	b2db      	uxtb	r3, r3
 80103cc:	4053      	eors	r3, r2
 80103ce:	b2db      	uxtb	r3, r3
 80103d0:	2b00      	cmp	r3, #0
 80103d2:	d012      	beq.n	80103fa <arm_softmax_s8+0x183a>
        mult = 1 - mult;
 80103d4:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 80103d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103dc:	2100      	movs	r1, #0
 80103de:	f1d2 0001 	rsbs	r0, r2, #1
 80103e2:	f8c7 01d8 	str.w	r0, [r7, #472]	; 0x1d8
 80103e6:	eb61 0303 	sbc.w	r3, r1, r3
 80103ea:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80103ee:	e9d7 3476 	ldrd	r3, r4, [r7, #472]	; 0x1d8
 80103f2:	f507 62fe 	add.w	r2, r7, #2032	; 0x7f0
 80103f6:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 80103fa:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80103fe:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8010402:	681b      	ldr	r3, [r3, #0]
 8010404:	17da      	asrs	r2, r3, #31
 8010406:	f8c7 3448 	str.w	r3, [r7, #1096]	; 0x448
 801040a:	f8c7 244c 	str.w	r2, [r7, #1100]	; 0x44c
 801040e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010412:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8010416:	681b      	ldr	r3, [r3, #0]
 8010418:	17da      	asrs	r2, r3, #31
 801041a:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
 801041e:	f8c7 2444 	str.w	r2, [r7, #1092]	; 0x444
 8010422:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8010426:	e9d3 0100 	ldrd	r0, r1, [r3]
 801042a:	460b      	mov	r3, r1
 801042c:	f8d7 2440 	ldr.w	r2, [r7, #1088]	; 0x440
 8010430:	fb02 f203 	mul.w	r2, r2, r3
 8010434:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 8010438:	f507 6489 	add.w	r4, r7, #1096	; 0x448
 801043c:	e9c4 0100 	strd	r0, r1, [r4]
 8010440:	4601      	mov	r1, r0
 8010442:	fb01 f303 	mul.w	r3, r1, r3
 8010446:	4413      	add	r3, r2
 8010448:	f8d7 2448 	ldr.w	r2, [r7, #1096]	; 0x448
 801044c:	f8d7 1440 	ldr.w	r1, [r7, #1088]	; 0x440
 8010450:	fba2 1201 	umull	r1, r2, r2, r1
 8010454:	f8c7 257c 	str.w	r2, [r7, #1404]	; 0x57c
 8010458:	460a      	mov	r2, r1
 801045a:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 801045e:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8010462:	4413      	add	r3, r2
 8010464:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 8010468:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 801046c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010470:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 8010474:	1851      	adds	r1, r2, r1
 8010476:	f8c7 11d0 	str.w	r1, [r7, #464]	; 0x1d0
 801047a:	f8d7 157c 	ldr.w	r1, [r7, #1404]	; 0x57c
 801047e:	414b      	adcs	r3, r1
 8010480:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 8010484:	e9d7 3474 	ldrd	r3, r4, [r7, #464]	; 0x1d0
 8010488:	f507 62fe 	add.w	r2, r7, #2032	; 0x7f0
 801048c:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8010490:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 8010494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010498:	2b00      	cmp	r3, #0
 801049a:	da0a      	bge.n	80104b2 <arm_softmax_s8+0x18f2>
 801049c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80104a0:	1851      	adds	r1, r2, r1
 80104a2:	f8c7 11c8 	str.w	r1, [r7, #456]	; 0x1c8
 80104a6:	f143 0300 	adc.w	r3, r3, #0
 80104aa:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 80104ae:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 80104b2:	f04f 0000 	mov.w	r0, #0
 80104b6:	f04f 0100 	mov.w	r1, #0
 80104ba:	0fd0      	lsrs	r0, r2, #31
 80104bc:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 80104c0:	17d9      	asrs	r1, r3, #31
 80104c2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80104c6:	f5a3 72d6 	sub.w	r2, r3, #428	; 0x1ac
 80104ca:	4603      	mov	r3, r0
 80104cc:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 80104ce:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80104d2:	f5a3 72d2 	sub.w	r2, r3, #420	; 0x1a4
 80104d6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80104da:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80104de:	6812      	ldr	r2, [r2, #0]
 80104e0:	681b      	ldr	r3, [r3, #0]
 80104e2:	429a      	cmp	r2, r3
 80104e4:	d10e      	bne.n	8010504 <arm_softmax_s8+0x1944>
 80104e6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80104ea:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 80104ee:	681b      	ldr	r3, [r3, #0]
 80104f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80104f4:	d106      	bne.n	8010504 <arm_softmax_s8+0x1944>
        result = Q31_MAX;
 80104f6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80104fa:	f5a3 72d6 	sub.w	r2, r3, #428	; 0x1ac
 80104fe:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8010502:	6013      	str	r3, [r2, #0]
    return result;
 8010504:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010508:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 801050c:	681a      	ldr	r2, [r3, #0]
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 801050e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010512:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8010516:	681b      	ldr	r3, [r3, #0]
 8010518:	1a99      	subs	r1, r3, r2
 801051a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801051e:	f5a3 72de 	sub.w	r2, r3, #444	; 0x1bc
 8010522:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010526:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 801052a:	681b      	ldr	r3, [r3, #0]
 801052c:	6013      	str	r3, [r2, #0]
 801052e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010532:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8010536:	6019      	str	r1, [r3, #0]
    q31_t result = 0;
 8010538:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801053c:	f5a3 72e2 	sub.w	r2, r3, #452	; 0x1c4
 8010540:	2300      	movs	r3, #0
 8010542:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8010544:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8010548:	f04f 0300 	mov.w	r3, #0
 801054c:	f507 61fb 	add.w	r1, r7, #2008	; 0x7d8
 8010550:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8010554:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010558:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 801055c:	681b      	ldr	r3, [r3, #0]
 801055e:	0fdb      	lsrs	r3, r3, #31
 8010560:	b2da      	uxtb	r2, r3
 8010562:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010566:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 801056a:	681b      	ldr	r3, [r3, #0]
 801056c:	0fdb      	lsrs	r3, r3, #31
 801056e:	b2db      	uxtb	r3, r3
 8010570:	4053      	eors	r3, r2
 8010572:	b2db      	uxtb	r3, r3
 8010574:	2b00      	cmp	r3, #0
 8010576:	d012      	beq.n	801059e <arm_softmax_s8+0x19de>
        mult = 1 - mult;
 8010578:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 801057c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010580:	2100      	movs	r1, #0
 8010582:	f1d2 0001 	rsbs	r0, r2, #1
 8010586:	f8c7 01c0 	str.w	r0, [r7, #448]	; 0x1c0
 801058a:	eb61 0303 	sbc.w	r3, r1, r3
 801058e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8010592:	e9d7 3470 	ldrd	r3, r4, [r7, #448]	; 0x1c0
 8010596:	f507 62fb 	add.w	r2, r7, #2008	; 0x7d8
 801059a:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 801059e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80105a2:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80105a6:	681b      	ldr	r3, [r3, #0]
 80105a8:	17da      	asrs	r2, r3, #31
 80105aa:	f8c7 3438 	str.w	r3, [r7, #1080]	; 0x438
 80105ae:	f8c7 243c 	str.w	r2, [r7, #1084]	; 0x43c
 80105b2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80105b6:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80105ba:	681b      	ldr	r3, [r3, #0]
 80105bc:	17da      	asrs	r2, r3, #31
 80105be:	f8c7 3430 	str.w	r3, [r7, #1072]	; 0x430
 80105c2:	f8c7 2434 	str.w	r2, [r7, #1076]	; 0x434
 80105c6:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 80105ca:	e9d3 0100 	ldrd	r0, r1, [r3]
 80105ce:	460b      	mov	r3, r1
 80105d0:	f8d7 2430 	ldr.w	r2, [r7, #1072]	; 0x430
 80105d4:	fb02 f203 	mul.w	r2, r2, r3
 80105d8:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 80105dc:	f507 6487 	add.w	r4, r7, #1080	; 0x438
 80105e0:	e9c4 0100 	strd	r0, r1, [r4]
 80105e4:	4601      	mov	r1, r0
 80105e6:	fb01 f303 	mul.w	r3, r1, r3
 80105ea:	4413      	add	r3, r2
 80105ec:	f8d7 2438 	ldr.w	r2, [r7, #1080]	; 0x438
 80105f0:	f8d7 1430 	ldr.w	r1, [r7, #1072]	; 0x430
 80105f4:	fba2 1201 	umull	r1, r2, r2, r1
 80105f8:	f8c7 2574 	str.w	r2, [r7, #1396]	; 0x574
 80105fc:	460a      	mov	r2, r1
 80105fe:	f8c7 2570 	str.w	r2, [r7, #1392]	; 0x570
 8010602:	f8d7 2574 	ldr.w	r2, [r7, #1396]	; 0x574
 8010606:	4413      	add	r3, r2
 8010608:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
 801060c:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 8010610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010614:	f8d7 1570 	ldr.w	r1, [r7, #1392]	; 0x570
 8010618:	1851      	adds	r1, r2, r1
 801061a:	f8c7 11b8 	str.w	r1, [r7, #440]	; 0x1b8
 801061e:	f8d7 1574 	ldr.w	r1, [r7, #1396]	; 0x574
 8010622:	414b      	adcs	r3, r1
 8010624:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8010628:	e9d7 346e 	ldrd	r3, r4, [r7, #440]	; 0x1b8
 801062c:	f507 62fb 	add.w	r2, r7, #2008	; 0x7d8
 8010630:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8010634:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 8010638:	e9d3 2300 	ldrd	r2, r3, [r3]
 801063c:	2b00      	cmp	r3, #0
 801063e:	da0a      	bge.n	8010656 <arm_softmax_s8+0x1a96>
 8010640:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010644:	1851      	adds	r1, r2, r1
 8010646:	f8c7 11b0 	str.w	r1, [r7, #432]	; 0x1b0
 801064a:	f143 0300 	adc.w	r3, r3, #0
 801064e:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 8010652:	e9d7 236c 	ldrd	r2, r3, [r7, #432]	; 0x1b0
 8010656:	f04f 0000 	mov.w	r0, #0
 801065a:	f04f 0100 	mov.w	r1, #0
 801065e:	0fd0      	lsrs	r0, r2, #31
 8010660:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8010664:	17d9      	asrs	r1, r3, #31
 8010666:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801066a:	f5a3 72e2 	sub.w	r2, r3, #452	; 0x1c4
 801066e:	4603      	mov	r3, r0
 8010670:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8010672:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010676:	f5a3 72de 	sub.w	r2, r3, #444	; 0x1bc
 801067a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801067e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8010682:	6812      	ldr	r2, [r2, #0]
 8010684:	681b      	ldr	r3, [r3, #0]
 8010686:	429a      	cmp	r2, r3
 8010688:	d10e      	bne.n	80106a8 <arm_softmax_s8+0x1ae8>
 801068a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801068e:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010692:	681b      	ldr	r3, [r3, #0]
 8010694:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010698:	d106      	bne.n	80106a8 <arm_softmax_s8+0x1ae8>
        result = Q31_MAX;
 801069a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801069e:	f5a3 72e2 	sub.w	r2, r3, #452	; 0x1c4
 80106a2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80106a6:	6013      	str	r3, [r2, #0]
    return result;
 80106a8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80106ac:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80106b0:	681a      	ldr	r2, [r3, #0]
 80106b2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80106b6:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80106ba:	601a      	str	r2, [r3, #0]
    const int32_t thresh = ((1 << (31 - exp)) - 1);
 80106bc:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80106c0:	4619      	mov	r1, r3
 80106c2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80106c6:	f5a3 72ec 	sub.w	r2, r3, #472	; 0x1d8
 80106ca:	1e4b      	subs	r3, r1, #1
 80106cc:	6013      	str	r3, [r2, #0]
    int32_t result = val << exp;
 80106ce:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80106d2:	f5a3 72ee 	sub.w	r2, r3, #476	; 0x1dc
 80106d6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80106da:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80106de:	681b      	ldr	r3, [r3, #0]
 80106e0:	009b      	lsls	r3, r3, #2
 80106e2:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
 80106e4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80106e8:	f5a3 72ea 	sub.w	r2, r3, #468	; 0x1d4
 80106ec:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80106f0:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80106f4:	6812      	ldr	r2, [r2, #0]
 80106f6:	681b      	ldr	r3, [r3, #0]
 80106f8:	429a      	cmp	r2, r3
 80106fa:	dd02      	ble.n	8010702 <arm_softmax_s8+0x1b42>
 80106fc:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8010700:	e000      	b.n	8010704 <arm_softmax_s8+0x1b44>
 8010702:	2000      	movs	r0, #0
 8010704:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010708:	f5a3 72ea 	sub.w	r2, r3, #468	; 0x1d4
 801070c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010710:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8010714:	6812      	ldr	r2, [r2, #0]
 8010716:	681b      	ldr	r3, [r3, #0]
 8010718:	429a      	cmp	r2, r3
 801071a:	dd01      	ble.n	8010720 <arm_softmax_s8+0x1b60>
 801071c:	2200      	movs	r2, #0
 801071e:	e001      	b.n	8010724 <arm_softmax_s8+0x1b64>
 8010720:	f04f 32ff 	mov.w	r2, #4294967295
 8010724:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010728:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 801072c:	681b      	ldr	r3, [r3, #0]
 801072e:	ea02 0103 	and.w	r1, r2, r3
 8010732:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010736:	f5a3 72ee 	sub.w	r2, r3, #476	; 0x1dc
 801073a:	ea81 0300 	eor.w	r3, r1, r0
 801073e:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
 8010740:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010744:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8010748:	681b      	ldr	r3, [r3, #0]
 801074a:	425a      	negs	r2, r3
 801074c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010750:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8010754:	681b      	ldr	r3, [r3, #0]
 8010756:	4293      	cmp	r3, r2
 8010758:	da02      	bge.n	8010760 <arm_softmax_s8+0x1ba0>
 801075a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 801075e:	e000      	b.n	8010762 <arm_softmax_s8+0x1ba2>
 8010760:	2000      	movs	r0, #0
 8010762:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010766:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 801076a:	681b      	ldr	r3, [r3, #0]
 801076c:	425a      	negs	r2, r3
 801076e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010772:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8010776:	681b      	ldr	r3, [r3, #0]
 8010778:	4293      	cmp	r3, r2
 801077a:	da01      	bge.n	8010780 <arm_softmax_s8+0x1bc0>
 801077c:	2200      	movs	r2, #0
 801077e:	e001      	b.n	8010784 <arm_softmax_s8+0x1bc4>
 8010780:	f04f 32ff 	mov.w	r2, #4294967295
 8010784:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010788:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 801078c:	681b      	ldr	r3, [r3, #0]
 801078e:	ea02 0103 	and.w	r1, r2, r3
 8010792:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010796:	f5a3 72ee 	sub.w	r2, r3, #476	; 0x1dc
 801079a:	ea81 0300 	eor.w	r3, r1, r0
 801079e:	6013      	str	r3, [r2, #0]
    return result;
 80107a0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80107a4:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80107a8:	6819      	ldr	r1, [r3, #0]
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 80107aa:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80107ae:	f5a3 72ce 	sub.w	r2, r3, #412	; 0x19c
 80107b2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80107b6:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80107ba:	681b      	ldr	r3, [r3, #0]
 80107bc:	440b      	add	r3, r1
 80107be:	6013      	str	r3, [r2, #0]
 80107c0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80107c4:	f5a3 72f0 	sub.w	r2, r3, #480	; 0x1e0
 80107c8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80107cc:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80107d0:	681b      	ldr	r3, [r3, #0]
 80107d2:	6013      	str	r3, [r2, #0]
 80107d4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80107d8:	f5a3 72f2 	sub.w	r2, r3, #484	; 0x1e4
 80107dc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80107e0:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80107e4:	681b      	ldr	r3, [r3, #0]
 80107e6:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 80107e8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80107ec:	f5a3 72f4 	sub.w	r2, r3, #488	; 0x1e8
 80107f0:	2300      	movs	r3, #0
 80107f2:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 80107f4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80107f8:	f04f 0300 	mov.w	r3, #0
 80107fc:	f507 61f7 	add.w	r1, r7, #1976	; 0x7b8
 8010800:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8010804:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010808:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 801080c:	681b      	ldr	r3, [r3, #0]
 801080e:	0fdb      	lsrs	r3, r3, #31
 8010810:	b2da      	uxtb	r2, r3
 8010812:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010816:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 801081a:	681b      	ldr	r3, [r3, #0]
 801081c:	0fdb      	lsrs	r3, r3, #31
 801081e:	b2db      	uxtb	r3, r3
 8010820:	4053      	eors	r3, r2
 8010822:	b2db      	uxtb	r3, r3
 8010824:	2b00      	cmp	r3, #0
 8010826:	d012      	beq.n	801084e <arm_softmax_s8+0x1c8e>
        mult = 1 - mult;
 8010828:	f507 63f7 	add.w	r3, r7, #1976	; 0x7b8
 801082c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010830:	2100      	movs	r1, #0
 8010832:	f1d2 0001 	rsbs	r0, r2, #1
 8010836:	f8c7 01a8 	str.w	r0, [r7, #424]	; 0x1a8
 801083a:	eb61 0303 	sbc.w	r3, r1, r3
 801083e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 8010842:	e9d7 346a 	ldrd	r3, r4, [r7, #424]	; 0x1a8
 8010846:	f507 62f7 	add.w	r2, r7, #1976	; 0x7b8
 801084a:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 801084e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010852:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8010856:	681b      	ldr	r3, [r3, #0]
 8010858:	17da      	asrs	r2, r3, #31
 801085a:	f8c7 3428 	str.w	r3, [r7, #1064]	; 0x428
 801085e:	f8c7 242c 	str.w	r2, [r7, #1068]	; 0x42c
 8010862:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010866:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 801086a:	681b      	ldr	r3, [r3, #0]
 801086c:	17da      	asrs	r2, r3, #31
 801086e:	f8c7 3420 	str.w	r3, [r7, #1056]	; 0x420
 8010872:	f8c7 2424 	str.w	r2, [r7, #1060]	; 0x424
 8010876:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 801087a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801087e:	460b      	mov	r3, r1
 8010880:	f8d7 2420 	ldr.w	r2, [r7, #1056]	; 0x420
 8010884:	fb02 f203 	mul.w	r2, r2, r3
 8010888:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 801088c:	f507 6485 	add.w	r4, r7, #1064	; 0x428
 8010890:	e9c4 0100 	strd	r0, r1, [r4]
 8010894:	4601      	mov	r1, r0
 8010896:	fb01 f303 	mul.w	r3, r1, r3
 801089a:	4413      	add	r3, r2
 801089c:	f8d7 2428 	ldr.w	r2, [r7, #1064]	; 0x428
 80108a0:	f8d7 1420 	ldr.w	r1, [r7, #1056]	; 0x420
 80108a4:	fba2 1201 	umull	r1, r2, r2, r1
 80108a8:	f8c7 256c 	str.w	r2, [r7, #1388]	; 0x56c
 80108ac:	460a      	mov	r2, r1
 80108ae:	f8c7 2568 	str.w	r2, [r7, #1384]	; 0x568
 80108b2:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 80108b6:	4413      	add	r3, r2
 80108b8:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 80108bc:	f507 63f7 	add.w	r3, r7, #1976	; 0x7b8
 80108c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108c4:	f8d7 1568 	ldr.w	r1, [r7, #1384]	; 0x568
 80108c8:	1851      	adds	r1, r2, r1
 80108ca:	f8c7 11a0 	str.w	r1, [r7, #416]	; 0x1a0
 80108ce:	f8d7 156c 	ldr.w	r1, [r7, #1388]	; 0x56c
 80108d2:	414b      	adcs	r3, r1
 80108d4:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80108d8:	e9d7 3468 	ldrd	r3, r4, [r7, #416]	; 0x1a0
 80108dc:	f507 62f7 	add.w	r2, r7, #1976	; 0x7b8
 80108e0:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 80108e4:	f507 63f7 	add.w	r3, r7, #1976	; 0x7b8
 80108e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108ec:	2b00      	cmp	r3, #0
 80108ee:	da0a      	bge.n	8010906 <arm_softmax_s8+0x1d46>
 80108f0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80108f4:	1851      	adds	r1, r2, r1
 80108f6:	f8c7 1198 	str.w	r1, [r7, #408]	; 0x198
 80108fa:	f143 0300 	adc.w	r3, r3, #0
 80108fe:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8010902:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	; 0x198
 8010906:	f04f 0000 	mov.w	r0, #0
 801090a:	f04f 0100 	mov.w	r1, #0
 801090e:	0fd0      	lsrs	r0, r2, #31
 8010910:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8010914:	17d9      	asrs	r1, r3, #31
 8010916:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801091a:	f5a3 72f4 	sub.w	r2, r3, #488	; 0x1e8
 801091e:	4603      	mov	r3, r0
 8010920:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8010922:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010926:	f5a3 72f0 	sub.w	r2, r3, #480	; 0x1e0
 801092a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801092e:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8010932:	6812      	ldr	r2, [r2, #0]
 8010934:	681b      	ldr	r3, [r3, #0]
 8010936:	429a      	cmp	r2, r3
 8010938:	d10e      	bne.n	8010958 <arm_softmax_s8+0x1d98>
 801093a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801093e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8010942:	681b      	ldr	r3, [r3, #0]
 8010944:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010948:	d106      	bne.n	8010958 <arm_softmax_s8+0x1d98>
        result = Q31_MAX;
 801094a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801094e:	f5a3 72f4 	sub.w	r2, r3, #488	; 0x1e8
 8010952:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8010956:	6013      	str	r3, [r2, #0]
    return result;
 8010958:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801095c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8010960:	681a      	ldr	r2, [r3, #0]
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 8010962:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010966:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 801096a:	681b      	ldr	r3, [r3, #0]
 801096c:	1a99      	subs	r1, r3, r2
 801096e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010972:	f5a3 72fa 	sub.w	r2, r3, #500	; 0x1f4
 8010976:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801097a:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 801097e:	681b      	ldr	r3, [r3, #0]
 8010980:	6013      	str	r3, [r2, #0]
 8010982:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010986:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 801098a:	6019      	str	r1, [r3, #0]
    q31_t result = 0;
 801098c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010990:	f5a3 72fe 	sub.w	r2, r3, #508	; 0x1fc
 8010994:	2300      	movs	r3, #0
 8010996:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8010998:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801099c:	f04f 0300 	mov.w	r3, #0
 80109a0:	f507 61f4 	add.w	r1, r7, #1952	; 0x7a0
 80109a4:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 80109a8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80109ac:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 80109b0:	681b      	ldr	r3, [r3, #0]
 80109b2:	0fdb      	lsrs	r3, r3, #31
 80109b4:	b2da      	uxtb	r2, r3
 80109b6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80109ba:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80109be:	681b      	ldr	r3, [r3, #0]
 80109c0:	0fdb      	lsrs	r3, r3, #31
 80109c2:	b2db      	uxtb	r3, r3
 80109c4:	4053      	eors	r3, r2
 80109c6:	b2db      	uxtb	r3, r3
 80109c8:	2b00      	cmp	r3, #0
 80109ca:	d012      	beq.n	80109f2 <arm_softmax_s8+0x1e32>
        mult = 1 - mult;
 80109cc:	f507 63f4 	add.w	r3, r7, #1952	; 0x7a0
 80109d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109d4:	2100      	movs	r1, #0
 80109d6:	f1d2 0001 	rsbs	r0, r2, #1
 80109da:	f8c7 0190 	str.w	r0, [r7, #400]	; 0x190
 80109de:	eb61 0303 	sbc.w	r3, r1, r3
 80109e2:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 80109e6:	e9d7 3464 	ldrd	r3, r4, [r7, #400]	; 0x190
 80109ea:	f507 62f4 	add.w	r2, r7, #1952	; 0x7a0
 80109ee:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 80109f2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80109f6:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 80109fa:	681b      	ldr	r3, [r3, #0]
 80109fc:	17da      	asrs	r2, r3, #31
 80109fe:	f8c7 3418 	str.w	r3, [r7, #1048]	; 0x418
 8010a02:	f8c7 241c 	str.w	r2, [r7, #1052]	; 0x41c
 8010a06:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010a0a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8010a0e:	681b      	ldr	r3, [r3, #0]
 8010a10:	17da      	asrs	r2, r3, #31
 8010a12:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
 8010a16:	f8c7 2414 	str.w	r2, [r7, #1044]	; 0x414
 8010a1a:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8010a1e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010a22:	460b      	mov	r3, r1
 8010a24:	f8d7 2410 	ldr.w	r2, [r7, #1040]	; 0x410
 8010a28:	fb02 f203 	mul.w	r2, r2, r3
 8010a2c:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 8010a30:	f507 6483 	add.w	r4, r7, #1048	; 0x418
 8010a34:	e9c4 0100 	strd	r0, r1, [r4]
 8010a38:	4601      	mov	r1, r0
 8010a3a:	fb01 f303 	mul.w	r3, r1, r3
 8010a3e:	4413      	add	r3, r2
 8010a40:	f8d7 2418 	ldr.w	r2, [r7, #1048]	; 0x418
 8010a44:	f8d7 1410 	ldr.w	r1, [r7, #1040]	; 0x410
 8010a48:	fba2 1201 	umull	r1, r2, r2, r1
 8010a4c:	f8c7 2564 	str.w	r2, [r7, #1380]	; 0x564
 8010a50:	460a      	mov	r2, r1
 8010a52:	f8c7 2560 	str.w	r2, [r7, #1376]	; 0x560
 8010a56:	f8d7 2564 	ldr.w	r2, [r7, #1380]	; 0x564
 8010a5a:	4413      	add	r3, r2
 8010a5c:	f8c7 3564 	str.w	r3, [r7, #1380]	; 0x564
 8010a60:	f507 63f4 	add.w	r3, r7, #1952	; 0x7a0
 8010a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a68:	f8d7 1560 	ldr.w	r1, [r7, #1376]	; 0x560
 8010a6c:	1851      	adds	r1, r2, r1
 8010a6e:	f8c7 1188 	str.w	r1, [r7, #392]	; 0x188
 8010a72:	f8d7 1564 	ldr.w	r1, [r7, #1380]	; 0x564
 8010a76:	414b      	adcs	r3, r1
 8010a78:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8010a7c:	e9d7 3462 	ldrd	r3, r4, [r7, #392]	; 0x188
 8010a80:	f507 62f4 	add.w	r2, r7, #1952	; 0x7a0
 8010a84:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8010a88:	f507 63f4 	add.w	r3, r7, #1952	; 0x7a0
 8010a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a90:	2b00      	cmp	r3, #0
 8010a92:	da0a      	bge.n	8010aaa <arm_softmax_s8+0x1eea>
 8010a94:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010a98:	1851      	adds	r1, r2, r1
 8010a9a:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
 8010a9e:	f143 0300 	adc.w	r3, r3, #0
 8010aa2:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8010aa6:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	; 0x180
 8010aaa:	f04f 0000 	mov.w	r0, #0
 8010aae:	f04f 0100 	mov.w	r1, #0
 8010ab2:	0fd0      	lsrs	r0, r2, #31
 8010ab4:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8010ab8:	17d9      	asrs	r1, r3, #31
 8010aba:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010abe:	f5a3 72fe 	sub.w	r2, r3, #508	; 0x1fc
 8010ac2:	4603      	mov	r3, r0
 8010ac4:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8010ac6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010aca:	f5a3 72fa 	sub.w	r2, r3, #500	; 0x1f4
 8010ace:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010ad2:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8010ad6:	6812      	ldr	r2, [r2, #0]
 8010ad8:	681b      	ldr	r3, [r3, #0]
 8010ada:	429a      	cmp	r2, r3
 8010adc:	d10e      	bne.n	8010afc <arm_softmax_s8+0x1f3c>
 8010ade:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010ae2:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8010ae6:	681b      	ldr	r3, [r3, #0]
 8010ae8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010aec:	d106      	bne.n	8010afc <arm_softmax_s8+0x1f3c>
        result = Q31_MAX;
 8010aee:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010af2:	f5a3 72fe 	sub.w	r2, r3, #508	; 0x1fc
 8010af6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8010afa:	6013      	str	r3, [r2, #0]
    return result;
 8010afc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010b00:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8010b04:	681a      	ldr	r2, [r3, #0]
 8010b06:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010b0a:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8010b0e:	601a      	str	r2, [r3, #0]
    const int32_t thresh = ((1 << (31 - exp)) - 1);
 8010b10:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8010b14:	4619      	mov	r1, r3
 8010b16:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010b1a:	f5a3 7204 	sub.w	r2, r3, #528	; 0x210
 8010b1e:	1e4b      	subs	r3, r1, #1
 8010b20:	6013      	str	r3, [r2, #0]
    int32_t result = val << exp;
 8010b22:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010b26:	f5a3 7205 	sub.w	r2, r3, #532	; 0x214
 8010b2a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010b2e:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8010b32:	681b      	ldr	r3, [r3, #0]
 8010b34:	009b      	lsls	r3, r3, #2
 8010b36:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
 8010b38:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010b3c:	f5a3 7203 	sub.w	r2, r3, #524	; 0x20c
 8010b40:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010b44:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8010b48:	6812      	ldr	r2, [r2, #0]
 8010b4a:	681b      	ldr	r3, [r3, #0]
 8010b4c:	429a      	cmp	r2, r3
 8010b4e:	dd02      	ble.n	8010b56 <arm_softmax_s8+0x1f96>
 8010b50:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8010b54:	e000      	b.n	8010b58 <arm_softmax_s8+0x1f98>
 8010b56:	2000      	movs	r0, #0
 8010b58:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010b5c:	f5a3 7203 	sub.w	r2, r3, #524	; 0x20c
 8010b60:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010b64:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8010b68:	6812      	ldr	r2, [r2, #0]
 8010b6a:	681b      	ldr	r3, [r3, #0]
 8010b6c:	429a      	cmp	r2, r3
 8010b6e:	dd01      	ble.n	8010b74 <arm_softmax_s8+0x1fb4>
 8010b70:	2200      	movs	r2, #0
 8010b72:	e001      	b.n	8010b78 <arm_softmax_s8+0x1fb8>
 8010b74:	f04f 32ff 	mov.w	r2, #4294967295
 8010b78:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010b7c:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8010b80:	681b      	ldr	r3, [r3, #0]
 8010b82:	ea02 0103 	and.w	r1, r2, r3
 8010b86:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010b8a:	f5a3 7205 	sub.w	r2, r3, #532	; 0x214
 8010b8e:	ea81 0300 	eor.w	r3, r1, r0
 8010b92:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
 8010b94:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010b98:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8010b9c:	681b      	ldr	r3, [r3, #0]
 8010b9e:	425a      	negs	r2, r3
 8010ba0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010ba4:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8010ba8:	681b      	ldr	r3, [r3, #0]
 8010baa:	4293      	cmp	r3, r2
 8010bac:	da02      	bge.n	8010bb4 <arm_softmax_s8+0x1ff4>
 8010bae:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8010bb2:	e000      	b.n	8010bb6 <arm_softmax_s8+0x1ff6>
 8010bb4:	2000      	movs	r0, #0
 8010bb6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010bba:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8010bbe:	681b      	ldr	r3, [r3, #0]
 8010bc0:	425a      	negs	r2, r3
 8010bc2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010bc6:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8010bca:	681b      	ldr	r3, [r3, #0]
 8010bcc:	4293      	cmp	r3, r2
 8010bce:	da01      	bge.n	8010bd4 <arm_softmax_s8+0x2014>
 8010bd0:	2200      	movs	r2, #0
 8010bd2:	e001      	b.n	8010bd8 <arm_softmax_s8+0x2018>
 8010bd4:	f04f 32ff 	mov.w	r2, #4294967295
 8010bd8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010bdc:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8010be0:	681b      	ldr	r3, [r3, #0]
 8010be2:	ea02 0103 	and.w	r1, r2, r3
 8010be6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010bea:	f5a3 7205 	sub.w	r2, r3, #532	; 0x214
 8010bee:	ea81 0300 	eor.w	r3, r1, r0
 8010bf2:	6013      	str	r3, [r2, #0]
    return result;
 8010bf4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010bf8:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8010bfc:	6819      	ldr	r1, [r3, #0]
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 8010bfe:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010c02:	f5a3 72ce 	sub.w	r2, r3, #412	; 0x19c
 8010c06:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010c0a:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8010c0e:	681b      	ldr	r3, [r3, #0]
 8010c10:	440b      	add	r3, r1
 8010c12:	6013      	str	r3, [r2, #0]
 8010c14:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010c18:	f5a3 7206 	sub.w	r2, r3, #536	; 0x218
 8010c1c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010c20:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8010c24:	681b      	ldr	r3, [r3, #0]
 8010c26:	6013      	str	r3, [r2, #0]
 8010c28:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010c2c:	f5a3 7207 	sub.w	r2, r3, #540	; 0x21c
 8010c30:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010c34:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8010c38:	681b      	ldr	r3, [r3, #0]
 8010c3a:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8010c3c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010c40:	f5a3 7208 	sub.w	r2, r3, #544	; 0x220
 8010c44:	2300      	movs	r3, #0
 8010c46:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8010c48:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8010c4c:	f04f 0300 	mov.w	r3, #0
 8010c50:	f507 61f0 	add.w	r1, r7, #1920	; 0x780
 8010c54:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8010c58:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010c5c:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8010c60:	681b      	ldr	r3, [r3, #0]
 8010c62:	0fdb      	lsrs	r3, r3, #31
 8010c64:	b2da      	uxtb	r2, r3
 8010c66:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010c6a:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8010c6e:	681b      	ldr	r3, [r3, #0]
 8010c70:	0fdb      	lsrs	r3, r3, #31
 8010c72:	b2db      	uxtb	r3, r3
 8010c74:	4053      	eors	r3, r2
 8010c76:	b2db      	uxtb	r3, r3
 8010c78:	2b00      	cmp	r3, #0
 8010c7a:	d012      	beq.n	8010ca2 <arm_softmax_s8+0x20e2>
        mult = 1 - mult;
 8010c7c:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 8010c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c84:	2100      	movs	r1, #0
 8010c86:	f1d2 0001 	rsbs	r0, r2, #1
 8010c8a:	f8c7 0178 	str.w	r0, [r7, #376]	; 0x178
 8010c8e:	eb61 0303 	sbc.w	r3, r1, r3
 8010c92:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8010c96:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 8010c9a:	f507 62f0 	add.w	r2, r7, #1920	; 0x780
 8010c9e:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8010ca2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010ca6:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8010caa:	681b      	ldr	r3, [r3, #0]
 8010cac:	17da      	asrs	r2, r3, #31
 8010cae:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408
 8010cb2:	f8c7 240c 	str.w	r2, [r7, #1036]	; 0x40c
 8010cb6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010cba:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8010cbe:	681b      	ldr	r3, [r3, #0]
 8010cc0:	17da      	asrs	r2, r3, #31
 8010cc2:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
 8010cc6:	f8c7 2404 	str.w	r2, [r7, #1028]	; 0x404
 8010cca:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8010cce:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010cd2:	460b      	mov	r3, r1
 8010cd4:	f8d7 2400 	ldr.w	r2, [r7, #1024]	; 0x400
 8010cd8:	fb02 f203 	mul.w	r2, r2, r3
 8010cdc:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 8010ce0:	f507 6481 	add.w	r4, r7, #1032	; 0x408
 8010ce4:	e9c4 0100 	strd	r0, r1, [r4]
 8010ce8:	4601      	mov	r1, r0
 8010cea:	fb01 f303 	mul.w	r3, r1, r3
 8010cee:	4413      	add	r3, r2
 8010cf0:	f8d7 2408 	ldr.w	r2, [r7, #1032]	; 0x408
 8010cf4:	f8d7 1400 	ldr.w	r1, [r7, #1024]	; 0x400
 8010cf8:	fba2 1201 	umull	r1, r2, r2, r1
 8010cfc:	f8c7 255c 	str.w	r2, [r7, #1372]	; 0x55c
 8010d00:	460a      	mov	r2, r1
 8010d02:	f8c7 2558 	str.w	r2, [r7, #1368]	; 0x558
 8010d06:	f8d7 255c 	ldr.w	r2, [r7, #1372]	; 0x55c
 8010d0a:	4413      	add	r3, r2
 8010d0c:	f8c7 355c 	str.w	r3, [r7, #1372]	; 0x55c
 8010d10:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 8010d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d18:	f8d7 1558 	ldr.w	r1, [r7, #1368]	; 0x558
 8010d1c:	1851      	adds	r1, r2, r1
 8010d1e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
 8010d22:	f8d7 155c 	ldr.w	r1, [r7, #1372]	; 0x55c
 8010d26:	414b      	adcs	r3, r1
 8010d28:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8010d2c:	e9d7 345c 	ldrd	r3, r4, [r7, #368]	; 0x170
 8010d30:	f507 62f0 	add.w	r2, r7, #1920	; 0x780
 8010d34:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8010d38:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 8010d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d40:	2b00      	cmp	r3, #0
 8010d42:	da0a      	bge.n	8010d5a <arm_softmax_s8+0x219a>
 8010d44:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010d48:	1851      	adds	r1, r2, r1
 8010d4a:	f8c7 1168 	str.w	r1, [r7, #360]	; 0x168
 8010d4e:	f143 0300 	adc.w	r3, r3, #0
 8010d52:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8010d56:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 8010d5a:	f04f 0000 	mov.w	r0, #0
 8010d5e:	f04f 0100 	mov.w	r1, #0
 8010d62:	0fd0      	lsrs	r0, r2, #31
 8010d64:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8010d68:	17d9      	asrs	r1, r3, #31
 8010d6a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010d6e:	f5a3 7208 	sub.w	r2, r3, #544	; 0x220
 8010d72:	4603      	mov	r3, r0
 8010d74:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8010d76:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010d7a:	f5a3 7206 	sub.w	r2, r3, #536	; 0x218
 8010d7e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010d82:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8010d86:	6812      	ldr	r2, [r2, #0]
 8010d88:	681b      	ldr	r3, [r3, #0]
 8010d8a:	429a      	cmp	r2, r3
 8010d8c:	d10e      	bne.n	8010dac <arm_softmax_s8+0x21ec>
 8010d8e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010d92:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8010d96:	681b      	ldr	r3, [r3, #0]
 8010d98:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010d9c:	d106      	bne.n	8010dac <arm_softmax_s8+0x21ec>
        result = Q31_MAX;
 8010d9e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010da2:	f5a3 7208 	sub.w	r2, r3, #544	; 0x220
 8010da6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8010daa:	6013      	str	r3, [r2, #0]
    return result;
 8010dac:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010db0:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8010db4:	681a      	ldr	r2, [r3, #0]
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 8010db6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010dba:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8010dbe:	681b      	ldr	r3, [r3, #0]
 8010dc0:	1a99      	subs	r1, r3, r2
 8010dc2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010dc6:	f5a3 720b 	sub.w	r2, r3, #556	; 0x22c
 8010dca:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010dce:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8010dd2:	681b      	ldr	r3, [r3, #0]
 8010dd4:	6013      	str	r3, [r2, #0]
 8010dd6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010dda:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8010dde:	6019      	str	r1, [r3, #0]
    q31_t result = 0;
 8010de0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010de4:	f5a3 720d 	sub.w	r2, r3, #564	; 0x234
 8010de8:	2300      	movs	r3, #0
 8010dea:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8010dec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8010df0:	f04f 0300 	mov.w	r3, #0
 8010df4:	f507 61ed 	add.w	r1, r7, #1896	; 0x768
 8010df8:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8010dfc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010e00:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8010e04:	681b      	ldr	r3, [r3, #0]
 8010e06:	0fdb      	lsrs	r3, r3, #31
 8010e08:	b2da      	uxtb	r2, r3
 8010e0a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010e0e:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8010e12:	681b      	ldr	r3, [r3, #0]
 8010e14:	0fdb      	lsrs	r3, r3, #31
 8010e16:	b2db      	uxtb	r3, r3
 8010e18:	4053      	eors	r3, r2
 8010e1a:	b2db      	uxtb	r3, r3
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	d012      	beq.n	8010e46 <arm_softmax_s8+0x2286>
        mult = 1 - mult;
 8010e20:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 8010e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e28:	2100      	movs	r1, #0
 8010e2a:	f1d2 0001 	rsbs	r0, r2, #1
 8010e2e:	f8c7 0160 	str.w	r0, [r7, #352]	; 0x160
 8010e32:	eb61 0303 	sbc.w	r3, r1, r3
 8010e36:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8010e3a:	e9d7 3458 	ldrd	r3, r4, [r7, #352]	; 0x160
 8010e3e:	f507 62ed 	add.w	r2, r7, #1896	; 0x768
 8010e42:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8010e46:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010e4a:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8010e4e:	681b      	ldr	r3, [r3, #0]
 8010e50:	17da      	asrs	r2, r3, #31
 8010e52:	f8c7 33f8 	str.w	r3, [r7, #1016]	; 0x3f8
 8010e56:	f8c7 23fc 	str.w	r2, [r7, #1020]	; 0x3fc
 8010e5a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010e5e:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8010e62:	681b      	ldr	r3, [r3, #0]
 8010e64:	17da      	asrs	r2, r3, #31
 8010e66:	f8c7 33f0 	str.w	r3, [r7, #1008]	; 0x3f0
 8010e6a:	f8c7 23f4 	str.w	r2, [r7, #1012]	; 0x3f4
 8010e6e:	e9d7 01fe 	ldrd	r0, r1, [r7, #1016]	; 0x3f8
 8010e72:	460b      	mov	r3, r1
 8010e74:	f8d7 23f0 	ldr.w	r2, [r7, #1008]	; 0x3f0
 8010e78:	fb02 f203 	mul.w	r2, r2, r3
 8010e7c:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 8010e80:	e9c7 01fe 	strd	r0, r1, [r7, #1016]	; 0x3f8
 8010e84:	4601      	mov	r1, r0
 8010e86:	fb01 f303 	mul.w	r3, r1, r3
 8010e8a:	4413      	add	r3, r2
 8010e8c:	f8d7 23f8 	ldr.w	r2, [r7, #1016]	; 0x3f8
 8010e90:	f8d7 13f0 	ldr.w	r1, [r7, #1008]	; 0x3f0
 8010e94:	fba2 1201 	umull	r1, r2, r2, r1
 8010e98:	f8c7 2554 	str.w	r2, [r7, #1364]	; 0x554
 8010e9c:	460a      	mov	r2, r1
 8010e9e:	f8c7 2550 	str.w	r2, [r7, #1360]	; 0x550
 8010ea2:	f8d7 2554 	ldr.w	r2, [r7, #1364]	; 0x554
 8010ea6:	4413      	add	r3, r2
 8010ea8:	f8c7 3554 	str.w	r3, [r7, #1364]	; 0x554
 8010eac:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 8010eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010eb4:	f8d7 1550 	ldr.w	r1, [r7, #1360]	; 0x550
 8010eb8:	1851      	adds	r1, r2, r1
 8010eba:	f8c7 1158 	str.w	r1, [r7, #344]	; 0x158
 8010ebe:	f8d7 1554 	ldr.w	r1, [r7, #1364]	; 0x554
 8010ec2:	414b      	adcs	r3, r1
 8010ec4:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8010ec8:	e9d7 3456 	ldrd	r3, r4, [r7, #344]	; 0x158
 8010ecc:	f507 62ed 	add.w	r2, r7, #1896	; 0x768
 8010ed0:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8010ed4:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 8010ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010edc:	2b00      	cmp	r3, #0
 8010ede:	da0a      	bge.n	8010ef6 <arm_softmax_s8+0x2336>
 8010ee0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010ee4:	1851      	adds	r1, r2, r1
 8010ee6:	f8c7 1150 	str.w	r1, [r7, #336]	; 0x150
 8010eea:	f143 0300 	adc.w	r3, r3, #0
 8010eee:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8010ef2:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 8010ef6:	f04f 0000 	mov.w	r0, #0
 8010efa:	f04f 0100 	mov.w	r1, #0
 8010efe:	0fd0      	lsrs	r0, r2, #31
 8010f00:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8010f04:	17d9      	asrs	r1, r3, #31
 8010f06:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010f0a:	f5a3 720d 	sub.w	r2, r3, #564	; 0x234
 8010f0e:	4603      	mov	r3, r0
 8010f10:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8010f12:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010f16:	f5a3 720b 	sub.w	r2, r3, #556	; 0x22c
 8010f1a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010f1e:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8010f22:	6812      	ldr	r2, [r2, #0]
 8010f24:	681b      	ldr	r3, [r3, #0]
 8010f26:	429a      	cmp	r2, r3
 8010f28:	d10e      	bne.n	8010f48 <arm_softmax_s8+0x2388>
 8010f2a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010f2e:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8010f32:	681b      	ldr	r3, [r3, #0]
 8010f34:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010f38:	d106      	bne.n	8010f48 <arm_softmax_s8+0x2388>
        result = Q31_MAX;
 8010f3a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010f3e:	f5a3 720d 	sub.w	r2, r3, #564	; 0x234
 8010f42:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8010f46:	6013      	str	r3, [r2, #0]
    return result;
 8010f48:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010f4c:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 8010f50:	681a      	ldr	r2, [r3, #0]
 8010f52:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010f56:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8010f5a:	601a      	str	r2, [r3, #0]
    const int32_t thresh = ((1 << (31 - exp)) - 1);
 8010f5c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8010f60:	4619      	mov	r1, r3
 8010f62:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010f66:	f5a3 7212 	sub.w	r2, r3, #584	; 0x248
 8010f6a:	1e4b      	subs	r3, r1, #1
 8010f6c:	6013      	str	r3, [r2, #0]
    int32_t result = val << exp;
 8010f6e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010f72:	f5a3 7213 	sub.w	r2, r3, #588	; 0x24c
 8010f76:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010f7a:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8010f7e:	681b      	ldr	r3, [r3, #0]
 8010f80:	009b      	lsls	r3, r3, #2
 8010f82:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
 8010f84:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010f88:	f5a3 7211 	sub.w	r2, r3, #580	; 0x244
 8010f8c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010f90:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8010f94:	6812      	ldr	r2, [r2, #0]
 8010f96:	681b      	ldr	r3, [r3, #0]
 8010f98:	429a      	cmp	r2, r3
 8010f9a:	dd02      	ble.n	8010fa2 <arm_softmax_s8+0x23e2>
 8010f9c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8010fa0:	e000      	b.n	8010fa4 <arm_softmax_s8+0x23e4>
 8010fa2:	2000      	movs	r0, #0
 8010fa4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010fa8:	f5a3 7211 	sub.w	r2, r3, #580	; 0x244
 8010fac:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010fb0:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8010fb4:	6812      	ldr	r2, [r2, #0]
 8010fb6:	681b      	ldr	r3, [r3, #0]
 8010fb8:	429a      	cmp	r2, r3
 8010fba:	dd01      	ble.n	8010fc0 <arm_softmax_s8+0x2400>
 8010fbc:	2200      	movs	r2, #0
 8010fbe:	e001      	b.n	8010fc4 <arm_softmax_s8+0x2404>
 8010fc0:	f04f 32ff 	mov.w	r2, #4294967295
 8010fc4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010fc8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8010fcc:	681b      	ldr	r3, [r3, #0]
 8010fce:	ea02 0103 	and.w	r1, r2, r3
 8010fd2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010fd6:	f5a3 7213 	sub.w	r2, r3, #588	; 0x24c
 8010fda:	ea81 0300 	eor.w	r3, r1, r0
 8010fde:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
 8010fe0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010fe4:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8010fe8:	681b      	ldr	r3, [r3, #0]
 8010fea:	425a      	negs	r2, r3
 8010fec:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010ff0:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8010ff4:	681b      	ldr	r3, [r3, #0]
 8010ff6:	4293      	cmp	r3, r2
 8010ff8:	da02      	bge.n	8011000 <arm_softmax_s8+0x2440>
 8010ffa:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8010ffe:	e000      	b.n	8011002 <arm_softmax_s8+0x2442>
 8011000:	2000      	movs	r0, #0
 8011002:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011006:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 801100a:	681b      	ldr	r3, [r3, #0]
 801100c:	425a      	negs	r2, r3
 801100e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011012:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8011016:	681b      	ldr	r3, [r3, #0]
 8011018:	4293      	cmp	r3, r2
 801101a:	da05      	bge.n	8011028 <arm_softmax_s8+0x2468>
 801101c:	2200      	movs	r2, #0
 801101e:	e005      	b.n	801102c <arm_softmax_s8+0x246c>
 8011020:	c3c3c3c4 	.word	0xc3c3c3c4
 8011024:	ffffffff 	.word	0xffffffff
 8011028:	f04f 32ff 	mov.w	r2, #4294967295
 801102c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011030:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8011034:	681b      	ldr	r3, [r3, #0]
 8011036:	ea02 0103 	and.w	r1, r2, r3
 801103a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801103e:	f5a3 7213 	sub.w	r2, r3, #588	; 0x24c
 8011042:	ea81 0300 	eor.w	r3, r1, r0
 8011046:	6013      	str	r3, [r2, #0]
    return result;
 8011048:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801104c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8011050:	6819      	ldr	r1, [r3, #0]
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 8011052:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011056:	f5a3 72ce 	sub.w	r2, r3, #412	; 0x19c
 801105a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801105e:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8011062:	681b      	ldr	r3, [r3, #0]
 8011064:	440b      	add	r3, r1
 8011066:	6013      	str	r3, [r2, #0]
 8011068:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801106c:	f5a3 7214 	sub.w	r2, r3, #592	; 0x250
 8011070:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011074:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8011078:	681b      	ldr	r3, [r3, #0]
 801107a:	6013      	str	r3, [r2, #0]
    const int32_t thresh = ((1 << (31 - exp)) - 1);
 801107c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011080:	4619      	mov	r1, r3
 8011082:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011086:	f5a3 7215 	sub.w	r2, r3, #596	; 0x254
 801108a:	1e4b      	subs	r3, r1, #1
 801108c:	6013      	str	r3, [r2, #0]
    int32_t result = val << exp;
 801108e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011092:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 8011096:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801109a:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 801109e:	681b      	ldr	r3, [r3, #0]
 80110a0:	005b      	lsls	r3, r3, #1
 80110a2:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
 80110a4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80110a8:	f5a3 7214 	sub.w	r2, r3, #592	; 0x250
 80110ac:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80110b0:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 80110b4:	6812      	ldr	r2, [r2, #0]
 80110b6:	681b      	ldr	r3, [r3, #0]
 80110b8:	429a      	cmp	r2, r3
 80110ba:	dd02      	ble.n	80110c2 <arm_softmax_s8+0x2502>
 80110bc:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 80110c0:	e000      	b.n	80110c4 <arm_softmax_s8+0x2504>
 80110c2:	2000      	movs	r0, #0
 80110c4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80110c8:	f5a3 7214 	sub.w	r2, r3, #592	; 0x250
 80110cc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80110d0:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 80110d4:	6812      	ldr	r2, [r2, #0]
 80110d6:	681b      	ldr	r3, [r3, #0]
 80110d8:	429a      	cmp	r2, r3
 80110da:	dd01      	ble.n	80110e0 <arm_softmax_s8+0x2520>
 80110dc:	2200      	movs	r2, #0
 80110de:	e001      	b.n	80110e4 <arm_softmax_s8+0x2524>
 80110e0:	f04f 32ff 	mov.w	r2, #4294967295
 80110e4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80110e8:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80110ec:	681b      	ldr	r3, [r3, #0]
 80110ee:	ea02 0103 	and.w	r1, r2, r3
 80110f2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80110f6:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 80110fa:	ea81 0300 	eor.w	r3, r1, r0
 80110fe:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
 8011100:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011104:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8011108:	681b      	ldr	r3, [r3, #0]
 801110a:	425a      	negs	r2, r3
 801110c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011110:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 8011114:	681b      	ldr	r3, [r3, #0]
 8011116:	4293      	cmp	r3, r2
 8011118:	da02      	bge.n	8011120 <arm_softmax_s8+0x2560>
 801111a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 801111e:	e000      	b.n	8011122 <arm_softmax_s8+0x2562>
 8011120:	2000      	movs	r0, #0
 8011122:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011126:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 801112a:	681b      	ldr	r3, [r3, #0]
 801112c:	425a      	negs	r2, r3
 801112e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011132:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 8011136:	681b      	ldr	r3, [r3, #0]
 8011138:	4293      	cmp	r3, r2
 801113a:	da01      	bge.n	8011140 <arm_softmax_s8+0x2580>
 801113c:	2200      	movs	r2, #0
 801113e:	e001      	b.n	8011144 <arm_softmax_s8+0x2584>
 8011140:	f04f 32ff 	mov.w	r2, #4294967295
 8011144:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011148:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 801114c:	681b      	ldr	r3, [r3, #0]
 801114e:	ea02 0103 	and.w	r1, r2, r3
 8011152:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011156:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 801115a:	ea81 0300 	eor.w	r3, r1, r0
 801115e:	6013      	str	r3, [r2, #0]
    return result;
 8011160:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011164:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8011168:	681b      	ldr	r3, [r3, #0]

    return MUL_POW2(x, 1);
 801116a:	bf00      	nop
 801116c:	f8c7 3984 	str.w	r3, [r7, #2436]	; 0x984

        for (col = 0; col < row_size; ++col)
 8011170:	2300      	movs	r3, #0
 8011172:	f8c7 39a4 	str.w	r3, [r7, #2468]	; 0x9a4
 8011176:	f001 bd85 	b.w	8012c84 <arm_softmax_s8+0x40c4>
        {
            diff = input[col] - max;
 801117a:	f8d7 29a4 	ldr.w	r2, [r7, #2468]	; 0x9a4
 801117e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011182:	f5a3 7371 	sub.w	r3, r3, #964	; 0x3c4
 8011186:	681b      	ldr	r3, [r3, #0]
 8011188:	4413      	add	r3, r2
 801118a:	f993 3000 	ldrsb.w	r3, [r3]
 801118e:	461a      	mov	r2, r3
 8011190:	f997 399f 	ldrsb.w	r3, [r7, #2463]	; 0x99f
 8011194:	1ad3      	subs	r3, r2, r3
 8011196:	f8c7 3990 	str.w	r3, [r7, #2448]	; 0x990
            if (diff >= diff_min)
 801119a:	f8d7 2990 	ldr.w	r2, [r7, #2448]	; 0x990
 801119e:	f8d7 39cc 	ldr.w	r3, [r7, #2508]	; 0x9cc
 80111a2:	429a      	cmp	r2, r3
 80111a4:	f2c1 8562 	blt.w	8012c6c <arm_softmax_s8+0x40ac>
            {
                const int32_t res =
                    DIV_POW2(MUL_SAT(shifted_scale, EXP_ON_NEG(MUL_SAT(diff * mask, mult))), bits_over_unit) - 128;
 80111a8:	f8d7 2990 	ldr.w	r2, [r7, #2448]	; 0x990
 80111ac:	f8d7 3994 	ldr.w	r3, [r7, #2452]	; 0x994
 80111b0:	fb03 f202 	mul.w	r2, r3, r2
 80111b4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80111b8:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 80111bc:	601a      	str	r2, [r3, #0]
 80111be:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80111c2:	f5a3 726c 	sub.w	r2, r3, #944	; 0x3b0
 80111c6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80111ca:	f5a3 7374 	sub.w	r3, r3, #976	; 0x3d0
 80111ce:	681b      	ldr	r3, [r3, #0]
 80111d0:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 80111d2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80111d6:	f5a3 726d 	sub.w	r2, r3, #948	; 0x3b4
 80111da:	2300      	movs	r3, #0
 80111dc:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 80111de:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80111e2:	f04f 0300 	mov.w	r3, #0
 80111e6:	f507 61bd 	add.w	r1, r7, #1512	; 0x5e8
 80111ea:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 80111ee:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80111f2:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 80111f6:	681b      	ldr	r3, [r3, #0]
 80111f8:	0fdb      	lsrs	r3, r3, #31
 80111fa:	b2da      	uxtb	r2, r3
 80111fc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011200:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 8011204:	681b      	ldr	r3, [r3, #0]
 8011206:	0fdb      	lsrs	r3, r3, #31
 8011208:	b2db      	uxtb	r3, r3
 801120a:	4053      	eors	r3, r2
 801120c:	b2db      	uxtb	r3, r3
 801120e:	2b00      	cmp	r3, #0
 8011210:	d012      	beq.n	8011238 <arm_softmax_s8+0x2678>
        mult = 1 - mult;
 8011212:	f507 63bd 	add.w	r3, r7, #1512	; 0x5e8
 8011216:	e9d3 2300 	ldrd	r2, r3, [r3]
 801121a:	2100      	movs	r1, #0
 801121c:	f1d2 0001 	rsbs	r0, r2, #1
 8011220:	f8c7 0148 	str.w	r0, [r7, #328]	; 0x148
 8011224:	eb61 0303 	sbc.w	r3, r1, r3
 8011228:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 801122c:	e9d7 3452 	ldrd	r3, r4, [r7, #328]	; 0x148
 8011230:	f507 62bd 	add.w	r2, r7, #1512	; 0x5e8
 8011234:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8011238:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801123c:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 8011240:	681b      	ldr	r3, [r3, #0]
 8011242:	17da      	asrs	r2, r3, #31
 8011244:	f8c7 3360 	str.w	r3, [r7, #864]	; 0x360
 8011248:	f8c7 2364 	str.w	r2, [r7, #868]	; 0x364
 801124c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011250:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 8011254:	681b      	ldr	r3, [r3, #0]
 8011256:	17da      	asrs	r2, r3, #31
 8011258:	f8c7 3358 	str.w	r3, [r7, #856]	; 0x358
 801125c:	f8c7 235c 	str.w	r2, [r7, #860]	; 0x35c
 8011260:	e9d7 01d8 	ldrd	r0, r1, [r7, #864]	; 0x360
 8011264:	460b      	mov	r3, r1
 8011266:	f8d7 2358 	ldr.w	r2, [r7, #856]	; 0x358
 801126a:	fb02 f203 	mul.w	r2, r2, r3
 801126e:	f8d7 335c 	ldr.w	r3, [r7, #860]	; 0x35c
 8011272:	e9c7 01d8 	strd	r0, r1, [r7, #864]	; 0x360
 8011276:	4601      	mov	r1, r0
 8011278:	fb01 f303 	mul.w	r3, r1, r3
 801127c:	4413      	add	r3, r2
 801127e:	f8d7 2360 	ldr.w	r2, [r7, #864]	; 0x360
 8011282:	f8d7 1358 	ldr.w	r1, [r7, #856]	; 0x358
 8011286:	fba2 1201 	umull	r1, r2, r2, r1
 801128a:	f8c7 24e4 	str.w	r2, [r7, #1252]	; 0x4e4
 801128e:	460a      	mov	r2, r1
 8011290:	f8c7 24e0 	str.w	r2, [r7, #1248]	; 0x4e0
 8011294:	f8d7 24e4 	ldr.w	r2, [r7, #1252]	; 0x4e4
 8011298:	4413      	add	r3, r2
 801129a:	f8c7 34e4 	str.w	r3, [r7, #1252]	; 0x4e4
 801129e:	f507 63bd 	add.w	r3, r7, #1512	; 0x5e8
 80112a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112a6:	f8d7 14e0 	ldr.w	r1, [r7, #1248]	; 0x4e0
 80112aa:	1851      	adds	r1, r2, r1
 80112ac:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
 80112b0:	f8d7 14e4 	ldr.w	r1, [r7, #1252]	; 0x4e4
 80112b4:	414b      	adcs	r3, r1
 80112b6:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 80112ba:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 80112be:	f507 62bd 	add.w	r2, r7, #1512	; 0x5e8
 80112c2:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 80112c6:	f507 63bd 	add.w	r3, r7, #1512	; 0x5e8
 80112ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112ce:	2b00      	cmp	r3, #0
 80112d0:	da0a      	bge.n	80112e8 <arm_softmax_s8+0x2728>
 80112d2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80112d6:	1851      	adds	r1, r2, r1
 80112d8:	f8c7 1138 	str.w	r1, [r7, #312]	; 0x138
 80112dc:	f143 0300 	adc.w	r3, r3, #0
 80112e0:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 80112e4:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 80112e8:	f04f 0000 	mov.w	r0, #0
 80112ec:	f04f 0100 	mov.w	r1, #0
 80112f0:	0fd0      	lsrs	r0, r2, #31
 80112f2:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 80112f6:	17d9      	asrs	r1, r3, #31
 80112f8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80112fc:	f5a3 726d 	sub.w	r2, r3, #948	; 0x3b4
 8011300:	4603      	mov	r3, r0
 8011302:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8011304:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011308:	f5a3 726b 	sub.w	r2, r3, #940	; 0x3ac
 801130c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011310:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 8011314:	6812      	ldr	r2, [r2, #0]
 8011316:	681b      	ldr	r3, [r3, #0]
 8011318:	429a      	cmp	r2, r3
 801131a:	d10e      	bne.n	801133a <arm_softmax_s8+0x277a>
 801131c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011320:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 8011324:	681b      	ldr	r3, [r3, #0]
 8011326:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801132a:	d106      	bne.n	801133a <arm_softmax_s8+0x277a>
        result = Q31_MAX;
 801132c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011330:	f5a3 726d 	sub.w	r2, r3, #948	; 0x3b4
 8011334:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8011338:	6013      	str	r3, [r2, #0]
    return result;
 801133a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801133e:	f5a3 736d 	sub.w	r3, r3, #948	; 0x3b4
 8011342:	681a      	ldr	r2, [r3, #0]
 8011344:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011348:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 801134c:	601a      	str	r2, [r3, #0]
    int32_t mask = 0;
 801134e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011352:	f5a3 7224 	sub.w	r2, r3, #656	; 0x290
 8011356:	2300      	movs	r3, #0
 8011358:	6013      	str	r3, [r2, #0]
    int32_t shift = 24;
 801135a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801135e:	f5a3 7225 	sub.w	r2, r3, #660	; 0x294
 8011362:	2318      	movs	r3, #24
 8011364:	6013      	str	r3, [r2, #0]
    const int32_t val_mod_minus_quarter = (val & ((1 << shift) - 1)) - (1 << shift);
 8011366:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801136a:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 801136e:	2201      	movs	r2, #1
 8011370:	681b      	ldr	r3, [r3, #0]
 8011372:	fa02 f303 	lsl.w	r3, r2, r3
 8011376:	1e5a      	subs	r2, r3, #1
 8011378:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801137c:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 8011380:	681b      	ldr	r3, [r3, #0]
 8011382:	ea02 0003 	and.w	r0, r2, r3
 8011386:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801138a:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 801138e:	2201      	movs	r2, #1
 8011390:	681b      	ldr	r3, [r3, #0]
 8011392:	fa02 f103 	lsl.w	r1, r2, r3
 8011396:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801139a:	f5a3 7226 	sub.w	r2, r3, #664	; 0x298
 801139e:	1a43      	subs	r3, r0, r1
 80113a0:	6013      	str	r3, [r2, #0]
    const int32_t remainder = val_mod_minus_quarter - val;
 80113a2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80113a6:	f5a3 7127 	sub.w	r1, r3, #668	; 0x29c
 80113aa:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80113ae:	f5a3 7226 	sub.w	r2, r3, #664	; 0x298
 80113b2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80113b6:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 80113ba:	6812      	ldr	r2, [r2, #0]
 80113bc:	681b      	ldr	r3, [r3, #0]
 80113be:	1ad3      	subs	r3, r2, r3
 80113c0:	600b      	str	r3, [r1, #0]
    const int32_t x = (val_mod_minus_quarter << 5) + (1 << 28);
 80113c2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80113c6:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 80113ca:	681b      	ldr	r3, [r3, #0]
 80113cc:	0159      	lsls	r1, r3, #5
 80113ce:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80113d2:	f5a3 7228 	sub.w	r2, r3, #672	; 0x2a0
 80113d6:	f101 5380 	add.w	r3, r1, #268435456	; 0x10000000
 80113da:	6013      	str	r3, [r2, #0]
 80113dc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80113e0:	f5a3 7229 	sub.w	r2, r3, #676	; 0x2a4
 80113e4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80113e8:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 80113ec:	681b      	ldr	r3, [r3, #0]
 80113ee:	6013      	str	r3, [r2, #0]
 80113f0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80113f4:	f5a3 722a 	sub.w	r2, r3, #680	; 0x2a8
 80113f8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80113fc:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8011400:	681b      	ldr	r3, [r3, #0]
 8011402:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8011404:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011408:	f5a3 722b 	sub.w	r2, r3, #684	; 0x2ac
 801140c:	2300      	movs	r3, #0
 801140e:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8011410:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8011414:	f04f 0300 	mov.w	r3, #0
 8011418:	f507 61de 	add.w	r1, r7, #1776	; 0x6f0
 801141c:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8011420:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011424:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 8011428:	681b      	ldr	r3, [r3, #0]
 801142a:	0fdb      	lsrs	r3, r3, #31
 801142c:	b2da      	uxtb	r2, r3
 801142e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011432:	f5a3 732a 	sub.w	r3, r3, #680	; 0x2a8
 8011436:	681b      	ldr	r3, [r3, #0]
 8011438:	0fdb      	lsrs	r3, r3, #31
 801143a:	b2db      	uxtb	r3, r3
 801143c:	4053      	eors	r3, r2
 801143e:	b2db      	uxtb	r3, r3
 8011440:	2b00      	cmp	r3, #0
 8011442:	d012      	beq.n	801146a <arm_softmax_s8+0x28aa>
        mult = 1 - mult;
 8011444:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 8011448:	e9d3 2300 	ldrd	r2, r3, [r3]
 801144c:	2100      	movs	r1, #0
 801144e:	f1d2 0001 	rsbs	r0, r2, #1
 8011452:	f8c7 0130 	str.w	r0, [r7, #304]	; 0x130
 8011456:	eb61 0303 	sbc.w	r3, r1, r3
 801145a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 801145e:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 8011462:	f507 62de 	add.w	r2, r7, #1776	; 0x6f0
 8011466:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 801146a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801146e:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 8011472:	681b      	ldr	r3, [r3, #0]
 8011474:	17da      	asrs	r2, r3, #31
 8011476:	f8c7 33d8 	str.w	r3, [r7, #984]	; 0x3d8
 801147a:	f8c7 23dc 	str.w	r2, [r7, #988]	; 0x3dc
 801147e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011482:	f5a3 732a 	sub.w	r3, r3, #680	; 0x2a8
 8011486:	681b      	ldr	r3, [r3, #0]
 8011488:	17da      	asrs	r2, r3, #31
 801148a:	f8c7 33d0 	str.w	r3, [r7, #976]	; 0x3d0
 801148e:	f8c7 23d4 	str.w	r2, [r7, #980]	; 0x3d4
 8011492:	e9d7 01f6 	ldrd	r0, r1, [r7, #984]	; 0x3d8
 8011496:	460b      	mov	r3, r1
 8011498:	f8d7 23d0 	ldr.w	r2, [r7, #976]	; 0x3d0
 801149c:	fb02 f203 	mul.w	r2, r2, r3
 80114a0:	f8d7 33d4 	ldr.w	r3, [r7, #980]	; 0x3d4
 80114a4:	e9c7 01f6 	strd	r0, r1, [r7, #984]	; 0x3d8
 80114a8:	4601      	mov	r1, r0
 80114aa:	fb01 f303 	mul.w	r3, r1, r3
 80114ae:	4413      	add	r3, r2
 80114b0:	f8d7 23d8 	ldr.w	r2, [r7, #984]	; 0x3d8
 80114b4:	f8d7 13d0 	ldr.w	r1, [r7, #976]	; 0x3d0
 80114b8:	fba2 1201 	umull	r1, r2, r2, r1
 80114bc:	f8c7 2544 	str.w	r2, [r7, #1348]	; 0x544
 80114c0:	460a      	mov	r2, r1
 80114c2:	f8c7 2540 	str.w	r2, [r7, #1344]	; 0x540
 80114c6:	f8d7 2544 	ldr.w	r2, [r7, #1348]	; 0x544
 80114ca:	4413      	add	r3, r2
 80114cc:	f8c7 3544 	str.w	r3, [r7, #1348]	; 0x544
 80114d0:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 80114d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114d8:	f8d7 1540 	ldr.w	r1, [r7, #1344]	; 0x540
 80114dc:	1851      	adds	r1, r2, r1
 80114de:	f8c7 1128 	str.w	r1, [r7, #296]	; 0x128
 80114e2:	f8d7 1544 	ldr.w	r1, [r7, #1348]	; 0x544
 80114e6:	414b      	adcs	r3, r1
 80114e8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80114ec:	e9d7 344a 	ldrd	r3, r4, [r7, #296]	; 0x128
 80114f0:	f507 62de 	add.w	r2, r7, #1776	; 0x6f0
 80114f4:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 80114f8:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 80114fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011500:	2b00      	cmp	r3, #0
 8011502:	da0a      	bge.n	801151a <arm_softmax_s8+0x295a>
 8011504:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011508:	1851      	adds	r1, r2, r1
 801150a:	f8c7 1120 	str.w	r1, [r7, #288]	; 0x120
 801150e:	f143 0300 	adc.w	r3, r3, #0
 8011512:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8011516:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 801151a:	f04f 0000 	mov.w	r0, #0
 801151e:	f04f 0100 	mov.w	r1, #0
 8011522:	0fd0      	lsrs	r0, r2, #31
 8011524:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8011528:	17d9      	asrs	r1, r3, #31
 801152a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801152e:	f5a3 722b 	sub.w	r2, r3, #684	; 0x2ac
 8011532:	4603      	mov	r3, r0
 8011534:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8011536:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801153a:	f5a3 7229 	sub.w	r2, r3, #676	; 0x2a4
 801153e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011542:	f5a3 732a 	sub.w	r3, r3, #680	; 0x2a8
 8011546:	6812      	ldr	r2, [r2, #0]
 8011548:	681b      	ldr	r3, [r3, #0]
 801154a:	429a      	cmp	r2, r3
 801154c:	d10e      	bne.n	801156c <arm_softmax_s8+0x29ac>
 801154e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011552:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 8011556:	681b      	ldr	r3, [r3, #0]
 8011558:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801155c:	d106      	bne.n	801156c <arm_softmax_s8+0x29ac>
        result = Q31_MAX;
 801155e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011562:	f5a3 722b 	sub.w	r2, r3, #684	; 0x2ac
 8011566:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801156a:	6013      	str	r3, [r2, #0]
    return result;
 801156c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011570:	f5a3 732b 	sub.w	r3, r3, #684	; 0x2ac
 8011574:	681a      	ldr	r2, [r3, #0]
    const int32_t x2 = MUL_SAT(x, x);
 8011576:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801157a:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 801157e:	601a      	str	r2, [r3, #0]
 8011580:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011584:	f5a3 7230 	sub.w	r2, r3, #704	; 0x2c0
 8011588:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801158c:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 8011590:	681b      	ldr	r3, [r3, #0]
 8011592:	6013      	str	r3, [r2, #0]
 8011594:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011598:	f5a3 7231 	sub.w	r2, r3, #708	; 0x2c4
 801159c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80115a0:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 80115a4:	681b      	ldr	r3, [r3, #0]
 80115a6:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 80115a8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80115ac:	f5a3 7232 	sub.w	r2, r3, #712	; 0x2c8
 80115b0:	2300      	movs	r3, #0
 80115b2:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 80115b4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80115b8:	f04f 0300 	mov.w	r3, #0
 80115bc:	f507 61db 	add.w	r1, r7, #1752	; 0x6d8
 80115c0:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 80115c4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80115c8:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 80115cc:	681b      	ldr	r3, [r3, #0]
 80115ce:	0fdb      	lsrs	r3, r3, #31
 80115d0:	b2da      	uxtb	r2, r3
 80115d2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80115d6:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 80115da:	681b      	ldr	r3, [r3, #0]
 80115dc:	0fdb      	lsrs	r3, r3, #31
 80115de:	b2db      	uxtb	r3, r3
 80115e0:	4053      	eors	r3, r2
 80115e2:	b2db      	uxtb	r3, r3
 80115e4:	2b00      	cmp	r3, #0
 80115e6:	d012      	beq.n	801160e <arm_softmax_s8+0x2a4e>
        mult = 1 - mult;
 80115e8:	f507 63db 	add.w	r3, r7, #1752	; 0x6d8
 80115ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115f0:	2100      	movs	r1, #0
 80115f2:	f1d2 0001 	rsbs	r0, r2, #1
 80115f6:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118
 80115fa:	eb61 0303 	sbc.w	r3, r1, r3
 80115fe:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8011602:	e9d7 3446 	ldrd	r3, r4, [r7, #280]	; 0x118
 8011606:	f507 62db 	add.w	r2, r7, #1752	; 0x6d8
 801160a:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 801160e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011612:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 8011616:	681b      	ldr	r3, [r3, #0]
 8011618:	17da      	asrs	r2, r3, #31
 801161a:	f8c7 33c8 	str.w	r3, [r7, #968]	; 0x3c8
 801161e:	f8c7 23cc 	str.w	r2, [r7, #972]	; 0x3cc
 8011622:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011626:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 801162a:	681b      	ldr	r3, [r3, #0]
 801162c:	17da      	asrs	r2, r3, #31
 801162e:	f8c7 33c0 	str.w	r3, [r7, #960]	; 0x3c0
 8011632:	f8c7 23c4 	str.w	r2, [r7, #964]	; 0x3c4
 8011636:	e9d7 01f2 	ldrd	r0, r1, [r7, #968]	; 0x3c8
 801163a:	460b      	mov	r3, r1
 801163c:	f8d7 23c0 	ldr.w	r2, [r7, #960]	; 0x3c0
 8011640:	fb02 f203 	mul.w	r2, r2, r3
 8011644:	f8d7 33c4 	ldr.w	r3, [r7, #964]	; 0x3c4
 8011648:	e9c7 01f2 	strd	r0, r1, [r7, #968]	; 0x3c8
 801164c:	4601      	mov	r1, r0
 801164e:	fb01 f303 	mul.w	r3, r1, r3
 8011652:	4413      	add	r3, r2
 8011654:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 8011658:	f8d7 13c0 	ldr.w	r1, [r7, #960]	; 0x3c0
 801165c:	fba2 1201 	umull	r1, r2, r2, r1
 8011660:	f8c7 253c 	str.w	r2, [r7, #1340]	; 0x53c
 8011664:	460a      	mov	r2, r1
 8011666:	f8c7 2538 	str.w	r2, [r7, #1336]	; 0x538
 801166a:	f8d7 253c 	ldr.w	r2, [r7, #1340]	; 0x53c
 801166e:	4413      	add	r3, r2
 8011670:	f8c7 353c 	str.w	r3, [r7, #1340]	; 0x53c
 8011674:	f507 63db 	add.w	r3, r7, #1752	; 0x6d8
 8011678:	e9d3 2300 	ldrd	r2, r3, [r3]
 801167c:	f8d7 1538 	ldr.w	r1, [r7, #1336]	; 0x538
 8011680:	1851      	adds	r1, r2, r1
 8011682:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
 8011686:	f8d7 153c 	ldr.w	r1, [r7, #1340]	; 0x53c
 801168a:	414b      	adcs	r3, r1
 801168c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8011690:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 8011694:	f507 62db 	add.w	r2, r7, #1752	; 0x6d8
 8011698:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 801169c:	f507 63db 	add.w	r3, r7, #1752	; 0x6d8
 80116a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116a4:	2b00      	cmp	r3, #0
 80116a6:	da0a      	bge.n	80116be <arm_softmax_s8+0x2afe>
 80116a8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80116ac:	1851      	adds	r1, r2, r1
 80116ae:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 80116b2:	f143 0300 	adc.w	r3, r3, #0
 80116b6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80116ba:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 80116be:	f04f 0000 	mov.w	r0, #0
 80116c2:	f04f 0100 	mov.w	r1, #0
 80116c6:	0fd0      	lsrs	r0, r2, #31
 80116c8:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 80116cc:	17d9      	asrs	r1, r3, #31
 80116ce:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80116d2:	f5a3 7232 	sub.w	r2, r3, #712	; 0x2c8
 80116d6:	4603      	mov	r3, r0
 80116d8:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 80116da:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80116de:	f5a3 7230 	sub.w	r2, r3, #704	; 0x2c0
 80116e2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80116e6:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 80116ea:	6812      	ldr	r2, [r2, #0]
 80116ec:	681b      	ldr	r3, [r3, #0]
 80116ee:	429a      	cmp	r2, r3
 80116f0:	d10e      	bne.n	8011710 <arm_softmax_s8+0x2b50>
 80116f2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80116f6:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 80116fa:	681b      	ldr	r3, [r3, #0]
 80116fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011700:	d106      	bne.n	8011710 <arm_softmax_s8+0x2b50>
        result = Q31_MAX;
 8011702:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011706:	f5a3 7232 	sub.w	r2, r3, #712	; 0x2c8
 801170a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801170e:	6013      	str	r3, [r2, #0]
    return result;
 8011710:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011714:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 8011718:	681a      	ldr	r2, [r3, #0]
 801171a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801171e:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 8011722:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 8011724:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011728:	f5a3 7236 	sub.w	r2, r3, #728	; 0x2d8
 801172c:	2300      	movs	r3, #0
 801172e:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 8011730:	2104      	movs	r1, #4
 8011732:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011736:	f5a3 7237 	sub.w	r2, r3, #732	; 0x2dc
 801173a:	1e4b      	subs	r3, r1, #1
 801173c:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 801173e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011742:	f5a3 7138 	sub.w	r1, r3, #736	; 0x2e0
 8011746:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801174a:	f5a3 7235 	sub.w	r2, r3, #724	; 0x2d4
 801174e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011752:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 8011756:	6812      	ldr	r2, [r2, #0]
 8011758:	681b      	ldr	r3, [r3, #0]
 801175a:	4013      	ands	r3, r2
 801175c:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 801175e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011762:	f5a3 7236 	sub.w	r2, r3, #728	; 0x2d8
 8011766:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801176a:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 801176e:	681b      	ldr	r3, [r3, #0]
 8011770:	109b      	asrs	r3, r3, #2
 8011772:	6013      	str	r3, [r2, #0]
    q31_t threshold = remainder_mask >> 1;
 8011774:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011778:	f5a3 7239 	sub.w	r2, r3, #740	; 0x2e4
 801177c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011780:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 8011784:	681b      	ldr	r3, [r3, #0]
 8011786:	105b      	asrs	r3, r3, #1
 8011788:	6013      	str	r3, [r2, #0]
    if (result < 0)
 801178a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801178e:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8011792:	681b      	ldr	r3, [r3, #0]
 8011794:	2b00      	cmp	r3, #0
 8011796:	da0a      	bge.n	80117ae <arm_softmax_s8+0x2bee>
        threshold++;
 8011798:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801179c:	f5a3 7239 	sub.w	r2, r3, #740	; 0x2e4
 80117a0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80117a4:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 80117a8:	681b      	ldr	r3, [r3, #0]
 80117aa:	3301      	adds	r3, #1
 80117ac:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 80117ae:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80117b2:	f5a3 7238 	sub.w	r2, r3, #736	; 0x2e0
 80117b6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80117ba:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 80117be:	6812      	ldr	r2, [r2, #0]
 80117c0:	681b      	ldr	r3, [r3, #0]
 80117c2:	429a      	cmp	r2, r3
 80117c4:	dd0a      	ble.n	80117dc <arm_softmax_s8+0x2c1c>
        result++;
 80117c6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80117ca:	f5a3 7236 	sub.w	r2, r3, #728	; 0x2d8
 80117ce:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80117d2:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 80117d6:	681b      	ldr	r3, [r3, #0]
 80117d8:	3301      	adds	r3, #1
 80117da:	6013      	str	r3, [r2, #0]
    return result;
 80117dc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80117e0:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 80117e4:	681c      	ldr	r4, [r3, #0]
 80117e6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80117ea:	f5a3 723a 	sub.w	r2, r3, #744	; 0x2e8
 80117ee:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80117f2:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 80117f6:	681b      	ldr	r3, [r3, #0]
 80117f8:	6013      	str	r3, [r2, #0]
 80117fa:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80117fe:	f5a3 723b 	sub.w	r2, r3, #748	; 0x2ec
 8011802:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011806:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 801180a:	681b      	ldr	r3, [r3, #0]
 801180c:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801180e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011812:	f5a3 723c 	sub.w	r2, r3, #752	; 0x2f0
 8011816:	2300      	movs	r3, #0
 8011818:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 801181a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801181e:	f04f 0300 	mov.w	r3, #0
 8011822:	f507 61d6 	add.w	r1, r7, #1712	; 0x6b0
 8011826:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 801182a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801182e:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 8011832:	681b      	ldr	r3, [r3, #0]
 8011834:	0fdb      	lsrs	r3, r3, #31
 8011836:	b2da      	uxtb	r2, r3
 8011838:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801183c:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 8011840:	681b      	ldr	r3, [r3, #0]
 8011842:	0fdb      	lsrs	r3, r3, #31
 8011844:	b2db      	uxtb	r3, r3
 8011846:	4053      	eors	r3, r2
 8011848:	b2db      	uxtb	r3, r3
 801184a:	2b00      	cmp	r3, #0
 801184c:	d012      	beq.n	8011874 <arm_softmax_s8+0x2cb4>
        mult = 1 - mult;
 801184e:	f507 63d6 	add.w	r3, r7, #1712	; 0x6b0
 8011852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011856:	2100      	movs	r1, #0
 8011858:	f1d2 0001 	rsbs	r0, r2, #1
 801185c:	f8c7 0100 	str.w	r0, [r7, #256]	; 0x100
 8011860:	eb61 0303 	sbc.w	r3, r1, r3
 8011864:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8011868:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	; 0x100
 801186c:	f507 61d6 	add.w	r1, r7, #1712	; 0x6b0
 8011870:	e9c1 2300 	strd	r2, r3, [r1]
    mult = mult + (q63_t)m1 * m2;
 8011874:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011878:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 801187c:	681b      	ldr	r3, [r3, #0]
 801187e:	17da      	asrs	r2, r3, #31
 8011880:	f8c7 33b8 	str.w	r3, [r7, #952]	; 0x3b8
 8011884:	f8c7 23bc 	str.w	r2, [r7, #956]	; 0x3bc
 8011888:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801188c:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 8011890:	681b      	ldr	r3, [r3, #0]
 8011892:	17da      	asrs	r2, r3, #31
 8011894:	f8c7 33b0 	str.w	r3, [r7, #944]	; 0x3b0
 8011898:	f8c7 23b4 	str.w	r2, [r7, #948]	; 0x3b4
 801189c:	e9d7 01ee 	ldrd	r0, r1, [r7, #952]	; 0x3b8
 80118a0:	460b      	mov	r3, r1
 80118a2:	f8d7 23b0 	ldr.w	r2, [r7, #944]	; 0x3b0
 80118a6:	fb02 f203 	mul.w	r2, r2, r3
 80118aa:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 80118ae:	e9c7 01ee 	strd	r0, r1, [r7, #952]	; 0x3b8
 80118b2:	4601      	mov	r1, r0
 80118b4:	fb01 f303 	mul.w	r3, r1, r3
 80118b8:	4413      	add	r3, r2
 80118ba:	f8d7 23b8 	ldr.w	r2, [r7, #952]	; 0x3b8
 80118be:	f8d7 13b0 	ldr.w	r1, [r7, #944]	; 0x3b0
 80118c2:	fba2 1201 	umull	r1, r2, r2, r1
 80118c6:	f8c7 2534 	str.w	r2, [r7, #1332]	; 0x534
 80118ca:	460a      	mov	r2, r1
 80118cc:	f8c7 2530 	str.w	r2, [r7, #1328]	; 0x530
 80118d0:	f8d7 2534 	ldr.w	r2, [r7, #1332]	; 0x534
 80118d4:	4413      	add	r3, r2
 80118d6:	f8c7 3534 	str.w	r3, [r7, #1332]	; 0x534
 80118da:	f507 63d6 	add.w	r3, r7, #1712	; 0x6b0
 80118de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118e2:	f8d7 1530 	ldr.w	r1, [r7, #1328]	; 0x530
 80118e6:	1851      	adds	r1, r2, r1
 80118e8:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 80118ec:	f8d7 1534 	ldr.w	r1, [r7, #1332]	; 0x534
 80118f0:	414b      	adcs	r3, r1
 80118f2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80118f6:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 80118fa:	f507 61d6 	add.w	r1, r7, #1712	; 0x6b0
 80118fe:	e9c1 2300 	strd	r2, r3, [r1]
    result = (int32_t)(mult / (1ll << 31));
 8011902:	f507 63d6 	add.w	r3, r7, #1712	; 0x6b0
 8011906:	e9d3 2300 	ldrd	r2, r3, [r3]
 801190a:	2b00      	cmp	r3, #0
 801190c:	da0a      	bge.n	8011924 <arm_softmax_s8+0x2d64>
 801190e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011912:	1851      	adds	r1, r2, r1
 8011914:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
 8011918:	f143 0300 	adc.w	r3, r3, #0
 801191c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8011920:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 8011924:	f04f 0000 	mov.w	r0, #0
 8011928:	f04f 0100 	mov.w	r1, #0
 801192c:	0fd0      	lsrs	r0, r2, #31
 801192e:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8011932:	17d9      	asrs	r1, r3, #31
 8011934:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011938:	f5a3 723c 	sub.w	r2, r3, #752	; 0x2f0
 801193c:	4603      	mov	r3, r0
 801193e:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8011940:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011944:	f5a3 723a 	sub.w	r2, r3, #744	; 0x2e8
 8011948:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801194c:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 8011950:	6812      	ldr	r2, [r2, #0]
 8011952:	681b      	ldr	r3, [r3, #0]
 8011954:	429a      	cmp	r2, r3
 8011956:	d10e      	bne.n	8011976 <arm_softmax_s8+0x2db6>
 8011958:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801195c:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 8011960:	681b      	ldr	r3, [r3, #0]
 8011962:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011966:	d106      	bne.n	8011976 <arm_softmax_s8+0x2db6>
        result = Q31_MAX;
 8011968:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801196c:	f5a3 723c 	sub.w	r2, r3, #752	; 0x2f0
 8011970:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8011974:	6013      	str	r3, [r2, #0]
    return result;
 8011976:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801197a:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 801197e:	681b      	ldr	r3, [r3, #0]
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 8011980:	18e2      	adds	r2, r4, r3
 8011982:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011986:	f5a3 733f 	sub.w	r3, r3, #764	; 0x2fc
 801198a:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 801198c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011990:	f5a3 7240 	sub.w	r2, r3, #768	; 0x300
 8011994:	2300      	movs	r3, #0
 8011996:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8011998:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801199c:	f04f 0300 	mov.w	r3, #0
 80119a0:	f507 61d4 	add.w	r1, r7, #1696	; 0x6a0
 80119a4:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 80119a8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80119ac:	f5a3 733f 	sub.w	r3, r3, #764	; 0x2fc
 80119b0:	681b      	ldr	r3, [r3, #0]
 80119b2:	0fdb      	lsrs	r3, r3, #31
 80119b4:	b2da      	uxtb	r2, r3
 80119b6:	2300      	movs	r3, #0
 80119b8:	4053      	eors	r3, r2
 80119ba:	b2db      	uxtb	r3, r3
 80119bc:	2b00      	cmp	r3, #0
 80119be:	d012      	beq.n	80119e6 <arm_softmax_s8+0x2e26>
        mult = 1 - mult;
 80119c0:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 80119c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119c8:	2100      	movs	r1, #0
 80119ca:	f1d2 0001 	rsbs	r0, r2, #1
 80119ce:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
 80119d2:	eb61 0303 	sbc.w	r3, r1, r3
 80119d6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80119da:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	; 0xe8
 80119de:	f507 62d4 	add.w	r2, r7, #1696	; 0x6a0
 80119e2:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 80119e6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80119ea:	f5a3 733f 	sub.w	r3, r3, #764	; 0x2fc
 80119ee:	681b      	ldr	r3, [r3, #0]
 80119f0:	17da      	asrs	r2, r3, #31
 80119f2:	f8c7 33a8 	str.w	r3, [r7, #936]	; 0x3a8
 80119f6:	f8c7 23ac 	str.w	r2, [r7, #940]	; 0x3ac
 80119fa:	a3c9      	add	r3, pc, #804	; (adr r3, 8011d20 <arm_softmax_s8+0x3160>)
 80119fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a00:	f8d7 13ac 	ldr.w	r1, [r7, #940]	; 0x3ac
 8011a04:	fb02 f001 	mul.w	r0, r2, r1
 8011a08:	f8d7 13a8 	ldr.w	r1, [r7, #936]	; 0x3a8
 8011a0c:	fb01 f103 	mul.w	r1, r1, r3
 8011a10:	4401      	add	r1, r0
 8011a12:	f8d7 03a8 	ldr.w	r0, [r7, #936]	; 0x3a8
 8011a16:	fba0 2302 	umull	r2, r3, r0, r2
 8011a1a:	f8c7 352c 	str.w	r3, [r7, #1324]	; 0x52c
 8011a1e:	4613      	mov	r3, r2
 8011a20:	f8c7 3528 	str.w	r3, [r7, #1320]	; 0x528
 8011a24:	f8d7 352c 	ldr.w	r3, [r7, #1324]	; 0x52c
 8011a28:	18cb      	adds	r3, r1, r3
 8011a2a:	f8c7 352c 	str.w	r3, [r7, #1324]	; 0x52c
 8011a2e:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 8011a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a36:	f8d7 1528 	ldr.w	r1, [r7, #1320]	; 0x528
 8011a3a:	1851      	adds	r1, r2, r1
 8011a3c:	f8c7 10e0 	str.w	r1, [r7, #224]	; 0xe0
 8011a40:	f8d7 152c 	ldr.w	r1, [r7, #1324]	; 0x52c
 8011a44:	414b      	adcs	r3, r1
 8011a46:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8011a4a:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8011a4e:	f507 62d4 	add.w	r2, r7, #1696	; 0x6a0
 8011a52:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8011a56:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 8011a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a5e:	2b00      	cmp	r3, #0
 8011a60:	da0a      	bge.n	8011a78 <arm_softmax_s8+0x2eb8>
 8011a62:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011a66:	1851      	adds	r1, r2, r1
 8011a68:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8011a6c:	f143 0300 	adc.w	r3, r3, #0
 8011a70:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8011a74:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 8011a78:	f04f 0000 	mov.w	r0, #0
 8011a7c:	f04f 0100 	mov.w	r1, #0
 8011a80:	0fd0      	lsrs	r0, r2, #31
 8011a82:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8011a86:	17d9      	asrs	r1, r3, #31
 8011a88:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011a8c:	f5a3 7240 	sub.w	r2, r3, #768	; 0x300
 8011a90:	4603      	mov	r3, r0
 8011a92:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8011a94:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011a98:	f5a3 733f 	sub.w	r3, r3, #764	; 0x2fc
 8011a9c:	681a      	ldr	r2, [r3, #0]
 8011a9e:	4b9e      	ldr	r3, [pc, #632]	; (8011d18 <arm_softmax_s8+0x3158>)
 8011aa0:	429a      	cmp	r2, r3
 8011aa2:	d10e      	bne.n	8011ac2 <arm_softmax_s8+0x2f02>
 8011aa4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011aa8:	f5a3 733f 	sub.w	r3, r3, #764	; 0x2fc
 8011aac:	681b      	ldr	r3, [r3, #0]
 8011aae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011ab2:	d106      	bne.n	8011ac2 <arm_softmax_s8+0x2f02>
        result = Q31_MAX;
 8011ab4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011ab8:	f5a3 7240 	sub.w	r2, r3, #768	; 0x300
 8011abc:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8011ac0:	6013      	str	r3, [r2, #0]
    return result;
 8011ac2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011ac6:	f5a3 7340 	sub.w	r3, r3, #768	; 0x300
 8011aca:	681a      	ldr	r2, [r3, #0]
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 8011acc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011ad0:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 8011ad4:	681b      	ldr	r3, [r3, #0]
 8011ad6:	441a      	add	r2, r3
 8011ad8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011adc:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 8011ae0:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 8011ae2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011ae6:	f5a3 7244 	sub.w	r2, r3, #784	; 0x310
 8011aea:	2300      	movs	r3, #0
 8011aec:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 8011aee:	2102      	movs	r1, #2
 8011af0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011af4:	f5a3 7245 	sub.w	r2, r3, #788	; 0x314
 8011af8:	1e4b      	subs	r3, r1, #1
 8011afa:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 8011afc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011b00:	f5a3 7146 	sub.w	r1, r3, #792	; 0x318
 8011b04:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011b08:	f5a3 7243 	sub.w	r2, r3, #780	; 0x30c
 8011b0c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011b10:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 8011b14:	6812      	ldr	r2, [r2, #0]
 8011b16:	681b      	ldr	r3, [r3, #0]
 8011b18:	4013      	ands	r3, r2
 8011b1a:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 8011b1c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011b20:	f5a3 7244 	sub.w	r2, r3, #784	; 0x310
 8011b24:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011b28:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 8011b2c:	681b      	ldr	r3, [r3, #0]
 8011b2e:	105b      	asrs	r3, r3, #1
 8011b30:	6013      	str	r3, [r2, #0]
    q31_t threshold = remainder_mask >> 1;
 8011b32:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011b36:	f5a3 7247 	sub.w	r2, r3, #796	; 0x31c
 8011b3a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011b3e:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 8011b42:	681b      	ldr	r3, [r3, #0]
 8011b44:	105b      	asrs	r3, r3, #1
 8011b46:	6013      	str	r3, [r2, #0]
    if (result < 0)
 8011b48:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011b4c:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8011b50:	681b      	ldr	r3, [r3, #0]
 8011b52:	2b00      	cmp	r3, #0
 8011b54:	da0a      	bge.n	8011b6c <arm_softmax_s8+0x2fac>
        threshold++;
 8011b56:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011b5a:	f5a3 7247 	sub.w	r2, r3, #796	; 0x31c
 8011b5e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011b62:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 8011b66:	681b      	ldr	r3, [r3, #0]
 8011b68:	3301      	adds	r3, #1
 8011b6a:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 8011b6c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011b70:	f5a3 7246 	sub.w	r2, r3, #792	; 0x318
 8011b74:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011b78:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 8011b7c:	6812      	ldr	r2, [r2, #0]
 8011b7e:	681b      	ldr	r3, [r3, #0]
 8011b80:	429a      	cmp	r2, r3
 8011b82:	dd0a      	ble.n	8011b9a <arm_softmax_s8+0x2fda>
        result++;
 8011b84:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011b88:	f5a3 7244 	sub.w	r2, r3, #784	; 0x310
 8011b8c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011b90:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8011b94:	681b      	ldr	r3, [r3, #0]
 8011b96:	3301      	adds	r3, #1
 8011b98:	6013      	str	r3, [r2, #0]
    return result;
 8011b9a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011b9e:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8011ba2:	681a      	ldr	r2, [r3, #0]
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 8011ba4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011ba8:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8011bac:	681b      	ldr	r3, [r3, #0]
 8011bae:	441a      	add	r2, r3
 8011bb0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011bb4:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 8011bb8:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 8011bba:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011bbe:	f5a3 7249 	sub.w	r2, r3, #804	; 0x324
 8011bc2:	2300      	movs	r3, #0
 8011bc4:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8011bc6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8011bca:	f04f 0300 	mov.w	r3, #0
 8011bce:	f507 61cf 	add.w	r1, r7, #1656	; 0x678
 8011bd2:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8011bd6:	2200      	movs	r2, #0
 8011bd8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011bdc:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 8011be0:	681b      	ldr	r3, [r3, #0]
 8011be2:	0fdb      	lsrs	r3, r3, #31
 8011be4:	b2db      	uxtb	r3, r3
 8011be6:	4053      	eors	r3, r2
 8011be8:	b2db      	uxtb	r3, r3
 8011bea:	2b00      	cmp	r3, #0
 8011bec:	d012      	beq.n	8011c14 <arm_softmax_s8+0x3054>
        mult = 1 - mult;
 8011bee:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8011bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bf6:	2100      	movs	r1, #0
 8011bf8:	f1d2 0001 	rsbs	r0, r2, #1
 8011bfc:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
 8011c00:	eb61 0303 	sbc.w	r3, r1, r3
 8011c04:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8011c08:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	; 0xd0
 8011c0c:	f507 62cf 	add.w	r2, r7, #1656	; 0x678
 8011c10:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8011c14:	a13e      	add	r1, pc, #248	; (adr r1, 8011d10 <arm_softmax_s8+0x3150>)
 8011c16:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011c1a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011c1e:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 8011c22:	681b      	ldr	r3, [r3, #0]
 8011c24:	17da      	asrs	r2, r3, #31
 8011c26:	f8c7 33a0 	str.w	r3, [r7, #928]	; 0x3a0
 8011c2a:	f8c7 23a4 	str.w	r2, [r7, #932]	; 0x3a4
 8011c2e:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 8011c32:	fb03 f201 	mul.w	r2, r3, r1
 8011c36:	f8d7 33a4 	ldr.w	r3, [r7, #932]	; 0x3a4
 8011c3a:	fb00 f303 	mul.w	r3, r0, r3
 8011c3e:	4413      	add	r3, r2
 8011c40:	f8d7 23a0 	ldr.w	r2, [r7, #928]	; 0x3a0
 8011c44:	fba0 1202 	umull	r1, r2, r0, r2
 8011c48:	f8c7 2524 	str.w	r2, [r7, #1316]	; 0x524
 8011c4c:	460a      	mov	r2, r1
 8011c4e:	f8c7 2520 	str.w	r2, [r7, #1312]	; 0x520
 8011c52:	f8d7 2524 	ldr.w	r2, [r7, #1316]	; 0x524
 8011c56:	4413      	add	r3, r2
 8011c58:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
 8011c5c:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8011c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c64:	f8d7 1520 	ldr.w	r1, [r7, #1312]	; 0x520
 8011c68:	1851      	adds	r1, r2, r1
 8011c6a:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 8011c6e:	f8d7 1524 	ldr.w	r1, [r7, #1316]	; 0x524
 8011c72:	414b      	adcs	r3, r1
 8011c74:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8011c78:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8011c7c:	f507 62cf 	add.w	r2, r7, #1656	; 0x678
 8011c80:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8011c84:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8011c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c8c:	2b00      	cmp	r3, #0
 8011c8e:	da0a      	bge.n	8011ca6 <arm_softmax_s8+0x30e6>
 8011c90:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011c94:	1851      	adds	r1, r2, r1
 8011c96:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8011c9a:	f143 0300 	adc.w	r3, r3, #0
 8011c9e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8011ca2:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8011ca6:	f04f 0000 	mov.w	r0, #0
 8011caa:	f04f 0100 	mov.w	r1, #0
 8011cae:	0fd0      	lsrs	r0, r2, #31
 8011cb0:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8011cb4:	17d9      	asrs	r1, r3, #31
 8011cb6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011cba:	f5a3 7249 	sub.w	r2, r3, #804	; 0x324
 8011cbe:	4603      	mov	r3, r0
 8011cc0:	6013      	str	r3, [r2, #0]
    return result;
 8011cc2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011cc6:	f5a3 7349 	sub.w	r3, r3, #804	; 0x324
 8011cca:	6819      	ldr	r1, [r3, #0]
    int32_t result = 1895147668 +
 8011ccc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011cd0:	f5a3 724d 	sub.w	r2, r3, #820	; 0x334
 8011cd4:	4b11      	ldr	r3, [pc, #68]	; (8011d1c <arm_softmax_s8+0x315c>)
 8011cd6:	440b      	add	r3, r1
 8011cd8:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(1672461947)
 8011cda:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011cde:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8011ce2:	6819      	ldr	r1, [r3, #0]
 8011ce4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011ce8:	f5a3 7225 	sub.w	r2, r3, #660	; 0x294
 8011cec:	1c4b      	adds	r3, r1, #1
 8011cee:	6013      	str	r3, [r2, #0]
 8011cf0:	2301      	movs	r3, #1
 8011cf2:	fa03 f201 	lsl.w	r2, r3, r1
 8011cf6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011cfa:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8011cfe:	681b      	ldr	r3, [r3, #0]
 8011d00:	4013      	ands	r3, r2
 8011d02:	2b00      	cmp	r3, #0
 8011d04:	d010      	beq.n	8011d28 <arm_softmax_s8+0x3168>
 8011d06:	f04f 32ff 	mov.w	r2, #4294967295
 8011d0a:	e00e      	b.n	8011d2a <arm_softmax_s8+0x316a>
 8011d0c:	f3af 8000 	nop.w
 8011d10:	70f5a894 	.word	0x70f5a894
 8011d14:	00000000 	.word	0x00000000
 8011d18:	2aaaaaab 	.word	0x2aaaaaab
 8011d1c:	70f5a894 	.word	0x70f5a894
 8011d20:	2aaaaaab 	.word	0x2aaaaaab
 8011d24:	00000000 	.word	0x00000000
 8011d28:	2200      	movs	r2, #0
 8011d2a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011d2e:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8011d32:	601a      	str	r2, [r3, #0]
 8011d34:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011d38:	f5a3 724e 	sub.w	r2, r3, #824	; 0x338
 8011d3c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011d40:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8011d44:	681b      	ldr	r3, [r3, #0]
 8011d46:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8011d48:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011d4c:	f5a3 724f 	sub.w	r2, r3, #828	; 0x33c
 8011d50:	2300      	movs	r3, #0
 8011d52:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8011d54:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8011d58:	f04f 0300 	mov.w	r3, #0
 8011d5c:	f507 61cc 	add.w	r1, r7, #1632	; 0x660
 8011d60:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8011d64:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011d68:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 8011d6c:	681b      	ldr	r3, [r3, #0]
 8011d6e:	0fdb      	lsrs	r3, r3, #31
 8011d70:	b2da      	uxtb	r2, r3
 8011d72:	2300      	movs	r3, #0
 8011d74:	4053      	eors	r3, r2
 8011d76:	b2db      	uxtb	r3, r3
 8011d78:	2b00      	cmp	r3, #0
 8011d7a:	d012      	beq.n	8011da2 <arm_softmax_s8+0x31e2>
        mult = 1 - mult;
 8011d7c:	f507 63cc 	add.w	r3, r7, #1632	; 0x660
 8011d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d84:	2100      	movs	r1, #0
 8011d86:	f1d2 0001 	rsbs	r0, r2, #1
 8011d8a:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
 8011d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8011d92:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8011d96:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8011d9a:	f507 62cc 	add.w	r2, r7, #1632	; 0x660
 8011d9e:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8011da2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011da6:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 8011daa:	681b      	ldr	r3, [r3, #0]
 8011dac:	17da      	asrs	r2, r3, #31
 8011dae:	f8c7 3398 	str.w	r3, [r7, #920]	; 0x398
 8011db2:	f8c7 239c 	str.w	r2, [r7, #924]	; 0x39c
 8011db6:	a3c4      	add	r3, pc, #784	; (adr r3, 80120c8 <arm_softmax_s8+0x3508>)
 8011db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011dbc:	f8d7 139c 	ldr.w	r1, [r7, #924]	; 0x39c
 8011dc0:	fb02 f001 	mul.w	r0, r2, r1
 8011dc4:	f8d7 1398 	ldr.w	r1, [r7, #920]	; 0x398
 8011dc8:	fb01 f103 	mul.w	r1, r1, r3
 8011dcc:	4401      	add	r1, r0
 8011dce:	f8d7 0398 	ldr.w	r0, [r7, #920]	; 0x398
 8011dd2:	fba0 2302 	umull	r2, r3, r0, r2
 8011dd6:	f8c7 351c 	str.w	r3, [r7, #1308]	; 0x51c
 8011dda:	4613      	mov	r3, r2
 8011ddc:	f8c7 3518 	str.w	r3, [r7, #1304]	; 0x518
 8011de0:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 8011de4:	18cb      	adds	r3, r1, r3
 8011de6:	f8c7 351c 	str.w	r3, [r7, #1308]	; 0x51c
 8011dea:	f507 63cc 	add.w	r3, r7, #1632	; 0x660
 8011dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011df2:	f8d7 1518 	ldr.w	r1, [r7, #1304]	; 0x518
 8011df6:	1851      	adds	r1, r2, r1
 8011df8:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 8011dfc:	f8d7 151c 	ldr.w	r1, [r7, #1308]	; 0x51c
 8011e00:	414b      	adcs	r3, r1
 8011e02:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8011e06:	e9d7 342c 	ldrd	r3, r4, [r7, #176]	; 0xb0
 8011e0a:	f507 62cc 	add.w	r2, r7, #1632	; 0x660
 8011e0e:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8011e12:	f507 63cc 	add.w	r3, r7, #1632	; 0x660
 8011e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e1a:	2b00      	cmp	r3, #0
 8011e1c:	da0a      	bge.n	8011e34 <arm_softmax_s8+0x3274>
 8011e1e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011e22:	1851      	adds	r1, r2, r1
 8011e24:	f8c7 10a8 	str.w	r1, [r7, #168]	; 0xa8
 8011e28:	f143 0300 	adc.w	r3, r3, #0
 8011e2c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8011e30:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8011e34:	f04f 0000 	mov.w	r0, #0
 8011e38:	f04f 0100 	mov.w	r1, #0
 8011e3c:	0fd0      	lsrs	r0, r2, #31
 8011e3e:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8011e42:	17d9      	asrs	r1, r3, #31
 8011e44:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011e48:	f5a3 724f 	sub.w	r2, r3, #828	; 0x33c
 8011e4c:	4603      	mov	r3, r0
 8011e4e:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8011e50:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011e54:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 8011e58:	681a      	ldr	r2, [r3, #0]
 8011e5a:	4b99      	ldr	r3, [pc, #612]	; (80120c0 <arm_softmax_s8+0x3500>)
 8011e5c:	429a      	cmp	r2, r3
 8011e5e:	d10e      	bne.n	8011e7e <arm_softmax_s8+0x32be>
 8011e60:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011e64:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 8011e68:	681b      	ldr	r3, [r3, #0]
 8011e6a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011e6e:	d106      	bne.n	8011e7e <arm_softmax_s8+0x32be>
        result = Q31_MAX;
 8011e70:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011e74:	f5a3 724f 	sub.w	r2, r3, #828	; 0x33c
 8011e78:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8011e7c:	6013      	str	r3, [r2, #0]
    return result;
 8011e7e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011e82:	f5a3 734f 	sub.w	r3, r3, #828	; 0x33c
 8011e86:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(1672461947)
 8011e88:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011e8c:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8011e90:	681b      	ldr	r3, [r3, #0]
 8011e92:	ea02 0003 	and.w	r0, r2, r3
 8011e96:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011e9a:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8011e9e:	681b      	ldr	r3, [r3, #0]
 8011ea0:	43da      	mvns	r2, r3
 8011ea2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011ea6:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8011eaa:	681b      	ldr	r3, [r3, #0]
 8011eac:	ea02 0103 	and.w	r1, r2, r3
 8011eb0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011eb4:	f5a3 724d 	sub.w	r2, r3, #820	; 0x334
 8011eb8:	ea80 0301 	eor.w	r3, r0, r1
 8011ebc:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(1302514674)
 8011ebe:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011ec2:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8011ec6:	6819      	ldr	r1, [r3, #0]
 8011ec8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011ecc:	f5a3 7225 	sub.w	r2, r3, #660	; 0x294
 8011ed0:	1c4b      	adds	r3, r1, #1
 8011ed2:	6013      	str	r3, [r2, #0]
 8011ed4:	2301      	movs	r3, #1
 8011ed6:	fa03 f201 	lsl.w	r2, r3, r1
 8011eda:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011ede:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8011ee2:	681b      	ldr	r3, [r3, #0]
 8011ee4:	4013      	ands	r3, r2
 8011ee6:	2b00      	cmp	r3, #0
 8011ee8:	d002      	beq.n	8011ef0 <arm_softmax_s8+0x3330>
 8011eea:	f04f 32ff 	mov.w	r2, #4294967295
 8011eee:	e000      	b.n	8011ef2 <arm_softmax_s8+0x3332>
 8011ef0:	2200      	movs	r2, #0
 8011ef2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011ef6:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8011efa:	601a      	str	r2, [r3, #0]
 8011efc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011f00:	f5a3 7253 	sub.w	r2, r3, #844	; 0x34c
 8011f04:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011f08:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8011f0c:	681b      	ldr	r3, [r3, #0]
 8011f0e:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8011f10:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011f14:	f5a3 7254 	sub.w	r2, r3, #848	; 0x350
 8011f18:	2300      	movs	r3, #0
 8011f1a:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8011f1c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8011f20:	f04f 0300 	mov.w	r3, #0
 8011f24:	f507 61ca 	add.w	r1, r7, #1616	; 0x650
 8011f28:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8011f2c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011f30:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 8011f34:	681b      	ldr	r3, [r3, #0]
 8011f36:	0fdb      	lsrs	r3, r3, #31
 8011f38:	b2da      	uxtb	r2, r3
 8011f3a:	2300      	movs	r3, #0
 8011f3c:	4053      	eors	r3, r2
 8011f3e:	b2db      	uxtb	r3, r3
 8011f40:	2b00      	cmp	r3, #0
 8011f42:	d012      	beq.n	8011f6a <arm_softmax_s8+0x33aa>
        mult = 1 - mult;
 8011f44:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 8011f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f4c:	2100      	movs	r1, #0
 8011f4e:	f1d2 0001 	rsbs	r0, r2, #1
 8011f52:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
 8011f56:	eb61 0303 	sbc.w	r3, r1, r3
 8011f5a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8011f5e:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	; 0xa0
 8011f62:	f507 62ca 	add.w	r2, r7, #1616	; 0x650
 8011f66:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8011f6a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011f6e:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 8011f72:	681b      	ldr	r3, [r3, #0]
 8011f74:	17da      	asrs	r2, r3, #31
 8011f76:	f8c7 3390 	str.w	r3, [r7, #912]	; 0x390
 8011f7a:	f8c7 2394 	str.w	r2, [r7, #916]	; 0x394
 8011f7e:	a34e      	add	r3, pc, #312	; (adr r3, 80120b8 <arm_softmax_s8+0x34f8>)
 8011f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f84:	f8d7 1394 	ldr.w	r1, [r7, #916]	; 0x394
 8011f88:	fb02 f001 	mul.w	r0, r2, r1
 8011f8c:	f8d7 1390 	ldr.w	r1, [r7, #912]	; 0x390
 8011f90:	fb01 f103 	mul.w	r1, r1, r3
 8011f94:	4401      	add	r1, r0
 8011f96:	f8d7 0390 	ldr.w	r0, [r7, #912]	; 0x390
 8011f9a:	fba0 2302 	umull	r2, r3, r0, r2
 8011f9e:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
 8011fa2:	4613      	mov	r3, r2
 8011fa4:	f8c7 3510 	str.w	r3, [r7, #1296]	; 0x510
 8011fa8:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8011fac:	18cb      	adds	r3, r1, r3
 8011fae:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
 8011fb2:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 8011fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fba:	f8d7 1510 	ldr.w	r1, [r7, #1296]	; 0x510
 8011fbe:	1851      	adds	r1, r2, r1
 8011fc0:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 8011fc4:	f8d7 1514 	ldr.w	r1, [r7, #1300]	; 0x514
 8011fc8:	414b      	adcs	r3, r1
 8011fca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8011fce:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8011fd2:	f507 62ca 	add.w	r2, r7, #1616	; 0x650
 8011fd6:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8011fda:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 8011fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fe2:	2b00      	cmp	r3, #0
 8011fe4:	da0a      	bge.n	8011ffc <arm_softmax_s8+0x343c>
 8011fe6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011fea:	1851      	adds	r1, r2, r1
 8011fec:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
 8011ff0:	f143 0300 	adc.w	r3, r3, #0
 8011ff4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8011ff8:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8011ffc:	f04f 0000 	mov.w	r0, #0
 8012000:	f04f 0100 	mov.w	r1, #0
 8012004:	0fd0      	lsrs	r0, r2, #31
 8012006:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801200a:	17d9      	asrs	r1, r3, #31
 801200c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012010:	f5a3 7254 	sub.w	r2, r3, #848	; 0x350
 8012014:	4603      	mov	r3, r0
 8012016:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8012018:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801201c:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 8012020:	681a      	ldr	r2, [r3, #0]
 8012022:	4b28      	ldr	r3, [pc, #160]	; (80120c4 <arm_softmax_s8+0x3504>)
 8012024:	429a      	cmp	r2, r3
 8012026:	d10e      	bne.n	8012046 <arm_softmax_s8+0x3486>
 8012028:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801202c:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 8012030:	681b      	ldr	r3, [r3, #0]
 8012032:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012036:	d106      	bne.n	8012046 <arm_softmax_s8+0x3486>
        result = Q31_MAX;
 8012038:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801203c:	f5a3 7254 	sub.w	r2, r3, #848	; 0x350
 8012040:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8012044:	6013      	str	r3, [r2, #0]
    return result;
 8012046:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801204a:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 801204e:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(1302514674)
 8012050:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012054:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8012058:	681b      	ldr	r3, [r3, #0]
 801205a:	ea02 0003 	and.w	r0, r2, r3
 801205e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012062:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8012066:	681b      	ldr	r3, [r3, #0]
 8012068:	43da      	mvns	r2, r3
 801206a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801206e:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8012072:	681b      	ldr	r3, [r3, #0]
 8012074:	ea02 0103 	and.w	r1, r2, r3
 8012078:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801207c:	f5a3 724d 	sub.w	r2, r3, #820	; 0x334
 8012080:	ea80 0301 	eor.w	r3, r0, r1
 8012084:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(790015084)
 8012086:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801208a:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 801208e:	6819      	ldr	r1, [r3, #0]
 8012090:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012094:	f5a3 7225 	sub.w	r2, r3, #660	; 0x294
 8012098:	1c4b      	adds	r3, r1, #1
 801209a:	6013      	str	r3, [r2, #0]
 801209c:	2301      	movs	r3, #1
 801209e:	fa03 f201 	lsl.w	r2, r3, r1
 80120a2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80120a6:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80120aa:	681b      	ldr	r3, [r3, #0]
 80120ac:	4013      	ands	r3, r2
 80120ae:	2b00      	cmp	r3, #0
 80120b0:	d00e      	beq.n	80120d0 <arm_softmax_s8+0x3510>
 80120b2:	f04f 32ff 	mov.w	r2, #4294967295
 80120b6:	e00c      	b.n	80120d2 <arm_softmax_s8+0x3512>
 80120b8:	4da2cbf2 	.word	0x4da2cbf2
 80120bc:	00000000 	.word	0x00000000
 80120c0:	63afbe7b 	.word	0x63afbe7b
 80120c4:	4da2cbf2 	.word	0x4da2cbf2
 80120c8:	63afbe7b 	.word	0x63afbe7b
 80120cc:	00000000 	.word	0x00000000
 80120d0:	2200      	movs	r2, #0
 80120d2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80120d6:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 80120da:	601a      	str	r2, [r3, #0]
 80120dc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80120e0:	f5a3 7257 	sub.w	r2, r3, #860	; 0x35c
 80120e4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80120e8:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 80120ec:	681b      	ldr	r3, [r3, #0]
 80120ee:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 80120f0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80120f4:	f5a3 7258 	sub.w	r2, r3, #864	; 0x360
 80120f8:	2300      	movs	r3, #0
 80120fa:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 80120fc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8012100:	f04f 0300 	mov.w	r3, #0
 8012104:	f507 61c8 	add.w	r1, r7, #1600	; 0x640
 8012108:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 801210c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012110:	f5a3 7357 	sub.w	r3, r3, #860	; 0x35c
 8012114:	681b      	ldr	r3, [r3, #0]
 8012116:	0fdb      	lsrs	r3, r3, #31
 8012118:	b2da      	uxtb	r2, r3
 801211a:	2300      	movs	r3, #0
 801211c:	4053      	eors	r3, r2
 801211e:	b2db      	uxtb	r3, r3
 8012120:	2b00      	cmp	r3, #0
 8012122:	d012      	beq.n	801214a <arm_softmax_s8+0x358a>
        mult = 1 - mult;
 8012124:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 8012128:	e9d3 2300 	ldrd	r2, r3, [r3]
 801212c:	2100      	movs	r1, #0
 801212e:	f1d2 0001 	rsbs	r0, r2, #1
 8012132:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
 8012136:	eb61 0303 	sbc.w	r3, r1, r3
 801213a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801213e:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8012142:	f507 62c8 	add.w	r2, r7, #1600	; 0x640
 8012146:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 801214a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801214e:	f5a3 7357 	sub.w	r3, r3, #860	; 0x35c
 8012152:	681b      	ldr	r3, [r3, #0]
 8012154:	17da      	asrs	r2, r3, #31
 8012156:	f8c7 3388 	str.w	r3, [r7, #904]	; 0x388
 801215a:	f8c7 238c 	str.w	r2, [r7, #908]	; 0x38c
 801215e:	a3c0      	add	r3, pc, #768	; (adr r3, 8012460 <arm_softmax_s8+0x38a0>)
 8012160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012164:	f8d7 138c 	ldr.w	r1, [r7, #908]	; 0x38c
 8012168:	fb02 f001 	mul.w	r0, r2, r1
 801216c:	f8d7 1388 	ldr.w	r1, [r7, #904]	; 0x388
 8012170:	fb01 f103 	mul.w	r1, r1, r3
 8012174:	4401      	add	r1, r0
 8012176:	f8d7 0388 	ldr.w	r0, [r7, #904]	; 0x388
 801217a:	fba0 2302 	umull	r2, r3, r0, r2
 801217e:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
 8012182:	4613      	mov	r3, r2
 8012184:	f8c7 3508 	str.w	r3, [r7, #1288]	; 0x508
 8012188:	f8d7 350c 	ldr.w	r3, [r7, #1292]	; 0x50c
 801218c:	18cb      	adds	r3, r1, r3
 801218e:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
 8012192:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 8012196:	e9d3 2300 	ldrd	r2, r3, [r3]
 801219a:	f8d7 1508 	ldr.w	r1, [r7, #1288]	; 0x508
 801219e:	1851      	adds	r1, r2, r1
 80121a0:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 80121a4:	f8d7 150c 	ldr.w	r1, [r7, #1292]	; 0x50c
 80121a8:	414b      	adcs	r3, r1
 80121aa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80121ae:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 80121b2:	f507 62c8 	add.w	r2, r7, #1600	; 0x640
 80121b6:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 80121ba:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 80121be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121c2:	2b00      	cmp	r3, #0
 80121c4:	da08      	bge.n	80121d8 <arm_softmax_s8+0x3618>
 80121c6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80121ca:	1851      	adds	r1, r2, r1
 80121cc:	67b9      	str	r1, [r7, #120]	; 0x78
 80121ce:	f143 0300 	adc.w	r3, r3, #0
 80121d2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80121d4:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80121d8:	f04f 0000 	mov.w	r0, #0
 80121dc:	f04f 0100 	mov.w	r1, #0
 80121e0:	0fd0      	lsrs	r0, r2, #31
 80121e2:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 80121e6:	17d9      	asrs	r1, r3, #31
 80121e8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80121ec:	f5a3 7258 	sub.w	r2, r3, #864	; 0x360
 80121f0:	4603      	mov	r3, r0
 80121f2:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 80121f4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80121f8:	f5a3 7357 	sub.w	r3, r3, #860	; 0x35c
 80121fc:	681a      	ldr	r2, [r3, #0]
 80121fe:	4b96      	ldr	r3, [pc, #600]	; (8012458 <arm_softmax_s8+0x3898>)
 8012200:	429a      	cmp	r2, r3
 8012202:	d10e      	bne.n	8012222 <arm_softmax_s8+0x3662>
 8012204:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012208:	f5a3 7357 	sub.w	r3, r3, #860	; 0x35c
 801220c:	681b      	ldr	r3, [r3, #0]
 801220e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012212:	d106      	bne.n	8012222 <arm_softmax_s8+0x3662>
        result = Q31_MAX;
 8012214:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012218:	f5a3 7258 	sub.w	r2, r3, #864	; 0x360
 801221c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8012220:	6013      	str	r3, [r2, #0]
    return result;
 8012222:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012226:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 801222a:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(790015084)
 801222c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012230:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8012234:	681b      	ldr	r3, [r3, #0]
 8012236:	ea02 0003 	and.w	r0, r2, r3
 801223a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801223e:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8012242:	681b      	ldr	r3, [r3, #0]
 8012244:	43da      	mvns	r2, r3
 8012246:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801224a:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 801224e:	681b      	ldr	r3, [r3, #0]
 8012250:	ea02 0103 	and.w	r1, r2, r3
 8012254:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012258:	f5a3 724d 	sub.w	r2, r3, #820	; 0x334
 801225c:	ea80 0301 	eor.w	r3, r0, r1
 8012260:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(290630308)
 8012262:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012266:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 801226a:	6819      	ldr	r1, [r3, #0]
 801226c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012270:	f5a3 7225 	sub.w	r2, r3, #660	; 0x294
 8012274:	1c4b      	adds	r3, r1, #1
 8012276:	6013      	str	r3, [r2, #0]
 8012278:	2301      	movs	r3, #1
 801227a:	fa03 f201 	lsl.w	r2, r3, r1
 801227e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012282:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8012286:	681b      	ldr	r3, [r3, #0]
 8012288:	4013      	ands	r3, r2
 801228a:	2b00      	cmp	r3, #0
 801228c:	d002      	beq.n	8012294 <arm_softmax_s8+0x36d4>
 801228e:	f04f 32ff 	mov.w	r2, #4294967295
 8012292:	e000      	b.n	8012296 <arm_softmax_s8+0x36d6>
 8012294:	2200      	movs	r2, #0
 8012296:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801229a:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 801229e:	601a      	str	r2, [r3, #0]
 80122a0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80122a4:	f5a3 725b 	sub.w	r2, r3, #876	; 0x36c
 80122a8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80122ac:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 80122b0:	681b      	ldr	r3, [r3, #0]
 80122b2:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 80122b4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80122b8:	f5a3 725c 	sub.w	r2, r3, #880	; 0x370
 80122bc:	2300      	movs	r3, #0
 80122be:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 80122c0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80122c4:	f04f 0300 	mov.w	r3, #0
 80122c8:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 80122cc:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 80122d0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80122d4:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 80122d8:	681b      	ldr	r3, [r3, #0]
 80122da:	0fdb      	lsrs	r3, r3, #31
 80122dc:	b2da      	uxtb	r2, r3
 80122de:	2300      	movs	r3, #0
 80122e0:	4053      	eors	r3, r2
 80122e2:	b2db      	uxtb	r3, r3
 80122e4:	2b00      	cmp	r3, #0
 80122e6:	d010      	beq.n	801230a <arm_softmax_s8+0x374a>
        mult = 1 - mult;
 80122e8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80122ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122f0:	2100      	movs	r1, #0
 80122f2:	f1d2 0001 	rsbs	r0, r2, #1
 80122f6:	6738      	str	r0, [r7, #112]	; 0x70
 80122f8:	eb61 0303 	sbc.w	r3, r1, r3
 80122fc:	677b      	str	r3, [r7, #116]	; 0x74
 80122fe:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 8012302:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8012306:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 801230a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801230e:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 8012312:	681b      	ldr	r3, [r3, #0]
 8012314:	17da      	asrs	r2, r3, #31
 8012316:	f8c7 3380 	str.w	r3, [r7, #896]	; 0x380
 801231a:	f8c7 2384 	str.w	r2, [r7, #900]	; 0x384
 801231e:	a34c      	add	r3, pc, #304	; (adr r3, 8012450 <arm_softmax_s8+0x3890>)
 8012320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012324:	f8d7 1384 	ldr.w	r1, [r7, #900]	; 0x384
 8012328:	fb02 f001 	mul.w	r0, r2, r1
 801232c:	f8d7 1380 	ldr.w	r1, [r7, #896]	; 0x380
 8012330:	fb01 f103 	mul.w	r1, r1, r3
 8012334:	4401      	add	r1, r0
 8012336:	f8d7 0380 	ldr.w	r0, [r7, #896]	; 0x380
 801233a:	fba0 2302 	umull	r2, r3, r0, r2
 801233e:	f8c7 3504 	str.w	r3, [r7, #1284]	; 0x504
 8012342:	4613      	mov	r3, r2
 8012344:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
 8012348:	f8d7 3504 	ldr.w	r3, [r7, #1284]	; 0x504
 801234c:	18cb      	adds	r3, r1, r3
 801234e:	f8c7 3504 	str.w	r3, [r7, #1284]	; 0x504
 8012352:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012356:	e9d3 2300 	ldrd	r2, r3, [r3]
 801235a:	f8d7 1500 	ldr.w	r1, [r7, #1280]	; 0x500
 801235e:	1851      	adds	r1, r2, r1
 8012360:	66b9      	str	r1, [r7, #104]	; 0x68
 8012362:	f8d7 1504 	ldr.w	r1, [r7, #1284]	; 0x504
 8012366:	414b      	adcs	r3, r1
 8012368:	66fb      	str	r3, [r7, #108]	; 0x6c
 801236a:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 801236e:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8012372:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8012376:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801237a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801237e:	2b00      	cmp	r3, #0
 8012380:	da08      	bge.n	8012394 <arm_softmax_s8+0x37d4>
 8012382:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8012386:	1851      	adds	r1, r2, r1
 8012388:	6639      	str	r1, [r7, #96]	; 0x60
 801238a:	f143 0300 	adc.w	r3, r3, #0
 801238e:	667b      	str	r3, [r7, #100]	; 0x64
 8012390:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8012394:	f04f 0000 	mov.w	r0, #0
 8012398:	f04f 0100 	mov.w	r1, #0
 801239c:	0fd0      	lsrs	r0, r2, #31
 801239e:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 80123a2:	17d9      	asrs	r1, r3, #31
 80123a4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80123a8:	f5a3 725c 	sub.w	r2, r3, #880	; 0x370
 80123ac:	4603      	mov	r3, r0
 80123ae:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 80123b0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80123b4:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 80123b8:	681a      	ldr	r2, [r3, #0]
 80123ba:	4b28      	ldr	r3, [pc, #160]	; (801245c <arm_softmax_s8+0x389c>)
 80123bc:	429a      	cmp	r2, r3
 80123be:	d10e      	bne.n	80123de <arm_softmax_s8+0x381e>
 80123c0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80123c4:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 80123c8:	681b      	ldr	r3, [r3, #0]
 80123ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80123ce:	d106      	bne.n	80123de <arm_softmax_s8+0x381e>
        result = Q31_MAX;
 80123d0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80123d4:	f5a3 725c 	sub.w	r2, r3, #880	; 0x370
 80123d8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80123dc:	6013      	str	r3, [r2, #0]
    return result;
 80123de:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80123e2:	f5a3 735c 	sub.w	r3, r3, #880	; 0x370
 80123e6:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(290630308)
 80123e8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80123ec:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 80123f0:	681b      	ldr	r3, [r3, #0]
 80123f2:	ea02 0003 	and.w	r0, r2, r3
 80123f6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80123fa:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 80123fe:	681b      	ldr	r3, [r3, #0]
 8012400:	43da      	mvns	r2, r3
 8012402:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012406:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 801240a:	681b      	ldr	r3, [r3, #0]
 801240c:	ea02 0103 	and.w	r1, r2, r3
 8012410:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012414:	f5a3 724d 	sub.w	r2, r3, #820	; 0x334
 8012418:	ea80 0301 	eor.w	r3, r0, r1
 801241c:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(39332535)
 801241e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012422:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8012426:	6819      	ldr	r1, [r3, #0]
 8012428:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801242c:	f5a3 7225 	sub.w	r2, r3, #660	; 0x294
 8012430:	1c4b      	adds	r3, r1, #1
 8012432:	6013      	str	r3, [r2, #0]
 8012434:	2301      	movs	r3, #1
 8012436:	fa03 f201 	lsl.w	r2, r3, r1
 801243a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801243e:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8012442:	681b      	ldr	r3, [r3, #0]
 8012444:	4013      	ands	r3, r2
 8012446:	2b00      	cmp	r3, #0
 8012448:	d00e      	beq.n	8012468 <arm_softmax_s8+0x38a8>
 801244a:	f04f 32ff 	mov.w	r2, #4294967295
 801244e:	e00c      	b.n	801246a <arm_softmax_s8+0x38aa>
 8012450:	1152aaa4 	.word	0x1152aaa4
 8012454:	00000000 	.word	0x00000000
 8012458:	2f16ac6c 	.word	0x2f16ac6c
 801245c:	1152aaa4 	.word	0x1152aaa4
 8012460:	2f16ac6c 	.word	0x2f16ac6c
 8012464:	00000000 	.word	0x00000000
 8012468:	2200      	movs	r2, #0
 801246a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801246e:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8012472:	601a      	str	r2, [r3, #0]
 8012474:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012478:	f5a3 725f 	sub.w	r2, r3, #892	; 0x37c
 801247c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012480:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8012484:	681b      	ldr	r3, [r3, #0]
 8012486:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8012488:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801248c:	f5a3 7260 	sub.w	r2, r3, #896	; 0x380
 8012490:	2300      	movs	r3, #0
 8012492:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8012494:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8012498:	f04f 0300 	mov.w	r3, #0
 801249c:	f507 61c4 	add.w	r1, r7, #1568	; 0x620
 80124a0:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 80124a4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80124a8:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 80124ac:	681b      	ldr	r3, [r3, #0]
 80124ae:	0fdb      	lsrs	r3, r3, #31
 80124b0:	b2da      	uxtb	r2, r3
 80124b2:	2300      	movs	r3, #0
 80124b4:	4053      	eors	r3, r2
 80124b6:	b2db      	uxtb	r3, r3
 80124b8:	2b00      	cmp	r3, #0
 80124ba:	d010      	beq.n	80124de <arm_softmax_s8+0x391e>
        mult = 1 - mult;
 80124bc:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
 80124c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124c4:	2100      	movs	r1, #0
 80124c6:	f1d2 0001 	rsbs	r0, r2, #1
 80124ca:	65b8      	str	r0, [r7, #88]	; 0x58
 80124cc:	eb61 0303 	sbc.w	r3, r1, r3
 80124d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80124d2:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 80124d6:	f507 62c4 	add.w	r2, r7, #1568	; 0x620
 80124da:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 80124de:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80124e2:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 80124e6:	681b      	ldr	r3, [r3, #0]
 80124e8:	17da      	asrs	r2, r3, #31
 80124ea:	f8c7 3378 	str.w	r3, [r7, #888]	; 0x378
 80124ee:	f8c7 237c 	str.w	r2, [r7, #892]	; 0x37c
 80124f2:	a3bd      	add	r3, pc, #756	; (adr r3, 80127e8 <arm_softmax_s8+0x3c28>)
 80124f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124f8:	f8d7 137c 	ldr.w	r1, [r7, #892]	; 0x37c
 80124fc:	fb02 f001 	mul.w	r0, r2, r1
 8012500:	f8d7 1378 	ldr.w	r1, [r7, #888]	; 0x378
 8012504:	fb01 f103 	mul.w	r1, r1, r3
 8012508:	4401      	add	r1, r0
 801250a:	f8d7 0378 	ldr.w	r0, [r7, #888]	; 0x378
 801250e:	fba0 2302 	umull	r2, r3, r0, r2
 8012512:	f8c7 34fc 	str.w	r3, [r7, #1276]	; 0x4fc
 8012516:	4613      	mov	r3, r2
 8012518:	f8c7 34f8 	str.w	r3, [r7, #1272]	; 0x4f8
 801251c:	f8d7 34fc 	ldr.w	r3, [r7, #1276]	; 0x4fc
 8012520:	18cb      	adds	r3, r1, r3
 8012522:	f8c7 34fc 	str.w	r3, [r7, #1276]	; 0x4fc
 8012526:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
 801252a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801252e:	f8d7 14f8 	ldr.w	r1, [r7, #1272]	; 0x4f8
 8012532:	1851      	adds	r1, r2, r1
 8012534:	6539      	str	r1, [r7, #80]	; 0x50
 8012536:	f8d7 14fc 	ldr.w	r1, [r7, #1276]	; 0x4fc
 801253a:	414b      	adcs	r3, r1
 801253c:	657b      	str	r3, [r7, #84]	; 0x54
 801253e:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8012542:	f507 62c4 	add.w	r2, r7, #1568	; 0x620
 8012546:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 801254a:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
 801254e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012552:	2b00      	cmp	r3, #0
 8012554:	da08      	bge.n	8012568 <arm_softmax_s8+0x39a8>
 8012556:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801255a:	1851      	adds	r1, r2, r1
 801255c:	64b9      	str	r1, [r7, #72]	; 0x48
 801255e:	f143 0300 	adc.w	r3, r3, #0
 8012562:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012564:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8012568:	f04f 0000 	mov.w	r0, #0
 801256c:	f04f 0100 	mov.w	r1, #0
 8012570:	0fd0      	lsrs	r0, r2, #31
 8012572:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8012576:	17d9      	asrs	r1, r3, #31
 8012578:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801257c:	f5a3 7260 	sub.w	r2, r3, #896	; 0x380
 8012580:	4603      	mov	r3, r0
 8012582:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8012584:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012588:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 801258c:	681a      	ldr	r2, [r3, #0]
 801258e:	4b94      	ldr	r3, [pc, #592]	; (80127e0 <arm_softmax_s8+0x3c20>)
 8012590:	429a      	cmp	r2, r3
 8012592:	d10e      	bne.n	80125b2 <arm_softmax_s8+0x39f2>
 8012594:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012598:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 801259c:	681b      	ldr	r3, [r3, #0]
 801259e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80125a2:	d106      	bne.n	80125b2 <arm_softmax_s8+0x39f2>
        result = Q31_MAX;
 80125a4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80125a8:	f5a3 7260 	sub.w	r2, r3, #896	; 0x380
 80125ac:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80125b0:	6013      	str	r3, [r2, #0]
    return result;
 80125b2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80125b6:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 80125ba:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(39332535)
 80125bc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80125c0:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 80125c4:	681b      	ldr	r3, [r3, #0]
 80125c6:	ea02 0003 	and.w	r0, r2, r3
 80125ca:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80125ce:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 80125d2:	681b      	ldr	r3, [r3, #0]
 80125d4:	43da      	mvns	r2, r3
 80125d6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80125da:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 80125de:	681b      	ldr	r3, [r3, #0]
 80125e0:	ea02 0103 	and.w	r1, r2, r3
 80125e4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80125e8:	f5a3 724d 	sub.w	r2, r3, #820	; 0x334
 80125ec:	ea80 0301 	eor.w	r3, r0, r1
 80125f0:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(720401)
 80125f2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80125f6:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 80125fa:	6819      	ldr	r1, [r3, #0]
 80125fc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012600:	f5a3 7225 	sub.w	r2, r3, #660	; 0x294
 8012604:	1c4b      	adds	r3, r1, #1
 8012606:	6013      	str	r3, [r2, #0]
 8012608:	2301      	movs	r3, #1
 801260a:	fa03 f201 	lsl.w	r2, r3, r1
 801260e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012612:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8012616:	681b      	ldr	r3, [r3, #0]
 8012618:	4013      	ands	r3, r2
 801261a:	2b00      	cmp	r3, #0
 801261c:	d002      	beq.n	8012624 <arm_softmax_s8+0x3a64>
 801261e:	f04f 32ff 	mov.w	r2, #4294967295
 8012622:	e000      	b.n	8012626 <arm_softmax_s8+0x3a66>
 8012624:	2200      	movs	r2, #0
 8012626:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801262a:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 801262e:	601a      	str	r2, [r3, #0]
 8012630:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012634:	f5a3 7263 	sub.w	r2, r3, #908	; 0x38c
 8012638:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801263c:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8012640:	681b      	ldr	r3, [r3, #0]
 8012642:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8012644:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012648:	f5a3 7264 	sub.w	r2, r3, #912	; 0x390
 801264c:	2300      	movs	r3, #0
 801264e:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8012650:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8012654:	f04f 0300 	mov.w	r3, #0
 8012658:	f507 61c2 	add.w	r1, r7, #1552	; 0x610
 801265c:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8012660:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012664:	f5a3 7363 	sub.w	r3, r3, #908	; 0x38c
 8012668:	681b      	ldr	r3, [r3, #0]
 801266a:	0fdb      	lsrs	r3, r3, #31
 801266c:	b2da      	uxtb	r2, r3
 801266e:	2300      	movs	r3, #0
 8012670:	4053      	eors	r3, r2
 8012672:	b2db      	uxtb	r3, r3
 8012674:	2b00      	cmp	r3, #0
 8012676:	d010      	beq.n	801269a <arm_softmax_s8+0x3ada>
        mult = 1 - mult;
 8012678:	f507 63c2 	add.w	r3, r7, #1552	; 0x610
 801267c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012680:	2100      	movs	r1, #0
 8012682:	f1d2 0001 	rsbs	r0, r2, #1
 8012686:	6438      	str	r0, [r7, #64]	; 0x40
 8012688:	eb61 0303 	sbc.w	r3, r1, r3
 801268c:	647b      	str	r3, [r7, #68]	; 0x44
 801268e:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8012692:	f507 62c2 	add.w	r2, r7, #1552	; 0x610
 8012696:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 801269a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801269e:	f5a3 7363 	sub.w	r3, r3, #908	; 0x38c
 80126a2:	681b      	ldr	r3, [r3, #0]
 80126a4:	17da      	asrs	r2, r3, #31
 80126a6:	f8c7 3370 	str.w	r3, [r7, #880]	; 0x370
 80126aa:	f8c7 2374 	str.w	r2, [r7, #884]	; 0x374
 80126ae:	4a4d      	ldr	r2, [pc, #308]	; (80127e4 <arm_softmax_s8+0x3c24>)
 80126b0:	f04f 0300 	mov.w	r3, #0
 80126b4:	f8d7 1374 	ldr.w	r1, [r7, #884]	; 0x374
 80126b8:	fb02 f001 	mul.w	r0, r2, r1
 80126bc:	f8d7 1370 	ldr.w	r1, [r7, #880]	; 0x370
 80126c0:	fb01 f103 	mul.w	r1, r1, r3
 80126c4:	4401      	add	r1, r0
 80126c6:	f8d7 0370 	ldr.w	r0, [r7, #880]	; 0x370
 80126ca:	fba0 2302 	umull	r2, r3, r0, r2
 80126ce:	f8c7 34f4 	str.w	r3, [r7, #1268]	; 0x4f4
 80126d2:	4613      	mov	r3, r2
 80126d4:	f8c7 34f0 	str.w	r3, [r7, #1264]	; 0x4f0
 80126d8:	f8d7 34f4 	ldr.w	r3, [r7, #1268]	; 0x4f4
 80126dc:	18cb      	adds	r3, r1, r3
 80126de:	f8c7 34f4 	str.w	r3, [r7, #1268]	; 0x4f4
 80126e2:	f507 63c2 	add.w	r3, r7, #1552	; 0x610
 80126e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126ea:	f8d7 14f0 	ldr.w	r1, [r7, #1264]	; 0x4f0
 80126ee:	1851      	adds	r1, r2, r1
 80126f0:	63b9      	str	r1, [r7, #56]	; 0x38
 80126f2:	f8d7 14f4 	ldr.w	r1, [r7, #1268]	; 0x4f4
 80126f6:	414b      	adcs	r3, r1
 80126f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80126fa:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 80126fe:	f507 62c2 	add.w	r2, r7, #1552	; 0x610
 8012702:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8012706:	f507 63c2 	add.w	r3, r7, #1552	; 0x610
 801270a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801270e:	2b00      	cmp	r3, #0
 8012710:	da08      	bge.n	8012724 <arm_softmax_s8+0x3b64>
 8012712:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8012716:	1851      	adds	r1, r2, r1
 8012718:	6339      	str	r1, [r7, #48]	; 0x30
 801271a:	f143 0300 	adc.w	r3, r3, #0
 801271e:	637b      	str	r3, [r7, #52]	; 0x34
 8012720:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8012724:	f04f 0000 	mov.w	r0, #0
 8012728:	f04f 0100 	mov.w	r1, #0
 801272c:	0fd0      	lsrs	r0, r2, #31
 801272e:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8012732:	17d9      	asrs	r1, r3, #31
 8012734:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012738:	f5a3 7264 	sub.w	r2, r3, #912	; 0x390
 801273c:	4603      	mov	r3, r0
 801273e:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8012740:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012744:	f5a3 7363 	sub.w	r3, r3, #908	; 0x38c
 8012748:	681a      	ldr	r2, [r3, #0]
 801274a:	4b26      	ldr	r3, [pc, #152]	; (80127e4 <arm_softmax_s8+0x3c24>)
 801274c:	429a      	cmp	r2, r3
 801274e:	d10e      	bne.n	801276e <arm_softmax_s8+0x3bae>
 8012750:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012754:	f5a3 7363 	sub.w	r3, r3, #908	; 0x38c
 8012758:	681b      	ldr	r3, [r3, #0]
 801275a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801275e:	d106      	bne.n	801276e <arm_softmax_s8+0x3bae>
        result = Q31_MAX;
 8012760:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012764:	f5a3 7264 	sub.w	r2, r3, #912	; 0x390
 8012768:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801276c:	6013      	str	r3, [r2, #0]
    return result;
 801276e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012772:	f5a3 7364 	sub.w	r3, r3, #912	; 0x390
 8012776:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(720401)
 8012778:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801277c:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8012780:	681b      	ldr	r3, [r3, #0]
 8012782:	ea02 0003 	and.w	r0, r2, r3
 8012786:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801278a:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 801278e:	681b      	ldr	r3, [r3, #0]
 8012790:	43da      	mvns	r2, r3
 8012792:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012796:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 801279a:	681b      	ldr	r3, [r3, #0]
 801279c:	ea02 0103 	and.w	r1, r2, r3
 80127a0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80127a4:	f5a3 724d 	sub.w	r2, r3, #820	; 0x334
 80127a8:	ea80 0301 	eor.w	r3, r0, r1
 80127ac:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(242)
 80127ae:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80127b2:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 80127b6:	6819      	ldr	r1, [r3, #0]
 80127b8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80127bc:	f5a3 7225 	sub.w	r2, r3, #660	; 0x294
 80127c0:	1c4b      	adds	r3, r1, #1
 80127c2:	6013      	str	r3, [r2, #0]
 80127c4:	2301      	movs	r3, #1
 80127c6:	fa03 f201 	lsl.w	r2, r3, r1
 80127ca:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80127ce:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80127d2:	681b      	ldr	r3, [r3, #0]
 80127d4:	4013      	ands	r3, r2
 80127d6:	2b00      	cmp	r3, #0
 80127d8:	d00a      	beq.n	80127f0 <arm_softmax_s8+0x3c30>
 80127da:	f04f 32ff 	mov.w	r2, #4294967295
 80127de:	e008      	b.n	80127f2 <arm_softmax_s8+0x3c32>
 80127e0:	02582ab7 	.word	0x02582ab7
 80127e4:	000afe11 	.word	0x000afe11
 80127e8:	02582ab7 	.word	0x02582ab7
 80127ec:	00000000 	.word	0x00000000
 80127f0:	2200      	movs	r2, #0
 80127f2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80127f6:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 80127fa:	601a      	str	r2, [r3, #0]
 80127fc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012800:	f5a3 7267 	sub.w	r2, r3, #924	; 0x39c
 8012804:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012808:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 801280c:	681b      	ldr	r3, [r3, #0]
 801280e:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8012810:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012814:	f5a3 7268 	sub.w	r2, r3, #928	; 0x3a0
 8012818:	2300      	movs	r3, #0
 801281a:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 801281c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8012820:	f04f 0300 	mov.w	r3, #0
 8012824:	f507 61c0 	add.w	r1, r7, #1536	; 0x600
 8012828:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 801282c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012830:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 8012834:	681b      	ldr	r3, [r3, #0]
 8012836:	0fdb      	lsrs	r3, r3, #31
 8012838:	b2da      	uxtb	r2, r3
 801283a:	2300      	movs	r3, #0
 801283c:	4053      	eors	r3, r2
 801283e:	b2db      	uxtb	r3, r3
 8012840:	2b00      	cmp	r3, #0
 8012842:	d010      	beq.n	8012866 <arm_softmax_s8+0x3ca6>
        mult = 1 - mult;
 8012844:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 8012848:	e9d3 2300 	ldrd	r2, r3, [r3]
 801284c:	2100      	movs	r1, #0
 801284e:	f1d2 0001 	rsbs	r0, r2, #1
 8012852:	62b8      	str	r0, [r7, #40]	; 0x28
 8012854:	eb61 0303 	sbc.w	r3, r1, r3
 8012858:	62fb      	str	r3, [r7, #44]	; 0x2c
 801285a:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 801285e:	f507 62c0 	add.w	r2, r7, #1536	; 0x600
 8012862:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8012866:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801286a:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 801286e:	681b      	ldr	r3, [r3, #0]
 8012870:	17da      	asrs	r2, r3, #31
 8012872:	f8c7 3368 	str.w	r3, [r7, #872]	; 0x368
 8012876:	f8c7 236c 	str.w	r2, [r7, #876]	; 0x36c
 801287a:	f04f 02f2 	mov.w	r2, #242	; 0xf2
 801287e:	f04f 0300 	mov.w	r3, #0
 8012882:	f8d7 136c 	ldr.w	r1, [r7, #876]	; 0x36c
 8012886:	fb02 f001 	mul.w	r0, r2, r1
 801288a:	f8d7 1368 	ldr.w	r1, [r7, #872]	; 0x368
 801288e:	fb01 f103 	mul.w	r1, r1, r3
 8012892:	4401      	add	r1, r0
 8012894:	f8d7 0368 	ldr.w	r0, [r7, #872]	; 0x368
 8012898:	fba0 2302 	umull	r2, r3, r0, r2
 801289c:	f8c7 34ec 	str.w	r3, [r7, #1260]	; 0x4ec
 80128a0:	4613      	mov	r3, r2
 80128a2:	f8c7 34e8 	str.w	r3, [r7, #1256]	; 0x4e8
 80128a6:	f8d7 34ec 	ldr.w	r3, [r7, #1260]	; 0x4ec
 80128aa:	18cb      	adds	r3, r1, r3
 80128ac:	f8c7 34ec 	str.w	r3, [r7, #1260]	; 0x4ec
 80128b0:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 80128b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128b8:	f8d7 14e8 	ldr.w	r1, [r7, #1256]	; 0x4e8
 80128bc:	1851      	adds	r1, r2, r1
 80128be:	6239      	str	r1, [r7, #32]
 80128c0:	f8d7 14ec 	ldr.w	r1, [r7, #1260]	; 0x4ec
 80128c4:	414b      	adcs	r3, r1
 80128c6:	627b      	str	r3, [r7, #36]	; 0x24
 80128c8:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80128cc:	f507 62c0 	add.w	r2, r7, #1536	; 0x600
 80128d0:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 80128d4:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 80128d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128dc:	2b00      	cmp	r3, #0
 80128de:	da08      	bge.n	80128f2 <arm_softmax_s8+0x3d32>
 80128e0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80128e4:	1851      	adds	r1, r2, r1
 80128e6:	61b9      	str	r1, [r7, #24]
 80128e8:	f143 0300 	adc.w	r3, r3, #0
 80128ec:	61fb      	str	r3, [r7, #28]
 80128ee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80128f2:	f04f 0000 	mov.w	r0, #0
 80128f6:	f04f 0100 	mov.w	r1, #0
 80128fa:	0fd0      	lsrs	r0, r2, #31
 80128fc:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8012900:	17d9      	asrs	r1, r3, #31
 8012902:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012906:	f5a3 7268 	sub.w	r2, r3, #928	; 0x3a0
 801290a:	4603      	mov	r3, r0
 801290c:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 801290e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012912:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 8012916:	681b      	ldr	r3, [r3, #0]
 8012918:	2bf2      	cmp	r3, #242	; 0xf2
 801291a:	d10e      	bne.n	801293a <arm_softmax_s8+0x3d7a>
 801291c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012920:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 8012924:	681b      	ldr	r3, [r3, #0]
 8012926:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801292a:	d106      	bne.n	801293a <arm_softmax_s8+0x3d7a>
        result = Q31_MAX;
 801292c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012930:	f5a3 7268 	sub.w	r2, r3, #928	; 0x3a0
 8012934:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8012938:	6013      	str	r3, [r2, #0]
    return result;
 801293a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801293e:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 8012942:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(242)
 8012944:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012948:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 801294c:	681b      	ldr	r3, [r3, #0]
 801294e:	ea02 0003 	and.w	r0, r2, r3
 8012952:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012956:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 801295a:	681b      	ldr	r3, [r3, #0]
 801295c:	43da      	mvns	r2, r3
 801295e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012962:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8012966:	681b      	ldr	r3, [r3, #0]
 8012968:	ea02 0103 	and.w	r1, r2, r3
 801296c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012970:	f5a3 724d 	sub.w	r2, r3, #820	; 0x334
 8012974:	ea80 0301 	eor.w	r3, r0, r1
 8012978:	6013      	str	r3, [r2, #0]
    mask = MASK_IF_ZERO(val);
 801297a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801297e:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 8012982:	681b      	ldr	r3, [r3, #0]
 8012984:	2b00      	cmp	r3, #0
 8012986:	d102      	bne.n	801298e <arm_softmax_s8+0x3dce>
 8012988:	f04f 32ff 	mov.w	r2, #4294967295
 801298c:	e000      	b.n	8012990 <arm_softmax_s8+0x3dd0>
 801298e:	2200      	movs	r2, #0
 8012990:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012994:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8012998:	601a      	str	r2, [r3, #0]
    return SELECT_USING_MASK(mask, Q31_MAX, result);
 801299a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801299e:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 80129a2:	681b      	ldr	r3, [r3, #0]
 80129a4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80129a8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80129ac:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 80129b0:	681b      	ldr	r3, [r3, #0]
 80129b2:	43da      	mvns	r2, r3
 80129b4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80129b8:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 80129bc:	681b      	ldr	r3, [r3, #0]
 80129be:	4013      	ands	r3, r2
 80129c0:	4059      	eors	r1, r3
 80129c2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80129c6:	f5a3 721e 	sub.w	r2, r3, #632	; 0x278
 80129ca:	f8d7 3984 	ldr.w	r3, [r7, #2436]	; 0x984
 80129ce:	6013      	str	r3, [r2, #0]
 80129d0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80129d4:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 80129d8:	6019      	str	r1, [r3, #0]
    q31_t result = 0;
 80129da:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80129de:	f5a3 7220 	sub.w	r2, r3, #640	; 0x280
 80129e2:	2300      	movs	r3, #0
 80129e4:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 80129e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80129ea:	f04f 0300 	mov.w	r3, #0
 80129ee:	f507 61e4 	add.w	r1, r7, #1824	; 0x720
 80129f2:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 80129f6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80129fa:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 80129fe:	681b      	ldr	r3, [r3, #0]
 8012a00:	0fdb      	lsrs	r3, r3, #31
 8012a02:	b2da      	uxtb	r2, r3
 8012a04:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012a08:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8012a0c:	681b      	ldr	r3, [r3, #0]
 8012a0e:	0fdb      	lsrs	r3, r3, #31
 8012a10:	b2db      	uxtb	r3, r3
 8012a12:	4053      	eors	r3, r2
 8012a14:	b2db      	uxtb	r3, r3
 8012a16:	2b00      	cmp	r3, #0
 8012a18:	d010      	beq.n	8012a3c <arm_softmax_s8+0x3e7c>
        mult = 1 - mult;
 8012a1a:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 8012a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a22:	2100      	movs	r1, #0
 8012a24:	f1d2 0001 	rsbs	r0, r2, #1
 8012a28:	6138      	str	r0, [r7, #16]
 8012a2a:	eb61 0303 	sbc.w	r3, r1, r3
 8012a2e:	617b      	str	r3, [r7, #20]
 8012a30:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8012a34:	f507 62e4 	add.w	r2, r7, #1824	; 0x720
 8012a38:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8012a3c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012a40:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 8012a44:	681b      	ldr	r3, [r3, #0]
 8012a46:	17da      	asrs	r2, r3, #31
 8012a48:	f8c7 33e8 	str.w	r3, [r7, #1000]	; 0x3e8
 8012a4c:	f8c7 23ec 	str.w	r2, [r7, #1004]	; 0x3ec
 8012a50:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012a54:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8012a58:	681b      	ldr	r3, [r3, #0]
 8012a5a:	17da      	asrs	r2, r3, #31
 8012a5c:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0
 8012a60:	f8c7 23e4 	str.w	r2, [r7, #996]	; 0x3e4
 8012a64:	e9d7 01fa 	ldrd	r0, r1, [r7, #1000]	; 0x3e8
 8012a68:	460b      	mov	r3, r1
 8012a6a:	f8d7 23e0 	ldr.w	r2, [r7, #992]	; 0x3e0
 8012a6e:	fb02 f203 	mul.w	r2, r2, r3
 8012a72:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8012a76:	e9c7 01fa 	strd	r0, r1, [r7, #1000]	; 0x3e8
 8012a7a:	4601      	mov	r1, r0
 8012a7c:	fb01 f303 	mul.w	r3, r1, r3
 8012a80:	4413      	add	r3, r2
 8012a82:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	; 0x3e8
 8012a86:	f8d7 13e0 	ldr.w	r1, [r7, #992]	; 0x3e0
 8012a8a:	fba2 1201 	umull	r1, r2, r2, r1
 8012a8e:	f8c7 254c 	str.w	r2, [r7, #1356]	; 0x54c
 8012a92:	460a      	mov	r2, r1
 8012a94:	f8c7 2548 	str.w	r2, [r7, #1352]	; 0x548
 8012a98:	f8d7 254c 	ldr.w	r2, [r7, #1356]	; 0x54c
 8012a9c:	4413      	add	r3, r2
 8012a9e:	f8c7 354c 	str.w	r3, [r7, #1356]	; 0x54c
 8012aa2:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 8012aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012aaa:	f8d7 1548 	ldr.w	r1, [r7, #1352]	; 0x548
 8012aae:	1851      	adds	r1, r2, r1
 8012ab0:	60b9      	str	r1, [r7, #8]
 8012ab2:	f8d7 154c 	ldr.w	r1, [r7, #1356]	; 0x54c
 8012ab6:	414b      	adcs	r3, r1
 8012ab8:	60fb      	str	r3, [r7, #12]
 8012aba:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8012abe:	f507 62e4 	add.w	r2, r7, #1824	; 0x720
 8012ac2:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8012ac6:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 8012aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ace:	2b00      	cmp	r3, #0
 8012ad0:	da08      	bge.n	8012ae4 <arm_softmax_s8+0x3f24>
 8012ad2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8012ad6:	1851      	adds	r1, r2, r1
 8012ad8:	6039      	str	r1, [r7, #0]
 8012ada:	f143 0300 	adc.w	r3, r3, #0
 8012ade:	607b      	str	r3, [r7, #4]
 8012ae0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012ae4:	f04f 0000 	mov.w	r0, #0
 8012ae8:	f04f 0100 	mov.w	r1, #0
 8012aec:	0fd0      	lsrs	r0, r2, #31
 8012aee:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8012af2:	17d9      	asrs	r1, r3, #31
 8012af4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012af8:	f5a3 7220 	sub.w	r2, r3, #640	; 0x280
 8012afc:	4603      	mov	r3, r0
 8012afe:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8012b00:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012b04:	f5a3 721e 	sub.w	r2, r3, #632	; 0x278
 8012b08:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012b0c:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8012b10:	6812      	ldr	r2, [r2, #0]
 8012b12:	681b      	ldr	r3, [r3, #0]
 8012b14:	429a      	cmp	r2, r3
 8012b16:	d10e      	bne.n	8012b36 <arm_softmax_s8+0x3f76>
 8012b18:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012b1c:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 8012b20:	681b      	ldr	r3, [r3, #0]
 8012b22:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012b26:	d106      	bne.n	8012b36 <arm_softmax_s8+0x3f76>
        result = Q31_MAX;
 8012b28:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012b2c:	f5a3 7220 	sub.w	r2, r3, #640	; 0x280
 8012b30:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8012b34:	6013      	str	r3, [r2, #0]
    return result;
 8012b36:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012b3a:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 8012b3e:	681a      	ldr	r2, [r3, #0]
 8012b40:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012b44:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8012b48:	601a      	str	r2, [r3, #0]
 8012b4a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012b4e:	f5a3 7219 	sub.w	r2, r3, #612	; 0x264
 8012b52:	f8d7 3988 	ldr.w	r3, [r7, #2440]	; 0x988
 8012b56:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8012b58:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012b5c:	f5a3 721a 	sub.w	r2, r3, #616	; 0x268
 8012b60:	2300      	movs	r3, #0
 8012b62:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 8012b64:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012b68:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8012b6c:	2201      	movs	r2, #1
 8012b6e:	681b      	ldr	r3, [r3, #0]
 8012b70:	fa02 f103 	lsl.w	r1, r2, r3
 8012b74:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012b78:	f5a3 721b 	sub.w	r2, r3, #620	; 0x26c
 8012b7c:	1e4b      	subs	r3, r1, #1
 8012b7e:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 8012b80:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012b84:	f5a3 711c 	sub.w	r1, r3, #624	; 0x270
 8012b88:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012b8c:	f5a3 7218 	sub.w	r2, r3, #608	; 0x260
 8012b90:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012b94:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8012b98:	6812      	ldr	r2, [r2, #0]
 8012b9a:	681b      	ldr	r3, [r3, #0]
 8012b9c:	4013      	ands	r3, r2
 8012b9e:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 8012ba0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012ba4:	f5a3 711a 	sub.w	r1, r3, #616	; 0x268
 8012ba8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012bac:	f5a3 7218 	sub.w	r2, r3, #608	; 0x260
 8012bb0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012bb4:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8012bb8:	6812      	ldr	r2, [r2, #0]
 8012bba:	681b      	ldr	r3, [r3, #0]
 8012bbc:	fa42 f303 	asr.w	r3, r2, r3
 8012bc0:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 8012bc2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012bc6:	f5a3 721d 	sub.w	r2, r3, #628	; 0x274
 8012bca:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012bce:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8012bd2:	681b      	ldr	r3, [r3, #0]
 8012bd4:	105b      	asrs	r3, r3, #1
 8012bd6:	6013      	str	r3, [r2, #0]
    if (result < 0)
 8012bd8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012bdc:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8012be0:	681b      	ldr	r3, [r3, #0]
 8012be2:	2b00      	cmp	r3, #0
 8012be4:	da0a      	bge.n	8012bfc <arm_softmax_s8+0x403c>
        threshold++;
 8012be6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012bea:	f5a3 721d 	sub.w	r2, r3, #628	; 0x274
 8012bee:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012bf2:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 8012bf6:	681b      	ldr	r3, [r3, #0]
 8012bf8:	3301      	adds	r3, #1
 8012bfa:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 8012bfc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012c00:	f5a3 721c 	sub.w	r2, r3, #624	; 0x270
 8012c04:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012c08:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 8012c0c:	6812      	ldr	r2, [r2, #0]
 8012c0e:	681b      	ldr	r3, [r3, #0]
 8012c10:	429a      	cmp	r2, r3
 8012c12:	dd0a      	ble.n	8012c2a <arm_softmax_s8+0x406a>
        result++;
 8012c14:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012c18:	f5a3 721a 	sub.w	r2, r3, #616	; 0x268
 8012c1c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012c20:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8012c24:	681b      	ldr	r3, [r3, #0]
 8012c26:	3301      	adds	r3, #1
 8012c28:	6013      	str	r3, [r2, #0]
    return result;
 8012c2a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012c2e:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8012c32:	681b      	ldr	r3, [r3, #0]
                const int32_t res =
 8012c34:	3b80      	subs	r3, #128	; 0x80
 8012c36:	f8c7 3980 	str.w	r3, [r7, #2432]	; 0x980
                output[col] = (int8_t)CLAMP(res, (int32_t)127, (int32_t)-128);
 8012c3a:	f8d7 3980 	ldr.w	r3, [r7, #2432]	; 0x980
 8012c3e:	f113 0f7f 	cmn.w	r3, #127	; 0x7f
 8012c42:	db09      	blt.n	8012c58 <arm_softmax_s8+0x4098>
 8012c44:	f8d7 3980 	ldr.w	r3, [r7, #2432]	; 0x980
 8012c48:	2b7e      	cmp	r3, #126	; 0x7e
 8012c4a:	dc03      	bgt.n	8012c54 <arm_softmax_s8+0x4094>
 8012c4c:	f8d7 3980 	ldr.w	r3, [r7, #2432]	; 0x980
 8012c50:	b259      	sxtb	r1, r3
 8012c52:	e003      	b.n	8012c5c <arm_softmax_s8+0x409c>
 8012c54:	217f      	movs	r1, #127	; 0x7f
 8012c56:	e001      	b.n	8012c5c <arm_softmax_s8+0x409c>
 8012c58:	f06f 017f 	mvn.w	r1, #127	; 0x7f
 8012c5c:	f8d7 29a4 	ldr.w	r2, [r7, #2468]	; 0x9a4
 8012c60:	f8d7 39d0 	ldr.w	r3, [r7, #2512]	; 0x9d0
 8012c64:	441a      	add	r2, r3
 8012c66:	460b      	mov	r3, r1
 8012c68:	7013      	strb	r3, [r2, #0]
 8012c6a:	e006      	b.n	8012c7a <arm_softmax_s8+0x40ba>
            }
            else
            {
                output[col] = -128;
 8012c6c:	f8d7 29a4 	ldr.w	r2, [r7, #2468]	; 0x9a4
 8012c70:	f8d7 39d0 	ldr.w	r3, [r7, #2512]	; 0x9d0
 8012c74:	441a      	add	r2, r3
 8012c76:	2380      	movs	r3, #128	; 0x80
 8012c78:	7013      	strb	r3, [r2, #0]
        for (col = 0; col < row_size; ++col)
 8012c7a:	f8d7 39a4 	ldr.w	r3, [r7, #2468]	; 0x9a4
 8012c7e:	3301      	adds	r3, #1
 8012c80:	f8c7 39a4 	str.w	r3, [r7, #2468]	; 0x9a4
 8012c84:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012c88:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8012c8c:	f8d7 29a4 	ldr.w	r2, [r7, #2468]	; 0x9a4
 8012c90:	681b      	ldr	r3, [r3, #0]
 8012c92:	429a      	cmp	r2, r3
 8012c94:	f6fe aa71 	blt.w	801117a <arm_softmax_s8+0x25ba>
            }
        }
        input += row_size;
 8012c98:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012c9c:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8012ca0:	6819      	ldr	r1, [r3, #0]
 8012ca2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012ca6:	f5a3 7271 	sub.w	r2, r3, #964	; 0x3c4
 8012caa:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012cae:	f5a3 7371 	sub.w	r3, r3, #964	; 0x3c4
 8012cb2:	681b      	ldr	r3, [r3, #0]
 8012cb4:	440b      	add	r3, r1
 8012cb6:	6013      	str	r3, [r2, #0]
        output += row_size;
 8012cb8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012cbc:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8012cc0:	681a      	ldr	r2, [r3, #0]
 8012cc2:	f8d7 39d0 	ldr.w	r3, [r7, #2512]	; 0x9d0
 8012cc6:	4413      	add	r3, r2
 8012cc8:	f8c7 39d0 	str.w	r3, [r7, #2512]	; 0x9d0
    for (row_idx = 0; row_idx < num_rows; ++row_idx)
 8012ccc:	f8d7 39a0 	ldr.w	r3, [r7, #2464]	; 0x9a0
 8012cd0:	3301      	adds	r3, #1
 8012cd2:	f8c7 39a0 	str.w	r3, [r7, #2464]	; 0x9a0
 8012cd6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012cda:	f5a3 7372 	sub.w	r3, r3, #968	; 0x3c8
 8012cde:	f8d7 29a0 	ldr.w	r2, [r7, #2464]	; 0x9a0
 8012ce2:	681b      	ldr	r3, [r3, #0]
 8012ce4:	429a      	cmp	r2, r3
 8012ce6:	f6fb af93 	blt.w	800ec10 <arm_softmax_s8+0x50>
    }

#endif
}
 8012cea:	bf00      	nop
 8012cec:	bf00      	nop
 8012cee:	f607 17a8 	addw	r7, r7, #2472	; 0x9a8
 8012cf2:	46bd      	mov	sp, r7
 8012cf4:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8012cf8:	4770      	bx	lr
 8012cfa:	bf00      	nop

08012cfc <_ZSt5log10f>:
  { return __builtin_log10f(__x); }
 8012cfc:	b580      	push	{r7, lr}
 8012cfe:	b082      	sub	sp, #8
 8012d00:	af00      	add	r7, sp, #0
 8012d02:	ed87 0a01 	vstr	s0, [r7, #4]
 8012d06:	ed97 0a01 	vldr	s0, [r7, #4]
 8012d0a:	f006 f9fd 	bl	8019108 <log10f>
 8012d0e:	eef0 7a40 	vmov.f32	s15, s0
 8012d12:	eeb0 0a67 	vmov.f32	s0, s15
 8012d16:	3708      	adds	r7, #8
 8012d18:	46bd      	mov	sp, r7
 8012d1a:	bd80      	pop	{r7, pc}

08012d1c <_ZSt5isinfd>:
  { return __builtin_isinf(__x); }
 8012d1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012d1e:	b083      	sub	sp, #12
 8012d20:	af00      	add	r7, sp, #0
 8012d22:	ed87 0b00 	vstr	d0, [r7]
 8012d26:	683c      	ldr	r4, [r7, #0]
 8012d28:	687b      	ldr	r3, [r7, #4]
 8012d2a:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8012d2e:	2301      	movs	r3, #1
 8012d30:	461e      	mov	r6, r3
 8012d32:	f04f 32ff 	mov.w	r2, #4294967295
 8012d36:	4b10      	ldr	r3, [pc, #64]	; (8012d78 <_ZSt5isinfd+0x5c>)
 8012d38:	4620      	mov	r0, r4
 8012d3a:	4629      	mov	r1, r5
 8012d3c:	f7ed ff00 	bl	8000b40 <__aeabi_dcmpun>
 8012d40:	4603      	mov	r3, r0
 8012d42:	2b00      	cmp	r3, #0
 8012d44:	d10b      	bne.n	8012d5e <_ZSt5isinfd+0x42>
 8012d46:	f04f 32ff 	mov.w	r2, #4294967295
 8012d4a:	4b0b      	ldr	r3, [pc, #44]	; (8012d78 <_ZSt5isinfd+0x5c>)
 8012d4c:	4620      	mov	r0, r4
 8012d4e:	4629      	mov	r1, r5
 8012d50:	f7ed fed8 	bl	8000b04 <__aeabi_dcmple>
 8012d54:	4603      	mov	r3, r0
 8012d56:	2b00      	cmp	r3, #0
 8012d58:	d101      	bne.n	8012d5e <_ZSt5isinfd+0x42>
 8012d5a:	2300      	movs	r3, #0
 8012d5c:	461e      	mov	r6, r3
 8012d5e:	b2f3      	uxtb	r3, r6
 8012d60:	f083 0301 	eor.w	r3, r3, #1
 8012d64:	b2db      	uxtb	r3, r3
 8012d66:	2b00      	cmp	r3, #0
 8012d68:	bf14      	ite	ne
 8012d6a:	2301      	movne	r3, #1
 8012d6c:	2300      	moveq	r3, #0
 8012d6e:	b2db      	uxtb	r3, r3
 8012d70:	4618      	mov	r0, r3
 8012d72:	370c      	adds	r7, #12
 8012d74:	46bd      	mov	sp, r7
 8012d76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012d78:	7fefffff 	.word	0x7fefffff

08012d7c <_Z29ei_run_impulse_check_canceledv>:
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>

__attribute__((weak)) EI_IMPULSE_ERROR ei_run_impulse_check_canceled() {
 8012d7c:	b480      	push	{r7}
 8012d7e:	af00      	add	r7, sp, #0
    return EI_IMPULSE_OK;
 8012d80:	2300      	movs	r3, #0
}
 8012d82:	4618      	mov	r0, r3
 8012d84:	46bd      	mov	sp, r7
 8012d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d8a:	4770      	bx	lr

08012d8c <_Z16ei_read_timer_usv>:

uint64_t ei_read_timer_ms() {
    return HAL_GetTick();
}

uint64_t ei_read_timer_us() {
 8012d8c:	b5b0      	push	{r4, r5, r7, lr}
 8012d8e:	af00      	add	r7, sp, #0
    return HAL_GetTick() * 1000;
 8012d90:	f7f2 fba2 	bl	80054d8 <HAL_GetTick>
 8012d94:	4603      	mov	r3, r0
 8012d96:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8012d9a:	fb02 f303 	mul.w	r3, r2, r3
 8012d9e:	2200      	movs	r2, #0
 8012da0:	461c      	mov	r4, r3
 8012da2:	4615      	mov	r5, r2
 8012da4:	4622      	mov	r2, r4
 8012da6:	462b      	mov	r3, r5
}
 8012da8:	4610      	mov	r0, r2
 8012daa:	4619      	mov	r1, r3
 8012dac:	bdb0      	pop	{r4, r5, r7, pc}
	...

08012db0 <_Z15ei_printf_floatf>:
    va_start(myargs, format);
    vprintf(format, myargs);
    va_end(myargs);
}

__attribute__((weak)) void ei_printf_float(float f) {
 8012db0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012db4:	b08c      	sub	sp, #48	; 0x30
 8012db6:	af00      	add	r7, sp, #0
 8012db8:	ed87 0a01 	vstr	s0, [r7, #4]
        }
        *(c) = '\0';
    }


    ei_printf("%s", s);
 8012dbc:	466b      	mov	r3, sp
 8012dbe:	4698      	mov	r8, r3
    float n = f;
 8012dc0:	687b      	ldr	r3, [r7, #4]
 8012dc2:	627b      	str	r3, [r7, #36]	; 0x24
    char s[MAX_NUMBER_STRING_SIZE];
 8012dc4:	4b7e      	ldr	r3, [pc, #504]	; (8012fc0 <_Z15ei_printf_floatf+0x210>)
 8012dc6:	681b      	ldr	r3, [r3, #0]
 8012dc8:	1e5e      	subs	r6, r3, #1
 8012dca:	623e      	str	r6, [r7, #32]
 8012dcc:	4633      	mov	r3, r6
 8012dce:	3301      	adds	r3, #1
 8012dd0:	2200      	movs	r2, #0
 8012dd2:	461c      	mov	r4, r3
 8012dd4:	4615      	mov	r5, r2
 8012dd6:	f04f 0200 	mov.w	r2, #0
 8012dda:	f04f 0300 	mov.w	r3, #0
 8012dde:	00eb      	lsls	r3, r5, #3
 8012de0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8012de4:	00e2      	lsls	r2, r4, #3
 8012de6:	4633      	mov	r3, r6
 8012de8:	3301      	adds	r3, #1
 8012dea:	2200      	movs	r2, #0
 8012dec:	4618      	mov	r0, r3
 8012dee:	4611      	mov	r1, r2
 8012df0:	f04f 0200 	mov.w	r2, #0
 8012df4:	f04f 0300 	mov.w	r3, #0
 8012df8:	00cb      	lsls	r3, r1, #3
 8012dfa:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8012dfe:	00c2      	lsls	r2, r0, #3
 8012e00:	4633      	mov	r3, r6
 8012e02:	3301      	adds	r3, #1
 8012e04:	3307      	adds	r3, #7
 8012e06:	08db      	lsrs	r3, r3, #3
 8012e08:	00db      	lsls	r3, r3, #3
 8012e0a:	ebad 0d03 	sub.w	sp, sp, r3
 8012e0e:	466b      	mov	r3, sp
 8012e10:	3300      	adds	r3, #0
 8012e12:	61fb      	str	r3, [r7, #28]
    if (n == 0.0) {
 8012e14:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8012e18:	eef5 7a40 	vcmp.f32	s15, #0.0
 8012e1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e20:	d106      	bne.n	8012e30 <_Z15ei_printf_floatf+0x80>
        strcpy(s, "0");
 8012e22:	69fb      	ldr	r3, [r7, #28]
 8012e24:	4967      	ldr	r1, [pc, #412]	; (8012fc4 <_Z15ei_printf_floatf+0x214>)
 8012e26:	461a      	mov	r2, r3
 8012e28:	460b      	mov	r3, r1
 8012e2a:	881b      	ldrh	r3, [r3, #0]
 8012e2c:	8013      	strh	r3, [r2, #0]
 8012e2e:	e0b6      	b.n	8012f9e <_Z15ei_printf_floatf+0x1ee>
        char *c = s;
 8012e30:	69fb      	ldr	r3, [r7, #28]
 8012e32:	62fb      	str	r3, [r7, #44]	; 0x2c
        int neg = (n < 0);
 8012e34:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8012e38:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8012e3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e40:	bf4c      	ite	mi
 8012e42:	2301      	movmi	r3, #1
 8012e44:	2300      	movpl	r3, #0
 8012e46:	b2db      	uxtb	r3, r3
 8012e48:	61bb      	str	r3, [r7, #24]
        if (neg) {
 8012e4a:	69bb      	ldr	r3, [r7, #24]
 8012e4c:	2b00      	cmp	r3, #0
 8012e4e:	d005      	beq.n	8012e5c <_Z15ei_printf_floatf+0xac>
            n = -n;
 8012e50:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8012e54:	eef1 7a67 	vneg.f32	s15, s15
 8012e58:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        m = log10(n);
 8012e5c:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8012e60:	f7ff ff4c 	bl	8012cfc <_ZSt5log10f>
 8012e64:	eef0 7a40 	vmov.f32	s15, s0
 8012e68:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012e6c:	ee17 3a90 	vmov	r3, s15
 8012e70:	62bb      	str	r3, [r7, #40]	; 0x28
        if (neg) {
 8012e72:	69bb      	ldr	r3, [r7, #24]
 8012e74:	2b00      	cmp	r3, #0
 8012e76:	d004      	beq.n	8012e82 <_Z15ei_printf_floatf+0xd2>
            *(c++) = '-';
 8012e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e7a:	1c5a      	adds	r2, r3, #1
 8012e7c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8012e7e:	222d      	movs	r2, #45	; 0x2d
 8012e80:	701a      	strb	r2, [r3, #0]
        if (m < 1.0) {
 8012e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e84:	2b00      	cmp	r3, #0
 8012e86:	dc01      	bgt.n	8012e8c <_Z15ei_printf_floatf+0xdc>
            m = 0;
 8012e88:	2300      	movs	r3, #0
 8012e8a:	62bb      	str	r3, [r7, #40]	; 0x28
        while (n > PRECISION || m >= 0) {
 8012e8c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012e8e:	f7ed fb65 	bl	800055c <__aeabi_f2d>
 8012e92:	4b4d      	ldr	r3, [pc, #308]	; (8012fc8 <_Z15ei_printf_floatf+0x218>)
 8012e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e98:	2401      	movs	r4, #1
 8012e9a:	f7ed fe47 	bl	8000b2c <__aeabi_dcmpgt>
 8012e9e:	4603      	mov	r3, r0
 8012ea0:	2b00      	cmp	r3, #0
 8012ea2:	d101      	bne.n	8012ea8 <_Z15ei_printf_floatf+0xf8>
 8012ea4:	2300      	movs	r3, #0
 8012ea6:	461c      	mov	r4, r3
 8012ea8:	b2e3      	uxtb	r3, r4
 8012eaa:	f083 0301 	eor.w	r3, r3, #1
 8012eae:	b2db      	uxtb	r3, r3
 8012eb0:	2b00      	cmp	r3, #0
 8012eb2:	d002      	beq.n	8012eba <_Z15ei_printf_floatf+0x10a>
 8012eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012eb6:	2b00      	cmp	r3, #0
 8012eb8:	db6e      	blt.n	8012f98 <_Z15ei_printf_floatf+0x1e8>
            double weight = pow(10.0, m);
 8012eba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012ebc:	ed9f 0b3e 	vldr	d0, [pc, #248]	; 8012fb8 <_Z15ei_printf_floatf+0x208>
 8012ec0:	f000 f89f 	bl	8013002 <_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8012ec4:	ed87 0b04 	vstr	d0, [r7, #16]
            if (weight > 0 && !isinf(weight)) {
 8012ec8:	f04f 0200 	mov.w	r2, #0
 8012ecc:	f04f 0300 	mov.w	r3, #0
 8012ed0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8012ed4:	f7ed fe2a 	bl	8000b2c <__aeabi_dcmpgt>
 8012ed8:	4603      	mov	r3, r0
 8012eda:	2b00      	cmp	r3, #0
 8012edc:	d00b      	beq.n	8012ef6 <_Z15ei_printf_floatf+0x146>
 8012ede:	ed97 0b04 	vldr	d0, [r7, #16]
 8012ee2:	f7ff ff1b 	bl	8012d1c <_ZSt5isinfd>
 8012ee6:	4603      	mov	r3, r0
 8012ee8:	f083 0301 	eor.w	r3, r3, #1
 8012eec:	b2db      	uxtb	r3, r3
 8012eee:	2b00      	cmp	r3, #0
 8012ef0:	d001      	beq.n	8012ef6 <_Z15ei_printf_floatf+0x146>
 8012ef2:	2301      	movs	r3, #1
 8012ef4:	e000      	b.n	8012ef8 <_Z15ei_printf_floatf+0x148>
 8012ef6:	2300      	movs	r3, #0
 8012ef8:	2b00      	cmp	r3, #0
 8012efa:	d03a      	beq.n	8012f72 <_Z15ei_printf_floatf+0x1c2>
                digit = floor(n / weight);
 8012efc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012efe:	f7ed fb2d 	bl	800055c <__aeabi_f2d>
 8012f02:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8012f06:	f7ed fcab 	bl	8000860 <__aeabi_ddiv>
 8012f0a:	4602      	mov	r2, r0
 8012f0c:	460b      	mov	r3, r1
 8012f0e:	ec43 2b17 	vmov	d7, r2, r3
 8012f12:	eeb0 0a47 	vmov.f32	s0, s14
 8012f16:	eef0 0a67 	vmov.f32	s1, s15
 8012f1a:	f005 ff2d 	bl	8018d78 <floor>
 8012f1e:	ec53 2b10 	vmov	r2, r3, d0
 8012f22:	4610      	mov	r0, r2
 8012f24:	4619      	mov	r1, r3
 8012f26:	f7ed fe21 	bl	8000b6c <__aeabi_d2iz>
 8012f2a:	4603      	mov	r3, r0
 8012f2c:	60fb      	str	r3, [r7, #12]
                n -= (digit * weight);
 8012f2e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012f30:	f7ed fb14 	bl	800055c <__aeabi_f2d>
 8012f34:	4604      	mov	r4, r0
 8012f36:	460d      	mov	r5, r1
 8012f38:	68f8      	ldr	r0, [r7, #12]
 8012f3a:	f7ed fafd 	bl	8000538 <__aeabi_i2d>
 8012f3e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8012f42:	f7ed fb63 	bl	800060c <__aeabi_dmul>
 8012f46:	4602      	mov	r2, r0
 8012f48:	460b      	mov	r3, r1
 8012f4a:	4620      	mov	r0, r4
 8012f4c:	4629      	mov	r1, r5
 8012f4e:	f7ed f9a5 	bl	800029c <__aeabi_dsub>
 8012f52:	4602      	mov	r2, r0
 8012f54:	460b      	mov	r3, r1
 8012f56:	4610      	mov	r0, r2
 8012f58:	4619      	mov	r1, r3
 8012f5a:	f7ed fe4f 	bl	8000bfc <__aeabi_d2f>
 8012f5e:	4603      	mov	r3, r0
 8012f60:	627b      	str	r3, [r7, #36]	; 0x24
                *(c++) = '0' + digit;
 8012f62:	68fb      	ldr	r3, [r7, #12]
 8012f64:	b2da      	uxtb	r2, r3
 8012f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f68:	1c59      	adds	r1, r3, #1
 8012f6a:	62f9      	str	r1, [r7, #44]	; 0x2c
 8012f6c:	3230      	adds	r2, #48	; 0x30
 8012f6e:	b2d2      	uxtb	r2, r2
 8012f70:	701a      	strb	r2, [r3, #0]
            if (m == 0 && n > 0) {
 8012f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f74:	2b00      	cmp	r3, #0
 8012f76:	d10b      	bne.n	8012f90 <_Z15ei_printf_floatf+0x1e0>
 8012f78:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8012f7c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8012f80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f84:	dd04      	ble.n	8012f90 <_Z15ei_printf_floatf+0x1e0>
                *(c++) = '.';
 8012f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f88:	1c5a      	adds	r2, r3, #1
 8012f8a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8012f8c:	222e      	movs	r2, #46	; 0x2e
 8012f8e:	701a      	strb	r2, [r3, #0]
            m--;
 8012f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f92:	3b01      	subs	r3, #1
 8012f94:	62bb      	str	r3, [r7, #40]	; 0x28
        while (n > PRECISION || m >= 0) {
 8012f96:	e779      	b.n	8012e8c <_Z15ei_printf_floatf+0xdc>
        *(c) = '\0';
 8012f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f9a:	2200      	movs	r2, #0
 8012f9c:	701a      	strb	r2, [r3, #0]
    ei_printf("%s", s);
 8012f9e:	69f9      	ldr	r1, [r7, #28]
 8012fa0:	480a      	ldr	r0, [pc, #40]	; (8012fcc <_Z15ei_printf_floatf+0x21c>)
 8012fa2:	f7f0 ff43 	bl	8003e2c <_Z9ei_printfPKcz>
 8012fa6:	46c5      	mov	sp, r8
}
 8012fa8:	bf00      	nop
 8012faa:	3730      	adds	r7, #48	; 0x30
 8012fac:	46bd      	mov	sp, r7
 8012fae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012fb2:	bf00      	nop
 8012fb4:	f3af 8000 	nop.w
 8012fb8:	00000000 	.word	0x00000000
 8012fbc:	40240000 	.word	0x40240000
 8012fc0:	200000e8 	.word	0x200000e8
 8012fc4:	0801c328 	.word	0x0801c328
 8012fc8:	200000e0 	.word	0x200000e0
 8012fcc:	0801c32c 	.word	0x0801c32c

08012fd0 <_Z9ei_callocjj>:

__attribute__((weak)) void *ei_malloc(size_t size) {
    return malloc(size);
}

__attribute__((weak)) void *ei_calloc(size_t nitems, size_t size) {
 8012fd0:	b580      	push	{r7, lr}
 8012fd2:	b082      	sub	sp, #8
 8012fd4:	af00      	add	r7, sp, #0
 8012fd6:	6078      	str	r0, [r7, #4]
 8012fd8:	6039      	str	r1, [r7, #0]
    return calloc(nitems, size);
 8012fda:	6839      	ldr	r1, [r7, #0]
 8012fdc:	6878      	ldr	r0, [r7, #4]
 8012fde:	f007 f9ff 	bl	801a3e0 <calloc>
 8012fe2:	4603      	mov	r3, r0
}
 8012fe4:	4618      	mov	r0, r3
 8012fe6:	3708      	adds	r7, #8
 8012fe8:	46bd      	mov	sp, r7
 8012fea:	bd80      	pop	{r7, pc}

08012fec <_Z7ei_freePv>:

__attribute__((weak)) void ei_free(void *ptr) {
 8012fec:	b580      	push	{r7, lr}
 8012fee:	b082      	sub	sp, #8
 8012ff0:	af00      	add	r7, sp, #0
 8012ff2:	6078      	str	r0, [r7, #4]
    free(ptr);
 8012ff4:	6878      	ldr	r0, [r7, #4]
 8012ff6:	f007 fa43 	bl	801a480 <free>
}
 8012ffa:	bf00      	nop
 8012ffc:	3708      	adds	r7, #8
 8012ffe:	46bd      	mov	sp, r7
 8013000:	bd80      	pop	{r7, pc}

08013002 <_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    pow(_Tp __x, _Up __y)
 8013002:	b580      	push	{r7, lr}
 8013004:	b084      	sub	sp, #16
 8013006:	af00      	add	r7, sp, #0
 8013008:	ed87 0b02 	vstr	d0, [r7, #8]
 801300c:	6078      	str	r0, [r7, #4]
      return pow(__type(__x), __type(__y));
 801300e:	6878      	ldr	r0, [r7, #4]
 8013010:	f7ed fa92 	bl	8000538 <__aeabi_i2d>
 8013014:	4602      	mov	r2, r0
 8013016:	460b      	mov	r3, r1
 8013018:	ec43 2b11 	vmov	d1, r2, r3
 801301c:	ed97 0b02 	vldr	d0, [r7, #8]
 8013020:	f005 ffcc 	bl	8018fbc <pow>
 8013024:	eeb0 7a40 	vmov.f32	s14, s0
 8013028:	eef0 7a60 	vmov.f32	s15, s1
    }
 801302c:	eeb0 0a47 	vmov.f32	s0, s14
 8013030:	eef0 0a67 	vmov.f32	s1, s15
 8013034:	3710      	adds	r7, #16
 8013036:	46bd      	mov	sp, r7
 8013038:	bd80      	pop	{r7, pc}
	...

0801303c <TfLiteTypeGetName>:
  }
  tensor->bytes = num_bytes;
}
#endif  // TF_LITE_STATIC_MEMORY

const char* TfLiteTypeGetName(TfLiteType type) {
 801303c:	b480      	push	{r7}
 801303e:	b083      	sub	sp, #12
 8013040:	af00      	add	r7, sp, #0
 8013042:	4603      	mov	r3, r0
 8013044:	71fb      	strb	r3, [r7, #7]
  switch (type) {
 8013046:	79fb      	ldrb	r3, [r7, #7]
 8013048:	2b10      	cmp	r3, #16
 801304a:	d847      	bhi.n	80130dc <TfLiteTypeGetName+0xa0>
 801304c:	a201      	add	r2, pc, #4	; (adr r2, 8013054 <TfLiteTypeGetName+0x18>)
 801304e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013052:	bf00      	nop
 8013054:	08013099 	.word	0x08013099
 8013058:	0801309d 	.word	0x0801309d
 801305c:	080130a5 	.word	0x080130a5
 8013060:	080130ad 	.word	0x080130ad
 8013064:	080130b5 	.word	0x080130b5
 8013068:	080130c9 	.word	0x080130c9
 801306c:	080130bd 	.word	0x080130bd
 8013070:	080130a1 	.word	0x080130a1
 8013074:	080130c1 	.word	0x080130c1
 8013078:	080130b1 	.word	0x080130b1
 801307c:	080130cd 	.word	0x080130cd
 8013080:	080130d1 	.word	0x080130d1
 8013084:	080130c5 	.word	0x080130c5
 8013088:	080130b9 	.word	0x080130b9
 801308c:	080130d5 	.word	0x080130d5
 8013090:	080130d9 	.word	0x080130d9
 8013094:	080130a9 	.word	0x080130a9
    case kTfLiteNoType:
      return "NOTYPE";
 8013098:	4b14      	ldr	r3, [pc, #80]	; (80130ec <TfLiteTypeGetName+0xb0>)
 801309a:	e020      	b.n	80130de <TfLiteTypeGetName+0xa2>
    case kTfLiteFloat32:
      return "FLOAT32";
 801309c:	4b14      	ldr	r3, [pc, #80]	; (80130f0 <TfLiteTypeGetName+0xb4>)
 801309e:	e01e      	b.n	80130de <TfLiteTypeGetName+0xa2>
    case kTfLiteInt16:
      return "INT16";
 80130a0:	4b14      	ldr	r3, [pc, #80]	; (80130f4 <TfLiteTypeGetName+0xb8>)
 80130a2:	e01c      	b.n	80130de <TfLiteTypeGetName+0xa2>
    case kTfLiteInt32:
      return "INT32";
 80130a4:	4b14      	ldr	r3, [pc, #80]	; (80130f8 <TfLiteTypeGetName+0xbc>)
 80130a6:	e01a      	b.n	80130de <TfLiteTypeGetName+0xa2>
    case kTfLiteUInt32:
      return "UINT32";
 80130a8:	4b14      	ldr	r3, [pc, #80]	; (80130fc <TfLiteTypeGetName+0xc0>)
 80130aa:	e018      	b.n	80130de <TfLiteTypeGetName+0xa2>
    case kTfLiteUInt8:
      return "UINT8";
 80130ac:	4b14      	ldr	r3, [pc, #80]	; (8013100 <TfLiteTypeGetName+0xc4>)
 80130ae:	e016      	b.n	80130de <TfLiteTypeGetName+0xa2>
    case kTfLiteInt8:
      return "INT8";
 80130b0:	4b14      	ldr	r3, [pc, #80]	; (8013104 <TfLiteTypeGetName+0xc8>)
 80130b2:	e014      	b.n	80130de <TfLiteTypeGetName+0xa2>
    case kTfLiteInt64:
      return "INT64";
 80130b4:	4b14      	ldr	r3, [pc, #80]	; (8013108 <TfLiteTypeGetName+0xcc>)
 80130b6:	e012      	b.n	80130de <TfLiteTypeGetName+0xa2>
    case kTfLiteUInt64:
      return "UINT64";
 80130b8:	4b14      	ldr	r3, [pc, #80]	; (801310c <TfLiteTypeGetName+0xd0>)
 80130ba:	e010      	b.n	80130de <TfLiteTypeGetName+0xa2>
    case kTfLiteBool:
      return "BOOL";
 80130bc:	4b14      	ldr	r3, [pc, #80]	; (8013110 <TfLiteTypeGetName+0xd4>)
 80130be:	e00e      	b.n	80130de <TfLiteTypeGetName+0xa2>
    case kTfLiteComplex64:
      return "COMPLEX64";
 80130c0:	4b14      	ldr	r3, [pc, #80]	; (8013114 <TfLiteTypeGetName+0xd8>)
 80130c2:	e00c      	b.n	80130de <TfLiteTypeGetName+0xa2>
    case kTfLiteComplex128:
      return "COMPLEX128";
 80130c4:	4b14      	ldr	r3, [pc, #80]	; (8013118 <TfLiteTypeGetName+0xdc>)
 80130c6:	e00a      	b.n	80130de <TfLiteTypeGetName+0xa2>
    case kTfLiteString:
      return "STRING";
 80130c8:	4b14      	ldr	r3, [pc, #80]	; (801311c <TfLiteTypeGetName+0xe0>)
 80130ca:	e008      	b.n	80130de <TfLiteTypeGetName+0xa2>
    case kTfLiteFloat16:
      return "FLOAT16";
 80130cc:	4b14      	ldr	r3, [pc, #80]	; (8013120 <TfLiteTypeGetName+0xe4>)
 80130ce:	e006      	b.n	80130de <TfLiteTypeGetName+0xa2>
    case kTfLiteFloat64:
      return "FLOAT64";
 80130d0:	4b14      	ldr	r3, [pc, #80]	; (8013124 <TfLiteTypeGetName+0xe8>)
 80130d2:	e004      	b.n	80130de <TfLiteTypeGetName+0xa2>
    case kTfLiteResource:
      return "RESOURCE";
 80130d4:	4b14      	ldr	r3, [pc, #80]	; (8013128 <TfLiteTypeGetName+0xec>)
 80130d6:	e002      	b.n	80130de <TfLiteTypeGetName+0xa2>
    case kTfLiteVariant:
      return "VARIANT";
 80130d8:	4b14      	ldr	r3, [pc, #80]	; (801312c <TfLiteTypeGetName+0xf0>)
 80130da:	e000      	b.n	80130de <TfLiteTypeGetName+0xa2>
  }
  return "Unknown type";
 80130dc:	4b14      	ldr	r3, [pc, #80]	; (8013130 <TfLiteTypeGetName+0xf4>)
}
 80130de:	4618      	mov	r0, r3
 80130e0:	370c      	adds	r7, #12
 80130e2:	46bd      	mov	sp, r7
 80130e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130e8:	4770      	bx	lr
 80130ea:	bf00      	nop
 80130ec:	0801c330 	.word	0x0801c330
 80130f0:	0801c338 	.word	0x0801c338
 80130f4:	0801c340 	.word	0x0801c340
 80130f8:	0801c348 	.word	0x0801c348
 80130fc:	0801c350 	.word	0x0801c350
 8013100:	0801c358 	.word	0x0801c358
 8013104:	0801c360 	.word	0x0801c360
 8013108:	0801c368 	.word	0x0801c368
 801310c:	0801c370 	.word	0x0801c370
 8013110:	0801c378 	.word	0x0801c378
 8013114:	0801c380 	.word	0x0801c380
 8013118:	0801c38c 	.word	0x0801c38c
 801311c:	0801c398 	.word	0x0801c398
 8013120:	0801c3a0 	.word	0x0801c3a0
 8013124:	0801c3a8 	.word	0x0801c3a8
 8013128:	0801c3b0 	.word	0x0801c3b0
 801312c:	0801c3bc 	.word	0x0801c3bc
 8013130:	0801c3c4 	.word	0x0801c3c4

08013134 <_ZNSt14numeric_limitsIlE3maxEv>:

      static _GLIBCXX_CONSTEXPR long
      min() _GLIBCXX_USE_NOEXCEPT { return -__LONG_MAX__ - 1; }

      static _GLIBCXX_CONSTEXPR long
      max() _GLIBCXX_USE_NOEXCEPT { return __LONG_MAX__; }
 8013134:	b480      	push	{r7}
 8013136:	af00      	add	r7, sp, #0
 8013138:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801313c:	4618      	mov	r0, r3
 801313e:	46bd      	mov	sp, r7
 8013140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013144:	4770      	bx	lr
	...

08013148 <_ZN6tflite18QuantizeMultiplierEdPlPi>:
constexpr uint32_t kFractionRoundingMask = 0x003fffff;
constexpr uint32_t kFractionRoundingThreshold = 0x00200000;
}  // namespace

void QuantizeMultiplier(double double_multiplier, int32_t* quantized_multiplier,
                        int* shift) {
 8013148:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801314c:	b088      	sub	sp, #32
 801314e:	af00      	add	r7, sp, #0
 8013150:	ed87 0b02 	vstr	d0, [r7, #8]
 8013154:	6078      	str	r0, [r7, #4]
 8013156:	6039      	str	r1, [r7, #0]
  if (double_multiplier == 0.) {
 8013158:	f04f 0200 	mov.w	r2, #0
 801315c:	f04f 0300 	mov.w	r3, #0
 8013160:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8013164:	f7ed fcba 	bl	8000adc <__aeabi_dcmpeq>
 8013168:	4603      	mov	r3, r0
 801316a:	2b00      	cmp	r3, #0
 801316c:	d006      	beq.n	801317c <_ZN6tflite18QuantizeMultiplierEdPlPi+0x34>
    *quantized_multiplier = 0;
 801316e:	687b      	ldr	r3, [r7, #4]
 8013170:	2200      	movs	r2, #0
 8013172:	601a      	str	r2, [r3, #0]
    *shift = 0;
 8013174:	683b      	ldr	r3, [r7, #0]
 8013176:	2200      	movs	r2, #0
 8013178:	601a      	str	r2, [r3, #0]
    return;
 801317a:	e068      	b.n	801324e <_ZN6tflite18QuantizeMultiplierEdPlPi+0x106>
  // example on microcontrollers) then use an alternative implementation
  // that only requires integer and bitwise operations. To enable this, you
  // need to set the define during the build process for your platform.
  int64_t q_fixed = IntegerFrExp(double_multiplier, shift);
#else   // TFLITE_EMULATE_FLOAT
  const double q = std::frexp(double_multiplier, shift);
 801317c:	6838      	ldr	r0, [r7, #0]
 801317e:	ed97 0b02 	vldr	d0, [r7, #8]
 8013182:	f005 fe79 	bl	8018e78 <frexp>
 8013186:	ed87 0b04 	vstr	d0, [r7, #16]
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1ll << 31)));
 801318a:	f04f 0200 	mov.w	r2, #0
 801318e:	4b32      	ldr	r3, [pc, #200]	; (8013258 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x110>)
 8013190:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8013194:	f7ed fa3a 	bl	800060c <__aeabi_dmul>
 8013198:	4602      	mov	r2, r0
 801319a:	460b      	mov	r3, r1
 801319c:	ec43 2b17 	vmov	d7, r2, r3
 80131a0:	eeb0 0a47 	vmov.f32	s0, s14
 80131a4:	eef0 0a67 	vmov.f32	s1, s15
 80131a8:	f000 f962 	bl	8013470 <_ZN6tflite11TfLiteRoundIdEET_S1_>
 80131ac:	ec53 2b10 	vmov	r2, r3, d0
 80131b0:	4610      	mov	r0, r2
 80131b2:	4619      	mov	r1, r3
 80131b4:	f7ed fdda 	bl	8000d6c <__aeabi_d2lz>
 80131b8:	4602      	mov	r2, r0
 80131ba:	460b      	mov	r3, r1
 80131bc:	e9c7 2306 	strd	r2, r3, [r7, #24]
#endif  // TFLITE_EMULATE_FLOAT
  TFLITE_CHECK(q_fixed <= (1ll << 31));
 80131c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80131c4:	4925      	ldr	r1, [pc, #148]	; (801325c <_ZN6tflite18QuantizeMultiplierEdPlPi+0x114>)
 80131c6:	428a      	cmp	r2, r1
 80131c8:	f173 0300 	sbcs.w	r3, r3, #0
 80131cc:	db01      	blt.n	80131d2 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x8a>
 80131ce:	f007 f8e1 	bl	801a394 <abort>
  if (q_fixed == (1ll << 31)) {
 80131d2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80131d6:	f102 4100 	add.w	r1, r2, #2147483648	; 0x80000000
 80131da:	430b      	orrs	r3, r1
 80131dc:	d118      	bne.n	8013210 <_ZN6tflite18QuantizeMultiplierEdPlPi+0xc8>
    q_fixed /= 2;
 80131de:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80131e2:	0fd9      	lsrs	r1, r3, #31
 80131e4:	2000      	movs	r0, #0
 80131e6:	468a      	mov	sl, r1
 80131e8:	4683      	mov	fp, r0
 80131ea:	eb1a 0402 	adds.w	r4, sl, r2
 80131ee:	eb4b 0503 	adc.w	r5, fp, r3
 80131f2:	f04f 0200 	mov.w	r2, #0
 80131f6:	f04f 0300 	mov.w	r3, #0
 80131fa:	0862      	lsrs	r2, r4, #1
 80131fc:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
 8013200:	106b      	asrs	r3, r5, #1
 8013202:	e9c7 2306 	strd	r2, r3, [r7, #24]
    ++*shift;
 8013206:	683b      	ldr	r3, [r7, #0]
 8013208:	681b      	ldr	r3, [r3, #0]
 801320a:	1c5a      	adds	r2, r3, #1
 801320c:	683b      	ldr	r3, [r7, #0]
 801320e:	601a      	str	r2, [r3, #0]
  }
  TFLITE_CHECK_LE(q_fixed, std::numeric_limits<int32_t>::max());
 8013210:	f7ff ff90 	bl	8013134 <_ZNSt14numeric_limitsIlE3maxEv>
 8013214:	4603      	mov	r3, r0
 8013216:	17da      	asrs	r2, r3, #31
 8013218:	4698      	mov	r8, r3
 801321a:	4691      	mov	r9, r2
 801321c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8013220:	4590      	cmp	r8, r2
 8013222:	eb79 0303 	sbcs.w	r3, r9, r3
 8013226:	da01      	bge.n	801322c <_ZN6tflite18QuantizeMultiplierEdPlPi+0xe4>
 8013228:	f007 f8b4 	bl	801a394 <abort>
  // that we're effectively flushing tiny double_multiplier's to zero.
  // We could conceivably handle values in the range (roughly) [32, 63]
  // as 'denormals' i.e. (shift==0, q_fixed < 2^30). In that point of view
  // the present handling is just doing 'flush denormals to zero'. We could
  // reconsider and actually generate nonzero denormals if a need arises.
  if (*shift < -31) {
 801322c:	683b      	ldr	r3, [r7, #0]
 801322e:	681b      	ldr	r3, [r3, #0]
 8013230:	f113 0f1f 	cmn.w	r3, #31
 8013234:	da08      	bge.n	8013248 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x100>
    *shift = 0;
 8013236:	683b      	ldr	r3, [r7, #0]
 8013238:	2200      	movs	r2, #0
 801323a:	601a      	str	r2, [r3, #0]
    q_fixed = 0;
 801323c:	f04f 0200 	mov.w	r2, #0
 8013240:	f04f 0300 	mov.w	r3, #0
 8013244:	e9c7 2306 	strd	r2, r3, [r7, #24]
  }
  *quantized_multiplier = static_cast<int32_t>(q_fixed);
 8013248:	69ba      	ldr	r2, [r7, #24]
 801324a:	687b      	ldr	r3, [r7, #4]
 801324c:	601a      	str	r2, [r3, #0]
}
 801324e:	3720      	adds	r7, #32
 8013250:	46bd      	mov	sp, r7
 8013252:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8013256:	bf00      	nop
 8013258:	41e00000 	.word	0x41e00000
 801325c:	80000001 	.word	0x80000001

08013260 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi>:

void QuantizeMultiplierGreaterThanOne(double double_multiplier,
                                      int32_t* quantized_multiplier,
                                      int* left_shift) {
 8013260:	b580      	push	{r7, lr}
 8013262:	b084      	sub	sp, #16
 8013264:	af00      	add	r7, sp, #0
 8013266:	ed87 0b02 	vstr	d0, [r7, #8]
 801326a:	6078      	str	r0, [r7, #4]
 801326c:	6039      	str	r1, [r7, #0]
  TFLITE_CHECK_GT(double_multiplier, 1.);
 801326e:	f04f 0200 	mov.w	r2, #0
 8013272:	4b0d      	ldr	r3, [pc, #52]	; (80132a8 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x48>)
 8013274:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8013278:	f7ed fc58 	bl	8000b2c <__aeabi_dcmpgt>
 801327c:	4603      	mov	r3, r0
 801327e:	2b00      	cmp	r3, #0
 8013280:	d101      	bne.n	8013286 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x26>
 8013282:	f007 f887 	bl	801a394 <abort>
  QuantizeMultiplier(double_multiplier, quantized_multiplier, left_shift);
 8013286:	6839      	ldr	r1, [r7, #0]
 8013288:	6878      	ldr	r0, [r7, #4]
 801328a:	ed97 0b02 	vldr	d0, [r7, #8]
 801328e:	f7ff ff5b 	bl	8013148 <_ZN6tflite18QuantizeMultiplierEdPlPi>
  TFLITE_CHECK_GE(*left_shift, 0);
 8013292:	683b      	ldr	r3, [r7, #0]
 8013294:	681b      	ldr	r3, [r3, #0]
 8013296:	2b00      	cmp	r3, #0
 8013298:	da01      	bge.n	801329e <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x3e>
 801329a:	f007 f87b 	bl	801a394 <abort>
}
 801329e:	bf00      	nop
 80132a0:	3710      	adds	r7, #16
 80132a2:	46bd      	mov	sp, r7
 80132a4:	bd80      	pop	{r7, pc}
 80132a6:	bf00      	nop
 80132a8:	3ff00000 	.word	0x3ff00000

080132ac <_ZSt3minIdERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 80132ac:	b580      	push	{r7, lr}
 80132ae:	b082      	sub	sp, #8
 80132b0:	af00      	add	r7, sp, #0
 80132b2:	6078      	str	r0, [r7, #4]
 80132b4:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 80132b6:	683b      	ldr	r3, [r7, #0]
 80132b8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80132bc:	687b      	ldr	r3, [r7, #4]
 80132be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132c2:	f7ed fc15 	bl	8000af0 <__aeabi_dcmplt>
 80132c6:	4603      	mov	r3, r0
 80132c8:	2b00      	cmp	r3, #0
 80132ca:	d001      	beq.n	80132d0 <_ZSt3minIdERKT_S2_S2_+0x24>
	return __b;
 80132cc:	683b      	ldr	r3, [r7, #0]
 80132ce:	e000      	b.n	80132d2 <_ZSt3minIdERKT_S2_S2_+0x26>
      return __a;
 80132d0:	687b      	ldr	r3, [r7, #4]
    }
 80132d2:	4618      	mov	r0, r3
 80132d4:	3708      	adds	r7, #8
 80132d6:	46bd      	mov	sp, r7
 80132d8:	bd80      	pop	{r7, pc}
 80132da:	0000      	movs	r0, r0
 80132dc:	0000      	movs	r0, r0
	...

080132e0 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi>:
  }
}

void PreprocessSoftmaxScaling(double beta, double input_scale,
                              int input_integer_bits,
                              int32_t* quantized_multiplier, int* left_shift) {
 80132e0:	b5b0      	push	{r4, r5, r7, lr}
 80132e2:	b08e      	sub	sp, #56	; 0x38
 80132e4:	af00      	add	r7, sp, #0
 80132e6:	ed87 0b06 	vstr	d0, [r7, #24]
 80132ea:	ed87 1b04 	vstr	d1, [r7, #16]
 80132ee:	60f8      	str	r0, [r7, #12]
 80132f0:	60b9      	str	r1, [r7, #8]
 80132f2:	607a      	str	r2, [r7, #4]
  if (IntegerDoubleCompare(input_beta_real_multiplier, (1ll << 31) - 1.0) > 0) {
    input_beta_real_multiplier = (1ll << 31) - 1.0;
  }
#else   // TFLITE_EMULATE_FLOAT
  const double input_beta_real_multiplier = std::min<double>(
      beta * input_scale * (1 << (31 - input_integer_bits)), (1ll << 31) - 1.0);
 80132f4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80132f8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80132fc:	f7ed f986 	bl	800060c <__aeabi_dmul>
 8013300:	4602      	mov	r2, r0
 8013302:	460b      	mov	r3, r1
 8013304:	4614      	mov	r4, r2
 8013306:	461d      	mov	r5, r3
 8013308:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801330c:	68fb      	ldr	r3, [r7, #12]
 801330e:	fa22 f303 	lsr.w	r3, r2, r3
 8013312:	4618      	mov	r0, r3
 8013314:	f7ed f910 	bl	8000538 <__aeabi_i2d>
 8013318:	4602      	mov	r2, r0
 801331a:	460b      	mov	r3, r1
 801331c:	4620      	mov	r0, r4
 801331e:	4629      	mov	r1, r5
 8013320:	f7ed f974 	bl	800060c <__aeabi_dmul>
 8013324:	4602      	mov	r2, r0
 8013326:	460b      	mov	r3, r1
 8013328:	e9c7 2308 	strd	r2, r3, [r7, #32]
 801332c:	a30e      	add	r3, pc, #56	; (adr r3, 8013368 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi+0x88>)
 801332e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013332:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8013336:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801333a:	f107 0320 	add.w	r3, r7, #32
 801333e:	4611      	mov	r1, r2
 8013340:	4618      	mov	r0, r3
 8013342:	f7ff ffb3 	bl	80132ac <_ZSt3minIdERKT_S2_S2_>
 8013346:	4603      	mov	r3, r0
 8013348:	e9d3 2300 	ldrd	r2, r3, [r3]
 801334c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
#endif  // TFLITE_EMULATE_FLOAT

  QuantizeMultiplierGreaterThanOne(input_beta_real_multiplier,
 8013350:	6879      	ldr	r1, [r7, #4]
 8013352:	68b8      	ldr	r0, [r7, #8]
 8013354:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 8013358:	f7ff ff82 	bl	8013260 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi>
                                   quantized_multiplier, left_shift);
}
 801335c:	bf00      	nop
 801335e:	3738      	adds	r7, #56	; 0x38
 8013360:	46bd      	mov	sp, r7
 8013362:	bdb0      	pop	{r4, r5, r7, pc}
 8013364:	f3af 8000 	nop.w
 8013368:	ffc00000 	.word	0xffc00000
 801336c:	41dfffff 	.word	0x41dfffff

08013370 <_ZN6tflite20CalculateInputRadiusEiii>:
                                              reverse_scaling_divisor,
                                              reverse_scaling_left_shift);
}

int CalculateInputRadius(int input_integer_bits, int input_left_shift,
                         int total_signed_bits) {
 8013370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013374:	b087      	sub	sp, #28
 8013376:	af00      	add	r7, sp, #0
 8013378:	60f8      	str	r0, [r7, #12]
 801337a:	60b9      	str	r1, [r7, #8]
 801337c:	607a      	str	r2, [r7, #4]
  result <<= (total_signed_bits - input_integer_bits);
  result >>= input_left_shift;
  return result;
#else   // TFLITE_EMULATE_FLOAT
  const double max_input_rescaled =
      1.0 * ((1 << input_integer_bits) - 1) *
 801337e:	2201      	movs	r2, #1
 8013380:	68fb      	ldr	r3, [r7, #12]
 8013382:	fa02 f303 	lsl.w	r3, r2, r3
 8013386:	3b01      	subs	r3, #1
 8013388:	4618      	mov	r0, r3
 801338a:	f7ed f8d5 	bl	8000538 <__aeabi_i2d>
 801338e:	4682      	mov	sl, r0
 8013390:	468b      	mov	fp, r1
      (1ll << (total_signed_bits - input_integer_bits)) /
 8013392:	687a      	ldr	r2, [r7, #4]
 8013394:	68fb      	ldr	r3, [r7, #12]
 8013396:	1ad1      	subs	r1, r2, r3
 8013398:	f04f 0201 	mov.w	r2, #1
 801339c:	f04f 0300 	mov.w	r3, #0
 80133a0:	f1a1 0620 	sub.w	r6, r1, #32
 80133a4:	f1c1 0020 	rsb	r0, r1, #32
 80133a8:	fa03 f901 	lsl.w	r9, r3, r1
 80133ac:	fa02 f606 	lsl.w	r6, r2, r6
 80133b0:	ea49 0906 	orr.w	r9, r9, r6
 80133b4:	fa22 f000 	lsr.w	r0, r2, r0
 80133b8:	ea49 0900 	orr.w	r9, r9, r0
 80133bc:	fa02 f801 	lsl.w	r8, r2, r1
      1.0 * ((1 << input_integer_bits) - 1) *
 80133c0:	4640      	mov	r0, r8
 80133c2:	4649      	mov	r1, r9
 80133c4:	f7ed f8f4 	bl	80005b0 <__aeabi_l2d>
 80133c8:	4602      	mov	r2, r0
 80133ca:	460b      	mov	r3, r1
 80133cc:	4650      	mov	r0, sl
 80133ce:	4659      	mov	r1, fp
 80133d0:	f7ed f91c 	bl	800060c <__aeabi_dmul>
 80133d4:	4602      	mov	r2, r0
 80133d6:	460b      	mov	r3, r1
 80133d8:	4690      	mov	r8, r2
 80133da:	4699      	mov	r9, r3
      (1ll << input_left_shift);
 80133dc:	f04f 0201 	mov.w	r2, #1
 80133e0:	f04f 0300 	mov.w	r3, #0
 80133e4:	68b9      	ldr	r1, [r7, #8]
 80133e6:	f1a1 0620 	sub.w	r6, r1, #32
 80133ea:	f1c1 0020 	rsb	r0, r1, #32
 80133ee:	fa03 f501 	lsl.w	r5, r3, r1
 80133f2:	fa02 f606 	lsl.w	r6, r2, r6
 80133f6:	4335      	orrs	r5, r6
 80133f8:	fa22 f000 	lsr.w	r0, r2, r0
 80133fc:	4305      	orrs	r5, r0
 80133fe:	fa02 f401 	lsl.w	r4, r2, r1
      (1ll << (total_signed_bits - input_integer_bits)) /
 8013402:	4620      	mov	r0, r4
 8013404:	4629      	mov	r1, r5
 8013406:	f7ed f8d3 	bl	80005b0 <__aeabi_l2d>
 801340a:	4602      	mov	r2, r0
 801340c:	460b      	mov	r3, r1
  const double max_input_rescaled =
 801340e:	4640      	mov	r0, r8
 8013410:	4649      	mov	r1, r9
 8013412:	f7ed fa25 	bl	8000860 <__aeabi_ddiv>
 8013416:	4602      	mov	r2, r0
 8013418:	460b      	mov	r3, r1
 801341a:	e9c7 2304 	strd	r2, r3, [r7, #16]
  // Tighten bound using floor.  Suppose that we could use the exact value.
  // After scaling the difference, the result would be at the maximum.  Thus we
  // must ensure that our value has lower magnitude.
  return static_cast<int>(std::floor(max_input_rescaled));
 801341e:	ed97 0b04 	vldr	d0, [r7, #16]
 8013422:	f005 fca9 	bl	8018d78 <floor>
 8013426:	ec53 2b10 	vmov	r2, r3, d0
 801342a:	4610      	mov	r0, r2
 801342c:	4619      	mov	r1, r3
 801342e:	f7ed fb9d 	bl	8000b6c <__aeabi_d2iz>
 8013432:	4603      	mov	r3, r0
#endif  // TFLITE_EMULATE_FLOAT
}
 8013434:	4618      	mov	r0, r3
 8013436:	371c      	adds	r7, #28
 8013438:	46bd      	mov	sp, r7
 801343a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801343e <_ZSt3minIfERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 801343e:	b480      	push	{r7}
 8013440:	b083      	sub	sp, #12
 8013442:	af00      	add	r7, sp, #0
 8013444:	6078      	str	r0, [r7, #4]
 8013446:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8013448:	683b      	ldr	r3, [r7, #0]
 801344a:	ed93 7a00 	vldr	s14, [r3]
 801344e:	687b      	ldr	r3, [r7, #4]
 8013450:	edd3 7a00 	vldr	s15, [r3]
 8013454:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013458:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801345c:	d501      	bpl.n	8013462 <_ZSt3minIfERKT_S2_S2_+0x24>
	return __b;
 801345e:	683b      	ldr	r3, [r7, #0]
 8013460:	e000      	b.n	8013464 <_ZSt3minIfERKT_S2_S2_+0x26>
      return __a;
 8013462:	687b      	ldr	r3, [r7, #4]
    }
 8013464:	4618      	mov	r0, r3
 8013466:	370c      	adds	r7, #12
 8013468:	46bd      	mov	sp, r7
 801346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801346e:	4770      	bx	lr

08013470 <_ZN6tflite11TfLiteRoundIdEET_S1_>:
  template <class T>                                  \
  inline T tf_name(const T x) {                       \
    return TF_LITE_GLOBAL_STD_PREFIX::std_name(x);    \
  }

DECLARE_STD_GLOBAL_SWITCH1(TfLiteRound, round);
 8013470:	b580      	push	{r7, lr}
 8013472:	b082      	sub	sp, #8
 8013474:	af00      	add	r7, sp, #0
 8013476:	ed87 0b00 	vstr	d0, [r7]
 801347a:	ed97 0b00 	vldr	d0, [r7]
 801347e:	f005 fd33 	bl	8018ee8 <round>
 8013482:	eeb0 7a40 	vmov.f32	s14, s0
 8013486:	eef0 7a60 	vmov.f32	s15, s1
 801348a:	eeb0 0a47 	vmov.f32	s0, s14
 801348e:	eef0 0a67 	vmov.f32	s1, s15
 8013492:	3708      	adds	r7, #8
 8013494:	46bd      	mov	sp, r7
 8013496:	bd80      	pop	{r7, pc}

08013498 <_ZN6tflite11TfLiteRoundIfEET_S1_>:
 8013498:	b580      	push	{r7, lr}
 801349a:	b082      	sub	sp, #8
 801349c:	af00      	add	r7, sp, #0
 801349e:	ed87 0a01 	vstr	s0, [r7, #4]
 80134a2:	ed97 0a01 	vldr	s0, [r7, #4]
 80134a6:	f7ee f9cd 	bl	8001844 <_ZSt5roundf>
 80134aa:	eef0 7a40 	vmov.f32	s15, s0
 80134ae:	eeb0 0a67 	vmov.f32	s0, s15
 80134b2:	3708      	adds	r7, #8
 80134b4:	46bd      	mov	sp, r7
 80134b6:	bd80      	pop	{r7, pc}

080134b8 <_ZNSt14numeric_limitsIaE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__SCHAR_MAX__ - 1; }
 80134b8:	b480      	push	{r7}
 80134ba:	af00      	add	r7, sp, #0
 80134bc:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 80134c0:	4618      	mov	r0, r3
 80134c2:	46bd      	mov	sp, r7
 80134c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134c8:	4770      	bx	lr

080134ca <_ZNSt14numeric_limitsIaE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SCHAR_MAX__; }
 80134ca:	b480      	push	{r7}
 80134cc:	af00      	add	r7, sp, #0
 80134ce:	237f      	movs	r3, #127	; 0x7f
 80134d0:	4618      	mov	r0, r3
 80134d2:	46bd      	mov	sp, r7
 80134d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134d8:	4770      	bx	lr

080134da <_ZNSt14numeric_limitsIhE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return 0; }
 80134da:	b480      	push	{r7}
 80134dc:	af00      	add	r7, sp, #0
 80134de:	2300      	movs	r3, #0
 80134e0:	4618      	mov	r0, r3
 80134e2:	46bd      	mov	sp, r7
 80134e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134e8:	4770      	bx	lr

080134ea <_ZNSt14numeric_limitsIhE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SCHAR_MAX__ * 2U + 1; }
 80134ea:	b480      	push	{r7}
 80134ec:	af00      	add	r7, sp, #0
 80134ee:	23ff      	movs	r3, #255	; 0xff
 80134f0:	4618      	mov	r0, r3
 80134f2:	46bd      	mov	sp, r7
 80134f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134f8:	4770      	bx	lr
	...

080134fc <_ZNSt14numeric_limitsIsE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__SHRT_MAX__ - 1; }
 80134fc:	b480      	push	{r7}
 80134fe:	af00      	add	r7, sp, #0
 8013500:	4b02      	ldr	r3, [pc, #8]	; (801350c <_ZNSt14numeric_limitsIsE3minEv+0x10>)
 8013502:	4618      	mov	r0, r3
 8013504:	46bd      	mov	sp, r7
 8013506:	f85d 7b04 	ldr.w	r7, [sp], #4
 801350a:	4770      	bx	lr
 801350c:	ffff8000 	.word	0xffff8000

08013510 <_ZNSt14numeric_limitsIsE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SHRT_MAX__; }
 8013510:	b480      	push	{r7}
 8013512:	af00      	add	r7, sp, #0
 8013514:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8013518:	4618      	mov	r0, r3
 801351a:	46bd      	mov	sp, r7
 801351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013520:	4770      	bx	lr

08013522 <_ZN6tflite13NumDimensionsEPK12TfLiteTensor>:
TfLiteStatus GetIntermediatesSafe(const TfLiteContext* context,
                                  const TfLiteNode* node, int index,
                                  TfLiteTensor** tensor);
#endif  // TF_LITE_STATIC_MEMORY

inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
 8013522:	b480      	push	{r7}
 8013524:	b083      	sub	sp, #12
 8013526:	af00      	add	r7, sp, #0
 8013528:	6078      	str	r0, [r7, #4]
 801352a:	687b      	ldr	r3, [r7, #4]
 801352c:	689b      	ldr	r3, [r3, #8]
 801352e:	681b      	ldr	r3, [r3, #0]
 8013530:	4618      	mov	r0, r3
 8013532:	370c      	adds	r7, #12
 8013534:	46bd      	mov	sp, r7
 8013536:	f85d 7b04 	ldr.w	r7, [sp], #4
 801353a:	4770      	bx	lr

0801353c <_ZSt3absd>:
// 2735. std::abs(short), std::abs(signed char) and others should return int

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR double
  abs(double __x)
  { return __builtin_fabs(__x); }
 801353c:	b480      	push	{r7}
 801353e:	b083      	sub	sp, #12
 8013540:	af00      	add	r7, sp, #0
 8013542:	ed87 0b00 	vstr	d0, [r7]
 8013546:	683a      	ldr	r2, [r7, #0]
 8013548:	6879      	ldr	r1, [r7, #4]
 801354a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801354e:	ec43 2b17 	vmov	d7, r2, r3
 8013552:	eeb0 0a47 	vmov.f32	s0, s14
 8013556:	eef0 0a67 	vmov.f32	s1, s15
 801355a:	370c      	adds	r7, #12
 801355c:	46bd      	mov	sp, r7
 801355e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013562:	4770      	bx	lr

08013564 <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti>:

namespace {

// Assumes tensor_index is a valid index (in bounds)
inline TfLiteTensor* GetTensorAtIndex(const TfLiteContext* context,
                                      int tensor_index) {
 8013564:	b580      	push	{r7, lr}
 8013566:	b082      	sub	sp, #8
 8013568:	af00      	add	r7, sp, #0
 801356a:	6078      	str	r0, [r7, #4]
 801356c:	6039      	str	r1, [r7, #0]
  if (context->tensors != nullptr) {
 801356e:	687b      	ldr	r3, [r7, #4]
 8013570:	689b      	ldr	r3, [r3, #8]
 8013572:	2b00      	cmp	r3, #0
 8013574:	d005      	beq.n	8013582 <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti+0x1e>
    return &context->tensors[tensor_index];
 8013576:	687b      	ldr	r3, [r7, #4]
 8013578:	689a      	ldr	r2, [r3, #8]
 801357a:	683b      	ldr	r3, [r7, #0]
 801357c:	019b      	lsls	r3, r3, #6
 801357e:	4413      	add	r3, r2
 8013580:	e006      	b.n	8013590 <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti+0x2c>
  } else {
    return context->GetTensor(context, tensor_index);
 8013582:	687b      	ldr	r3, [r7, #4]
 8013584:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013586:	6839      	ldr	r1, [r7, #0]
 8013588:	6878      	ldr	r0, [r7, #4]
 801358a:	4798      	blx	r3
 801358c:	4603      	mov	r3, r0
 801358e:	bf00      	nop
  }
}
 8013590:	4618      	mov	r0, r3
 8013592:	3708      	adds	r7, #8
 8013594:	46bd      	mov	sp, r7
 8013596:	bd80      	pop	{r7, pc}

08013598 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi>:
}

// Same as above but returns -1 for invalid inputs instead of status + logging
// error.
inline int ValidateTensorIndexing(const TfLiteContext* context, int index,
                                  int max_size, const int* tensor_indices) {
 8013598:	b480      	push	{r7}
 801359a:	b087      	sub	sp, #28
 801359c:	af00      	add	r7, sp, #0
 801359e:	60f8      	str	r0, [r7, #12]
 80135a0:	60b9      	str	r1, [r7, #8]
 80135a2:	607a      	str	r2, [r7, #4]
 80135a4:	603b      	str	r3, [r7, #0]
  if (index >= 0 && index < max_size) {
 80135a6:	68bb      	ldr	r3, [r7, #8]
 80135a8:	2b00      	cmp	r3, #0
 80135aa:	db0f      	blt.n	80135cc <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x34>
 80135ac:	68ba      	ldr	r2, [r7, #8]
 80135ae:	687b      	ldr	r3, [r7, #4]
 80135b0:	429a      	cmp	r2, r3
 80135b2:	da0b      	bge.n	80135cc <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x34>
    const int tensor_index = tensor_indices[index];
 80135b4:	68bb      	ldr	r3, [r7, #8]
 80135b6:	009b      	lsls	r3, r3, #2
 80135b8:	683a      	ldr	r2, [r7, #0]
 80135ba:	4413      	add	r3, r2
 80135bc:	681b      	ldr	r3, [r3, #0]
 80135be:	617b      	str	r3, [r7, #20]
    if (tensor_index != kTfLiteOptionalTensor) {
 80135c0:	697b      	ldr	r3, [r7, #20]
 80135c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80135c6:	d001      	beq.n	80135cc <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x34>
      return tensor_index;
 80135c8:	697b      	ldr	r3, [r7, #20]
 80135ca:	e001      	b.n	80135d0 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x38>
    }
  }
  return -1;
 80135cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80135d0:	4618      	mov	r0, r3
 80135d2:	371c      	adds	r7, #28
 80135d4:	46bd      	mov	sp, r7
 80135d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135da:	4770      	bx	lr

080135dc <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei>:

inline TfLiteTensor* GetMutableInput(const TfLiteContext* context,
                                     const TfLiteNode* node, int index) {
 80135dc:	b580      	push	{r7, lr}
 80135de:	b086      	sub	sp, #24
 80135e0:	af00      	add	r7, sp, #0
 80135e2:	60f8      	str	r0, [r7, #12]
 80135e4:	60b9      	str	r1, [r7, #8]
 80135e6:	607a      	str	r2, [r7, #4]
  const int tensor_index = ValidateTensorIndexing(
      context, index, node->inputs->size, node->inputs->data);
 80135e8:	68bb      	ldr	r3, [r7, #8]
 80135ea:	681b      	ldr	r3, [r3, #0]
  const int tensor_index = ValidateTensorIndexing(
 80135ec:	681a      	ldr	r2, [r3, #0]
      context, index, node->inputs->size, node->inputs->data);
 80135ee:	68bb      	ldr	r3, [r7, #8]
 80135f0:	681b      	ldr	r3, [r3, #0]
 80135f2:	3304      	adds	r3, #4
  const int tensor_index = ValidateTensorIndexing(
 80135f4:	6879      	ldr	r1, [r7, #4]
 80135f6:	68f8      	ldr	r0, [r7, #12]
 80135f8:	f7ff ffce 	bl	8013598 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi>
 80135fc:	6178      	str	r0, [r7, #20]
  if (tensor_index < 0) {
 80135fe:	697b      	ldr	r3, [r7, #20]
 8013600:	2b00      	cmp	r3, #0
 8013602:	da01      	bge.n	8013608 <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei+0x2c>
    return nullptr;
 8013604:	2300      	movs	r3, #0
 8013606:	e005      	b.n	8013614 <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei+0x38>
  }
  return GetTensorAtIndex(context, tensor_index);
 8013608:	6979      	ldr	r1, [r7, #20]
 801360a:	68f8      	ldr	r0, [r7, #12]
 801360c:	f7ff ffaa 	bl	8013564 <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti>
 8013610:	4603      	mov	r3, r0
 8013612:	bf00      	nop
}
 8013614:	4618      	mov	r0, r3
 8013616:	3718      	adds	r7, #24
 8013618:	46bd      	mov	sp, r7
 801361a:	bd80      	pop	{r7, pc}

0801361c <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>:
}

}  // anonymous namespace.

const TfLiteTensor* GetInput(const TfLiteContext* context,
                             const TfLiteNode* node, int index) {
 801361c:	b580      	push	{r7, lr}
 801361e:	b084      	sub	sp, #16
 8013620:	af00      	add	r7, sp, #0
 8013622:	60f8      	str	r0, [r7, #12]
 8013624:	60b9      	str	r1, [r7, #8]
 8013626:	607a      	str	r2, [r7, #4]
  return GetMutableInput(context, node, index);
 8013628:	687a      	ldr	r2, [r7, #4]
 801362a:	68b9      	ldr	r1, [r7, #8]
 801362c:	68f8      	ldr	r0, [r7, #12]
 801362e:	f7ff ffd5 	bl	80135dc <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei>
 8013632:	4603      	mov	r3, r0
}
 8013634:	4618      	mov	r0, r3
 8013636:	3710      	adds	r7, #16
 8013638:	46bd      	mov	sp, r7
 801363a:	bd80      	pop	{r7, pc}

0801363c <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>:
  TfLiteTensor* tensor = GetMutableInput(context, node, index);
  return tensor->is_variable ? tensor : nullptr;
}

TfLiteTensor* GetOutput(TfLiteContext* context, const TfLiteNode* node,
                        int index) {
 801363c:	b580      	push	{r7, lr}
 801363e:	b086      	sub	sp, #24
 8013640:	af00      	add	r7, sp, #0
 8013642:	60f8      	str	r0, [r7, #12]
 8013644:	60b9      	str	r1, [r7, #8]
 8013646:	607a      	str	r2, [r7, #4]
  const int tensor_index = ValidateTensorIndexing(
      context, index, node->outputs->size, node->outputs->data);
 8013648:	68bb      	ldr	r3, [r7, #8]
 801364a:	685b      	ldr	r3, [r3, #4]
  const int tensor_index = ValidateTensorIndexing(
 801364c:	681a      	ldr	r2, [r3, #0]
      context, index, node->outputs->size, node->outputs->data);
 801364e:	68bb      	ldr	r3, [r7, #8]
 8013650:	685b      	ldr	r3, [r3, #4]
 8013652:	3304      	adds	r3, #4
  const int tensor_index = ValidateTensorIndexing(
 8013654:	6879      	ldr	r1, [r7, #4]
 8013656:	68f8      	ldr	r0, [r7, #12]
 8013658:	f7ff ff9e 	bl	8013598 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi>
 801365c:	6178      	str	r0, [r7, #20]
  if (tensor_index < 0) {
 801365e:	697b      	ldr	r3, [r7, #20]
 8013660:	2b00      	cmp	r3, #0
 8013662:	da01      	bge.n	8013668 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x2c>
    return nullptr;
 8013664:	2300      	movs	r3, #0
 8013666:	e005      	b.n	8013674 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x38>
  }
  return GetTensorAtIndex(context, tensor_index);
 8013668:	6979      	ldr	r1, [r7, #20]
 801366a:	68f8      	ldr	r0, [r7, #12]
 801366c:	f7ff ff7a 	bl	8013564 <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti>
 8013670:	4603      	mov	r3, r0
 8013672:	bf00      	nop
}
 8013674:	4618      	mov	r0, r3
 8013676:	3718      	adds	r7, #24
 8013678:	46bd      	mov	sp, r7
 801367a:	bd80      	pop	{r7, pc}

0801367c <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>:
  *tensor = GetTensorAtIndex(context, tensor_index);
  return kTfLiteOk;
}

const TfLiteTensor* GetOptionalInputTensor(const TfLiteContext* context,
                                           const TfLiteNode* node, int index) {
 801367c:	b580      	push	{r7, lr}
 801367e:	b084      	sub	sp, #16
 8013680:	af00      	add	r7, sp, #0
 8013682:	60f8      	str	r0, [r7, #12]
 8013684:	60b9      	str	r1, [r7, #8]
 8013686:	607a      	str	r2, [r7, #4]
  return GetInput(context, node, index);
 8013688:	687a      	ldr	r2, [r7, #4]
 801368a:	68b9      	ldr	r1, [r7, #8]
 801368c:	68f8      	ldr	r0, [r7, #12]
 801368e:	f7ff ffc5 	bl	801361c <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8013692:	4603      	mov	r3, r0
}
 8013694:	4618      	mov	r0, r3
 8013696:	3710      	adds	r7, #16
 8013698:	46bd      	mov	sp, r7
 801369a:	bd80      	pop	{r7, pc}
 801369c:	0000      	movs	r0, r0
	...

080136a0 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>:
TfLiteStatus GetQuantizedConvolutionMultipler(TfLiteContext* context,
                                              const TfLiteTensor* input,
                                              const TfLiteTensor* filter,
                                              const TfLiteTensor* bias,
                                              TfLiteTensor* output,
                                              double* multiplier) {
 80136a0:	b5b0      	push	{r4, r5, r7, lr}
 80136a2:	b08e      	sub	sp, #56	; 0x38
 80136a4:	af02      	add	r7, sp, #8
 80136a6:	60f8      	str	r0, [r7, #12]
 80136a8:	60b9      	str	r1, [r7, #8]
 80136aa:	607a      	str	r2, [r7, #4]
 80136ac:	603b      	str	r3, [r7, #0]
  const double input_product_scale = static_cast<double>(input->params.scale) *
 80136ae:	68bb      	ldr	r3, [r7, #8]
 80136b0:	68db      	ldr	r3, [r3, #12]
 80136b2:	4618      	mov	r0, r3
 80136b4:	f7ec ff52 	bl	800055c <__aeabi_f2d>
 80136b8:	4604      	mov	r4, r0
 80136ba:	460d      	mov	r5, r1
                                     static_cast<double>(filter->params.scale);
 80136bc:	687b      	ldr	r3, [r7, #4]
 80136be:	68db      	ldr	r3, [r3, #12]
 80136c0:	4618      	mov	r0, r3
 80136c2:	f7ec ff4b 	bl	800055c <__aeabi_f2d>
 80136c6:	4602      	mov	r2, r0
 80136c8:	460b      	mov	r3, r1
  const double input_product_scale = static_cast<double>(input->params.scale) *
 80136ca:	4620      	mov	r0, r4
 80136cc:	4629      	mov	r1, r5
 80136ce:	f7ec ff9d 	bl	800060c <__aeabi_dmul>
 80136d2:	4602      	mov	r2, r0
 80136d4:	460b      	mov	r3, r1
 80136d6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // The following conditions must be guaranteed by the training pipeline.
  if (bias) {
 80136da:	683b      	ldr	r3, [r7, #0]
 80136dc:	2b00      	cmp	r3, #0
 80136de:	d04b      	beq.n	8013778 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xd8>
    const double bias_scale = static_cast<double>(bias->params.scale);
 80136e0:	683b      	ldr	r3, [r7, #0]
 80136e2:	68db      	ldr	r3, [r3, #12]
 80136e4:	4618      	mov	r0, r3
 80136e6:	f7ec ff39 	bl	800055c <__aeabi_f2d>
 80136ea:	4602      	mov	r2, r0
 80136ec:	460b      	mov	r3, r1
 80136ee:	e9c7 2308 	strd	r2, r3, [r7, #32]
    // bias * (bias_scale - input_product_scale) / output_scale should be
    // a small number for an integer.
    // Since normally bias should be within a small range.
    // We should expect (bias_scale - input_product_scale) / output_scale to
    // be a small number like 0.02.
    const double scale_diff = std::abs(input_product_scale - bias_scale);
 80136f2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80136f6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80136fa:	f7ec fdcf 	bl	800029c <__aeabi_dsub>
 80136fe:	4602      	mov	r2, r0
 8013700:	460b      	mov	r3, r1
 8013702:	ec43 2b17 	vmov	d7, r2, r3
 8013706:	eeb0 0a47 	vmov.f32	s0, s14
 801370a:	eef0 0a67 	vmov.f32	s1, s15
 801370e:	f7ff ff15 	bl	801353c <_ZSt3absd>
 8013712:	ed87 0b06 	vstr	d0, [r7, #24]
    const double output_scale = static_cast<double>(output->params.scale);
 8013716:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013718:	68db      	ldr	r3, [r3, #12]
 801371a:	4618      	mov	r0, r3
 801371c:	f7ec ff1e 	bl	800055c <__aeabi_f2d>
 8013720:	4602      	mov	r2, r0
 8013722:	460b      	mov	r3, r1
 8013724:	e9c7 2304 	strd	r2, r3, [r7, #16]

    TF_LITE_ENSURE(context, scale_diff / output_scale <= 0.02);
 8013728:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801372c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8013730:	f7ed f896 	bl	8000860 <__aeabi_ddiv>
 8013734:	4602      	mov	r2, r0
 8013736:	460b      	mov	r3, r1
 8013738:	4610      	mov	r0, r2
 801373a:	4619      	mov	r1, r3
 801373c:	2301      	movs	r3, #1
 801373e:	461c      	mov	r4, r3
 8013740:	a318      	add	r3, pc, #96	; (adr r3, 80137a4 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x104>)
 8013742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013746:	f7ed f9dd 	bl	8000b04 <__aeabi_dcmple>
 801374a:	4603      	mov	r3, r0
 801374c:	2b00      	cmp	r3, #0
 801374e:	d101      	bne.n	8013754 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xb4>
 8013750:	2300      	movs	r3, #0
 8013752:	461c      	mov	r4, r3
 8013754:	b2e3      	uxtb	r3, r4
 8013756:	f083 0301 	eor.w	r3, r3, #1
 801375a:	b2db      	uxtb	r3, r3
 801375c:	2b00      	cmp	r3, #0
 801375e:	d00b      	beq.n	8013778 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xd8>
 8013760:	68fb      	ldr	r3, [r7, #12]
 8013762:	695c      	ldr	r4, [r3, #20]
 8013764:	4b0c      	ldr	r3, [pc, #48]	; (8013798 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xf8>)
 8013766:	9300      	str	r3, [sp, #0]
 8013768:	f44f 73a2 	mov.w	r3, #324	; 0x144
 801376c:	4a0b      	ldr	r2, [pc, #44]	; (801379c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xfc>)
 801376e:	490c      	ldr	r1, [pc, #48]	; (80137a0 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x100>)
 8013770:	68f8      	ldr	r0, [r7, #12]
 8013772:	47a0      	blx	r4
 8013774:	2301      	movs	r3, #1
 8013776:	e009      	b.n	801378c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xec>
  }
  return GetQuantizedConvolutionMultipler(context, input, filter, output,
 8013778:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801377a:	9300      	str	r3, [sp, #0]
 801377c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801377e:	687a      	ldr	r2, [r7, #4]
 8013780:	68b9      	ldr	r1, [r7, #8]
 8013782:	68f8      	ldr	r0, [r7, #12]
 8013784:	f000 f812 	bl	80137ac <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>
 8013788:	4603      	mov	r3, r0
                                          multiplier);
 801378a:	bf00      	nop
}
 801378c:	4618      	mov	r0, r3
 801378e:	3730      	adds	r7, #48	; 0x30
 8013790:	46bd      	mov	sp, r7
 8013792:	bdb0      	pop	{r4, r5, r7, pc}
 8013794:	f3af 8000 	nop.w
 8013798:	0801c644 	.word	0x0801c644
 801379c:	0801c434 	.word	0x0801c434
 80137a0:	0801c530 	.word	0x0801c530
 80137a4:	47ae147b 	.word	0x47ae147b
 80137a8:	3f947ae1 	.word	0x3f947ae1

080137ac <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>:

TfLiteStatus GetQuantizedConvolutionMultipler(TfLiteContext* context,
                                              const TfLiteTensor* input,
                                              const TfLiteTensor* filter,
                                              TfLiteTensor* output,
                                              double* multiplier) {
 80137ac:	b590      	push	{r4, r7, lr}
 80137ae:	b089      	sub	sp, #36	; 0x24
 80137b0:	af02      	add	r7, sp, #8
 80137b2:	60f8      	str	r0, [r7, #12]
 80137b4:	60b9      	str	r1, [r7, #8]
 80137b6:	607a      	str	r2, [r7, #4]
 80137b8:	603b      	str	r3, [r7, #0]
  const double input_product_scale =
      static_cast<double>(input->params.scale * filter->params.scale);
 80137ba:	68bb      	ldr	r3, [r7, #8]
 80137bc:	ed93 7a03 	vldr	s14, [r3, #12]
 80137c0:	687b      	ldr	r3, [r7, #4]
 80137c2:	edd3 7a03 	vldr	s15, [r3, #12]
 80137c6:	ee67 7a27 	vmul.f32	s15, s14, s15
  const double input_product_scale =
 80137ca:	ee17 0a90 	vmov	r0, s15
 80137ce:	f7ec fec5 	bl	800055c <__aeabi_f2d>
 80137d2:	4602      	mov	r2, r0
 80137d4:	460b      	mov	r3, r1
 80137d6:	e9c7 2304 	strd	r2, r3, [r7, #16]
  TF_LITE_ENSURE(context, input_product_scale >= 0);
 80137da:	2301      	movs	r3, #1
 80137dc:	461c      	mov	r4, r3
 80137de:	f04f 0200 	mov.w	r2, #0
 80137e2:	f04f 0300 	mov.w	r3, #0
 80137e6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80137ea:	f7ed f995 	bl	8000b18 <__aeabi_dcmpge>
 80137ee:	4603      	mov	r3, r0
 80137f0:	2b00      	cmp	r3, #0
 80137f2:	d101      	bne.n	80137f8 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x4c>
 80137f4:	2300      	movs	r3, #0
 80137f6:	461c      	mov	r4, r3
 80137f8:	b2e3      	uxtb	r3, r4
 80137fa:	f083 0301 	eor.w	r3, r3, #1
 80137fe:	b2db      	uxtb	r3, r3
 8013800:	2b00      	cmp	r3, #0
 8013802:	d00b      	beq.n	801381c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x70>
 8013804:	68fb      	ldr	r3, [r7, #12]
 8013806:	695c      	ldr	r4, [r3, #20]
 8013808:	4b0f      	ldr	r3, [pc, #60]	; (8013848 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x9c>)
 801380a:	9300      	str	r3, [sp, #0]
 801380c:	f240 1351 	movw	r3, #337	; 0x151
 8013810:	4a0e      	ldr	r2, [pc, #56]	; (801384c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0xa0>)
 8013812:	490f      	ldr	r1, [pc, #60]	; (8013850 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0xa4>)
 8013814:	68f8      	ldr	r0, [r7, #12]
 8013816:	47a0      	blx	r4
 8013818:	2301      	movs	r3, #1
 801381a:	e010      	b.n	801383e <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x92>
  *multiplier = input_product_scale / static_cast<double>(output->params.scale);
 801381c:	683b      	ldr	r3, [r7, #0]
 801381e:	68db      	ldr	r3, [r3, #12]
 8013820:	4618      	mov	r0, r3
 8013822:	f7ec fe9b 	bl	800055c <__aeabi_f2d>
 8013826:	4602      	mov	r2, r0
 8013828:	460b      	mov	r3, r1
 801382a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801382e:	f7ed f817 	bl	8000860 <__aeabi_ddiv>
 8013832:	4602      	mov	r2, r0
 8013834:	460b      	mov	r3, r1
 8013836:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8013838:	e9c1 2300 	strd	r2, r3, [r1]

  return kTfLiteOk;
 801383c:	2300      	movs	r3, #0
}
 801383e:	4618      	mov	r0, r3
 8013840:	371c      	adds	r7, #28
 8013842:	46bd      	mov	sp, r7
 8013844:	bd90      	pop	{r4, r7, pc}
 8013846:	bf00      	nop
 8013848:	0801c668 	.word	0x0801c668
 801384c:	0801c434 	.word	0x0801c434
 8013850:	0801c530 	.word	0x0801c530

08013854 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>:
                                           TfLiteTensor* output,
                                           int32_t* act_min, int32_t* act_max) {
  const auto scale = output->params.scale;
  const auto zero_point = output->params.zero_point;

  auto quantize = [scale, zero_point](float f) {
 8013854:	b580      	push	{r7, lr}
 8013856:	b082      	sub	sp, #8
 8013858:	af00      	add	r7, sp, #0
 801385a:	6078      	str	r0, [r7, #4]
 801385c:	ed87 0a00 	vstr	s0, [r7]
 8013860:	687b      	ldr	r3, [r7, #4]
 8013862:	edd3 7a00 	vldr	s15, [r3]
    return zero_point + static_cast<int32_t>(TfLiteRound(f / scale));
 8013866:	ed97 7a00 	vldr	s14, [r7]
 801386a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801386e:	eeb0 0a66 	vmov.f32	s0, s13
 8013872:	f7ff fe11 	bl	8013498 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 8013876:	eef0 7a40 	vmov.f32	s15, s0
 801387a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801387e:	ee17 2a90 	vmov	r2, s15
  auto quantize = [scale, zero_point](float f) {
 8013882:	687b      	ldr	r3, [r7, #4]
 8013884:	685b      	ldr	r3, [r3, #4]
    return zero_point + static_cast<int32_t>(TfLiteRound(f / scale));
 8013886:	4413      	add	r3, r2
  };
 8013888:	4618      	mov	r0, r3
 801388a:	3708      	adds	r7, #8
 801388c:	46bd      	mov	sp, r7
 801388e:	bd80      	pop	{r7, pc}

08013890 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_>:
                                           int32_t* act_min, int32_t* act_max) {
 8013890:	b580      	push	{r7, lr}
 8013892:	b08e      	sub	sp, #56	; 0x38
 8013894:	af00      	add	r7, sp, #0
 8013896:	60b9      	str	r1, [r7, #8]
 8013898:	607a      	str	r2, [r7, #4]
 801389a:	603b      	str	r3, [r7, #0]
 801389c:	4603      	mov	r3, r0
 801389e:	73fb      	strb	r3, [r7, #15]
  const auto scale = output->params.scale;
 80138a0:	683b      	ldr	r3, [r7, #0]
 80138a2:	68db      	ldr	r3, [r3, #12]
 80138a4:	637b      	str	r3, [r7, #52]	; 0x34
  const auto zero_point = output->params.zero_point;
 80138a6:	683b      	ldr	r3, [r7, #0]
 80138a8:	691b      	ldr	r3, [r3, #16]
 80138aa:	633b      	str	r3, [r7, #48]	; 0x30
  };
 80138ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80138ae:	617b      	str	r3, [r7, #20]
 80138b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138b2:	61bb      	str	r3, [r7, #24]

  if (activation == kTfLiteActRelu) {
 80138b4:	7bfb      	ldrb	r3, [r7, #15]
 80138b6:	2b01      	cmp	r3, #1
 80138b8:	d118      	bne.n	80138ec <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x5c>
    *act_min = std::max(qmin, quantize(0.0));
 80138ba:	f107 0314 	add.w	r3, r7, #20
 80138be:	ed9f 0a3d 	vldr	s0, [pc, #244]	; 80139b4 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x124>
 80138c2:	4618      	mov	r0, r3
 80138c4:	f7ff ffc6 	bl	8013854 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 80138c8:	4603      	mov	r3, r0
 80138ca:	61fb      	str	r3, [r7, #28]
 80138cc:	f107 021c 	add.w	r2, r7, #28
 80138d0:	f107 0308 	add.w	r3, r7, #8
 80138d4:	4611      	mov	r1, r2
 80138d6:	4618      	mov	r0, r3
 80138d8:	f000 f8d6 	bl	8013a88 <_ZSt3maxIlERKT_S2_S2_>
 80138dc:	4603      	mov	r3, r0
 80138de:	681a      	ldr	r2, [r3, #0]
 80138e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80138e2:	601a      	str	r2, [r3, #0]
    *act_max = qmax;
 80138e4:	687a      	ldr	r2, [r7, #4]
 80138e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80138e8:	601a      	str	r2, [r3, #0]
    *act_max = std::min(qmax, quantize(1.0));
  } else {
    *act_min = qmin;
    *act_max = qmax;
  }
}
 80138ea:	e05f      	b.n	80139ac <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x11c>
  } else if (activation == kTfLiteActRelu6) {
 80138ec:	7bfb      	ldrb	r3, [r7, #15]
 80138ee:	2b03      	cmp	r3, #3
 80138f0:	d129      	bne.n	8013946 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0xb6>
    *act_min = std::max(qmin, quantize(0.0));
 80138f2:	f107 0314 	add.w	r3, r7, #20
 80138f6:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 80139b4 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x124>
 80138fa:	4618      	mov	r0, r3
 80138fc:	f7ff ffaa 	bl	8013854 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 8013900:	4603      	mov	r3, r0
 8013902:	623b      	str	r3, [r7, #32]
 8013904:	f107 0220 	add.w	r2, r7, #32
 8013908:	f107 0308 	add.w	r3, r7, #8
 801390c:	4611      	mov	r1, r2
 801390e:	4618      	mov	r0, r3
 8013910:	f000 f8ba 	bl	8013a88 <_ZSt3maxIlERKT_S2_S2_>
 8013914:	4603      	mov	r3, r0
 8013916:	681a      	ldr	r2, [r3, #0]
 8013918:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801391a:	601a      	str	r2, [r3, #0]
    *act_max = std::min(qmax, quantize(6.0));
 801391c:	f107 0314 	add.w	r3, r7, #20
 8013920:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 8013924:	4618      	mov	r0, r3
 8013926:	f7ff ff95 	bl	8013854 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 801392a:	4603      	mov	r3, r0
 801392c:	627b      	str	r3, [r7, #36]	; 0x24
 801392e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8013932:	1d3b      	adds	r3, r7, #4
 8013934:	4611      	mov	r1, r2
 8013936:	4618      	mov	r0, r3
 8013938:	f000 f892 	bl	8013a60 <_ZSt3minIlERKT_S2_S2_>
 801393c:	4603      	mov	r3, r0
 801393e:	681a      	ldr	r2, [r3, #0]
 8013940:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013942:	601a      	str	r2, [r3, #0]
}
 8013944:	e032      	b.n	80139ac <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x11c>
  } else if (activation == kTfLiteActReluN1To1) {
 8013946:	7bfb      	ldrb	r3, [r7, #15]
 8013948:	2b02      	cmp	r3, #2
 801394a:	d129      	bne.n	80139a0 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x110>
    *act_min = std::max(qmin, quantize(-1.0));
 801394c:	f107 0314 	add.w	r3, r7, #20
 8013950:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8013954:	4618      	mov	r0, r3
 8013956:	f7ff ff7d 	bl	8013854 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 801395a:	4603      	mov	r3, r0
 801395c:	62bb      	str	r3, [r7, #40]	; 0x28
 801395e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8013962:	f107 0308 	add.w	r3, r7, #8
 8013966:	4611      	mov	r1, r2
 8013968:	4618      	mov	r0, r3
 801396a:	f000 f88d 	bl	8013a88 <_ZSt3maxIlERKT_S2_S2_>
 801396e:	4603      	mov	r3, r0
 8013970:	681a      	ldr	r2, [r3, #0]
 8013972:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013974:	601a      	str	r2, [r3, #0]
    *act_max = std::min(qmax, quantize(1.0));
 8013976:	f107 0314 	add.w	r3, r7, #20
 801397a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801397e:	4618      	mov	r0, r3
 8013980:	f7ff ff68 	bl	8013854 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 8013984:	4603      	mov	r3, r0
 8013986:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013988:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 801398c:	1d3b      	adds	r3, r7, #4
 801398e:	4611      	mov	r1, r2
 8013990:	4618      	mov	r0, r3
 8013992:	f000 f865 	bl	8013a60 <_ZSt3minIlERKT_S2_S2_>
 8013996:	4603      	mov	r3, r0
 8013998:	681a      	ldr	r2, [r3, #0]
 801399a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801399c:	601a      	str	r2, [r3, #0]
}
 801399e:	e005      	b.n	80139ac <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x11c>
    *act_min = qmin;
 80139a0:	68ba      	ldr	r2, [r7, #8]
 80139a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80139a4:	601a      	str	r2, [r3, #0]
    *act_max = qmax;
 80139a6:	687a      	ldr	r2, [r7, #4]
 80139a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80139aa:	601a      	str	r2, [r3, #0]
}
 80139ac:	bf00      	nop
 80139ae:	3738      	adds	r7, #56	; 0x38
 80139b0:	46bd      	mov	sp, r7
 80139b2:	bd80      	pop	{r7, pc}
 80139b4:	00000000 	.word	0x00000000

080139b8 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>:

TfLiteStatus CalculateActivationRangeQuantized(TfLiteContext* context,
                                               TfLiteFusedActivation activation,
                                               TfLiteTensor* output,
                                               int32_t* act_min,
                                               int32_t* act_max) {
 80139b8:	b590      	push	{r4, r7, lr}
 80139ba:	b089      	sub	sp, #36	; 0x24
 80139bc:	af02      	add	r7, sp, #8
 80139be:	60f8      	str	r0, [r7, #12]
 80139c0:	607a      	str	r2, [r7, #4]
 80139c2:	603b      	str	r3, [r7, #0]
 80139c4:	460b      	mov	r3, r1
 80139c6:	72fb      	strb	r3, [r7, #11]
  int32_t qmin = 0;
 80139c8:	2300      	movs	r3, #0
 80139ca:	617b      	str	r3, [r7, #20]
  int32_t qmax = 0;
 80139cc:	2300      	movs	r3, #0
 80139ce:	613b      	str	r3, [r7, #16]
  if (output->type == kTfLiteUInt8) {
 80139d0:	687b      	ldr	r3, [r7, #4]
 80139d2:	781b      	ldrb	r3, [r3, #0]
 80139d4:	2b03      	cmp	r3, #3
 80139d6:	d108      	bne.n	80139ea <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x32>
    qmin = std::numeric_limits<uint8_t>::min();
 80139d8:	f7ff fd7f 	bl	80134da <_ZNSt14numeric_limitsIhE3minEv>
 80139dc:	4603      	mov	r3, r0
 80139de:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<uint8_t>::max();
 80139e0:	f7ff fd83 	bl	80134ea <_ZNSt14numeric_limitsIhE3maxEv>
 80139e4:	4603      	mov	r3, r0
 80139e6:	613b      	str	r3, [r7, #16]
 80139e8:	e025      	b.n	8013a36 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7e>
  } else if (output->type == kTfLiteInt8) {
 80139ea:	687b      	ldr	r3, [r7, #4]
 80139ec:	781b      	ldrb	r3, [r3, #0]
 80139ee:	2b09      	cmp	r3, #9
 80139f0:	d108      	bne.n	8013a04 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x4c>
    qmin = std::numeric_limits<int8_t>::min();
 80139f2:	f7ff fd61 	bl	80134b8 <_ZNSt14numeric_limitsIaE3minEv>
 80139f6:	4603      	mov	r3, r0
 80139f8:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<int8_t>::max();
 80139fa:	f7ff fd66 	bl	80134ca <_ZNSt14numeric_limitsIaE3maxEv>
 80139fe:	4603      	mov	r3, r0
 8013a00:	613b      	str	r3, [r7, #16]
 8013a02:	e018      	b.n	8013a36 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7e>
  } else if (output->type == kTfLiteInt16) {
 8013a04:	687b      	ldr	r3, [r7, #4]
 8013a06:	781b      	ldrb	r3, [r3, #0]
 8013a08:	2b07      	cmp	r3, #7
 8013a0a:	d108      	bne.n	8013a1e <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x66>
    qmin = std::numeric_limits<int16_t>::min();
 8013a0c:	f7ff fd76 	bl	80134fc <_ZNSt14numeric_limitsIsE3minEv>
 8013a10:	4603      	mov	r3, r0
 8013a12:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<int16_t>::max();
 8013a14:	f7ff fd7c 	bl	8013510 <_ZNSt14numeric_limitsIsE3maxEv>
 8013a18:	4603      	mov	r3, r0
 8013a1a:	613b      	str	r3, [r7, #16]
 8013a1c:	e00b      	b.n	8013a36 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7e>
  } else {
    TF_LITE_ENSURE(context, false);
 8013a1e:	68fb      	ldr	r3, [r7, #12]
 8013a20:	695c      	ldr	r4, [r3, #20]
 8013a22:	4b0c      	ldr	r3, [pc, #48]	; (8013a54 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x9c>)
 8013a24:	9300      	str	r3, [sp, #0]
 8013a26:	f44f 73c2 	mov.w	r3, #388	; 0x184
 8013a2a:	4a0b      	ldr	r2, [pc, #44]	; (8013a58 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xa0>)
 8013a2c:	490b      	ldr	r1, [pc, #44]	; (8013a5c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xa4>)
 8013a2e:	68f8      	ldr	r0, [r7, #12]
 8013a30:	47a0      	blx	r4
 8013a32:	2301      	movs	r3, #1
 8013a34:	e00a      	b.n	8013a4c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x94>
  }

  CalculateActivationRangeQuantizedImpl(activation, qmin, qmax, output, act_min,
 8013a36:	7af8      	ldrb	r0, [r7, #11]
 8013a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a3a:	9301      	str	r3, [sp, #4]
 8013a3c:	683b      	ldr	r3, [r7, #0]
 8013a3e:	9300      	str	r3, [sp, #0]
 8013a40:	687b      	ldr	r3, [r7, #4]
 8013a42:	693a      	ldr	r2, [r7, #16]
 8013a44:	6979      	ldr	r1, [r7, #20]
 8013a46:	f7ff ff23 	bl	8013890 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_>
                                        act_max);
  return kTfLiteOk;
 8013a4a:	2300      	movs	r3, #0
}
 8013a4c:	4618      	mov	r0, r3
 8013a4e:	371c      	adds	r7, #28
 8013a50:	46bd      	mov	sp, r7
 8013a52:	bd90      	pop	{r4, r7, pc}
 8013a54:	0801c684 	.word	0x0801c684
 8013a58:	0801c434 	.word	0x0801c434
 8013a5c:	0801c530 	.word	0x0801c530

08013a60 <_ZSt3minIlERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8013a60:	b480      	push	{r7}
 8013a62:	b083      	sub	sp, #12
 8013a64:	af00      	add	r7, sp, #0
 8013a66:	6078      	str	r0, [r7, #4]
 8013a68:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8013a6a:	683b      	ldr	r3, [r7, #0]
 8013a6c:	681a      	ldr	r2, [r3, #0]
 8013a6e:	687b      	ldr	r3, [r7, #4]
 8013a70:	681b      	ldr	r3, [r3, #0]
 8013a72:	429a      	cmp	r2, r3
 8013a74:	da01      	bge.n	8013a7a <_ZSt3minIlERKT_S2_S2_+0x1a>
	return __b;
 8013a76:	683b      	ldr	r3, [r7, #0]
 8013a78:	e000      	b.n	8013a7c <_ZSt3minIlERKT_S2_S2_+0x1c>
      return __a;
 8013a7a:	687b      	ldr	r3, [r7, #4]
    }
 8013a7c:	4618      	mov	r0, r3
 8013a7e:	370c      	adds	r7, #12
 8013a80:	46bd      	mov	sp, r7
 8013a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a86:	4770      	bx	lr

08013a88 <_ZSt3maxIlERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 8013a88:	b480      	push	{r7}
 8013a8a:	b083      	sub	sp, #12
 8013a8c:	af00      	add	r7, sp, #0
 8013a8e:	6078      	str	r0, [r7, #4]
 8013a90:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 8013a92:	687b      	ldr	r3, [r7, #4]
 8013a94:	681a      	ldr	r2, [r3, #0]
 8013a96:	683b      	ldr	r3, [r7, #0]
 8013a98:	681b      	ldr	r3, [r3, #0]
 8013a9a:	429a      	cmp	r2, r3
 8013a9c:	da01      	bge.n	8013aa2 <_ZSt3maxIlERKT_S2_S2_+0x1a>
	return __b;
 8013a9e:	683b      	ldr	r3, [r7, #0]
 8013aa0:	e000      	b.n	8013aa4 <_ZSt3maxIlERKT_S2_S2_+0x1c>
      return __a;
 8013aa2:	687b      	ldr	r3, [r7, #4]
    }
 8013aa4:	4618      	mov	r0, r3
 8013aa6:	370c      	adds	r7, #12
 8013aa8:	46bd      	mov	sp, r7
 8013aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013aae:	4770      	bx	lr

08013ab0 <_ZN6tflite12RuntimeShapeC1Ev>:
  // larger shapes are separately allocated.
  static constexpr int kMaxSmallSize = 5;

  RuntimeShape& operator=(RuntimeShape const&) = delete;

  RuntimeShape() : size_(0) {}
 8013ab0:	b480      	push	{r7}
 8013ab2:	b083      	sub	sp, #12
 8013ab4:	af00      	add	r7, sp, #0
 8013ab6:	6078      	str	r0, [r7, #4]
 8013ab8:	687b      	ldr	r3, [r7, #4]
 8013aba:	2200      	movs	r2, #0
 8013abc:	601a      	str	r2, [r3, #0]
 8013abe:	687b      	ldr	r3, [r7, #4]
 8013ac0:	4618      	mov	r0, r3
 8013ac2:	370c      	adds	r7, #12
 8013ac4:	46bd      	mov	sp, r7
 8013ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013aca:	4770      	bx	lr

08013acc <_ZN6tflite12RuntimeShapeC1EiPKl>:
    for (int i = 0; i < shape_size; ++i) {
      SetDim(i, value);
    }
  }

  RuntimeShape(int dimensions_count, const int32_t* dims_data) : size_(0) {
 8013acc:	b580      	push	{r7, lr}
 8013ace:	b084      	sub	sp, #16
 8013ad0:	af00      	add	r7, sp, #0
 8013ad2:	60f8      	str	r0, [r7, #12]
 8013ad4:	60b9      	str	r1, [r7, #8]
 8013ad6:	607a      	str	r2, [r7, #4]
 8013ad8:	68fb      	ldr	r3, [r7, #12]
 8013ada:	2200      	movs	r2, #0
 8013adc:	601a      	str	r2, [r3, #0]
    ReplaceWith(dimensions_count, dims_data);
 8013ade:	687a      	ldr	r2, [r7, #4]
 8013ae0:	68b9      	ldr	r1, [r7, #8]
 8013ae2:	68f8      	ldr	r0, [r7, #12]
 8013ae4:	f000 f866 	bl	8013bb4 <_ZN6tflite12RuntimeShape11ReplaceWithEiPKl>
  }
 8013ae8:	68fb      	ldr	r3, [r7, #12]
 8013aea:	4618      	mov	r0, r3
 8013aec:	3710      	adds	r7, #16
 8013aee:	46bd      	mov	sp, r7
 8013af0:	bd80      	pop	{r7, pc}

08013af2 <_ZN6tflite12RuntimeShapeD1Ev>:
    return this->size_ == comp.size_ &&
           std::memcmp(DimsData(), comp.DimsData(), size_ * sizeof(int32_t)) ==
               0;
  }

  ~RuntimeShape() {
 8013af2:	b580      	push	{r7, lr}
 8013af4:	b082      	sub	sp, #8
 8013af6:	af00      	add	r7, sp, #0
 8013af8:	6078      	str	r0, [r7, #4]
    if (size_ > kMaxSmallSize) {
 8013afa:	687b      	ldr	r3, [r7, #4]
 8013afc:	681b      	ldr	r3, [r3, #0]
 8013afe:	2b05      	cmp	r3, #5
 8013b00:	dd08      	ble.n	8013b14 <_ZN6tflite12RuntimeShapeD1Ev+0x22>
#ifdef TF_LITE_STATIC_MEMORY
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else  // TF_LITE_STATIC_MEMORY
      delete[] dims_pointer_;
 8013b02:	687b      	ldr	r3, [r7, #4]
 8013b04:	685b      	ldr	r3, [r3, #4]
 8013b06:	2b00      	cmp	r3, #0
 8013b08:	d004      	beq.n	8013b14 <_ZN6tflite12RuntimeShapeD1Ev+0x22>
 8013b0a:	687b      	ldr	r3, [r7, #4]
 8013b0c:	685b      	ldr	r3, [r3, #4]
 8013b0e:	4618      	mov	r0, r3
 8013b10:	f005 f910 	bl	8018d34 <_ZdaPv>
#endif  // TF_LITE_STATIC_MEMORY
    }
  }
 8013b14:	687b      	ldr	r3, [r7, #4]
 8013b16:	4618      	mov	r0, r3
 8013b18:	3708      	adds	r7, #8
 8013b1a:	46bd      	mov	sp, r7
 8013b1c:	bd80      	pop	{r7, pc}

08013b1e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>:

  inline int32_t DimensionsCount() const { return size_; }
 8013b1e:	b480      	push	{r7}
 8013b20:	b083      	sub	sp, #12
 8013b22:	af00      	add	r7, sp, #0
 8013b24:	6078      	str	r0, [r7, #4]
 8013b26:	687b      	ldr	r3, [r7, #4]
 8013b28:	681b      	ldr	r3, [r3, #0]
 8013b2a:	4618      	mov	r0, r3
 8013b2c:	370c      	adds	r7, #12
 8013b2e:	46bd      	mov	sp, r7
 8013b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b34:	4770      	bx	lr

08013b36 <_ZN6tflite12RuntimeShape8DimsDataEv>:
    } else {
      dims_[i] = val;
    }
  }

  inline int32_t* DimsData() {
 8013b36:	b480      	push	{r7}
 8013b38:	b083      	sub	sp, #12
 8013b3a:	af00      	add	r7, sp, #0
 8013b3c:	6078      	str	r0, [r7, #4]
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 8013b3e:	687b      	ldr	r3, [r7, #4]
 8013b40:	681b      	ldr	r3, [r3, #0]
 8013b42:	2b05      	cmp	r3, #5
 8013b44:	dd02      	ble.n	8013b4c <_ZN6tflite12RuntimeShape8DimsDataEv+0x16>
 8013b46:	687b      	ldr	r3, [r7, #4]
 8013b48:	685b      	ldr	r3, [r3, #4]
 8013b4a:	e001      	b.n	8013b50 <_ZN6tflite12RuntimeShape8DimsDataEv+0x1a>
 8013b4c:	687b      	ldr	r3, [r7, #4]
 8013b4e:	3304      	adds	r3, #4
  }
 8013b50:	4618      	mov	r0, r3
 8013b52:	370c      	adds	r7, #12
 8013b54:	46bd      	mov	sp, r7
 8013b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b5a:	4770      	bx	lr

08013b5c <_ZN6tflite12RuntimeShape6ResizeEi>:
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
  }
  // The caller must ensure that the shape is no bigger than 5-D.
  inline const int32_t* DimsDataUpTo5D() const { return dims_; }

  inline void Resize(int dimensions_count) {
 8013b5c:	b580      	push	{r7, lr}
 8013b5e:	b082      	sub	sp, #8
 8013b60:	af00      	add	r7, sp, #0
 8013b62:	6078      	str	r0, [r7, #4]
 8013b64:	6039      	str	r1, [r7, #0]
    if (size_ > kMaxSmallSize) {
 8013b66:	687b      	ldr	r3, [r7, #4]
 8013b68:	681b      	ldr	r3, [r3, #0]
 8013b6a:	2b05      	cmp	r3, #5
 8013b6c:	dd08      	ble.n	8013b80 <_ZN6tflite12RuntimeShape6ResizeEi+0x24>
#ifdef TF_LITE_STATIC_MEMORY
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else  // TF_LITE_STATIC_MEMORY
      delete[] dims_pointer_;
 8013b6e:	687b      	ldr	r3, [r7, #4]
 8013b70:	685b      	ldr	r3, [r3, #4]
 8013b72:	2b00      	cmp	r3, #0
 8013b74:	d004      	beq.n	8013b80 <_ZN6tflite12RuntimeShape6ResizeEi+0x24>
 8013b76:	687b      	ldr	r3, [r7, #4]
 8013b78:	685b      	ldr	r3, [r3, #4]
 8013b7a:	4618      	mov	r0, r3
 8013b7c:	f005 f8da 	bl	8018d34 <_ZdaPv>
#endif  // TF_LITE_STATIC_MEMORY
    }
    size_ = dimensions_count;
 8013b80:	687b      	ldr	r3, [r7, #4]
 8013b82:	683a      	ldr	r2, [r7, #0]
 8013b84:	601a      	str	r2, [r3, #0]
    if (dimensions_count > kMaxSmallSize) {
 8013b86:	683b      	ldr	r3, [r7, #0]
 8013b88:	2b05      	cmp	r3, #5
 8013b8a:	dd0f      	ble.n	8013bac <_ZN6tflite12RuntimeShape6ResizeEi+0x50>
#ifdef TF_LITE_STATIC_MEMORY
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else  // TF_LITE_STATIC_MEMORY
      dims_pointer_ = new int32_t[dimensions_count];
 8013b8c:	683b      	ldr	r3, [r7, #0]
 8013b8e:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 8013b92:	4293      	cmp	r3, r2
 8013b94:	d201      	bcs.n	8013b9a <_ZN6tflite12RuntimeShape6ResizeEi+0x3e>
 8013b96:	009b      	lsls	r3, r3, #2
 8013b98:	e001      	b.n	8013b9e <_ZN6tflite12RuntimeShape6ResizeEi+0x42>
 8013b9a:	f04f 33ff 	mov.w	r3, #4294967295
 8013b9e:	4618      	mov	r0, r3
 8013ba0:	f005 f8db 	bl	8018d5a <_Znaj>
 8013ba4:	4603      	mov	r3, r0
 8013ba6:	461a      	mov	r2, r3
 8013ba8:	687b      	ldr	r3, [r7, #4]
 8013baa:	605a      	str	r2, [r3, #4]
#endif  // TF_LITE_STATIC_MEMORY
    }
  }
 8013bac:	bf00      	nop
 8013bae:	3708      	adds	r7, #8
 8013bb0:	46bd      	mov	sp, r7
 8013bb2:	bd80      	pop	{r7, pc}

08013bb4 <_ZN6tflite12RuntimeShape11ReplaceWithEiPKl>:

  inline void ReplaceWith(int dimensions_count, const int32_t* dims_data) {
 8013bb4:	b580      	push	{r7, lr}
 8013bb6:	b086      	sub	sp, #24
 8013bb8:	af00      	add	r7, sp, #0
 8013bba:	60f8      	str	r0, [r7, #12]
 8013bbc:	60b9      	str	r1, [r7, #8]
 8013bbe:	607a      	str	r2, [r7, #4]
    Resize(dimensions_count);
 8013bc0:	68b9      	ldr	r1, [r7, #8]
 8013bc2:	68f8      	ldr	r0, [r7, #12]
 8013bc4:	f7ff ffca 	bl	8013b5c <_ZN6tflite12RuntimeShape6ResizeEi>
    int32_t* dst_dims = DimsData();
 8013bc8:	68f8      	ldr	r0, [r7, #12]
 8013bca:	f7ff ffb4 	bl	8013b36 <_ZN6tflite12RuntimeShape8DimsDataEv>
 8013bce:	6178      	str	r0, [r7, #20]
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
 8013bd0:	68bb      	ldr	r3, [r7, #8]
 8013bd2:	009b      	lsls	r3, r3, #2
 8013bd4:	461a      	mov	r2, r3
 8013bd6:	6879      	ldr	r1, [r7, #4]
 8013bd8:	6978      	ldr	r0, [r7, #20]
 8013bda:	f006 fc59 	bl	801a490 <memcpy>
  }
 8013bde:	bf00      	nop
 8013be0:	3718      	adds	r7, #24
 8013be2:	46bd      	mov	sp, r7
 8013be4:	bd80      	pop	{r7, pc}

08013be6 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>:
inline const T* GetTensorData(const TfLiteTensor* tensor) {
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
                           : nullptr;
}

inline RuntimeShape GetTensorShape(const TfLiteTensor* tensor) {
 8013be6:	b580      	push	{r7, lr}
 8013be8:	b086      	sub	sp, #24
 8013bea:	af00      	add	r7, sp, #0
 8013bec:	6078      	str	r0, [r7, #4]
 8013bee:	6039      	str	r1, [r7, #0]
  if (tensor == nullptr) {
 8013bf0:	683b      	ldr	r3, [r7, #0]
 8013bf2:	2b00      	cmp	r3, #0
 8013bf4:	d103      	bne.n	8013bfe <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x18>
    return RuntimeShape();
 8013bf6:	6878      	ldr	r0, [r7, #4]
 8013bf8:	f7ff ff5a 	bl	8013ab0 <_ZN6tflite12RuntimeShapeC1Ev>
 8013bfc:	e00d      	b.n	8013c1a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x34>
  }

  TfLiteIntArray* dims = tensor->dims;
 8013bfe:	683b      	ldr	r3, [r7, #0]
 8013c00:	689b      	ldr	r3, [r3, #8]
 8013c02:	617b      	str	r3, [r7, #20]
  const int dims_size = dims->size;
 8013c04:	697b      	ldr	r3, [r7, #20]
 8013c06:	681b      	ldr	r3, [r3, #0]
 8013c08:	613b      	str	r3, [r7, #16]
  const int32_t* dims_data = reinterpret_cast<const int32_t*>(dims->data);
 8013c0a:	697b      	ldr	r3, [r7, #20]
 8013c0c:	3304      	adds	r3, #4
 8013c0e:	60fb      	str	r3, [r7, #12]
  return RuntimeShape(dims_size, dims_data);
 8013c10:	68fa      	ldr	r2, [r7, #12]
 8013c12:	6939      	ldr	r1, [r7, #16]
 8013c14:	6878      	ldr	r0, [r7, #4]
 8013c16:	f7ff ff59 	bl	8013acc <_ZN6tflite12RuntimeShapeC1EiPKl>
}
 8013c1a:	6878      	ldr	r0, [r7, #4]
 8013c1c:	3718      	adds	r7, #24
 8013c1e:	46bd      	mov	sp, r7
 8013c20:	bd80      	pop	{r7, pc}

08013c22 <_ZNSt14numeric_limitsIlE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__LONG_MAX__ - 1; }
 8013c22:	b480      	push	{r7}
 8013c24:	af00      	add	r7, sp, #0
 8013c26:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8013c2a:	4618      	mov	r0, r3
 8013c2c:	46bd      	mov	sp, r7
 8013c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c32:	4770      	bx	lr

08013c34 <_ZNSt14numeric_limitsIfE8infinityEv>:
	= bool(__FLT_HAS_DENORM__) ? denorm_present : denorm_absent;
      static _GLIBCXX_USE_CONSTEXPR bool has_denorm_loss
       = __glibcxx_float_has_denorm_loss;

      static _GLIBCXX_CONSTEXPR float
      infinity() _GLIBCXX_USE_NOEXCEPT { return __builtin_huge_valf(); }
 8013c34:	b480      	push	{r7}
 8013c36:	af00      	add	r7, sp, #0
 8013c38:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 8013c3c:	ee07 3a90 	vmov	s15, r3
 8013c40:	eeb0 0a67 	vmov.f32	s0, s15
 8013c44:	46bd      	mov	sp, r7
 8013c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c4a:	4770      	bx	lr

08013c4c <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>:

// This function implements the same computation as the ARMv7 NEON VQRDMULH
// instruction.
template <>
inline std::int32_t SaturatingRoundingDoublingHighMul(std::int32_t a,
                                                      std::int32_t b) {
 8013c4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8013c50:	b092      	sub	sp, #72	; 0x48
 8013c52:	af00      	add	r7, sp, #0
 8013c54:	61f8      	str	r0, [r7, #28]
 8013c56:	61b9      	str	r1, [r7, #24]
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
 8013c58:	69fa      	ldr	r2, [r7, #28]
 8013c5a:	69bb      	ldr	r3, [r7, #24]
 8013c5c:	429a      	cmp	r2, r3
 8013c5e:	d107      	bne.n	8013c70 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x24>
 8013c60:	f7ff ffdf 	bl	8013c22 <_ZNSt14numeric_limitsIlE3minEv>
 8013c64:	4602      	mov	r2, r0
 8013c66:	69fb      	ldr	r3, [r7, #28]
 8013c68:	4293      	cmp	r3, r2
 8013c6a:	d101      	bne.n	8013c70 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x24>
 8013c6c:	2301      	movs	r3, #1
 8013c6e:	e000      	b.n	8013c72 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x26>
 8013c70:	2300      	movs	r3, #0
 8013c72:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  std::int64_t a_64(a);
 8013c76:	69fb      	ldr	r3, [r7, #28]
 8013c78:	17da      	asrs	r2, r3, #31
 8013c7a:	60bb      	str	r3, [r7, #8]
 8013c7c:	60fa      	str	r2, [r7, #12]
 8013c7e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8013c82:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  std::int64_t b_64(b);
 8013c86:	69bb      	ldr	r3, [r7, #24]
 8013c88:	17da      	asrs	r2, r3, #31
 8013c8a:	603b      	str	r3, [r7, #0]
 8013c8c:	607a      	str	r2, [r7, #4]
 8013c8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013c92:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  std::int64_t ab_64 = a_64 * b_64;
 8013c96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013c98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013c9a:	fb03 f202 	mul.w	r2, r3, r2
 8013c9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013ca0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013ca2:	fb01 f303 	mul.w	r3, r1, r3
 8013ca6:	4413      	add	r3, r2
 8013ca8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013caa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013cac:	fba1 4502 	umull	r4, r5, r1, r2
 8013cb0:	442b      	add	r3, r5
 8013cb2:	461d      	mov	r5, r3
 8013cb4:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
 8013cb8:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 8013cbc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8013cc0:	2b00      	cmp	r3, #0
 8013cc2:	db02      	blt.n	8013cca <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x7e>
 8013cc4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8013cc8:	e000      	b.n	8013ccc <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x80>
 8013cca:	4b1a      	ldr	r3, [pc, #104]	; (8013d34 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xe8>)
 8013ccc:	627b      	str	r3, [r7, #36]	; 0x24
  std::int32_t ab_x2_high32 =
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 8013cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013cd0:	17da      	asrs	r2, r3, #31
 8013cd2:	4698      	mov	r8, r3
 8013cd4:	4691      	mov	r9, r2
 8013cd6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8013cda:	eb18 0102 	adds.w	r1, r8, r2
 8013cde:	6139      	str	r1, [r7, #16]
 8013ce0:	eb49 0303 	adc.w	r3, r9, r3
 8013ce4:	617b      	str	r3, [r7, #20]
 8013ce6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8013cea:	2b00      	cmp	r3, #0
 8013cec:	da07      	bge.n	8013cfe <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xb2>
 8013cee:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8013cf2:	eb12 0a01 	adds.w	sl, r2, r1
 8013cf6:	f143 0b00 	adc.w	fp, r3, #0
 8013cfa:	4652      	mov	r2, sl
 8013cfc:	465b      	mov	r3, fp
 8013cfe:	f04f 0000 	mov.w	r0, #0
 8013d02:	f04f 0100 	mov.w	r1, #0
 8013d06:	0fd0      	lsrs	r0, r2, #31
 8013d08:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8013d0c:	17d9      	asrs	r1, r3, #31
 8013d0e:	4602      	mov	r2, r0
 8013d10:	460b      	mov	r3, r1
  std::int32_t ab_x2_high32 =
 8013d12:	4613      	mov	r3, r2
 8013d14:	623b      	str	r3, [r7, #32]
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
 8013d16:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8013d1a:	2b00      	cmp	r3, #0
 8013d1c:	d003      	beq.n	8013d26 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xda>
 8013d1e:	f7ff fa09 	bl	8013134 <_ZNSt14numeric_limitsIlE3maxEv>
 8013d22:	4603      	mov	r3, r0
 8013d24:	e000      	b.n	8013d28 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xdc>
 8013d26:	6a3b      	ldr	r3, [r7, #32]
}
 8013d28:	4618      	mov	r0, r3
 8013d2a:	3748      	adds	r7, #72	; 0x48
 8013d2c:	46bd      	mov	sp, r7
 8013d2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8013d32:	bf00      	nop
 8013d34:	c0000001 	.word	0xc0000001

08013d38 <_ZNK6tflite12RuntimeShape4DimsEi>:
  inline int32_t Dims(int i) const {
 8013d38:	b580      	push	{r7, lr}
 8013d3a:	b082      	sub	sp, #8
 8013d3c:	af00      	add	r7, sp, #0
 8013d3e:	6078      	str	r0, [r7, #4]
 8013d40:	6039      	str	r1, [r7, #0]
    TFLITE_DCHECK_GE(i, 0);
 8013d42:	683b      	ldr	r3, [r7, #0]
 8013d44:	2b00      	cmp	r3, #0
 8013d46:	da01      	bge.n	8013d4c <_ZNK6tflite12RuntimeShape4DimsEi+0x14>
 8013d48:	f006 fb24 	bl	801a394 <abort>
    TFLITE_DCHECK_LT(i, size_);
 8013d4c:	687b      	ldr	r3, [r7, #4]
 8013d4e:	681b      	ldr	r3, [r3, #0]
 8013d50:	683a      	ldr	r2, [r7, #0]
 8013d52:	429a      	cmp	r2, r3
 8013d54:	db01      	blt.n	8013d5a <_ZNK6tflite12RuntimeShape4DimsEi+0x22>
 8013d56:	f006 fb1d 	bl	801a394 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 8013d5a:	687b      	ldr	r3, [r7, #4]
 8013d5c:	681b      	ldr	r3, [r3, #0]
 8013d5e:	2b05      	cmp	r3, #5
 8013d60:	dd06      	ble.n	8013d70 <_ZNK6tflite12RuntimeShape4DimsEi+0x38>
 8013d62:	687b      	ldr	r3, [r7, #4]
 8013d64:	685a      	ldr	r2, [r3, #4]
 8013d66:	683b      	ldr	r3, [r7, #0]
 8013d68:	009b      	lsls	r3, r3, #2
 8013d6a:	4413      	add	r3, r2
 8013d6c:	681b      	ldr	r3, [r3, #0]
 8013d6e:	e004      	b.n	8013d7a <_ZNK6tflite12RuntimeShape4DimsEi+0x42>
 8013d70:	687a      	ldr	r2, [r7, #4]
 8013d72:	683b      	ldr	r3, [r7, #0]
 8013d74:	009b      	lsls	r3, r3, #2
 8013d76:	4413      	add	r3, r2
 8013d78:	685b      	ldr	r3, [r3, #4]
  }
 8013d7a:	4618      	mov	r0, r3
 8013d7c:	3708      	adds	r7, #8
 8013d7e:	46bd      	mov	sp, r7
 8013d80:	bd80      	pop	{r7, pc}

08013d82 <_ZNK6tflite12RuntimeShape8DimsDataEv>:
  inline const int32_t* DimsData() const {
 8013d82:	b480      	push	{r7}
 8013d84:	b083      	sub	sp, #12
 8013d86:	af00      	add	r7, sp, #0
 8013d88:	6078      	str	r0, [r7, #4]
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 8013d8a:	687b      	ldr	r3, [r7, #4]
 8013d8c:	681b      	ldr	r3, [r3, #0]
 8013d8e:	2b05      	cmp	r3, #5
 8013d90:	dd02      	ble.n	8013d98 <_ZNK6tflite12RuntimeShape8DimsDataEv+0x16>
 8013d92:	687b      	ldr	r3, [r7, #4]
 8013d94:	685b      	ldr	r3, [r3, #4]
 8013d96:	e001      	b.n	8013d9c <_ZNK6tflite12RuntimeShape8DimsDataEv+0x1a>
 8013d98:	687b      	ldr	r3, [r7, #4]
 8013d9a:	3304      	adds	r3, #4
  }
 8013d9c:	4618      	mov	r0, r3
 8013d9e:	370c      	adds	r7, #12
 8013da0:	46bd      	mov	sp, r7
 8013da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013da6:	4770      	bx	lr

08013da8 <_ZNK6tflite12RuntimeShape8FlatSizeEv>:
    BuildFrom<const std::initializer_list<int>>(init_list);
  }

  // Returns the total count of elements, that is the size when flattened into a
  // vector.
  inline int FlatSize() const {
 8013da8:	b580      	push	{r7, lr}
 8013daa:	b086      	sub	sp, #24
 8013dac:	af00      	add	r7, sp, #0
 8013dae:	6078      	str	r0, [r7, #4]
    int buffer_size = 1;
 8013db0:	2301      	movs	r3, #1
 8013db2:	617b      	str	r3, [r7, #20]
    const int* dims_data = reinterpret_cast<const int*>(DimsData());
 8013db4:	6878      	ldr	r0, [r7, #4]
 8013db6:	f7ff ffe4 	bl	8013d82 <_ZNK6tflite12RuntimeShape8DimsDataEv>
 8013dba:	60f8      	str	r0, [r7, #12]
    for (int i = 0; i < size_; i++) {
 8013dbc:	2300      	movs	r3, #0
 8013dbe:	613b      	str	r3, [r7, #16]
 8013dc0:	687b      	ldr	r3, [r7, #4]
 8013dc2:	681b      	ldr	r3, [r3, #0]
 8013dc4:	693a      	ldr	r2, [r7, #16]
 8013dc6:	429a      	cmp	r2, r3
 8013dc8:	da0c      	bge.n	8013de4 <_ZNK6tflite12RuntimeShape8FlatSizeEv+0x3c>
      buffer_size *= dims_data[i];
 8013dca:	693b      	ldr	r3, [r7, #16]
 8013dcc:	009b      	lsls	r3, r3, #2
 8013dce:	68fa      	ldr	r2, [r7, #12]
 8013dd0:	4413      	add	r3, r2
 8013dd2:	681a      	ldr	r2, [r3, #0]
 8013dd4:	697b      	ldr	r3, [r7, #20]
 8013dd6:	fb02 f303 	mul.w	r3, r2, r3
 8013dda:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < size_; i++) {
 8013ddc:	693b      	ldr	r3, [r7, #16]
 8013dde:	3301      	adds	r3, #1
 8013de0:	613b      	str	r3, [r7, #16]
 8013de2:	e7ed      	b.n	8013dc0 <_ZNK6tflite12RuntimeShape8FlatSizeEv+0x18>
    }
    return buffer_size;
 8013de4:	697b      	ldr	r3, [r7, #20]
  }
 8013de6:	4618      	mov	r0, r3
 8013de8:	3718      	adds	r7, #24
 8013dea:	46bd      	mov	sp, r7
 8013dec:	bd80      	pop	{r7, pc}

08013dee <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>:
}

// Flat size calculation, checking that dimensions match with one or more other
// arrays.
inline int MatchingFlatSize(const RuntimeShape& shape,
                            const RuntimeShape& check_shape_0) {
 8013dee:	b590      	push	{r4, r7, lr}
 8013df0:	b085      	sub	sp, #20
 8013df2:	af00      	add	r7, sp, #0
 8013df4:	6078      	str	r0, [r7, #4]
 8013df6:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), check_shape_0.DimensionsCount());
 8013df8:	6878      	ldr	r0, [r7, #4]
 8013dfa:	f7ff fe90 	bl	8013b1e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8013dfe:	4604      	mov	r4, r0
 8013e00:	6838      	ldr	r0, [r7, #0]
 8013e02:	f7ff fe8c 	bl	8013b1e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8013e06:	4603      	mov	r3, r0
 8013e08:	429c      	cmp	r4, r3
 8013e0a:	d001      	beq.n	8013e10 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0x22>
 8013e0c:	f006 fac2 	bl	801a394 <abort>
  const int dims_count = shape.DimensionsCount();
 8013e10:	6878      	ldr	r0, [r7, #4]
 8013e12:	f7ff fe84 	bl	8013b1e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8013e16:	60b8      	str	r0, [r7, #8]
  for (int i = 0; i < dims_count; ++i) {
 8013e18:	2300      	movs	r3, #0
 8013e1a:	60fb      	str	r3, [r7, #12]
 8013e1c:	68fa      	ldr	r2, [r7, #12]
 8013e1e:	68bb      	ldr	r3, [r7, #8]
 8013e20:	429a      	cmp	r2, r3
 8013e22:	da11      	bge.n	8013e48 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0x5a>
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 8013e24:	68f9      	ldr	r1, [r7, #12]
 8013e26:	6878      	ldr	r0, [r7, #4]
 8013e28:	f7ff ff86 	bl	8013d38 <_ZNK6tflite12RuntimeShape4DimsEi>
 8013e2c:	4604      	mov	r4, r0
 8013e2e:	68f9      	ldr	r1, [r7, #12]
 8013e30:	6838      	ldr	r0, [r7, #0]
 8013e32:	f7ff ff81 	bl	8013d38 <_ZNK6tflite12RuntimeShape4DimsEi>
 8013e36:	4603      	mov	r3, r0
 8013e38:	429c      	cmp	r4, r3
 8013e3a:	d001      	beq.n	8013e40 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0x52>
 8013e3c:	f006 faaa 	bl	801a394 <abort>
  for (int i = 0; i < dims_count; ++i) {
 8013e40:	68fb      	ldr	r3, [r7, #12]
 8013e42:	3301      	adds	r3, #1
 8013e44:	60fb      	str	r3, [r7, #12]
 8013e46:	e7e9      	b.n	8013e1c <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0x2e>
  }
  return shape.FlatSize();
 8013e48:	6878      	ldr	r0, [r7, #4]
 8013e4a:	f7ff ffad 	bl	8013da8 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 8013e4e:	4603      	mov	r3, r0
}
 8013e50:	4618      	mov	r0, r3
 8013e52:	3714      	adds	r7, #20
 8013e54:	46bd      	mov	sp, r7
 8013e56:	bd90      	pop	{r4, r7, pc}

08013e58 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>:
                                           quantized_multiplier);
}

inline int32_t MultiplyByQuantizedMultiplier(int32_t x,
                                             int32_t quantized_multiplier,
                                             int shift) {
 8013e58:	b580      	push	{r7, lr}
 8013e5a:	b086      	sub	sp, #24
 8013e5c:	af00      	add	r7, sp, #0
 8013e5e:	60f8      	str	r0, [r7, #12]
 8013e60:	60b9      	str	r1, [r7, #8]
 8013e62:	607a      	str	r2, [r7, #4]
  using gemmlowp::RoundingDivideByPOT;
  using gemmlowp::SaturatingRoundingDoublingHighMul;
  int left_shift = shift > 0 ? shift : 0;
 8013e64:	687b      	ldr	r3, [r7, #4]
 8013e66:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8013e6a:	617b      	str	r3, [r7, #20]
  int right_shift = shift > 0 ? 0 : -shift;
 8013e6c:	687b      	ldr	r3, [r7, #4]
 8013e6e:	2b00      	cmp	r3, #0
 8013e70:	dc02      	bgt.n	8013e78 <_ZN6tflite29MultiplyByQuantizedMultiplierElli+0x20>
 8013e72:	687b      	ldr	r3, [r7, #4]
 8013e74:	425b      	negs	r3, r3
 8013e76:	e000      	b.n	8013e7a <_ZN6tflite29MultiplyByQuantizedMultiplierElli+0x22>
 8013e78:	2300      	movs	r3, #0
 8013e7a:	613b      	str	r3, [r7, #16]
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
 8013e7c:	68fa      	ldr	r2, [r7, #12]
 8013e7e:	697b      	ldr	r3, [r7, #20]
 8013e80:	fa02 f303 	lsl.w	r3, r2, r3
 8013e84:	68b9      	ldr	r1, [r7, #8]
 8013e86:	4618      	mov	r0, r3
 8013e88:	f7ff fee0 	bl	8013c4c <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 8013e8c:	4603      	mov	r3, r0
 8013e8e:	6939      	ldr	r1, [r7, #16]
 8013e90:	4618      	mov	r0, r3
 8013e92:	f000 fb4b 	bl	801452c <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 8013e96:	4603      	mov	r3, r0
                                 x * (1 << left_shift), quantized_multiplier),
                             right_shift);
}
 8013e98:	4618      	mov	r0, r3
 8013e9a:	3718      	adds	r7, #24
 8013e9c:	46bd      	mov	sp, r7
 8013e9e:	bd80      	pop	{r7, pc}

08013ea0 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>:

// Returns a mutable tensor for a given input index. is_variable must be checked
// during prepare when the full TfLiteTensor is available.
inline TfLiteEvalTensor* GetMutableEvalInput(const TfLiteContext* context,
                                             const TfLiteNode* node,
                                             int index) {
 8013ea0:	b580      	push	{r7, lr}
 8013ea2:	b084      	sub	sp, #16
 8013ea4:	af00      	add	r7, sp, #0
 8013ea6:	60f8      	str	r0, [r7, #12]
 8013ea8:	60b9      	str	r1, [r7, #8]
 8013eaa:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context != nullptr);
 8013eac:	68fb      	ldr	r3, [r7, #12]
 8013eae:	2b00      	cmp	r3, #0
 8013eb0:	d101      	bne.n	8013eb6 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x16>
 8013eb2:	f006 fa6f 	bl	801a394 <abort>
  TFLITE_DCHECK(node != nullptr);
 8013eb6:	68bb      	ldr	r3, [r7, #8]
 8013eb8:	2b00      	cmp	r3, #0
 8013eba:	d101      	bne.n	8013ec0 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x20>
 8013ebc:	f006 fa6a 	bl	801a394 <abort>
  return context->GetEvalTensor(context, node->inputs->data[index]);
 8013ec0:	68fb      	ldr	r3, [r7, #12]
 8013ec2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8013ec4:	68bb      	ldr	r3, [r7, #8]
 8013ec6:	6819      	ldr	r1, [r3, #0]
 8013ec8:	687b      	ldr	r3, [r7, #4]
 8013eca:	009b      	lsls	r3, r3, #2
 8013ecc:	440b      	add	r3, r1
 8013ece:	685b      	ldr	r3, [r3, #4]
 8013ed0:	4619      	mov	r1, r3
 8013ed2:	68f8      	ldr	r0, [r7, #12]
 8013ed4:	4790      	blx	r2
 8013ed6:	4603      	mov	r3, r0
}
 8013ed8:	4618      	mov	r0, r3
 8013eda:	3710      	adds	r7, #16
 8013edc:	46bd      	mov	sp, r7
 8013ede:	bd80      	pop	{r7, pc}

08013ee0 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>:

// Returns the TfLiteEvalTensor struct for a given input index in a node.
inline const TfLiteEvalTensor* GetEvalInput(const TfLiteContext* context,
                                            const TfLiteNode* node, int index) {
 8013ee0:	b580      	push	{r7, lr}
 8013ee2:	b084      	sub	sp, #16
 8013ee4:	af00      	add	r7, sp, #0
 8013ee6:	60f8      	str	r0, [r7, #12]
 8013ee8:	60b9      	str	r1, [r7, #8]
 8013eea:	607a      	str	r2, [r7, #4]
  return GetMutableEvalInput(context, node, index);
 8013eec:	687a      	ldr	r2, [r7, #4]
 8013eee:	68b9      	ldr	r1, [r7, #8]
 8013ef0:	68f8      	ldr	r0, [r7, #12]
 8013ef2:	f7ff ffd5 	bl	8013ea0 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8013ef6:	4603      	mov	r3, r0
}
 8013ef8:	4618      	mov	r0, r3
 8013efa:	3710      	adds	r7, #16
 8013efc:	46bd      	mov	sp, r7
 8013efe:	bd80      	pop	{r7, pc}

08013f00 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>:

// Returns the TfLiteEvalTensor struct for a given output index in a node.
inline TfLiteEvalTensor* GetEvalOutput(const TfLiteContext* context,
                                       const TfLiteNode* node, int index) {
 8013f00:	b580      	push	{r7, lr}
 8013f02:	b084      	sub	sp, #16
 8013f04:	af00      	add	r7, sp, #0
 8013f06:	60f8      	str	r0, [r7, #12]
 8013f08:	60b9      	str	r1, [r7, #8]
 8013f0a:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context != nullptr);
 8013f0c:	68fb      	ldr	r3, [r7, #12]
 8013f0e:	2b00      	cmp	r3, #0
 8013f10:	d101      	bne.n	8013f16 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei+0x16>
 8013f12:	f006 fa3f 	bl	801a394 <abort>
  TFLITE_DCHECK(node != nullptr);
 8013f16:	68bb      	ldr	r3, [r7, #8]
 8013f18:	2b00      	cmp	r3, #0
 8013f1a:	d101      	bne.n	8013f20 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei+0x20>
 8013f1c:	f006 fa3a 	bl	801a394 <abort>
  return context->GetEvalTensor(context, node->outputs->data[index]);
 8013f20:	68fb      	ldr	r3, [r7, #12]
 8013f22:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8013f24:	68bb      	ldr	r3, [r7, #8]
 8013f26:	6859      	ldr	r1, [r3, #4]
 8013f28:	687b      	ldr	r3, [r7, #4]
 8013f2a:	009b      	lsls	r3, r3, #2
 8013f2c:	440b      	add	r3, r1
 8013f2e:	685b      	ldr	r3, [r3, #4]
 8013f30:	4619      	mov	r1, r3
 8013f32:	68f8      	ldr	r0, [r7, #12]
 8013f34:	4790      	blx	r2
 8013f36:	4603      	mov	r3, r0
}
 8013f38:	4618      	mov	r0, r3
 8013f3a:	3710      	adds	r7, #16
 8013f3c:	46bd      	mov	sp, r7
 8013f3e:	bd80      	pop	{r7, pc}

08013f40 <_ZN6tflite3ops5micro11activations9ReluFloatERKNS_12RuntimeShapeEPKfS5_Pf>:
  data->params.input_offset = input->params.zero_point;
  data->params.output_offset = output->params.zero_point;
}

inline void ReluFloat(const RuntimeShape& input_shape, const float* input_data,
                      const RuntimeShape& output_shape, float* output_data) {
 8013f40:	b580      	push	{r7, lr}
 8013f42:	b08a      	sub	sp, #40	; 0x28
 8013f44:	af00      	add	r7, sp, #0
 8013f46:	60f8      	str	r0, [r7, #12]
 8013f48:	60b9      	str	r1, [r7, #8]
 8013f4a:	607a      	str	r2, [r7, #4]
 8013f4c:	603b      	str	r3, [r7, #0]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 8013f4e:	6879      	ldr	r1, [r7, #4]
 8013f50:	68f8      	ldr	r0, [r7, #12]
 8013f52:	f7ff ff4c 	bl	8013dee <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 8013f56:	6238      	str	r0, [r7, #32]
  for (int i = 0; i < flat_size; ++i) {
 8013f58:	2300      	movs	r3, #0
 8013f5a:	627b      	str	r3, [r7, #36]	; 0x24
 8013f5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013f5e:	6a3b      	ldr	r3, [r7, #32]
 8013f60:	429a      	cmp	r2, r3
 8013f62:	da1d      	bge.n	8013fa0 <_ZN6tflite3ops5micro11activations9ReluFloatERKNS_12RuntimeShapeEPKfS5_Pf+0x60>
    const float val = input_data[i];
 8013f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f66:	009b      	lsls	r3, r3, #2
 8013f68:	68ba      	ldr	r2, [r7, #8]
 8013f6a:	4413      	add	r3, r2
 8013f6c:	681b      	ldr	r3, [r3, #0]
 8013f6e:	61fb      	str	r3, [r7, #28]
    const float lower = 0.0f;
 8013f70:	f04f 0300 	mov.w	r3, #0
 8013f74:	61bb      	str	r3, [r7, #24]
    const float clamped = val < lower ? lower : val;
 8013f76:	edd7 7a07 	vldr	s15, [r7, #28]
 8013f7a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8013f7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f82:	d501      	bpl.n	8013f88 <_ZN6tflite3ops5micro11activations9ReluFloatERKNS_12RuntimeShapeEPKfS5_Pf+0x48>
 8013f84:	69bb      	ldr	r3, [r7, #24]
 8013f86:	e000      	b.n	8013f8a <_ZN6tflite3ops5micro11activations9ReluFloatERKNS_12RuntimeShapeEPKfS5_Pf+0x4a>
 8013f88:	69fb      	ldr	r3, [r7, #28]
 8013f8a:	617b      	str	r3, [r7, #20]
    output_data[i] = clamped;
 8013f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f8e:	009b      	lsls	r3, r3, #2
 8013f90:	683a      	ldr	r2, [r7, #0]
 8013f92:	4413      	add	r3, r2
 8013f94:	697a      	ldr	r2, [r7, #20]
 8013f96:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < flat_size; ++i) {
 8013f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f9a:	3301      	adds	r3, #1
 8013f9c:	627b      	str	r3, [r7, #36]	; 0x24
 8013f9e:	e7dd      	b.n	8013f5c <_ZN6tflite3ops5micro11activations9ReluFloatERKNS_12RuntimeShapeEPKfS5_Pf+0x1c>
  }
}
 8013fa0:	bf00      	nop
 8013fa2:	3728      	adds	r7, #40	; 0x28
 8013fa4:	46bd      	mov	sp, r7
 8013fa6:	bd80      	pop	{r7, pc}

08013fa8 <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf>:

inline void Relu6Float(const RuntimeShape& input_shape, const float* input_data,
                       const RuntimeShape& output_shape, float* output_data) {
 8013fa8:	b580      	push	{r7, lr}
 8013faa:	b08a      	sub	sp, #40	; 0x28
 8013fac:	af00      	add	r7, sp, #0
 8013fae:	60f8      	str	r0, [r7, #12]
 8013fb0:	60b9      	str	r1, [r7, #8]
 8013fb2:	607a      	str	r2, [r7, #4]
 8013fb4:	603b      	str	r3, [r7, #0]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 8013fb6:	6879      	ldr	r1, [r7, #4]
 8013fb8:	68f8      	ldr	r0, [r7, #12]
 8013fba:	f7ff ff18 	bl	8013dee <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 8013fbe:	6238      	str	r0, [r7, #32]
  for (int i = 0; i < flat_size; ++i) {
 8013fc0:	2300      	movs	r3, #0
 8013fc2:	627b      	str	r3, [r7, #36]	; 0x24
 8013fc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013fc6:	6a3b      	ldr	r3, [r7, #32]
 8013fc8:	429a      	cmp	r2, r3
 8013fca:	da2a      	bge.n	8014022 <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x7a>
    const float val = input_data[i];
 8013fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013fce:	009b      	lsls	r3, r3, #2
 8013fd0:	68ba      	ldr	r2, [r7, #8]
 8013fd2:	4413      	add	r3, r2
 8013fd4:	681b      	ldr	r3, [r3, #0]
 8013fd6:	61fb      	str	r3, [r7, #28]
    const float upper = 6.0f;
 8013fd8:	4b14      	ldr	r3, [pc, #80]	; (801402c <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x84>)
 8013fda:	61bb      	str	r3, [r7, #24]
    const float lower = 0.0f;
 8013fdc:	f04f 0300 	mov.w	r3, #0
 8013fe0:	617b      	str	r3, [r7, #20]
    const float clamped = val > upper ? upper : val < lower ? lower : val;
 8013fe2:	edd7 7a07 	vldr	s15, [r7, #28]
 8013fe6:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8013fea:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013fee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ff2:	dd01      	ble.n	8013ff8 <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x50>
 8013ff4:	69bb      	ldr	r3, [r7, #24]
 8013ff6:	e009      	b.n	801400c <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x64>
 8013ff8:	edd7 7a07 	vldr	s15, [r7, #28]
 8013ffc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8014000:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014004:	d501      	bpl.n	801400a <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x62>
 8014006:	697b      	ldr	r3, [r7, #20]
 8014008:	e000      	b.n	801400c <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x64>
 801400a:	69fb      	ldr	r3, [r7, #28]
 801400c:	613b      	str	r3, [r7, #16]
    output_data[i] = clamped;
 801400e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014010:	009b      	lsls	r3, r3, #2
 8014012:	683a      	ldr	r2, [r7, #0]
 8014014:	4413      	add	r3, r2
 8014016:	693a      	ldr	r2, [r7, #16]
 8014018:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < flat_size; ++i) {
 801401a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801401c:	3301      	adds	r3, #1
 801401e:	627b      	str	r3, [r7, #36]	; 0x24
 8014020:	e7d0      	b.n	8013fc4 <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x1c>
  }
}
 8014022:	bf00      	nop
 8014024:	3728      	adds	r7, #40	; 0x28
 8014026:	46bd      	mov	sp, r7
 8014028:	bd80      	pop	{r7, pc}
 801402a:	bf00      	nop
 801402c:	40c00000 	.word	0x40c00000

08014030 <_ZN6tflite3ops5micro11activations8ReluInitEP13TfLiteContextPKcj>:
    const Q clamped = val > upper ? upper : val < lower ? lower : val;
    output_data[i] = clamped;
  }
}

void* ReluInit(TfLiteContext* context, const char* buffer, size_t length) {
 8014030:	b580      	push	{r7, lr}
 8014032:	b084      	sub	sp, #16
 8014034:	af00      	add	r7, sp, #0
 8014036:	60f8      	str	r0, [r7, #12]
 8014038:	60b9      	str	r1, [r7, #8]
 801403a:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 801403c:	68fb      	ldr	r3, [r7, #12]
 801403e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014040:	2b00      	cmp	r3, #0
 8014042:	d101      	bne.n	8014048 <_ZN6tflite3ops5micro11activations8ReluInitEP13TfLiteContextPKcj+0x18>
 8014044:	f006 f9a6 	bl	801a394 <abort>
  return context->AllocatePersistentBuffer(context, sizeof(ReluOpData));
 8014048:	68fb      	ldr	r3, [r7, #12]
 801404a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801404c:	211c      	movs	r1, #28
 801404e:	68f8      	ldr	r0, [r7, #12]
 8014050:	4798      	blx	r3
 8014052:	4603      	mov	r3, r0
}
 8014054:	4618      	mov	r0, r3
 8014056:	3710      	adds	r7, #16
 8014058:	46bd      	mov	sp, r7
 801405a:	bd80      	pop	{r7, pc}

0801405c <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus ReluPrepare(TfLiteContext* context, TfLiteNode* node) {
 801405c:	b590      	push	{r4, r7, lr}
 801405e:	b089      	sub	sp, #36	; 0x24
 8014060:	af02      	add	r7, sp, #8
 8014062:	6078      	str	r0, [r7, #4]
 8014064:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 8014066:	683b      	ldr	r3, [r7, #0]
 8014068:	691b      	ldr	r3, [r3, #16]
 801406a:	2b00      	cmp	r3, #0
 801406c:	d101      	bne.n	8014072 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x16>
 801406e:	f006 f991 	bl	801a394 <abort>
  ReluOpData* data = static_cast<ReluOpData*>(node->user_data);
 8014072:	683b      	ldr	r3, [r7, #0]
 8014074:	691b      	ldr	r3, [r3, #16]
 8014076:	617b      	str	r3, [r7, #20]

  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 8014078:	2200      	movs	r2, #0
 801407a:	6839      	ldr	r1, [r7, #0]
 801407c:	6878      	ldr	r0, [r7, #4]
 801407e:	f7ff facd 	bl	801361c <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8014082:	6138      	str	r0, [r7, #16]
  TF_LITE_ENSURE(context, input != nullptr);
 8014084:	693b      	ldr	r3, [r7, #16]
 8014086:	2b00      	cmp	r3, #0
 8014088:	d10a      	bne.n	80140a0 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x44>
 801408a:	687b      	ldr	r3, [r7, #4]
 801408c:	695c      	ldr	r4, [r3, #20]
 801408e:	4b1a      	ldr	r3, [pc, #104]	; (80140f8 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x9c>)
 8014090:	9300      	str	r3, [sp, #0]
 8014092:	238e      	movs	r3, #142	; 0x8e
 8014094:	4a19      	ldr	r2, [pc, #100]	; (80140fc <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0xa0>)
 8014096:	491a      	ldr	r1, [pc, #104]	; (8014100 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0xa4>)
 8014098:	6878      	ldr	r0, [r7, #4]
 801409a:	47a0      	blx	r4
 801409c:	2301      	movs	r3, #1
 801409e:	e027      	b.n	80140f0 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x94>
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 80140a0:	2200      	movs	r2, #0
 80140a2:	6839      	ldr	r1, [r7, #0]
 80140a4:	6878      	ldr	r0, [r7, #4]
 80140a6:	f7ff fac9 	bl	801363c <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 80140aa:	60f8      	str	r0, [r7, #12]
  TF_LITE_ENSURE(context, output != nullptr);
 80140ac:	68fb      	ldr	r3, [r7, #12]
 80140ae:	2b00      	cmp	r3, #0
 80140b0:	d10a      	bne.n	80140c8 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x6c>
 80140b2:	687b      	ldr	r3, [r7, #4]
 80140b4:	695c      	ldr	r4, [r3, #20]
 80140b6:	4b13      	ldr	r3, [pc, #76]	; (8014104 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0xa8>)
 80140b8:	9300      	str	r3, [sp, #0]
 80140ba:	2390      	movs	r3, #144	; 0x90
 80140bc:	4a0f      	ldr	r2, [pc, #60]	; (80140fc <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0xa0>)
 80140be:	4910      	ldr	r1, [pc, #64]	; (8014100 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0xa4>)
 80140c0:	6878      	ldr	r0, [r7, #4]
 80140c2:	47a0      	blx	r4
 80140c4:	2301      	movs	r3, #1
 80140c6:	e013      	b.n	80140f0 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x94>

  if (input->type == kTfLiteInt8) {
 80140c8:	693b      	ldr	r3, [r7, #16]
 80140ca:	781b      	ldrb	r3, [r3, #0]
 80140cc:	2b09      	cmp	r3, #9
 80140ce:	d105      	bne.n	80140dc <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x80>
    CalculateReluOpData<int8_t>(input, output, data);
 80140d0:	697a      	ldr	r2, [r7, #20]
 80140d2:	68f9      	ldr	r1, [r7, #12]
 80140d4:	6938      	ldr	r0, [r7, #16]
 80140d6:	f000 fa9d 	bl	8014614 <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIaEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE>
 80140da:	e008      	b.n	80140ee <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x92>
  } else if (input->type == kTfLiteUInt8) {
 80140dc:	693b      	ldr	r3, [r7, #16]
 80140de:	781b      	ldrb	r3, [r3, #0]
 80140e0:	2b03      	cmp	r3, #3
 80140e2:	d104      	bne.n	80140ee <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x92>
    CalculateReluOpData<uint8_t>(input, output, data);
 80140e4:	697a      	ldr	r2, [r7, #20]
 80140e6:	68f9      	ldr	r1, [r7, #12]
 80140e8:	6938      	ldr	r0, [r7, #16]
 80140ea:	f000 fb35 	bl	8014758 <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIhEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE>
  }

  return kTfLiteOk;
 80140ee:	2300      	movs	r3, #0
}
 80140f0:	4618      	mov	r0, r3
 80140f2:	371c      	adds	r7, #28
 80140f4:	46bd      	mov	sp, r7
 80140f6:	bd90      	pop	{r4, r7, pc}
 80140f8:	0801c7a8 	.word	0x0801c7a8
 80140fc:	0801c704 	.word	0x0801c704
 8014100:	0801c790 	.word	0x0801c790
 8014104:	0801c7bc 	.word	0x0801c7bc

08014108 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus ReluEval(TfLiteContext* context, TfLiteNode* node) {
 8014108:	b590      	push	{r4, r7, lr}
 801410a:	b0ad      	sub	sp, #180	; 0xb4
 801410c:	af02      	add	r7, sp, #8
 801410e:	6078      	str	r0, [r7, #4]
 8014110:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 8014112:	683b      	ldr	r3, [r7, #0]
 8014114:	691b      	ldr	r3, [r3, #16]
 8014116:	2b00      	cmp	r3, #0
 8014118:	d101      	bne.n	801411e <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x16>
 801411a:	f006 f93b 	bl	801a394 <abort>
  const ReluOpData& data = *(static_cast<const ReluOpData*>(node->user_data));
 801411e:	683b      	ldr	r3, [r7, #0]
 8014120:	691b      	ldr	r3, [r3, #16]
 8014122:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kInputTensor);
 8014126:	2200      	movs	r2, #0
 8014128:	6839      	ldr	r1, [r7, #0]
 801412a:	6878      	ldr	r0, [r7, #4]
 801412c:	f7ff fed8 	bl	8013ee0 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8014130:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kOutputTensor);
 8014134:	2200      	movs	r2, #0
 8014136:	6839      	ldr	r1, [r7, #0]
 8014138:	6878      	ldr	r0, [r7, #4]
 801413a:	f7ff fee1 	bl	8013f00 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 801413e:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c

  switch (input->type) {
 8014142:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8014146:	7a1b      	ldrb	r3, [r3, #8]
 8014148:	2b09      	cmp	r3, #9
 801414a:	d032      	beq.n	80141b2 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0xaa>
 801414c:	2b09      	cmp	r3, #9
 801414e:	f300 808c 	bgt.w	801426a <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x162>
 8014152:	2b01      	cmp	r3, #1
 8014154:	d002      	beq.n	801415c <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x54>
 8014156:	2b03      	cmp	r3, #3
 8014158:	d059      	beq.n	801420e <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x106>
 801415a:	e086      	b.n	801426a <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x162>
    case kTfLiteFloat32: {
      ReluFloat(tflite::micro::GetTensorShape(input),
 801415c:	f107 030c 	add.w	r3, r7, #12
 8014160:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8014164:	4618      	mov	r0, r3
 8014166:	f001 fe2f 	bl	8015dc8 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 801416a:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 801416e:	f000 fb95 	bl	801489c <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 8014172:	4604      	mov	r4, r0
                tflite::micro::GetTensorData<float>(input),
                tflite::micro::GetTensorShape(output),
 8014174:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014178:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 801417c:	4618      	mov	r0, r3
 801417e:	f001 fe23 	bl	8015dc8 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      ReluFloat(tflite::micro::GetTensorShape(input),
 8014182:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8014186:	f000 fb98 	bl	80148ba <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
 801418a:	4603      	mov	r3, r0
 801418c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8014190:	f107 000c 	add.w	r0, r7, #12
 8014194:	4621      	mov	r1, r4
 8014196:	f7ff fed3 	bl	8013f40 <_ZN6tflite3ops5micro11activations9ReluFloatERKNS_12RuntimeShapeEPKfS5_Pf>
                tflite::micro::GetTensorShape(output),
 801419a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801419e:	4618      	mov	r0, r3
 80141a0:	f7ff fca7 	bl	8013af2 <_ZN6tflite12RuntimeShapeD1Ev>
      ReluFloat(tflite::micro::GetTensorShape(input),
 80141a4:	f107 030c 	add.w	r3, r7, #12
 80141a8:	4618      	mov	r0, r3
 80141aa:	f7ff fca2 	bl	8013af2 <_ZN6tflite12RuntimeShapeD1Ev>
                tflite::micro::GetTensorData<float>(output));

      return kTfLiteOk;
 80141ae:	2300      	movs	r3, #0
 80141b0:	e069      	b.n	8014286 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x17e>
    }
    case kTfLiteInt8: {
      ReluQuantized<int8_t>(data, tflite::micro::GetTensorShape(input),
 80141b2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80141b6:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 80141ba:	4618      	mov	r0, r3
 80141bc:	f001 fe04 	bl	8015dc8 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
                            tflite::micro::GetTensorShape(output),
 80141c0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80141c4:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 80141c8:	4618      	mov	r0, r3
 80141ca:	f001 fdfd 	bl	8015dc8 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      ReluQuantized<int8_t>(data, tflite::micro::GetTensorShape(input),
 80141ce:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 80141d2:	f000 fb83 	bl	80148dc <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 80141d6:	4604      	mov	r4, r0
 80141d8:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 80141dc:	f000 fb8d 	bl	80148fa <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 80141e0:	4603      	mov	r3, r0
 80141e2:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80141e6:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80141ea:	9300      	str	r3, [sp, #0]
 80141ec:	4623      	mov	r3, r4
 80141ee:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 80141f2:	f000 fb93 	bl	801491c <_ZN6tflite3ops5micro11activations13ReluQuantizedIaEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_>
                            tflite::micro::GetTensorShape(output),
 80141f6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80141fa:	4618      	mov	r0, r3
 80141fc:	f7ff fc79 	bl	8013af2 <_ZN6tflite12RuntimeShapeD1Ev>
      ReluQuantized<int8_t>(data, tflite::micro::GetTensorShape(input),
 8014200:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8014204:	4618      	mov	r0, r3
 8014206:	f7ff fc74 	bl	8013af2 <_ZN6tflite12RuntimeShapeD1Ev>
                            tflite::micro::GetTensorData<int8_t>(input),
                            tflite::micro::GetTensorData<int8_t>(output));
      return kTfLiteOk;
 801420a:	2300      	movs	r3, #0
 801420c:	e03b      	b.n	8014286 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x17e>
    }
    case kTfLiteUInt8: {
      ReluQuantized<uint8_t>(data, tflite::micro::GetTensorShape(input),
 801420e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8014212:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8014216:	4618      	mov	r0, r3
 8014218:	f001 fdd6 	bl	8015dc8 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
                             tflite::micro::GetTensorShape(output),
 801421c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8014220:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8014224:	4618      	mov	r0, r3
 8014226:	f001 fdcf 	bl	8015dc8 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      ReluQuantized<uint8_t>(data, tflite::micro::GetTensorShape(input),
 801422a:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 801422e:	f000 fbc1 	bl	80149b4 <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>
 8014232:	4604      	mov	r4, r0
 8014234:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8014238:	f000 fbcb 	bl	80149d2 <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor>
 801423c:	4603      	mov	r3, r0
 801423e:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8014242:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8014246:	9300      	str	r3, [sp, #0]
 8014248:	4623      	mov	r3, r4
 801424a:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 801424e:	f000 fbd1 	bl	80149f4 <_ZN6tflite3ops5micro11activations13ReluQuantizedIhEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_>
                             tflite::micro::GetTensorShape(output),
 8014252:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8014256:	4618      	mov	r0, r3
 8014258:	f7ff fc4b 	bl	8013af2 <_ZN6tflite12RuntimeShapeD1Ev>
      ReluQuantized<uint8_t>(data, tflite::micro::GetTensorShape(input),
 801425c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8014260:	4618      	mov	r0, r3
 8014262:	f7ff fc46 	bl	8013af2 <_ZN6tflite12RuntimeShapeD1Ev>
                             tflite::micro::GetTensorData<uint8_t>(input),
                             tflite::micro::GetTensorData<uint8_t>(output));
      return kTfLiteOk;
 8014266:	2300      	movs	r3, #0
 8014268:	e00d      	b.n	8014286 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x17e>
    }
    default: {
      TF_LITE_KERNEL_LOG(context, "Only float32 is supported currently, got %s",
 801426a:	687b      	ldr	r3, [r7, #4]
 801426c:	695c      	ldr	r4, [r3, #20]
 801426e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8014272:	7a1b      	ldrb	r3, [r3, #8]
 8014274:	4618      	mov	r0, r3
 8014276:	f7fe fee1 	bl	801303c <TfLiteTypeGetName>
 801427a:	4603      	mov	r3, r0
 801427c:	461a      	mov	r2, r3
 801427e:	4904      	ldr	r1, [pc, #16]	; (8014290 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x188>)
 8014280:	6878      	ldr	r0, [r7, #4]
 8014282:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type));
      return kTfLiteError;
 8014284:	2301      	movs	r3, #1
    }
  }
}
 8014286:	4618      	mov	r0, r3
 8014288:	37ac      	adds	r7, #172	; 0xac
 801428a:	46bd      	mov	sp, r7
 801428c:	bd90      	pop	{r4, r7, pc}
 801428e:	bf00      	nop
 8014290:	0801c7d0 	.word	0x0801c7d0

08014294 <_ZN6tflite3ops5micro11activations9Relu6InitEP13TfLiteContextPKcj>:

void* Relu6Init(TfLiteContext* context, const char* buffer, size_t length) {
 8014294:	b580      	push	{r7, lr}
 8014296:	b084      	sub	sp, #16
 8014298:	af00      	add	r7, sp, #0
 801429a:	60f8      	str	r0, [r7, #12]
 801429c:	60b9      	str	r1, [r7, #8]
 801429e:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 80142a0:	68fb      	ldr	r3, [r7, #12]
 80142a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80142a4:	2b00      	cmp	r3, #0
 80142a6:	d101      	bne.n	80142ac <_ZN6tflite3ops5micro11activations9Relu6InitEP13TfLiteContextPKcj+0x18>
 80142a8:	f006 f874 	bl	801a394 <abort>
  return context->AllocatePersistentBuffer(context, sizeof(Relu6OpData));
 80142ac:	68fb      	ldr	r3, [r7, #12]
 80142ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80142b0:	2104      	movs	r1, #4
 80142b2:	68f8      	ldr	r0, [r7, #12]
 80142b4:	4798      	blx	r3
 80142b6:	4603      	mov	r3, r0
}
 80142b8:	4618      	mov	r0, r3
 80142ba:	3710      	adds	r7, #16
 80142bc:	46bd      	mov	sp, r7
 80142be:	bd80      	pop	{r7, pc}

080142c0 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Relu6Prepare(TfLiteContext* context, TfLiteNode* node) {
 80142c0:	b590      	push	{r4, r7, lr}
 80142c2:	b087      	sub	sp, #28
 80142c4:	af02      	add	r7, sp, #8
 80142c6:	6078      	str	r0, [r7, #4]
 80142c8:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 80142ca:	683b      	ldr	r3, [r7, #0]
 80142cc:	691b      	ldr	r3, [r3, #16]
 80142ce:	2b00      	cmp	r3, #0
 80142d0:	d101      	bne.n	80142d6 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0x16>
 80142d2:	f006 f85f 	bl	801a394 <abort>
  Relu6OpData* data = static_cast<Relu6OpData*>(node->user_data);
 80142d6:	683b      	ldr	r3, [r7, #0]
 80142d8:	691b      	ldr	r3, [r3, #16]
 80142da:	60fb      	str	r3, [r7, #12]

  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 80142dc:	2200      	movs	r2, #0
 80142de:	6839      	ldr	r1, [r7, #0]
 80142e0:	6878      	ldr	r0, [r7, #4]
 80142e2:	f7ff f99b 	bl	801361c <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 80142e6:	60b8      	str	r0, [r7, #8]
  TF_LITE_ENSURE(context, input != nullptr);
 80142e8:	68bb      	ldr	r3, [r7, #8]
 80142ea:	2b00      	cmp	r3, #0
 80142ec:	d10a      	bne.n	8014304 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0x44>
 80142ee:	687b      	ldr	r3, [r7, #4]
 80142f0:	695c      	ldr	r4, [r3, #20]
 80142f2:	4b20      	ldr	r3, [pc, #128]	; (8014374 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0xb4>)
 80142f4:	9300      	str	r3, [sp, #0]
 80142f6:	23cd      	movs	r3, #205	; 0xcd
 80142f8:	4a1f      	ldr	r2, [pc, #124]	; (8014378 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0xb8>)
 80142fa:	4920      	ldr	r1, [pc, #128]	; (801437c <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0xbc>)
 80142fc:	6878      	ldr	r0, [r7, #4]
 80142fe:	47a0      	blx	r4
 8014300:	2301      	movs	r3, #1
 8014302:	e033      	b.n	801436c <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0xac>

  if (input->type == kTfLiteInt8) {
 8014304:	68bb      	ldr	r3, [r7, #8]
 8014306:	781b      	ldrb	r3, [r3, #0]
 8014308:	2b09      	cmp	r3, #9
 801430a:	d115      	bne.n	8014338 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0x78>
    data->six_int8 = FloatToQuantizedType<int8_t>(6.0f, input->params.scale,
 801430c:	68bb      	ldr	r3, [r7, #8]
 801430e:	edd3 7a03 	vldr	s15, [r3, #12]
                                                  input->params.zero_point);
 8014312:	68bb      	ldr	r3, [r7, #8]
 8014314:	691b      	ldr	r3, [r3, #16]
    data->six_int8 = FloatToQuantizedType<int8_t>(6.0f, input->params.scale,
 8014316:	4618      	mov	r0, r3
 8014318:	eef0 0a67 	vmov.f32	s1, s15
 801431c:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 8014320:	f000 fbb3 	bl	8014a8a <_ZN6tflite20FloatToQuantizedTypeIaEET_ffi>
 8014324:	4603      	mov	r3, r0
 8014326:	461a      	mov	r2, r3
 8014328:	68fb      	ldr	r3, [r7, #12]
 801432a:	701a      	strb	r2, [r3, #0]
    data->zero_int8 = input->params.zero_point;
 801432c:	68bb      	ldr	r3, [r7, #8]
 801432e:	691b      	ldr	r3, [r3, #16]
 8014330:	b25a      	sxtb	r2, r3
 8014332:	68fb      	ldr	r3, [r7, #12]
 8014334:	705a      	strb	r2, [r3, #1]
 8014336:	e018      	b.n	801436a <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0xaa>
  } else if (input->type == kTfLiteUInt8) {
 8014338:	68bb      	ldr	r3, [r7, #8]
 801433a:	781b      	ldrb	r3, [r3, #0]
 801433c:	2b03      	cmp	r3, #3
 801433e:	d114      	bne.n	801436a <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0xaa>
    data->six_uint8 = FloatToQuantizedType<uint8_t>(6.0f, input->params.scale,
 8014340:	68bb      	ldr	r3, [r7, #8]
 8014342:	edd3 7a03 	vldr	s15, [r3, #12]
                                                    input->params.zero_point);
 8014346:	68bb      	ldr	r3, [r7, #8]
 8014348:	691b      	ldr	r3, [r3, #16]
    data->six_uint8 = FloatToQuantizedType<uint8_t>(6.0f, input->params.scale,
 801434a:	4618      	mov	r0, r3
 801434c:	eef0 0a67 	vmov.f32	s1, s15
 8014350:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 8014354:	f000 fbe8 	bl	8014b28 <_ZN6tflite20FloatToQuantizedTypeIhEET_ffi>
 8014358:	4603      	mov	r3, r0
 801435a:	461a      	mov	r2, r3
 801435c:	68fb      	ldr	r3, [r7, #12]
 801435e:	709a      	strb	r2, [r3, #2]
    data->zero_uint8 = input->params.zero_point;
 8014360:	68bb      	ldr	r3, [r7, #8]
 8014362:	691b      	ldr	r3, [r3, #16]
 8014364:	b2da      	uxtb	r2, r3
 8014366:	68fb      	ldr	r3, [r7, #12]
 8014368:	70da      	strb	r2, [r3, #3]
  }

  return kTfLiteOk;
 801436a:	2300      	movs	r3, #0
}
 801436c:	4618      	mov	r0, r3
 801436e:	3714      	adds	r7, #20
 8014370:	46bd      	mov	sp, r7
 8014372:	bd90      	pop	{r4, r7, pc}
 8014374:	0801c7a8 	.word	0x0801c7a8
 8014378:	0801c704 	.word	0x0801c704
 801437c:	0801c790 	.word	0x0801c790

08014380 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Relu6Eval(TfLiteContext* context, TfLiteNode* node) {
 8014380:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014382:	b0ad      	sub	sp, #180	; 0xb4
 8014384:	af02      	add	r7, sp, #8
 8014386:	6078      	str	r0, [r7, #4]
 8014388:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 801438a:	683b      	ldr	r3, [r7, #0]
 801438c:	691b      	ldr	r3, [r3, #16]
 801438e:	2b00      	cmp	r3, #0
 8014390:	d101      	bne.n	8014396 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x16>
 8014392:	f005 ffff 	bl	801a394 <abort>
  const Relu6OpData& data = *(static_cast<const Relu6OpData*>(node->user_data));
 8014396:	683b      	ldr	r3, [r7, #0]
 8014398:	691b      	ldr	r3, [r3, #16]
 801439a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kInputTensor);
 801439e:	2200      	movs	r2, #0
 80143a0:	6839      	ldr	r1, [r7, #0]
 80143a2:	6878      	ldr	r0, [r7, #4]
 80143a4:	f7ff fd9c 	bl	8013ee0 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 80143a8:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kOutputTensor);
 80143ac:	2200      	movs	r2, #0
 80143ae:	6839      	ldr	r1, [r7, #0]
 80143b0:	6878      	ldr	r0, [r7, #4]
 80143b2:	f7ff fda5 	bl	8013f00 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 80143b6:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c

  switch (input->type) {
 80143ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80143be:	7a1b      	ldrb	r3, [r3, #8]
 80143c0:	2b09      	cmp	r3, #9
 80143c2:	d032      	beq.n	801442a <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0xaa>
 80143c4:	2b09      	cmp	r3, #9
 80143c6:	f300 809c 	bgt.w	8014502 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x182>
 80143ca:	2b01      	cmp	r3, #1
 80143cc:	d002      	beq.n	80143d4 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x54>
 80143ce:	2b03      	cmp	r3, #3
 80143d0:	d062      	beq.n	8014498 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x118>
 80143d2:	e096      	b.n	8014502 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x182>
    case kTfLiteFloat32: {
      Relu6Float(tflite::micro::GetTensorShape(input),
 80143d4:	f107 030c 	add.w	r3, r7, #12
 80143d8:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 80143dc:	4618      	mov	r0, r3
 80143de:	f001 fcf3 	bl	8015dc8 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 80143e2:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 80143e6:	f000 fa59 	bl	801489c <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 80143ea:	4604      	mov	r4, r0
                 tflite::micro::GetTensorData<float>(input),
                 tflite::micro::GetTensorShape(output),
 80143ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80143f0:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 80143f4:	4618      	mov	r0, r3
 80143f6:	f001 fce7 	bl	8015dc8 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      Relu6Float(tflite::micro::GetTensorShape(input),
 80143fa:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 80143fe:	f000 fa5c 	bl	80148ba <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
 8014402:	4603      	mov	r3, r0
 8014404:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8014408:	f107 000c 	add.w	r0, r7, #12
 801440c:	4621      	mov	r1, r4
 801440e:	f7ff fdcb 	bl	8013fa8 <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf>
                 tflite::micro::GetTensorShape(output),
 8014412:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014416:	4618      	mov	r0, r3
 8014418:	f7ff fb6b 	bl	8013af2 <_ZN6tflite12RuntimeShapeD1Ev>
      Relu6Float(tflite::micro::GetTensorShape(input),
 801441c:	f107 030c 	add.w	r3, r7, #12
 8014420:	4618      	mov	r0, r3
 8014422:	f7ff fb66 	bl	8013af2 <_ZN6tflite12RuntimeShapeD1Ev>
                 tflite::micro::GetTensorData<float>(output));

      return kTfLiteOk;
 8014426:	2300      	movs	r3, #0
 8014428:	e079      	b.n	801451e <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x19e>
    }
    case kTfLiteInt8: {
      Relu6Quantized<int8_t>(data.zero_int8, data.six_int8,
 801442a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801442e:	f993 4001 	ldrsb.w	r4, [r3, #1]
 8014432:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8014436:	f993 5000 	ldrsb.w	r5, [r3]
                             tflite::micro::GetTensorShape(input),
 801443a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801443e:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8014442:	4618      	mov	r0, r3
 8014444:	f001 fcc0 	bl	8015dc8 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      Relu6Quantized<int8_t>(data.zero_int8, data.six_int8,
 8014448:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 801444c:	f000 fa46 	bl	80148dc <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 8014450:	4606      	mov	r6, r0
                             tflite::micro::GetTensorData<int8_t>(input),
                             tflite::micro::GetTensorShape(output),
 8014452:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8014456:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 801445a:	4618      	mov	r0, r3
 801445c:	f001 fcb4 	bl	8015dc8 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      Relu6Quantized<int8_t>(data.zero_int8, data.six_int8,
 8014460:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8014464:	f000 fa49 	bl	80148fa <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 8014468:	4603      	mov	r3, r0
 801446a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 801446e:	9301      	str	r3, [sp, #4]
 8014470:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8014474:	9300      	str	r3, [sp, #0]
 8014476:	4633      	mov	r3, r6
 8014478:	4629      	mov	r1, r5
 801447a:	4620      	mov	r0, r4
 801447c:	f000 fba3 	bl	8014bc6 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_>
                             tflite::micro::GetTensorShape(output),
 8014480:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8014484:	4618      	mov	r0, r3
 8014486:	f7ff fb34 	bl	8013af2 <_ZN6tflite12RuntimeShapeD1Ev>
                             tflite::micro::GetTensorShape(input),
 801448a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801448e:	4618      	mov	r0, r3
 8014490:	f7ff fb2f 	bl	8013af2 <_ZN6tflite12RuntimeShapeD1Ev>
                             tflite::micro::GetTensorData<int8_t>(output));
      return kTfLiteOk;
 8014494:	2300      	movs	r3, #0
 8014496:	e042      	b.n	801451e <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x19e>
    }
    case kTfLiteUInt8: {
      Relu6Quantized<uint8_t>(data.zero_uint8, data.six_uint8,
 8014498:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801449c:	78dc      	ldrb	r4, [r3, #3]
 801449e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80144a2:	789d      	ldrb	r5, [r3, #2]
                              tflite::micro::GetTensorShape(input),
 80144a4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80144a8:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 80144ac:	4618      	mov	r0, r3
 80144ae:	f001 fc8b 	bl	8015dc8 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      Relu6Quantized<uint8_t>(data.zero_uint8, data.six_uint8,
 80144b2:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 80144b6:	f000 fa7d 	bl	80149b4 <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>
 80144ba:	4606      	mov	r6, r0
                              tflite::micro::GetTensorData<uint8_t>(input),
                              tflite::micro::GetTensorShape(output),
 80144bc:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80144c0:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 80144c4:	4618      	mov	r0, r3
 80144c6:	f001 fc7f 	bl	8015dc8 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      Relu6Quantized<uint8_t>(data.zero_uint8, data.six_uint8,
 80144ca:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 80144ce:	f000 fa80 	bl	80149d2 <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor>
 80144d2:	4603      	mov	r3, r0
 80144d4:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80144d8:	9301      	str	r3, [sp, #4]
 80144da:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80144de:	9300      	str	r3, [sp, #0]
 80144e0:	4633      	mov	r3, r6
 80144e2:	4629      	mov	r1, r5
 80144e4:	4620      	mov	r0, r4
 80144e6:	f000 fbad 	bl	8014c44 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_>
                              tflite::micro::GetTensorShape(output),
 80144ea:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80144ee:	4618      	mov	r0, r3
 80144f0:	f7ff faff 	bl	8013af2 <_ZN6tflite12RuntimeShapeD1Ev>
                              tflite::micro::GetTensorShape(input),
 80144f4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80144f8:	4618      	mov	r0, r3
 80144fa:	f7ff fafa 	bl	8013af2 <_ZN6tflite12RuntimeShapeD1Ev>
                              tflite::micro::GetTensorData<uint8_t>(output));
      return kTfLiteOk;
 80144fe:	2300      	movs	r3, #0
 8014500:	e00d      	b.n	801451e <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x19e>
    }
    default: {
      TF_LITE_KERNEL_LOG(context, "Only float32 is supported currently, got %s",
 8014502:	687b      	ldr	r3, [r7, #4]
 8014504:	695c      	ldr	r4, [r3, #20]
 8014506:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801450a:	7a1b      	ldrb	r3, [r3, #8]
 801450c:	4618      	mov	r0, r3
 801450e:	f7fe fd95 	bl	801303c <TfLiteTypeGetName>
 8014512:	4603      	mov	r3, r0
 8014514:	461a      	mov	r2, r3
 8014516:	4904      	ldr	r1, [pc, #16]	; (8014528 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x1a8>)
 8014518:	6878      	ldr	r0, [r7, #4]
 801451a:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type));
      return kTfLiteError;
 801451c:	2301      	movs	r3, #1
    }
  }
}
 801451e:	4618      	mov	r0, r3
 8014520:	37ac      	adds	r7, #172	; 0xac
 8014522:	46bd      	mov	sp, r7
 8014524:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014526:	bf00      	nop
 8014528:	0801c7d0 	.word	0x0801c7d0

0801452c <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>:
}

// Correctly-rounded-to-nearest division by a power-of-two.
// Also known as a rounding arithmetic right shift.
template <typename IntegerType>
inline IntegerType RoundingDivideByPOT(IntegerType x, int exponent) {
 801452c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801452e:	b089      	sub	sp, #36	; 0x24
 8014530:	af00      	add	r7, sp, #0
 8014532:	6078      	str	r0, [r7, #4]
 8014534:	6039      	str	r1, [r7, #0]
  assert(exponent >= 0);
 8014536:	6839      	ldr	r1, [r7, #0]
 8014538:	2900      	cmp	r1, #0
 801453a:	da06      	bge.n	801454a <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0x1e>
 801453c:	4b31      	ldr	r3, [pc, #196]	; (8014604 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xd8>)
 801453e:	4a32      	ldr	r2, [pc, #200]	; (8014608 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xdc>)
 8014540:	f44f 71b3 	mov.w	r1, #358	; 0x166
 8014544:	4831      	ldr	r0, [pc, #196]	; (801460c <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xe0>)
 8014546:	f005 ff2d 	bl	801a3a4 <__assert_func>
  assert(exponent <= 31);
 801454a:	6839      	ldr	r1, [r7, #0]
 801454c:	291f      	cmp	r1, #31
 801454e:	dd06      	ble.n	801455e <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0x32>
 8014550:	4b2f      	ldr	r3, [pc, #188]	; (8014610 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xe4>)
 8014552:	4a2d      	ldr	r2, [pc, #180]	; (8014608 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xdc>)
 8014554:	f240 1167 	movw	r1, #359	; 0x167
 8014558:	482c      	ldr	r0, [pc, #176]	; (801460c <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xe0>)
 801455a:	f005 ff23 	bl	801a3a4 <__assert_func>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
 801455e:	f04f 0001 	mov.w	r0, #1
 8014562:	f04f 0100 	mov.w	r1, #0
 8014566:	683c      	ldr	r4, [r7, #0]
 8014568:	f1a4 0620 	sub.w	r6, r4, #32
 801456c:	f1c4 0520 	rsb	r5, r4, #32
 8014570:	fa01 f304 	lsl.w	r3, r1, r4
 8014574:	fa00 f606 	lsl.w	r6, r0, r6
 8014578:	4333      	orrs	r3, r6
 801457a:	fa20 f505 	lsr.w	r5, r0, r5
 801457e:	432b      	orrs	r3, r5
 8014580:	fa00 f204 	lsl.w	r2, r0, r4
 8014584:	4613      	mov	r3, r2
 8014586:	3b01      	subs	r3, #1
 8014588:	4618      	mov	r0, r3
 801458a:	f000 fb93 	bl	8014cb4 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801458e:	61f8      	str	r0, [r7, #28]
  const IntegerType zero = Dup<IntegerType>(0);
 8014590:	2000      	movs	r0, #0
 8014592:	f000 fb8f 	bl	8014cb4 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8014596:	61b8      	str	r0, [r7, #24]
  const IntegerType one = Dup<IntegerType>(1);
 8014598:	2001      	movs	r0, #1
 801459a:	f000 fb8b 	bl	8014cb4 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801459e:	6178      	str	r0, [r7, #20]
  const IntegerType remainder = BitAnd(x, mask);
 80145a0:	69f9      	ldr	r1, [r7, #28]
 80145a2:	6878      	ldr	r0, [r7, #4]
 80145a4:	f000 fb91 	bl	8014cca <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 80145a8:	6138      	str	r0, [r7, #16]
  const IntegerType threshold =
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
 80145aa:	2101      	movs	r1, #1
 80145ac:	69f8      	ldr	r0, [r7, #28]
 80145ae:	f000 fb9a 	bl	8014ce6 <_ZN8gemmlowp10ShiftRightIlEET_S1_i>
 80145b2:	4604      	mov	r4, r0
 80145b4:	69b9      	ldr	r1, [r7, #24]
 80145b6:	6878      	ldr	r0, [r7, #4]
 80145b8:	f000 fba4 	bl	8014d04 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 80145bc:	4603      	mov	r3, r0
 80145be:	6979      	ldr	r1, [r7, #20]
 80145c0:	4618      	mov	r0, r3
 80145c2:	f000 fb82 	bl	8014cca <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 80145c6:	4603      	mov	r3, r0
 80145c8:	4619      	mov	r1, r3
 80145ca:	4620      	mov	r0, r4
 80145cc:	f000 fbae 	bl	8014d2c <_ZN8gemmlowp3AddIlEET_S1_S1_>
 80145d0:	60f8      	str	r0, [r7, #12]
  return Add(ShiftRight(x, exponent),
 80145d2:	6839      	ldr	r1, [r7, #0]
 80145d4:	6878      	ldr	r0, [r7, #4]
 80145d6:	f000 fb86 	bl	8014ce6 <_ZN8gemmlowp10ShiftRightIlEET_S1_i>
 80145da:	4604      	mov	r4, r0
 80145dc:	68f9      	ldr	r1, [r7, #12]
 80145de:	6938      	ldr	r0, [r7, #16]
 80145e0:	f000 fbb2 	bl	8014d48 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 80145e4:	4603      	mov	r3, r0
 80145e6:	6979      	ldr	r1, [r7, #20]
 80145e8:	4618      	mov	r0, r3
 80145ea:	f000 fb6e 	bl	8014cca <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 80145ee:	4603      	mov	r3, r0
 80145f0:	4619      	mov	r1, r3
 80145f2:	4620      	mov	r0, r4
 80145f4:	f000 fb9a 	bl	8014d2c <_ZN8gemmlowp3AddIlEET_S1_S1_>
 80145f8:	4603      	mov	r3, r0
             BitAnd(MaskIfGreaterThan(remainder, threshold), one));
}
 80145fa:	4618      	mov	r0, r3
 80145fc:	3724      	adds	r7, #36	; 0x24
 80145fe:	46bd      	mov	sp, r7
 8014600:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014602:	bf00      	nop
 8014604:	0801c83c 	.word	0x0801c83c
 8014608:	0801c84c 	.word	0x0801c84c
 801460c:	0801c8a8 	.word	0x0801c8a8
 8014610:	0801c934 	.word	0x0801c934

08014614 <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIaEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE>:
inline void CalculateReluOpData(const TfLiteTensor* input, TfLiteTensor* output,
 8014614:	b590      	push	{r4, r7, lr}
 8014616:	b099      	sub	sp, #100	; 0x64
 8014618:	af00      	add	r7, sp, #0
 801461a:	60f8      	str	r0, [r7, #12]
 801461c:	60b9      	str	r1, [r7, #8]
 801461e:	607a      	str	r2, [r7, #4]
  float act_min = 0.0;
 8014620:	f04f 0300 	mov.w	r3, #0
 8014624:	65fb      	str	r3, [r7, #92]	; 0x5c
  float act_max = std::numeric_limits<float>::infinity();
 8014626:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 801462a:	65bb      	str	r3, [r7, #88]	; 0x58
      static_cast<double>(input->params.scale / output->params.scale);
 801462c:	68fb      	ldr	r3, [r7, #12]
 801462e:	ed93 7a03 	vldr	s14, [r3, #12]
 8014632:	68bb      	ldr	r3, [r7, #8]
 8014634:	edd3 7a03 	vldr	s15, [r3, #12]
 8014638:	eec7 6a27 	vdiv.f32	s13, s14, s15
  double real_multiplier =
 801463c:	ee16 0a90 	vmov	r0, s13
 8014640:	f7eb ff8c 	bl	800055c <__aeabi_f2d>
 8014644:	4602      	mov	r2, r0
 8014646:	460b      	mov	r3, r1
 8014648:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
  const RuntimeShape input_shape = GetTensorShape(input);
 801464c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8014650:	68f9      	ldr	r1, [r7, #12]
 8014652:	4618      	mov	r0, r3
 8014654:	f7ff fac7 	bl	8013be6 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  const RuntimeShape output_shape = GetTensorShape(output);
 8014658:	f107 0310 	add.w	r3, r7, #16
 801465c:	68b9      	ldr	r1, [r7, #8]
 801465e:	4618      	mov	r0, r3
 8014660:	f7ff fac1 	bl	8013be6 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  QuantizeMultiplier(real_multiplier, &data->params.output_multiplier,
 8014664:	687b      	ldr	r3, [r7, #4]
 8014666:	f103 0214 	add.w	r2, r3, #20
 801466a:	687b      	ldr	r3, [r7, #4]
 801466c:	3318      	adds	r3, #24
 801466e:	4619      	mov	r1, r3
 8014670:	4610      	mov	r0, r2
 8014672:	ed97 0b14 	vldr	d0, [r7, #80]	; 0x50
 8014676:	f7fe fd67 	bl	8013148 <_ZN6tflite18QuantizeMultiplierEdPlPi>
      static_cast<int32_t>(std::numeric_limits<T>::min()),
 801467a:	f7fe ff1d 	bl	80134b8 <_ZNSt14numeric_limitsIaE3minEv>
 801467e:	4603      	mov	r3, r0
 8014680:	643b      	str	r3, [r7, #64]	; 0x40
      output->params.zero_point +
 8014682:	68bb      	ldr	r3, [r7, #8]
 8014684:	691c      	ldr	r4, [r3, #16]
          static_cast<int32_t>(roundf(act_min / output->params.scale)));
 8014686:	68bb      	ldr	r3, [r7, #8]
 8014688:	edd3 7a03 	vldr	s15, [r3, #12]
 801468c:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8014690:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8014694:	eeb0 0a66 	vmov.f32	s0, s13
 8014698:	f004 fc6c 	bl	8018f74 <roundf>
 801469c:	eef0 7a40 	vmov.f32	s15, s0
 80146a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80146a4:	ee17 3a90 	vmov	r3, s15
      output->params.zero_point +
 80146a8:	4423      	add	r3, r4
 80146aa:	647b      	str	r3, [r7, #68]	; 0x44
          static_cast<int32_t>(roundf(act_min / output->params.scale)));
 80146ac:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80146b0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80146b4:	4611      	mov	r1, r2
 80146b6:	4618      	mov	r0, r3
 80146b8:	f7ff f9e6 	bl	8013a88 <_ZSt3maxIlERKT_S2_S2_>
 80146bc:	4603      	mov	r3, r0
  data->params.quantized_activation_min = std::max(
 80146be:	681a      	ldr	r2, [r3, #0]
 80146c0:	687b      	ldr	r3, [r7, #4]
 80146c2:	605a      	str	r2, [r3, #4]
      act_max == std::numeric_limits<float>::infinity()
 80146c4:	f7ff fab6 	bl	8013c34 <_ZNSt14numeric_limitsIfE8infinityEv>
 80146c8:	eeb0 7a40 	vmov.f32	s14, s0
          ? static_cast<int32_t>(std::numeric_limits<T>::max())
 80146cc:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80146d0:	eef4 7a47 	vcmp.f32	s15, s14
 80146d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80146d8:	d103      	bne.n	80146e2 <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIaEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE+0xce>
 80146da:	f7fe fef6 	bl	80134ca <_ZNSt14numeric_limitsIaE3maxEv>
 80146de:	4603      	mov	r3, r0
 80146e0:	e022      	b.n	8014728 <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIaEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE+0x114>
          : std::min(static_cast<int32_t>(std::numeric_limits<T>::max()),
 80146e2:	f7fe fef2 	bl	80134ca <_ZNSt14numeric_limitsIaE3maxEv>
 80146e6:	4603      	mov	r3, r0
 80146e8:	64bb      	str	r3, [r7, #72]	; 0x48
                     output->params.zero_point +
 80146ea:	68bb      	ldr	r3, [r7, #8]
 80146ec:	691c      	ldr	r4, [r3, #16]
                             roundf(act_max / output->params.scale)));
 80146ee:	68bb      	ldr	r3, [r7, #8]
 80146f0:	edd3 7a03 	vldr	s15, [r3, #12]
 80146f4:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80146f8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80146fc:	eeb0 0a66 	vmov.f32	s0, s13
 8014700:	f004 fc38 	bl	8018f74 <roundf>
 8014704:	eef0 7a40 	vmov.f32	s15, s0
                         static_cast<int32_t>(
 8014708:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801470c:	ee17 3a90 	vmov	r3, s15
                     output->params.zero_point +
 8014710:	4423      	add	r3, r4
 8014712:	64fb      	str	r3, [r7, #76]	; 0x4c
                             roundf(act_max / output->params.scale)));
 8014714:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8014718:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801471c:	4611      	mov	r1, r2
 801471e:	4618      	mov	r0, r3
 8014720:	f7ff f99e 	bl	8013a60 <_ZSt3minIlERKT_S2_S2_>
 8014724:	4603      	mov	r3, r0
          ? static_cast<int32_t>(std::numeric_limits<T>::max())
 8014726:	681b      	ldr	r3, [r3, #0]
  data->params.quantized_activation_max =
 8014728:	687a      	ldr	r2, [r7, #4]
 801472a:	6093      	str	r3, [r2, #8]
  data->params.input_offset = input->params.zero_point;
 801472c:	68fb      	ldr	r3, [r7, #12]
 801472e:	691a      	ldr	r2, [r3, #16]
 8014730:	687b      	ldr	r3, [r7, #4]
 8014732:	60da      	str	r2, [r3, #12]
  data->params.output_offset = output->params.zero_point;
 8014734:	68bb      	ldr	r3, [r7, #8]
 8014736:	691a      	ldr	r2, [r3, #16]
 8014738:	687b      	ldr	r3, [r7, #4]
 801473a:	611a      	str	r2, [r3, #16]
  const RuntimeShape output_shape = GetTensorShape(output);
 801473c:	f107 0310 	add.w	r3, r7, #16
 8014740:	4618      	mov	r0, r3
 8014742:	f7ff f9d6 	bl	8013af2 <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape input_shape = GetTensorShape(input);
 8014746:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801474a:	4618      	mov	r0, r3
 801474c:	f7ff f9d1 	bl	8013af2 <_ZN6tflite12RuntimeShapeD1Ev>
}
 8014750:	bf00      	nop
 8014752:	3764      	adds	r7, #100	; 0x64
 8014754:	46bd      	mov	sp, r7
 8014756:	bd90      	pop	{r4, r7, pc}

08014758 <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIhEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE>:
inline void CalculateReluOpData(const TfLiteTensor* input, TfLiteTensor* output,
 8014758:	b590      	push	{r4, r7, lr}
 801475a:	b099      	sub	sp, #100	; 0x64
 801475c:	af00      	add	r7, sp, #0
 801475e:	60f8      	str	r0, [r7, #12]
 8014760:	60b9      	str	r1, [r7, #8]
 8014762:	607a      	str	r2, [r7, #4]
  float act_min = 0.0;
 8014764:	f04f 0300 	mov.w	r3, #0
 8014768:	65fb      	str	r3, [r7, #92]	; 0x5c
  float act_max = std::numeric_limits<float>::infinity();
 801476a:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 801476e:	65bb      	str	r3, [r7, #88]	; 0x58
      static_cast<double>(input->params.scale / output->params.scale);
 8014770:	68fb      	ldr	r3, [r7, #12]
 8014772:	ed93 7a03 	vldr	s14, [r3, #12]
 8014776:	68bb      	ldr	r3, [r7, #8]
 8014778:	edd3 7a03 	vldr	s15, [r3, #12]
 801477c:	eec7 6a27 	vdiv.f32	s13, s14, s15
  double real_multiplier =
 8014780:	ee16 0a90 	vmov	r0, s13
 8014784:	f7eb feea 	bl	800055c <__aeabi_f2d>
 8014788:	4602      	mov	r2, r0
 801478a:	460b      	mov	r3, r1
 801478c:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
  const RuntimeShape input_shape = GetTensorShape(input);
 8014790:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8014794:	68f9      	ldr	r1, [r7, #12]
 8014796:	4618      	mov	r0, r3
 8014798:	f7ff fa25 	bl	8013be6 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  const RuntimeShape output_shape = GetTensorShape(output);
 801479c:	f107 0310 	add.w	r3, r7, #16
 80147a0:	68b9      	ldr	r1, [r7, #8]
 80147a2:	4618      	mov	r0, r3
 80147a4:	f7ff fa1f 	bl	8013be6 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  QuantizeMultiplier(real_multiplier, &data->params.output_multiplier,
 80147a8:	687b      	ldr	r3, [r7, #4]
 80147aa:	f103 0214 	add.w	r2, r3, #20
 80147ae:	687b      	ldr	r3, [r7, #4]
 80147b0:	3318      	adds	r3, #24
 80147b2:	4619      	mov	r1, r3
 80147b4:	4610      	mov	r0, r2
 80147b6:	ed97 0b14 	vldr	d0, [r7, #80]	; 0x50
 80147ba:	f7fe fcc5 	bl	8013148 <_ZN6tflite18QuantizeMultiplierEdPlPi>
      static_cast<int32_t>(std::numeric_limits<T>::min()),
 80147be:	f7fe fe8c 	bl	80134da <_ZNSt14numeric_limitsIhE3minEv>
 80147c2:	4603      	mov	r3, r0
 80147c4:	643b      	str	r3, [r7, #64]	; 0x40
      output->params.zero_point +
 80147c6:	68bb      	ldr	r3, [r7, #8]
 80147c8:	691c      	ldr	r4, [r3, #16]
          static_cast<int32_t>(roundf(act_min / output->params.scale)));
 80147ca:	68bb      	ldr	r3, [r7, #8]
 80147cc:	edd3 7a03 	vldr	s15, [r3, #12]
 80147d0:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80147d4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80147d8:	eeb0 0a66 	vmov.f32	s0, s13
 80147dc:	f004 fbca 	bl	8018f74 <roundf>
 80147e0:	eef0 7a40 	vmov.f32	s15, s0
 80147e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80147e8:	ee17 3a90 	vmov	r3, s15
      output->params.zero_point +
 80147ec:	4423      	add	r3, r4
 80147ee:	647b      	str	r3, [r7, #68]	; 0x44
          static_cast<int32_t>(roundf(act_min / output->params.scale)));
 80147f0:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80147f4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80147f8:	4611      	mov	r1, r2
 80147fa:	4618      	mov	r0, r3
 80147fc:	f7ff f944 	bl	8013a88 <_ZSt3maxIlERKT_S2_S2_>
 8014800:	4603      	mov	r3, r0
  data->params.quantized_activation_min = std::max(
 8014802:	681a      	ldr	r2, [r3, #0]
 8014804:	687b      	ldr	r3, [r7, #4]
 8014806:	605a      	str	r2, [r3, #4]
      act_max == std::numeric_limits<float>::infinity()
 8014808:	f7ff fa14 	bl	8013c34 <_ZNSt14numeric_limitsIfE8infinityEv>
 801480c:	eeb0 7a40 	vmov.f32	s14, s0
          ? static_cast<int32_t>(std::numeric_limits<T>::max())
 8014810:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8014814:	eef4 7a47 	vcmp.f32	s15, s14
 8014818:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801481c:	d103      	bne.n	8014826 <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIhEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE+0xce>
 801481e:	f7fe fe64 	bl	80134ea <_ZNSt14numeric_limitsIhE3maxEv>
 8014822:	4603      	mov	r3, r0
 8014824:	e022      	b.n	801486c <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIhEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE+0x114>
          : std::min(static_cast<int32_t>(std::numeric_limits<T>::max()),
 8014826:	f7fe fe60 	bl	80134ea <_ZNSt14numeric_limitsIhE3maxEv>
 801482a:	4603      	mov	r3, r0
 801482c:	64bb      	str	r3, [r7, #72]	; 0x48
                     output->params.zero_point +
 801482e:	68bb      	ldr	r3, [r7, #8]
 8014830:	691c      	ldr	r4, [r3, #16]
                             roundf(act_max / output->params.scale)));
 8014832:	68bb      	ldr	r3, [r7, #8]
 8014834:	edd3 7a03 	vldr	s15, [r3, #12]
 8014838:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 801483c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8014840:	eeb0 0a66 	vmov.f32	s0, s13
 8014844:	f004 fb96 	bl	8018f74 <roundf>
 8014848:	eef0 7a40 	vmov.f32	s15, s0
                         static_cast<int32_t>(
 801484c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014850:	ee17 3a90 	vmov	r3, s15
                     output->params.zero_point +
 8014854:	4423      	add	r3, r4
 8014856:	64fb      	str	r3, [r7, #76]	; 0x4c
                             roundf(act_max / output->params.scale)));
 8014858:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 801485c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8014860:	4611      	mov	r1, r2
 8014862:	4618      	mov	r0, r3
 8014864:	f7ff f8fc 	bl	8013a60 <_ZSt3minIlERKT_S2_S2_>
 8014868:	4603      	mov	r3, r0
          ? static_cast<int32_t>(std::numeric_limits<T>::max())
 801486a:	681b      	ldr	r3, [r3, #0]
  data->params.quantized_activation_max =
 801486c:	687a      	ldr	r2, [r7, #4]
 801486e:	6093      	str	r3, [r2, #8]
  data->params.input_offset = input->params.zero_point;
 8014870:	68fb      	ldr	r3, [r7, #12]
 8014872:	691a      	ldr	r2, [r3, #16]
 8014874:	687b      	ldr	r3, [r7, #4]
 8014876:	60da      	str	r2, [r3, #12]
  data->params.output_offset = output->params.zero_point;
 8014878:	68bb      	ldr	r3, [r7, #8]
 801487a:	691a      	ldr	r2, [r3, #16]
 801487c:	687b      	ldr	r3, [r7, #4]
 801487e:	611a      	str	r2, [r3, #16]
  const RuntimeShape output_shape = GetTensorShape(output);
 8014880:	f107 0310 	add.w	r3, r7, #16
 8014884:	4618      	mov	r0, r3
 8014886:	f7ff f934 	bl	8013af2 <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape input_shape = GetTensorShape(input);
 801488a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801488e:	4618      	mov	r0, r3
 8014890:	f7ff f92f 	bl	8013af2 <_ZN6tflite12RuntimeShapeD1Ev>
}
 8014894:	bf00      	nop
 8014896:	3764      	adds	r7, #100	; 0x64
 8014898:	46bd      	mov	sp, r7
 801489a:	bd90      	pop	{r4, r7, pc}

0801489c <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>:
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
}

// Returns const data for a TfLiteEvalTensor struct.
template <typename T>
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 801489c:	b580      	push	{r7, lr}
 801489e:	b082      	sub	sp, #8
 80148a0:	af00      	add	r7, sp, #0
 80148a2:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 80148a4:	687b      	ldr	r3, [r7, #4]
 80148a6:	2b00      	cmp	r3, #0
 80148a8:	d101      	bne.n	80148ae <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor+0x12>
 80148aa:	f005 fd73 	bl	801a394 <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 80148ae:	687b      	ldr	r3, [r7, #4]
 80148b0:	681b      	ldr	r3, [r3, #0]
}
 80148b2:	4618      	mov	r0, r3
 80148b4:	3708      	adds	r7, #8
 80148b6:	46bd      	mov	sp, r7
 80148b8:	bd80      	pop	{r7, pc}

080148ba <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 80148ba:	b480      	push	{r7}
 80148bc:	b083      	sub	sp, #12
 80148be:	af00      	add	r7, sp, #0
 80148c0:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 80148c2:	687b      	ldr	r3, [r7, #4]
 80148c4:	2b00      	cmp	r3, #0
 80148c6:	d002      	beq.n	80148ce <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor+0x14>
 80148c8:	687b      	ldr	r3, [r7, #4]
 80148ca:	681b      	ldr	r3, [r3, #0]
 80148cc:	e000      	b.n	80148d0 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor+0x16>
 80148ce:	2300      	movs	r3, #0
}
 80148d0:	4618      	mov	r0, r3
 80148d2:	370c      	adds	r7, #12
 80148d4:	46bd      	mov	sp, r7
 80148d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148da:	4770      	bx	lr

080148dc <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 80148dc:	b580      	push	{r7, lr}
 80148de:	b082      	sub	sp, #8
 80148e0:	af00      	add	r7, sp, #0
 80148e2:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 80148e4:	687b      	ldr	r3, [r7, #4]
 80148e6:	2b00      	cmp	r3, #0
 80148e8:	d101      	bne.n	80148ee <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor+0x12>
 80148ea:	f005 fd53 	bl	801a394 <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 80148ee:	687b      	ldr	r3, [r7, #4]
 80148f0:	681b      	ldr	r3, [r3, #0]
}
 80148f2:	4618      	mov	r0, r3
 80148f4:	3708      	adds	r7, #8
 80148f6:	46bd      	mov	sp, r7
 80148f8:	bd80      	pop	{r7, pc}

080148fa <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 80148fa:	b480      	push	{r7}
 80148fc:	b083      	sub	sp, #12
 80148fe:	af00      	add	r7, sp, #0
 8014900:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 8014902:	687b      	ldr	r3, [r7, #4]
 8014904:	2b00      	cmp	r3, #0
 8014906:	d002      	beq.n	801490e <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor+0x14>
 8014908:	687b      	ldr	r3, [r7, #4]
 801490a:	681b      	ldr	r3, [r3, #0]
 801490c:	e000      	b.n	8014910 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor+0x16>
 801490e:	2300      	movs	r3, #0
}
 8014910:	4618      	mov	r0, r3
 8014912:	370c      	adds	r7, #12
 8014914:	46bd      	mov	sp, r7
 8014916:	f85d 7b04 	ldr.w	r7, [sp], #4
 801491a:	4770      	bx	lr

0801491c <_ZN6tflite3ops5micro11activations13ReluQuantizedIaEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_>:
inline void ReluQuantized(const ReluOpData& data,
 801491c:	b590      	push	{r4, r7, lr}
 801491e:	b089      	sub	sp, #36	; 0x24
 8014920:	af00      	add	r7, sp, #0
 8014922:	60f8      	str	r0, [r7, #12]
 8014924:	60b9      	str	r1, [r7, #8]
 8014926:	607a      	str	r2, [r7, #4]
 8014928:	603b      	str	r3, [r7, #0]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 801492a:	6879      	ldr	r1, [r7, #4]
 801492c:	68b8      	ldr	r0, [r7, #8]
 801492e:	f7ff fa5e 	bl	8013dee <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 8014932:	61b8      	str	r0, [r7, #24]
  for (int i = 0; i < flat_size; ++i) {
 8014934:	2300      	movs	r3, #0
 8014936:	61fb      	str	r3, [r7, #28]
 8014938:	69fa      	ldr	r2, [r7, #28]
 801493a:	69bb      	ldr	r3, [r7, #24]
 801493c:	429a      	cmp	r2, r3
 801493e:	da35      	bge.n	80149ac <_ZN6tflite3ops5micro11activations13ReluQuantizedIaEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_+0x90>
    const int32_t val = static_cast<int32_t>(input_data[i]);
 8014940:	69fb      	ldr	r3, [r7, #28]
 8014942:	683a      	ldr	r2, [r7, #0]
 8014944:	4413      	add	r3, r2
 8014946:	f993 3000 	ldrsb.w	r3, [r3]
 801494a:	617b      	str	r3, [r7, #20]
        data.params.output_offset +
 801494c:	68fb      	ldr	r3, [r7, #12]
 801494e:	691c      	ldr	r4, [r3, #16]
        MultiplyByQuantizedMultiplier(val - data.params.input_offset,
 8014950:	68fb      	ldr	r3, [r7, #12]
 8014952:	68db      	ldr	r3, [r3, #12]
 8014954:	697a      	ldr	r2, [r7, #20]
 8014956:	1ad0      	subs	r0, r2, r3
                                      data.params.output_multiplier,
 8014958:	68fb      	ldr	r3, [r7, #12]
 801495a:	6959      	ldr	r1, [r3, #20]
                                      data.params.output_shift);
 801495c:	68fb      	ldr	r3, [r7, #12]
 801495e:	699b      	ldr	r3, [r3, #24]
        MultiplyByQuantizedMultiplier(val - data.params.input_offset,
 8014960:	461a      	mov	r2, r3
 8014962:	f7ff fa79 	bl	8013e58 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 8014966:	4603      	mov	r3, r0
        data.params.output_offset +
 8014968:	4423      	add	r3, r4
    int32_t clamped =
 801496a:	613b      	str	r3, [r7, #16]
    clamped = std::max(data.params.quantized_activation_min, clamped);
 801496c:	68fb      	ldr	r3, [r7, #12]
 801496e:	3304      	adds	r3, #4
 8014970:	f107 0210 	add.w	r2, r7, #16
 8014974:	4611      	mov	r1, r2
 8014976:	4618      	mov	r0, r3
 8014978:	f7ff f886 	bl	8013a88 <_ZSt3maxIlERKT_S2_S2_>
 801497c:	4603      	mov	r3, r0
 801497e:	681b      	ldr	r3, [r3, #0]
 8014980:	613b      	str	r3, [r7, #16]
    clamped = std::min(data.params.quantized_activation_max, clamped);
 8014982:	68fb      	ldr	r3, [r7, #12]
 8014984:	3308      	adds	r3, #8
 8014986:	f107 0210 	add.w	r2, r7, #16
 801498a:	4611      	mov	r1, r2
 801498c:	4618      	mov	r0, r3
 801498e:	f7ff f867 	bl	8013a60 <_ZSt3minIlERKT_S2_S2_>
 8014992:	4603      	mov	r3, r0
 8014994:	681b      	ldr	r3, [r3, #0]
 8014996:	613b      	str	r3, [r7, #16]
    output_data[i] = static_cast<T>(clamped);
 8014998:	6939      	ldr	r1, [r7, #16]
 801499a:	69fb      	ldr	r3, [r7, #28]
 801499c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801499e:	4413      	add	r3, r2
 80149a0:	b24a      	sxtb	r2, r1
 80149a2:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < flat_size; ++i) {
 80149a4:	69fb      	ldr	r3, [r7, #28]
 80149a6:	3301      	adds	r3, #1
 80149a8:	61fb      	str	r3, [r7, #28]
 80149aa:	e7c5      	b.n	8014938 <_ZN6tflite3ops5micro11activations13ReluQuantizedIaEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_+0x1c>
}
 80149ac:	bf00      	nop
 80149ae:	3724      	adds	r7, #36	; 0x24
 80149b0:	46bd      	mov	sp, r7
 80149b2:	bd90      	pop	{r4, r7, pc}

080149b4 <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 80149b4:	b580      	push	{r7, lr}
 80149b6:	b082      	sub	sp, #8
 80149b8:	af00      	add	r7, sp, #0
 80149ba:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 80149bc:	687b      	ldr	r3, [r7, #4]
 80149be:	2b00      	cmp	r3, #0
 80149c0:	d101      	bne.n	80149c6 <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor+0x12>
 80149c2:	f005 fce7 	bl	801a394 <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 80149c6:	687b      	ldr	r3, [r7, #4]
 80149c8:	681b      	ldr	r3, [r3, #0]
}
 80149ca:	4618      	mov	r0, r3
 80149cc:	3708      	adds	r7, #8
 80149ce:	46bd      	mov	sp, r7
 80149d0:	bd80      	pop	{r7, pc}

080149d2 <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 80149d2:	b480      	push	{r7}
 80149d4:	b083      	sub	sp, #12
 80149d6:	af00      	add	r7, sp, #0
 80149d8:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 80149da:	687b      	ldr	r3, [r7, #4]
 80149dc:	2b00      	cmp	r3, #0
 80149de:	d002      	beq.n	80149e6 <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor+0x14>
 80149e0:	687b      	ldr	r3, [r7, #4]
 80149e2:	681b      	ldr	r3, [r3, #0]
 80149e4:	e000      	b.n	80149e8 <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor+0x16>
 80149e6:	2300      	movs	r3, #0
}
 80149e8:	4618      	mov	r0, r3
 80149ea:	370c      	adds	r7, #12
 80149ec:	46bd      	mov	sp, r7
 80149ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149f2:	4770      	bx	lr

080149f4 <_ZN6tflite3ops5micro11activations13ReluQuantizedIhEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_>:
inline void ReluQuantized(const ReluOpData& data,
 80149f4:	b590      	push	{r4, r7, lr}
 80149f6:	b089      	sub	sp, #36	; 0x24
 80149f8:	af00      	add	r7, sp, #0
 80149fa:	60f8      	str	r0, [r7, #12]
 80149fc:	60b9      	str	r1, [r7, #8]
 80149fe:	607a      	str	r2, [r7, #4]
 8014a00:	603b      	str	r3, [r7, #0]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 8014a02:	6879      	ldr	r1, [r7, #4]
 8014a04:	68b8      	ldr	r0, [r7, #8]
 8014a06:	f7ff f9f2 	bl	8013dee <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 8014a0a:	61b8      	str	r0, [r7, #24]
  for (int i = 0; i < flat_size; ++i) {
 8014a0c:	2300      	movs	r3, #0
 8014a0e:	61fb      	str	r3, [r7, #28]
 8014a10:	69fa      	ldr	r2, [r7, #28]
 8014a12:	69bb      	ldr	r3, [r7, #24]
 8014a14:	429a      	cmp	r2, r3
 8014a16:	da34      	bge.n	8014a82 <_ZN6tflite3ops5micro11activations13ReluQuantizedIhEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_+0x8e>
    const int32_t val = static_cast<int32_t>(input_data[i]);
 8014a18:	69fb      	ldr	r3, [r7, #28]
 8014a1a:	683a      	ldr	r2, [r7, #0]
 8014a1c:	4413      	add	r3, r2
 8014a1e:	781b      	ldrb	r3, [r3, #0]
 8014a20:	617b      	str	r3, [r7, #20]
        data.params.output_offset +
 8014a22:	68fb      	ldr	r3, [r7, #12]
 8014a24:	691c      	ldr	r4, [r3, #16]
        MultiplyByQuantizedMultiplier(val - data.params.input_offset,
 8014a26:	68fb      	ldr	r3, [r7, #12]
 8014a28:	68db      	ldr	r3, [r3, #12]
 8014a2a:	697a      	ldr	r2, [r7, #20]
 8014a2c:	1ad0      	subs	r0, r2, r3
                                      data.params.output_multiplier,
 8014a2e:	68fb      	ldr	r3, [r7, #12]
 8014a30:	6959      	ldr	r1, [r3, #20]
                                      data.params.output_shift);
 8014a32:	68fb      	ldr	r3, [r7, #12]
 8014a34:	699b      	ldr	r3, [r3, #24]
        MultiplyByQuantizedMultiplier(val - data.params.input_offset,
 8014a36:	461a      	mov	r2, r3
 8014a38:	f7ff fa0e 	bl	8013e58 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 8014a3c:	4603      	mov	r3, r0
        data.params.output_offset +
 8014a3e:	4423      	add	r3, r4
    int32_t clamped =
 8014a40:	613b      	str	r3, [r7, #16]
    clamped = std::max(data.params.quantized_activation_min, clamped);
 8014a42:	68fb      	ldr	r3, [r7, #12]
 8014a44:	3304      	adds	r3, #4
 8014a46:	f107 0210 	add.w	r2, r7, #16
 8014a4a:	4611      	mov	r1, r2
 8014a4c:	4618      	mov	r0, r3
 8014a4e:	f7ff f81b 	bl	8013a88 <_ZSt3maxIlERKT_S2_S2_>
 8014a52:	4603      	mov	r3, r0
 8014a54:	681b      	ldr	r3, [r3, #0]
 8014a56:	613b      	str	r3, [r7, #16]
    clamped = std::min(data.params.quantized_activation_max, clamped);
 8014a58:	68fb      	ldr	r3, [r7, #12]
 8014a5a:	3308      	adds	r3, #8
 8014a5c:	f107 0210 	add.w	r2, r7, #16
 8014a60:	4611      	mov	r1, r2
 8014a62:	4618      	mov	r0, r3
 8014a64:	f7fe fffc 	bl	8013a60 <_ZSt3minIlERKT_S2_S2_>
 8014a68:	4603      	mov	r3, r0
 8014a6a:	681b      	ldr	r3, [r3, #0]
 8014a6c:	613b      	str	r3, [r7, #16]
    output_data[i] = static_cast<T>(clamped);
 8014a6e:	6939      	ldr	r1, [r7, #16]
 8014a70:	69fb      	ldr	r3, [r7, #28]
 8014a72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014a74:	4413      	add	r3, r2
 8014a76:	b2ca      	uxtb	r2, r1
 8014a78:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < flat_size; ++i) {
 8014a7a:	69fb      	ldr	r3, [r7, #28]
 8014a7c:	3301      	adds	r3, #1
 8014a7e:	61fb      	str	r3, [r7, #28]
 8014a80:	e7c6      	b.n	8014a10 <_ZN6tflite3ops5micro11activations13ReluQuantizedIhEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_+0x1c>
}
 8014a82:	bf00      	nop
 8014a84:	3724      	adds	r7, #36	; 0x24
 8014a86:	46bd      	mov	sp, r7
 8014a88:	bd90      	pop	{r4, r7, pc}

08014a8a <_ZN6tflite20FloatToQuantizedTypeIaEET_ffi>:

// Converts a float value into a quantized value.  Note that large values (close
// to max int and min int) may see significant error due to a lack of floating
// point granularity for large values.
template <typename T>
T FloatToQuantizedType(const float value, const float scale, int zero_point) {
 8014a8a:	b5b0      	push	{r4, r5, r7, lr}
 8014a8c:	b088      	sub	sp, #32
 8014a8e:	af00      	add	r7, sp, #0
 8014a90:	ed87 0a03 	vstr	s0, [r7, #12]
 8014a94:	edc7 0a02 	vstr	s1, [r7, #8]
 8014a98:	6078      	str	r0, [r7, #4]
  int32_t result = round(value / scale) + zero_point;
 8014a9a:	ed97 7a03 	vldr	s14, [r7, #12]
 8014a9e:	edd7 7a02 	vldr	s15, [r7, #8]
 8014aa2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8014aa6:	ee16 0a90 	vmov	r0, s13
 8014aaa:	f7eb fd57 	bl	800055c <__aeabi_f2d>
 8014aae:	4602      	mov	r2, r0
 8014ab0:	460b      	mov	r3, r1
 8014ab2:	ec43 2b10 	vmov	d0, r2, r3
 8014ab6:	f004 fa17 	bl	8018ee8 <round>
 8014aba:	ec55 4b10 	vmov	r4, r5, d0
 8014abe:	6878      	ldr	r0, [r7, #4]
 8014ac0:	f7eb fd3a 	bl	8000538 <__aeabi_i2d>
 8014ac4:	4602      	mov	r2, r0
 8014ac6:	460b      	mov	r3, r1
 8014ac8:	4620      	mov	r0, r4
 8014aca:	4629      	mov	r1, r5
 8014acc:	f7eb fbe8 	bl	80002a0 <__adddf3>
 8014ad0:	4602      	mov	r2, r0
 8014ad2:	460b      	mov	r3, r1
 8014ad4:	4610      	mov	r0, r2
 8014ad6:	4619      	mov	r1, r3
 8014ad8:	f7ec f848 	bl	8000b6c <__aeabi_d2iz>
 8014adc:	4603      	mov	r3, r0
 8014ade:	617b      	str	r3, [r7, #20]
  result =
      std::max(static_cast<int32_t>(std::numeric_limits<T>::min()), result);
 8014ae0:	f7fe fcea 	bl	80134b8 <_ZNSt14numeric_limitsIaE3minEv>
 8014ae4:	4603      	mov	r3, r0
 8014ae6:	61bb      	str	r3, [r7, #24]
 8014ae8:	f107 0214 	add.w	r2, r7, #20
 8014aec:	f107 0318 	add.w	r3, r7, #24
 8014af0:	4611      	mov	r1, r2
 8014af2:	4618      	mov	r0, r3
 8014af4:	f7fe ffc8 	bl	8013a88 <_ZSt3maxIlERKT_S2_S2_>
 8014af8:	4603      	mov	r3, r0
  result =
 8014afa:	681b      	ldr	r3, [r3, #0]
 8014afc:	617b      	str	r3, [r7, #20]
  result =
      std::min(static_cast<int32_t>(std::numeric_limits<T>::max()), result);
 8014afe:	f7fe fce4 	bl	80134ca <_ZNSt14numeric_limitsIaE3maxEv>
 8014b02:	4603      	mov	r3, r0
 8014b04:	61fb      	str	r3, [r7, #28]
 8014b06:	f107 0214 	add.w	r2, r7, #20
 8014b0a:	f107 031c 	add.w	r3, r7, #28
 8014b0e:	4611      	mov	r1, r2
 8014b10:	4618      	mov	r0, r3
 8014b12:	f7fe ffa5 	bl	8013a60 <_ZSt3minIlERKT_S2_S2_>
 8014b16:	4603      	mov	r3, r0
  result =
 8014b18:	681b      	ldr	r3, [r3, #0]
 8014b1a:	617b      	str	r3, [r7, #20]
  return result;
 8014b1c:	697b      	ldr	r3, [r7, #20]
 8014b1e:	b25b      	sxtb	r3, r3
}
 8014b20:	4618      	mov	r0, r3
 8014b22:	3720      	adds	r7, #32
 8014b24:	46bd      	mov	sp, r7
 8014b26:	bdb0      	pop	{r4, r5, r7, pc}

08014b28 <_ZN6tflite20FloatToQuantizedTypeIhEET_ffi>:
T FloatToQuantizedType(const float value, const float scale, int zero_point) {
 8014b28:	b5b0      	push	{r4, r5, r7, lr}
 8014b2a:	b088      	sub	sp, #32
 8014b2c:	af00      	add	r7, sp, #0
 8014b2e:	ed87 0a03 	vstr	s0, [r7, #12]
 8014b32:	edc7 0a02 	vstr	s1, [r7, #8]
 8014b36:	6078      	str	r0, [r7, #4]
  int32_t result = round(value / scale) + zero_point;
 8014b38:	ed97 7a03 	vldr	s14, [r7, #12]
 8014b3c:	edd7 7a02 	vldr	s15, [r7, #8]
 8014b40:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8014b44:	ee16 0a90 	vmov	r0, s13
 8014b48:	f7eb fd08 	bl	800055c <__aeabi_f2d>
 8014b4c:	4602      	mov	r2, r0
 8014b4e:	460b      	mov	r3, r1
 8014b50:	ec43 2b10 	vmov	d0, r2, r3
 8014b54:	f004 f9c8 	bl	8018ee8 <round>
 8014b58:	ec55 4b10 	vmov	r4, r5, d0
 8014b5c:	6878      	ldr	r0, [r7, #4]
 8014b5e:	f7eb fceb 	bl	8000538 <__aeabi_i2d>
 8014b62:	4602      	mov	r2, r0
 8014b64:	460b      	mov	r3, r1
 8014b66:	4620      	mov	r0, r4
 8014b68:	4629      	mov	r1, r5
 8014b6a:	f7eb fb99 	bl	80002a0 <__adddf3>
 8014b6e:	4602      	mov	r2, r0
 8014b70:	460b      	mov	r3, r1
 8014b72:	4610      	mov	r0, r2
 8014b74:	4619      	mov	r1, r3
 8014b76:	f7eb fff9 	bl	8000b6c <__aeabi_d2iz>
 8014b7a:	4603      	mov	r3, r0
 8014b7c:	617b      	str	r3, [r7, #20]
      std::max(static_cast<int32_t>(std::numeric_limits<T>::min()), result);
 8014b7e:	f7fe fcac 	bl	80134da <_ZNSt14numeric_limitsIhE3minEv>
 8014b82:	4603      	mov	r3, r0
 8014b84:	61bb      	str	r3, [r7, #24]
 8014b86:	f107 0214 	add.w	r2, r7, #20
 8014b8a:	f107 0318 	add.w	r3, r7, #24
 8014b8e:	4611      	mov	r1, r2
 8014b90:	4618      	mov	r0, r3
 8014b92:	f7fe ff79 	bl	8013a88 <_ZSt3maxIlERKT_S2_S2_>
 8014b96:	4603      	mov	r3, r0
  result =
 8014b98:	681b      	ldr	r3, [r3, #0]
 8014b9a:	617b      	str	r3, [r7, #20]
      std::min(static_cast<int32_t>(std::numeric_limits<T>::max()), result);
 8014b9c:	f7fe fca5 	bl	80134ea <_ZNSt14numeric_limitsIhE3maxEv>
 8014ba0:	4603      	mov	r3, r0
 8014ba2:	61fb      	str	r3, [r7, #28]
 8014ba4:	f107 0214 	add.w	r2, r7, #20
 8014ba8:	f107 031c 	add.w	r3, r7, #28
 8014bac:	4611      	mov	r1, r2
 8014bae:	4618      	mov	r0, r3
 8014bb0:	f7fe ff56 	bl	8013a60 <_ZSt3minIlERKT_S2_S2_>
 8014bb4:	4603      	mov	r3, r0
  result =
 8014bb6:	681b      	ldr	r3, [r3, #0]
 8014bb8:	617b      	str	r3, [r7, #20]
  return result;
 8014bba:	697b      	ldr	r3, [r7, #20]
 8014bbc:	b2db      	uxtb	r3, r3
}
 8014bbe:	4618      	mov	r0, r3
 8014bc0:	3720      	adds	r7, #32
 8014bc2:	46bd      	mov	sp, r7
 8014bc4:	bdb0      	pop	{r4, r5, r7, pc}

08014bc6 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_>:
inline void Relu6Quantized(Q lower, Q upper, const RuntimeShape& input_shape,
 8014bc6:	b580      	push	{r7, lr}
 8014bc8:	b088      	sub	sp, #32
 8014bca:	af00      	add	r7, sp, #0
 8014bcc:	60ba      	str	r2, [r7, #8]
 8014bce:	607b      	str	r3, [r7, #4]
 8014bd0:	4603      	mov	r3, r0
 8014bd2:	73fb      	strb	r3, [r7, #15]
 8014bd4:	460b      	mov	r3, r1
 8014bd6:	73bb      	strb	r3, [r7, #14]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 8014bd8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8014bda:	68b8      	ldr	r0, [r7, #8]
 8014bdc:	f7ff f907 	bl	8013dee <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 8014be0:	61b8      	str	r0, [r7, #24]
  for (int i = 0; i < flat_size; ++i) {
 8014be2:	2300      	movs	r3, #0
 8014be4:	61fb      	str	r3, [r7, #28]
 8014be6:	69fa      	ldr	r2, [r7, #28]
 8014be8:	69bb      	ldr	r3, [r7, #24]
 8014bea:	429a      	cmp	r2, r3
 8014bec:	da26      	bge.n	8014c3c <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x76>
    const Q val = input_data[i];
 8014bee:	69fb      	ldr	r3, [r7, #28]
 8014bf0:	687a      	ldr	r2, [r7, #4]
 8014bf2:	4413      	add	r3, r2
 8014bf4:	781b      	ldrb	r3, [r3, #0]
 8014bf6:	75fb      	strb	r3, [r7, #23]
    const Q clamped = val > upper ? upper : val < lower ? lower : val;
 8014bf8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014bfc:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8014c00:	429a      	cmp	r2, r3
 8014c02:	dd04      	ble.n	8014c0e <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x48>
 8014c04:	f107 030e 	add.w	r3, r7, #14
 8014c08:	f993 3000 	ldrsb.w	r3, [r3]
 8014c0c:	e00c      	b.n	8014c28 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x62>
 8014c0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014c12:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8014c16:	429a      	cmp	r2, r3
 8014c18:	da04      	bge.n	8014c24 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x5e>
 8014c1a:	f107 030f 	add.w	r3, r7, #15
 8014c1e:	f993 3000 	ldrsb.w	r3, [r3]
 8014c22:	e001      	b.n	8014c28 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x62>
 8014c24:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8014c28:	75bb      	strb	r3, [r7, #22]
    output_data[i] = clamped;
 8014c2a:	69fb      	ldr	r3, [r7, #28]
 8014c2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014c2e:	4413      	add	r3, r2
 8014c30:	7dba      	ldrb	r2, [r7, #22]
 8014c32:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < flat_size; ++i) {
 8014c34:	69fb      	ldr	r3, [r7, #28]
 8014c36:	3301      	adds	r3, #1
 8014c38:	61fb      	str	r3, [r7, #28]
 8014c3a:	e7d4      	b.n	8014be6 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x20>
}
 8014c3c:	bf00      	nop
 8014c3e:	3720      	adds	r7, #32
 8014c40:	46bd      	mov	sp, r7
 8014c42:	bd80      	pop	{r7, pc}

08014c44 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_>:
inline void Relu6Quantized(Q lower, Q upper, const RuntimeShape& input_shape,
 8014c44:	b580      	push	{r7, lr}
 8014c46:	b088      	sub	sp, #32
 8014c48:	af00      	add	r7, sp, #0
 8014c4a:	60ba      	str	r2, [r7, #8]
 8014c4c:	607b      	str	r3, [r7, #4]
 8014c4e:	4603      	mov	r3, r0
 8014c50:	73fb      	strb	r3, [r7, #15]
 8014c52:	460b      	mov	r3, r1
 8014c54:	73bb      	strb	r3, [r7, #14]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 8014c56:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8014c58:	68b8      	ldr	r0, [r7, #8]
 8014c5a:	f7ff f8c8 	bl	8013dee <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 8014c5e:	61b8      	str	r0, [r7, #24]
  for (int i = 0; i < flat_size; ++i) {
 8014c60:	2300      	movs	r3, #0
 8014c62:	61fb      	str	r3, [r7, #28]
 8014c64:	69fa      	ldr	r2, [r7, #28]
 8014c66:	69bb      	ldr	r3, [r7, #24]
 8014c68:	429a      	cmp	r2, r3
 8014c6a:	da1f      	bge.n	8014cac <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x68>
    const Q val = input_data[i];
 8014c6c:	69fb      	ldr	r3, [r7, #28]
 8014c6e:	687a      	ldr	r2, [r7, #4]
 8014c70:	4413      	add	r3, r2
 8014c72:	781b      	ldrb	r3, [r3, #0]
 8014c74:	75fb      	strb	r3, [r7, #23]
    const Q clamped = val > upper ? upper : val < lower ? lower : val;
 8014c76:	7bbb      	ldrb	r3, [r7, #14]
 8014c78:	7dfa      	ldrb	r2, [r7, #23]
 8014c7a:	429a      	cmp	r2, r3
 8014c7c:	d903      	bls.n	8014c86 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x42>
 8014c7e:	f107 030e 	add.w	r3, r7, #14
 8014c82:	781b      	ldrb	r3, [r3, #0]
 8014c84:	e008      	b.n	8014c98 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x54>
 8014c86:	7bfb      	ldrb	r3, [r7, #15]
 8014c88:	7dfa      	ldrb	r2, [r7, #23]
 8014c8a:	429a      	cmp	r2, r3
 8014c8c:	d203      	bcs.n	8014c96 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x52>
 8014c8e:	f107 030f 	add.w	r3, r7, #15
 8014c92:	781b      	ldrb	r3, [r3, #0]
 8014c94:	e000      	b.n	8014c98 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x54>
 8014c96:	7dfb      	ldrb	r3, [r7, #23]
 8014c98:	75bb      	strb	r3, [r7, #22]
    output_data[i] = clamped;
 8014c9a:	69fb      	ldr	r3, [r7, #28]
 8014c9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014c9e:	4413      	add	r3, r2
 8014ca0:	7dba      	ldrb	r2, [r7, #22]
 8014ca2:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < flat_size; ++i) {
 8014ca4:	69fb      	ldr	r3, [r7, #28]
 8014ca6:	3301      	adds	r3, #1
 8014ca8:	61fb      	str	r3, [r7, #28]
 8014caa:	e7db      	b.n	8014c64 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x20>
}
 8014cac:	bf00      	nop
 8014cae:	3720      	adds	r7, #32
 8014cb0:	46bd      	mov	sp, r7
 8014cb2:	bd80      	pop	{r7, pc}

08014cb4 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>:
tRawType Dup(typename FixedPointRawTypeTraits<tRawType>::ScalarRawType x) {
 8014cb4:	b480      	push	{r7}
 8014cb6:	b083      	sub	sp, #12
 8014cb8:	af00      	add	r7, sp, #0
 8014cba:	6078      	str	r0, [r7, #4]
  return x;
 8014cbc:	687b      	ldr	r3, [r7, #4]
}
 8014cbe:	4618      	mov	r0, r3
 8014cc0:	370c      	adds	r7, #12
 8014cc2:	46bd      	mov	sp, r7
 8014cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cc8:	4770      	bx	lr

08014cca <_ZN8gemmlowp6BitAndIlEET_S1_S1_>:
tIntegerType BitAnd(tIntegerType a, tIntegerType b) {
 8014cca:	b480      	push	{r7}
 8014ccc:	b083      	sub	sp, #12
 8014cce:	af00      	add	r7, sp, #0
 8014cd0:	6078      	str	r0, [r7, #4]
 8014cd2:	6039      	str	r1, [r7, #0]
  return a & b;
 8014cd4:	687a      	ldr	r2, [r7, #4]
 8014cd6:	683b      	ldr	r3, [r7, #0]
 8014cd8:	4013      	ands	r3, r2
}
 8014cda:	4618      	mov	r0, r3
 8014cdc:	370c      	adds	r7, #12
 8014cde:	46bd      	mov	sp, r7
 8014ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ce4:	4770      	bx	lr

08014ce6 <_ZN8gemmlowp10ShiftRightIlEET_S1_i>:
tIntegerType ShiftRight(tIntegerType a, int offset) {
 8014ce6:	b480      	push	{r7}
 8014ce8:	b083      	sub	sp, #12
 8014cea:	af00      	add	r7, sp, #0
 8014cec:	6078      	str	r0, [r7, #4]
 8014cee:	6039      	str	r1, [r7, #0]
  return a >> offset;
 8014cf0:	687a      	ldr	r2, [r7, #4]
 8014cf2:	683b      	ldr	r3, [r7, #0]
 8014cf4:	fa42 f303 	asr.w	r3, r2, r3
}
 8014cf8:	4618      	mov	r0, r3
 8014cfa:	370c      	adds	r7, #12
 8014cfc:	46bd      	mov	sp, r7
 8014cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d02:	4770      	bx	lr

08014d04 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>:
tIntegerType MaskIfLessThan(tIntegerType a, tIntegerType b) {
 8014d04:	b580      	push	{r7, lr}
 8014d06:	b082      	sub	sp, #8
 8014d08:	af00      	add	r7, sp, #0
 8014d0a:	6078      	str	r0, [r7, #4]
 8014d0c:	6039      	str	r1, [r7, #0]
  return MaskIfNonZero<tIntegerType>(a < b);
 8014d0e:	687a      	ldr	r2, [r7, #4]
 8014d10:	683b      	ldr	r3, [r7, #0]
 8014d12:	429a      	cmp	r2, r3
 8014d14:	bfb4      	ite	lt
 8014d16:	2301      	movlt	r3, #1
 8014d18:	2300      	movge	r3, #0
 8014d1a:	b2db      	uxtb	r3, r3
 8014d1c:	4618      	mov	r0, r3
 8014d1e:	f000 f827 	bl	8014d70 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8014d22:	4603      	mov	r3, r0
}
 8014d24:	4618      	mov	r0, r3
 8014d26:	3708      	adds	r7, #8
 8014d28:	46bd      	mov	sp, r7
 8014d2a:	bd80      	pop	{r7, pc}

08014d2c <_ZN8gemmlowp3AddIlEET_S1_S1_>:
tIntegerType Add(tIntegerType a, tIntegerType b) {
 8014d2c:	b480      	push	{r7}
 8014d2e:	b083      	sub	sp, #12
 8014d30:	af00      	add	r7, sp, #0
 8014d32:	6078      	str	r0, [r7, #4]
 8014d34:	6039      	str	r1, [r7, #0]
  return a + b;
 8014d36:	687a      	ldr	r2, [r7, #4]
 8014d38:	683b      	ldr	r3, [r7, #0]
 8014d3a:	4413      	add	r3, r2
}
 8014d3c:	4618      	mov	r0, r3
 8014d3e:	370c      	adds	r7, #12
 8014d40:	46bd      	mov	sp, r7
 8014d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d46:	4770      	bx	lr

08014d48 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>:
tIntegerType MaskIfGreaterThan(tIntegerType a, tIntegerType b) {
 8014d48:	b580      	push	{r7, lr}
 8014d4a:	b082      	sub	sp, #8
 8014d4c:	af00      	add	r7, sp, #0
 8014d4e:	6078      	str	r0, [r7, #4]
 8014d50:	6039      	str	r1, [r7, #0]
  return MaskIfNonZero<tIntegerType>(a > b);
 8014d52:	687a      	ldr	r2, [r7, #4]
 8014d54:	683b      	ldr	r3, [r7, #0]
 8014d56:	429a      	cmp	r2, r3
 8014d58:	bfcc      	ite	gt
 8014d5a:	2301      	movgt	r3, #1
 8014d5c:	2300      	movle	r3, #0
 8014d5e:	b2db      	uxtb	r3, r3
 8014d60:	4618      	mov	r0, r3
 8014d62:	f000 f805 	bl	8014d70 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8014d66:	4603      	mov	r3, r0
}
 8014d68:	4618      	mov	r0, r3
 8014d6a:	3708      	adds	r7, #8
 8014d6c:	46bd      	mov	sp, r7
 8014d6e:	bd80      	pop	{r7, pc}

08014d70 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>:
tIntegerType MaskIfNonZero(tIntegerType a) {
 8014d70:	b580      	push	{r7, lr}
 8014d72:	b082      	sub	sp, #8
 8014d74:	af00      	add	r7, sp, #0
 8014d76:	6078      	str	r0, [r7, #4]
  return a ? BitNot(zero) : zero;
 8014d78:	687b      	ldr	r3, [r7, #4]
 8014d7a:	2b00      	cmp	r3, #0
 8014d7c:	d004      	beq.n	8014d88 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_+0x18>
 8014d7e:	2000      	movs	r0, #0
 8014d80:	f000 f807 	bl	8014d92 <_ZN8gemmlowp6BitNotIlEET_S1_>
 8014d84:	4603      	mov	r3, r0
 8014d86:	e000      	b.n	8014d8a <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_+0x1a>
 8014d88:	2300      	movs	r3, #0
}
 8014d8a:	4618      	mov	r0, r3
 8014d8c:	3708      	adds	r7, #8
 8014d8e:	46bd      	mov	sp, r7
 8014d90:	bd80      	pop	{r7, pc}

08014d92 <_ZN8gemmlowp6BitNotIlEET_S1_>:
tIntegerType BitNot(tIntegerType a) {
 8014d92:	b480      	push	{r7}
 8014d94:	b083      	sub	sp, #12
 8014d96:	af00      	add	r7, sp, #0
 8014d98:	6078      	str	r0, [r7, #4]
  return ~a;
 8014d9a:	687b      	ldr	r3, [r7, #4]
 8014d9c:	43db      	mvns	r3, r3
}
 8014d9e:	4618      	mov	r0, r3
 8014da0:	370c      	adds	r7, #12
 8014da2:	46bd      	mov	sp, r7
 8014da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014da8:	4770      	bx	lr

08014daa <_ZN6tflite9NumInputsEPK10TfLiteNode>:
inline int NumDimensions(const TfLiteEvalTensor* t) { return t->dims->size; }
inline int SizeOfDimension(const TfLiteEvalTensor* t, int dim) {
  return t->dims->data[dim];
}

inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
 8014daa:	b480      	push	{r7}
 8014dac:	b083      	sub	sp, #12
 8014dae:	af00      	add	r7, sp, #0
 8014db0:	6078      	str	r0, [r7, #4]
 8014db2:	687b      	ldr	r3, [r7, #4]
 8014db4:	681b      	ldr	r3, [r3, #0]
 8014db6:	681b      	ldr	r3, [r3, #0]
 8014db8:	4618      	mov	r0, r3
 8014dba:	370c      	adds	r7, #12
 8014dbc:	46bd      	mov	sp, r7
 8014dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dc2:	4770      	bx	lr

08014dc4 <_ZN6tflite10NumOutputsEPK10TfLiteNode>:
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
 8014dc4:	b480      	push	{r7}
 8014dc6:	b083      	sub	sp, #12
 8014dc8:	af00      	add	r7, sp, #0
 8014dca:	6078      	str	r0, [r7, #4]
 8014dcc:	687b      	ldr	r3, [r7, #4]
 8014dce:	685b      	ldr	r3, [r3, #4]
 8014dd0:	681b      	ldr	r3, [r3, #0]
 8014dd2:	4618      	mov	r0, r3
 8014dd4:	370c      	adds	r7, #12
 8014dd6:	46bd      	mov	sp, r7
 8014dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ddc:	4770      	bx	lr

08014dde <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 8014dde:	b580      	push	{r7, lr}
 8014de0:	b082      	sub	sp, #8
 8014de2:	af00      	add	r7, sp, #0
 8014de4:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 8014de6:	687b      	ldr	r3, [r7, #4]
 8014de8:	2b00      	cmp	r3, #0
 8014dea:	d101      	bne.n	8014df0 <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor+0x12>
 8014dec:	f005 fad2 	bl	801a394 <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 8014df0:	687b      	ldr	r3, [r7, #4]
 8014df2:	681b      	ldr	r3, [r3, #0]
}
 8014df4:	4618      	mov	r0, r3
 8014df6:	3708      	adds	r7, #8
 8014df8:	46bd      	mov	sp, r7
 8014dfa:	bd80      	pop	{r7, pc}

08014dfc <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>:
                       const RuntimeShape& shape2, int index2) {
 8014dfc:	b590      	push	{r4, r7, lr}
 8014dfe:	b087      	sub	sp, #28
 8014e00:	af00      	add	r7, sp, #0
 8014e02:	60f8      	str	r0, [r7, #12]
 8014e04:	60b9      	str	r1, [r7, #8]
 8014e06:	607a      	str	r2, [r7, #4]
 8014e08:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 8014e0a:	68b9      	ldr	r1, [r7, #8]
 8014e0c:	68f8      	ldr	r0, [r7, #12]
 8014e0e:	f7fe ff93 	bl	8013d38 <_ZNK6tflite12RuntimeShape4DimsEi>
 8014e12:	4604      	mov	r4, r0
 8014e14:	6839      	ldr	r1, [r7, #0]
 8014e16:	6878      	ldr	r0, [r7, #4]
 8014e18:	f7fe ff8e 	bl	8013d38 <_ZNK6tflite12RuntimeShape4DimsEi>
 8014e1c:	4603      	mov	r3, r0
 8014e1e:	429c      	cmp	r4, r3
 8014e20:	d001      	beq.n	8014e26 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i+0x2a>
 8014e22:	f005 fab7 	bl	801a394 <abort>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
 8014e26:	68b9      	ldr	r1, [r7, #8]
 8014e28:	68f8      	ldr	r0, [r7, #12]
 8014e2a:	f7fe ff85 	bl	8013d38 <_ZNK6tflite12RuntimeShape4DimsEi>
 8014e2e:	4603      	mov	r3, r0
 8014e30:	613b      	str	r3, [r7, #16]
 8014e32:	6839      	ldr	r1, [r7, #0]
 8014e34:	6878      	ldr	r0, [r7, #4]
 8014e36:	f7fe ff7f 	bl	8013d38 <_ZNK6tflite12RuntimeShape4DimsEi>
 8014e3a:	4603      	mov	r3, r0
 8014e3c:	617b      	str	r3, [r7, #20]
 8014e3e:	f107 0214 	add.w	r2, r7, #20
 8014e42:	f107 0310 	add.w	r3, r7, #16
 8014e46:	4611      	mov	r1, r2
 8014e48:	4618      	mov	r0, r3
 8014e4a:	f7fe fe09 	bl	8013a60 <_ZSt3minIlERKT_S2_S2_>
 8014e4e:	4603      	mov	r3, r0
 8014e50:	681b      	ldr	r3, [r3, #0]
}
 8014e52:	4618      	mov	r0, r3
 8014e54:	371c      	adds	r7, #28
 8014e56:	46bd      	mov	sp, r7
 8014e58:	bd90      	pop	{r4, r7, pc}

08014e5a <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 8014e5a:	b580      	push	{r7, lr}
 8014e5c:	b082      	sub	sp, #8
 8014e5e:	af00      	add	r7, sp, #0
 8014e60:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 8014e62:	687b      	ldr	r3, [r7, #4]
 8014e64:	2b00      	cmp	r3, #0
 8014e66:	d101      	bne.n	8014e6c <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor+0x12>
 8014e68:	f005 fa94 	bl	801a394 <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 8014e6c:	687b      	ldr	r3, [r7, #4]
 8014e6e:	681b      	ldr	r3, [r3, #0]
}
 8014e70:	4618      	mov	r0, r3
 8014e72:	3708      	adds	r7, #8
 8014e74:	46bd      	mov	sp, r7
 8014e76:	bd80      	pop	{r7, pc}

08014e78 <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_>:
inline std::int32_t RoundingHalfSum(std::int32_t a, std::int32_t b) {
 8014e78:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8014e7c:	b090      	sub	sp, #64	; 0x40
 8014e7e:	af00      	add	r7, sp, #0
 8014e80:	61f8      	str	r0, [r7, #28]
 8014e82:	61b9      	str	r1, [r7, #24]
  std::int64_t a64 = a;
 8014e84:	69fb      	ldr	r3, [r7, #28]
 8014e86:	17da      	asrs	r2, r3, #31
 8014e88:	613b      	str	r3, [r7, #16]
 8014e8a:	617a      	str	r2, [r7, #20]
 8014e8c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8014e90:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  std::int64_t b64 = b;
 8014e94:	69bb      	ldr	r3, [r7, #24]
 8014e96:	17da      	asrs	r2, r3, #31
 8014e98:	60bb      	str	r3, [r7, #8]
 8014e9a:	60fa      	str	r2, [r7, #12]
 8014e9c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8014ea0:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  std::int64_t sum = a64 + b64;
 8014ea4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8014ea8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8014eac:	1886      	adds	r6, r0, r2
 8014eae:	603e      	str	r6, [r7, #0]
 8014eb0:	eb41 0303 	adc.w	r3, r1, r3
 8014eb4:	607b      	str	r3, [r7, #4]
 8014eb6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014eba:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  std::int64_t sign = sum >= 0 ? 1 : -1;
 8014ebe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8014ec2:	2b00      	cmp	r3, #0
 8014ec4:	db04      	blt.n	8014ed0 <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_+0x58>
 8014ec6:	f04f 0201 	mov.w	r2, #1
 8014eca:	f04f 0300 	mov.w	r3, #0
 8014ece:	e003      	b.n	8014ed8 <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_+0x60>
 8014ed0:	f04f 32ff 	mov.w	r2, #4294967295
 8014ed4:	f04f 33ff 	mov.w	r3, #4294967295
 8014ed8:	e9c7 2308 	strd	r2, r3, [r7, #32]
  return static_cast<std::int32_t>((sum + sign) / 2);
 8014edc:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8014ee0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8014ee4:	eb10 0802 	adds.w	r8, r0, r2
 8014ee8:	eb41 0903 	adc.w	r9, r1, r3
 8014eec:	ea4f 73d9 	mov.w	r3, r9, lsr #31
 8014ef0:	2200      	movs	r2, #0
 8014ef2:	469a      	mov	sl, r3
 8014ef4:	4693      	mov	fp, r2
 8014ef6:	eb1a 0408 	adds.w	r4, sl, r8
 8014efa:	eb4b 0509 	adc.w	r5, fp, r9
 8014efe:	f04f 0200 	mov.w	r2, #0
 8014f02:	f04f 0300 	mov.w	r3, #0
 8014f06:	0862      	lsrs	r2, r4, #1
 8014f08:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
 8014f0c:	106b      	asrs	r3, r5, #1
 8014f0e:	4613      	mov	r3, r2
}
 8014f10:	4618      	mov	r0, r3
 8014f12:	3740      	adds	r7, #64	; 0x40
 8014f14:	46bd      	mov	sp, r7
 8014f16:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8014f1a:	4770      	bx	lr

08014f1c <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>:
    int32_t x, int32_t quantized_multiplier, int left_shift) {
 8014f1c:	b580      	push	{r7, lr}
 8014f1e:	b084      	sub	sp, #16
 8014f20:	af00      	add	r7, sp, #0
 8014f22:	60f8      	str	r0, [r7, #12]
 8014f24:	60b9      	str	r1, [r7, #8]
 8014f26:	607a      	str	r2, [r7, #4]
  return SaturatingRoundingDoublingHighMul(x * (1 << left_shift),
 8014f28:	68fa      	ldr	r2, [r7, #12]
 8014f2a:	687b      	ldr	r3, [r7, #4]
 8014f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8014f30:	68b9      	ldr	r1, [r7, #8]
 8014f32:	4618      	mov	r0, r3
 8014f34:	f7fe fe8a 	bl	8013c4c <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 8014f38:	4603      	mov	r3, r0
}
 8014f3a:	4618      	mov	r0, r3
 8014f3c:	3710      	adds	r7, #16
 8014f3e:	46bd      	mov	sp, r7
 8014f40:	bd80      	pop	{r7, pc}

08014f42 <_ZN6tflite13GetReciprocalEliPi>:
                                                     InputIntegerBits>(
      input_val);
}

inline int32_t GetReciprocal(int32_t x, int x_integer_digits,
                             int* num_bits_over_unit) {
 8014f42:	b580      	push	{r7, lr}
 8014f44:	b088      	sub	sp, #32
 8014f46:	af00      	add	r7, sp, #0
 8014f48:	60f8      	str	r0, [r7, #12]
 8014f4a:	60b9      	str	r1, [r7, #8]
 8014f4c:	607a      	str	r2, [r7, #4]
  int headroom_plus_one = CountLeadingZeros(static_cast<uint32_t>(x));
 8014f4e:	68fb      	ldr	r3, [r7, #12]
 8014f50:	4618      	mov	r0, r3
 8014f52:	f000 f821 	bl	8014f98 <_ZN6tflite17CountLeadingZerosImEEiT_>
 8014f56:	61f8      	str	r0, [r7, #28]
  // This is the number of bits to the left of the binary point above 1.0.
  // Consider x=1.25.  In that case shifted_scale=0.8 and
  // no later adjustment will be needed.
  *num_bits_over_unit = x_integer_digits - headroom_plus_one;
 8014f58:	68ba      	ldr	r2, [r7, #8]
 8014f5a:	69fb      	ldr	r3, [r7, #28]
 8014f5c:	1ad2      	subs	r2, r2, r3
 8014f5e:	687b      	ldr	r3, [r7, #4]
 8014f60:	601a      	str	r2, [r3, #0]
  const int32_t shifted_sum_minus_one =
      static_cast<int32_t>((static_cast<uint32_t>(x) << headroom_plus_one) -
 8014f62:	68fa      	ldr	r2, [r7, #12]
 8014f64:	69fb      	ldr	r3, [r7, #28]
 8014f66:	fa02 f303 	lsl.w	r3, r2, r3
 8014f6a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
  const int32_t shifted_sum_minus_one =
 8014f6e:	61bb      	str	r3, [r7, #24]
                           (static_cast<uint32_t>(1) << 31));

  gemmlowp::FixedPoint<int32_t, 0> shifted_scale =
      gemmlowp::one_over_one_plus_x_for_x_in_0_1(
          gemmlowp::FixedPoint<int32_t, 0>::FromRaw(shifted_sum_minus_one));
 8014f70:	69b8      	ldr	r0, [r7, #24]
 8014f72:	f000 f823 	bl	8014fbc <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 8014f76:	4603      	mov	r3, r0
 8014f78:	4618      	mov	r0, r3
 8014f7a:	f000 f831 	bl	8014fe0 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_>
 8014f7e:	4603      	mov	r3, r0
 8014f80:	617b      	str	r3, [r7, #20]
  return shifted_scale.raw();
 8014f82:	f107 0314 	add.w	r3, r7, #20
 8014f86:	4618      	mov	r0, r3
 8014f88:	f000 f88a 	bl	80150a0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8014f8c:	4603      	mov	r3, r0
 8014f8e:	681b      	ldr	r3, [r3, #0]
}
 8014f90:	4618      	mov	r0, r3
 8014f92:	3720      	adds	r7, #32
 8014f94:	46bd      	mov	sp, r7
 8014f96:	bd80      	pop	{r7, pc}

08014f98 <_ZN6tflite17CountLeadingZerosImEEiT_>:
int CountLeadingZeros(T integer_input) {
 8014f98:	b480      	push	{r7}
 8014f9a:	b083      	sub	sp, #12
 8014f9c:	af00      	add	r7, sp, #0
 8014f9e:	6078      	str	r0, [r7, #4]
  return integer_input ? __builtin_clz(integer_input)
 8014fa0:	687b      	ldr	r3, [r7, #4]
 8014fa2:	2b00      	cmp	r3, #0
 8014fa4:	d003      	beq.n	8014fae <_ZN6tflite17CountLeadingZerosImEEiT_+0x16>
 8014fa6:	687b      	ldr	r3, [r7, #4]
 8014fa8:	fab3 f383 	clz	r3, r3
                       : std::numeric_limits<T>::digits;
 8014fac:	e000      	b.n	8014fb0 <_ZN6tflite17CountLeadingZerosImEEiT_+0x18>
  return integer_input ? __builtin_clz(integer_input)
 8014fae:	2320      	movs	r3, #32
}
 8014fb0:	4618      	mov	r0, r3
 8014fb2:	370c      	adds	r7, #12
 8014fb4:	46bd      	mov	sp, r7
 8014fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fba:	4770      	bx	lr

08014fbc <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>:

  static const ScalarRawType RawMax() {
    return VectorFromScalar(ScalarRawMax());
  }

  static FixedPoint FromRaw(RawType x) {
 8014fbc:	b580      	push	{r7, lr}
 8014fbe:	b084      	sub	sp, #16
 8014fc0:	af00      	add	r7, sp, #0
 8014fc2:	6078      	str	r0, [r7, #4]
    FixedPoint retval;
    retval.raw() = x;
 8014fc4:	f107 030c 	add.w	r3, r7, #12
 8014fc8:	4618      	mov	r0, r3
 8014fca:	f000 f869 	bl	80150a0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8014fce:	4602      	mov	r2, r0
 8014fd0:	687b      	ldr	r3, [r7, #4]
 8014fd2:	6013      	str	r3, [r2, #0]
    return retval;
 8014fd4:	68fb      	ldr	r3, [r7, #12]
  }
 8014fd6:	4618      	mov	r0, r3
 8014fd8:	3710      	adds	r7, #16
 8014fda:	46bd      	mov	sp, r7
 8014fdc:	bd80      	pop	{r7, pc}
	...

08014fe0 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_>:

// Implementation of logistic function.

// Returns 1 / (1 + x) for x in (0, 1).
template <typename tRawType>
FixedPoint<tRawType, 0> one_over_one_plus_x_for_x_in_0_1(
 8014fe0:	b580      	push	{r7, lr}
 8014fe2:	b08a      	sub	sp, #40	; 0x28
 8014fe4:	af00      	add	r7, sp, #0
 8014fe6:	6078      	str	r0, [r7, #4]
    FixedPoint<tRawType, 0> a) {
  typedef FixedPoint<tRawType, 0> F0;
  typedef FixedPoint<tRawType, 2> F2;
  F0 half_denominator = RoundingHalfSum(a, F0::One());
 8014fe8:	f000 f879 	bl	80150de <_ZN8gemmlowp10FixedPointIlLi0EE3OneEv>
 8014fec:	4603      	mov	r3, r0
 8014fee:	4619      	mov	r1, r3
 8014ff0:	6878      	ldr	r0, [r7, #4]
 8014ff2:	f000 f87f 	bl	80150f4 <_ZN8gemmlowp15RoundingHalfSumIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8014ff6:	4603      	mov	r3, r0
 8014ff8:	623b      	str	r3, [r7, #32]
  // Newton-Raphson division
  // https://en.wikipedia.org/wiki/Division_algorithm#Newton.E2.80.93Raphson_division
  // Refer to that page for the logic behind the 48/17 and 32/17 constants.
  const F2 constant_48_over_17 =
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F2, 1515870810, 48.0 / 17.0);
 8014ffa:	f04f 305a 	mov.w	r0, #1515870810	; 0x5a5a5a5a
 8014ffe:	f000 f8ab 	bl	8015158 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi2EEEEENT_13ScalarRawTypeEl>
 8015002:	4603      	mov	r3, r0
 8015004:	4618      	mov	r0, r3
 8015006:	f000 f893 	bl	8015130 <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>
 801500a:	4603      	mov	r3, r0
 801500c:	61fb      	str	r3, [r7, #28]
  const F2 constant_neg_32_over_17 =
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F2, -1010580540, -32.0 / 17.0);
 801500e:	4823      	ldr	r0, [pc, #140]	; (801509c <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0xbc>)
 8015010:	f000 f8a2 	bl	8015158 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi2EEEEENT_13ScalarRawTypeEl>
 8015014:	4603      	mov	r3, r0
 8015016:	4618      	mov	r0, r3
 8015018:	f000 f88a 	bl	8015130 <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>
 801501c:	4603      	mov	r3, r0
 801501e:	61bb      	str	r3, [r7, #24]
  F2 x = constant_48_over_17 + half_denominator * constant_neg_32_over_17;
 8015020:	69b9      	ldr	r1, [r7, #24]
 8015022:	6a38      	ldr	r0, [r7, #32]
 8015024:	f000 f8a5 	bl	8015172 <_ZN8gemmlowpmlIlLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8015028:	4603      	mov	r3, r0
 801502a:	4619      	mov	r1, r3
 801502c:	69f8      	ldr	r0, [r7, #28]
 801502e:	f000 f8c2 	bl	80151b6 <_ZN8gemmlowpplIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8015032:	4603      	mov	r3, r0
 8015034:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < 3; i++) {
 8015036:	2300      	movs	r3, #0
 8015038:	627b      	str	r3, [r7, #36]	; 0x24
 801503a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801503c:	2b02      	cmp	r3, #2
 801503e:	dc21      	bgt.n	8015084 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0xa4>
    F2 half_denominator_times_x = half_denominator * x;
 8015040:	6979      	ldr	r1, [r7, #20]
 8015042:	6a38      	ldr	r0, [r7, #32]
 8015044:	f000 f895 	bl	8015172 <_ZN8gemmlowpmlIlLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8015048:	4603      	mov	r3, r0
 801504a:	613b      	str	r3, [r7, #16]
    F2 one_minus_half_denominator_times_x =
        F2::One() - half_denominator_times_x;
 801504c:	f000 f8d1 	bl	80151f2 <_ZN8gemmlowp10FixedPointIlLi2EE3OneEv>
 8015050:	4603      	mov	r3, r0
 8015052:	6939      	ldr	r1, [r7, #16]
 8015054:	4618      	mov	r0, r3
 8015056:	f000 f8d5 	bl	8015204 <_ZN8gemmlowpmiIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>
 801505a:	4603      	mov	r3, r0
 801505c:	60fb      	str	r3, [r7, #12]
    x = x + Rescale<2>(x * one_minus_half_denominator_times_x);
 801505e:	68f9      	ldr	r1, [r7, #12]
 8015060:	6978      	ldr	r0, [r7, #20]
 8015062:	f000 f8ed 	bl	8015240 <_ZN8gemmlowpmlIlLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8015066:	4603      	mov	r3, r0
 8015068:	4618      	mov	r0, r3
 801506a:	f000 f90b 	bl	8015284 <_ZN8gemmlowp7RescaleILi2ElLi4EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 801506e:	4603      	mov	r3, r0
 8015070:	4619      	mov	r1, r3
 8015072:	6978      	ldr	r0, [r7, #20]
 8015074:	f000 f89f 	bl	80151b6 <_ZN8gemmlowpplIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8015078:	4603      	mov	r3, r0
 801507a:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < 3; i++) {
 801507c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801507e:	3301      	adds	r3, #1
 8015080:	627b      	str	r3, [r7, #36]	; 0x24
 8015082:	e7da      	b.n	801503a <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x5a>
  }
  return Rescale<0>(ExactMulByPot<-1>(x));
 8015084:	6978      	ldr	r0, [r7, #20]
 8015086:	f000 f917 	bl	80152b8 <_ZN8gemmlowp13ExactMulByPotILin1ElLi2EEENS_10FixedPointIT0_XplT_T1_EEENS1_IS2_XT1_EEE>
 801508a:	4603      	mov	r3, r0
 801508c:	4618      	mov	r0, r3
 801508e:	f000 f929 	bl	80152e4 <_ZN8gemmlowp7RescaleILi0ElLi1EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 8015092:	4603      	mov	r3, r0
}
 8015094:	4618      	mov	r0, r3
 8015096:	3728      	adds	r7, #40	; 0x28
 8015098:	46bd      	mov	sp, r7
 801509a:	bd80      	pop	{r7, pc}
 801509c:	c3c3c3c4 	.word	0xc3c3c3c4

080150a0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>:
  RawType& raw() { return i_; }
 80150a0:	b480      	push	{r7}
 80150a2:	b083      	sub	sp, #12
 80150a4:	af00      	add	r7, sp, #0
 80150a6:	6078      	str	r0, [r7, #4]
 80150a8:	687b      	ldr	r3, [r7, #4]
 80150aa:	4618      	mov	r0, r3
 80150ac:	370c      	adds	r7, #12
 80150ae:	46bd      	mov	sp, r7
 80150b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150b4:	4770      	bx	lr

080150b6 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 80150b6:	b590      	push	{r4, r7, lr}
 80150b8:	b085      	sub	sp, #20
 80150ba:	af00      	add	r7, sp, #0
 80150bc:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 80150be:	f107 030c 	add.w	r3, r7, #12
 80150c2:	4618      	mov	r0, r3
 80150c4:	f7ff ffec 	bl	80150a0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 80150c8:	4604      	mov	r4, r0
 80150ca:	6878      	ldr	r0, [r7, #4]
 80150cc:	f7ff fdf2 	bl	8014cb4 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 80150d0:	4603      	mov	r3, r0
 80150d2:	6023      	str	r3, [r4, #0]
    return retval;
 80150d4:	68fb      	ldr	r3, [r7, #12]
  }
 80150d6:	4618      	mov	r0, r3
 80150d8:	3714      	adds	r7, #20
 80150da:	46bd      	mov	sp, r7
 80150dc:	bd90      	pop	{r4, r7, pc}

080150de <_ZN8gemmlowp10FixedPointIlLi0EE3OneEv>:
  static FixedPoint One() {
 80150de:	b580      	push	{r7, lr}
 80150e0:	af00      	add	r7, sp, #0
    return FromScalarRaw(
 80150e2:	f000 f927 	bl	8015334 <_ZN8gemmlowp10FixedPointIlLi0EE12ScalarRawMaxEv>
 80150e6:	4603      	mov	r3, r0
 80150e8:	4618      	mov	r0, r3
 80150ea:	f7ff ffe4 	bl	80150b6 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 80150ee:	4603      	mov	r3, r0
  }
 80150f0:	4618      	mov	r0, r3
 80150f2:	bd80      	pop	{r7, pc}

080150f4 <_ZN8gemmlowp15RoundingHalfSumIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(RoundingHalfSum, RoundingHalfSum)
 80150f4:	b590      	push	{r4, r7, lr}
 80150f6:	b083      	sub	sp, #12
 80150f8:	af00      	add	r7, sp, #0
 80150fa:	6078      	str	r0, [r7, #4]
 80150fc:	6039      	str	r1, [r7, #0]
 80150fe:	1d3b      	adds	r3, r7, #4
 8015100:	4618      	mov	r0, r3
 8015102:	f7ff ffcd 	bl	80150a0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8015106:	4603      	mov	r3, r0
 8015108:	681c      	ldr	r4, [r3, #0]
 801510a:	463b      	mov	r3, r7
 801510c:	4618      	mov	r0, r3
 801510e:	f7ff ffc7 	bl	80150a0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8015112:	4603      	mov	r3, r0
 8015114:	681b      	ldr	r3, [r3, #0]
 8015116:	4619      	mov	r1, r3
 8015118:	4620      	mov	r0, r4
 801511a:	f7ff fead 	bl	8014e78 <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_>
 801511e:	4603      	mov	r3, r0
 8015120:	4618      	mov	r0, r3
 8015122:	f7ff ff4b 	bl	8014fbc <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 8015126:	4603      	mov	r3, r0
 8015128:	4618      	mov	r0, r3
 801512a:	370c      	adds	r7, #12
 801512c:	46bd      	mov	sp, r7
 801512e:	bd90      	pop	{r4, r7, pc}

08015130 <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 8015130:	b590      	push	{r4, r7, lr}
 8015132:	b085      	sub	sp, #20
 8015134:	af00      	add	r7, sp, #0
 8015136:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 8015138:	f107 030c 	add.w	r3, r7, #12
 801513c:	4618      	mov	r0, r3
 801513e:	f000 f900 	bl	8015342 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 8015142:	4604      	mov	r4, r0
 8015144:	6878      	ldr	r0, [r7, #4]
 8015146:	f7ff fdb5 	bl	8014cb4 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801514a:	4603      	mov	r3, r0
 801514c:	6023      	str	r3, [r4, #0]
    return retval;
 801514e:	68fb      	ldr	r3, [r7, #12]
  }
 8015150:	4618      	mov	r0, r3
 8015152:	3714      	adds	r7, #20
 8015154:	46bd      	mov	sp, r7
 8015156:	bd90      	pop	{r4, r7, pc}

08015158 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi2EEEEENT_13ScalarRawTypeEl>:
inline typename FixedPointType::ScalarRawType RescaleConstantInitializer(
 8015158:	b580      	push	{r7, lr}
 801515a:	b082      	sub	sp, #8
 801515c:	af00      	add	r7, sp, #0
 801515e:	6078      	str	r0, [r7, #4]
      RoundingDivideByPOT<std::int32_t>(int32_value, 32 - ScalarTypeBits));
 8015160:	2100      	movs	r1, #0
 8015162:	6878      	ldr	r0, [r7, #4]
 8015164:	f7ff f9e2 	bl	801452c <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 8015168:	4603      	mov	r3, r0
}
 801516a:	4618      	mov	r0, r3
 801516c:	3708      	adds	r7, #8
 801516e:	46bd      	mov	sp, r7
 8015170:	bd80      	pop	{r7, pc}

08015172 <_ZN8gemmlowpmlIlLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
 8015172:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015174:	b085      	sub	sp, #20
 8015176:	af00      	add	r7, sp, #0
 8015178:	6078      	str	r0, [r7, #4]
 801517a:	6039      	str	r1, [r7, #0]
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
 801517c:	1d3b      	adds	r3, r7, #4
 801517e:	4618      	mov	r0, r3
 8015180:	f7ff ff8e 	bl	80150a0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8015184:	4603      	mov	r3, r0
 8015186:	681d      	ldr	r5, [r3, #0]
 8015188:	463b      	mov	r3, r7
 801518a:	4618      	mov	r0, r3
 801518c:	f000 f8d9 	bl	8015342 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 8015190:	4603      	mov	r3, r0
 8015192:	681e      	ldr	r6, [r3, #0]
 8015194:	f107 030c 	add.w	r3, r7, #12
 8015198:	4618      	mov	r0, r3
 801519a:	f000 f8d2 	bl	8015342 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 801519e:	4604      	mov	r4, r0
 80151a0:	4631      	mov	r1, r6
 80151a2:	4628      	mov	r0, r5
 80151a4:	f7fe fd52 	bl	8013c4c <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 80151a8:	4603      	mov	r3, r0
 80151aa:	6023      	str	r3, [r4, #0]
  return c;
 80151ac:	68fb      	ldr	r3, [r7, #12]
}
 80151ae:	4618      	mov	r0, r3
 80151b0:	3714      	adds	r7, #20
 80151b2:	46bd      	mov	sp, r7
 80151b4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080151b6 <_ZN8gemmlowpplIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator+, Add)
 80151b6:	b590      	push	{r4, r7, lr}
 80151b8:	b083      	sub	sp, #12
 80151ba:	af00      	add	r7, sp, #0
 80151bc:	6078      	str	r0, [r7, #4]
 80151be:	6039      	str	r1, [r7, #0]
 80151c0:	1d3b      	adds	r3, r7, #4
 80151c2:	4618      	mov	r0, r3
 80151c4:	f000 f8bd 	bl	8015342 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 80151c8:	4603      	mov	r3, r0
 80151ca:	681c      	ldr	r4, [r3, #0]
 80151cc:	463b      	mov	r3, r7
 80151ce:	4618      	mov	r0, r3
 80151d0:	f000 f8b7 	bl	8015342 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 80151d4:	4603      	mov	r3, r0
 80151d6:	681b      	ldr	r3, [r3, #0]
 80151d8:	4619      	mov	r1, r3
 80151da:	4620      	mov	r0, r4
 80151dc:	f7ff fda6 	bl	8014d2c <_ZN8gemmlowp3AddIlEET_S1_S1_>
 80151e0:	4603      	mov	r3, r0
 80151e2:	4618      	mov	r0, r3
 80151e4:	f000 f8b8 	bl	8015358 <_ZN8gemmlowp10FixedPointIlLi2EE7FromRawEl>
 80151e8:	4603      	mov	r3, r0
 80151ea:	4618      	mov	r0, r3
 80151ec:	370c      	adds	r7, #12
 80151ee:	46bd      	mov	sp, r7
 80151f0:	bd90      	pop	{r4, r7, pc}

080151f2 <_ZN8gemmlowp10FixedPointIlLi2EE3OneEv>:
  static FixedPoint One() {
 80151f2:	b580      	push	{r7, lr}
 80151f4:	af00      	add	r7, sp, #0
    return FromScalarRaw(
 80151f6:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 80151fa:	f7ff ff99 	bl	8015130 <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>
 80151fe:	4603      	mov	r3, r0
  }
 8015200:	4618      	mov	r0, r3
 8015202:	bd80      	pop	{r7, pc}

08015204 <_ZN8gemmlowpmiIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator-, Sub)
 8015204:	b590      	push	{r4, r7, lr}
 8015206:	b083      	sub	sp, #12
 8015208:	af00      	add	r7, sp, #0
 801520a:	6078      	str	r0, [r7, #4]
 801520c:	6039      	str	r1, [r7, #0]
 801520e:	1d3b      	adds	r3, r7, #4
 8015210:	4618      	mov	r0, r3
 8015212:	f000 f896 	bl	8015342 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 8015216:	4603      	mov	r3, r0
 8015218:	681c      	ldr	r4, [r3, #0]
 801521a:	463b      	mov	r3, r7
 801521c:	4618      	mov	r0, r3
 801521e:	f000 f890 	bl	8015342 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 8015222:	4603      	mov	r3, r0
 8015224:	681b      	ldr	r3, [r3, #0]
 8015226:	4619      	mov	r1, r3
 8015228:	4620      	mov	r0, r4
 801522a:	f000 f875 	bl	8015318 <_ZN8gemmlowp3SubIlEET_S1_S1_>
 801522e:	4603      	mov	r3, r0
 8015230:	4618      	mov	r0, r3
 8015232:	f000 f891 	bl	8015358 <_ZN8gemmlowp10FixedPointIlLi2EE7FromRawEl>
 8015236:	4603      	mov	r3, r0
 8015238:	4618      	mov	r0, r3
 801523a:	370c      	adds	r7, #12
 801523c:	46bd      	mov	sp, r7
 801523e:	bd90      	pop	{r4, r7, pc}

08015240 <_ZN8gemmlowpmlIlLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
 8015240:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015242:	b085      	sub	sp, #20
 8015244:	af00      	add	r7, sp, #0
 8015246:	6078      	str	r0, [r7, #4]
 8015248:	6039      	str	r1, [r7, #0]
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
 801524a:	1d3b      	adds	r3, r7, #4
 801524c:	4618      	mov	r0, r3
 801524e:	f000 f878 	bl	8015342 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 8015252:	4603      	mov	r3, r0
 8015254:	681d      	ldr	r5, [r3, #0]
 8015256:	463b      	mov	r3, r7
 8015258:	4618      	mov	r0, r3
 801525a:	f000 f872 	bl	8015342 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 801525e:	4603      	mov	r3, r0
 8015260:	681e      	ldr	r6, [r3, #0]
 8015262:	f107 030c 	add.w	r3, r7, #12
 8015266:	4618      	mov	r0, r3
 8015268:	f000 f887 	bl	801537a <_ZN8gemmlowp10FixedPointIlLi4EE3rawEv>
 801526c:	4604      	mov	r4, r0
 801526e:	4631      	mov	r1, r6
 8015270:	4628      	mov	r0, r5
 8015272:	f7fe fceb 	bl	8013c4c <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 8015276:	4603      	mov	r3, r0
 8015278:	6023      	str	r3, [r4, #0]
  return c;
 801527a:	68fb      	ldr	r3, [r7, #12]
}
 801527c:	4618      	mov	r0, r3
 801527e:	3714      	adds	r7, #20
 8015280:	46bd      	mov	sp, r7
 8015282:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015284 <_ZN8gemmlowp7RescaleILi2ElLi4EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 8015284:	b5b0      	push	{r4, r5, r7, lr}
 8015286:	b084      	sub	sp, #16
 8015288:	af00      	add	r7, sp, #0
 801528a:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 801528c:	1d3b      	adds	r3, r7, #4
 801528e:	4618      	mov	r0, r3
 8015290:	f000 f873 	bl	801537a <_ZN8gemmlowp10FixedPointIlLi4EE3rawEv>
 8015294:	4603      	mov	r3, r0
 8015296:	681d      	ldr	r5, [r3, #0]
 8015298:	f107 030c 	add.w	r3, r7, #12
 801529c:	4618      	mov	r0, r3
 801529e:	f000 f850 	bl	8015342 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 80152a2:	4604      	mov	r4, r0
 80152a4:	4628      	mov	r0, r5
 80152a6:	f000 f873 	bl	8015390 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi2ElEET0_S1_>
 80152aa:	4603      	mov	r3, r0
 80152ac:	6023      	str	r3, [r4, #0]
  return result;
 80152ae:	68fb      	ldr	r3, [r7, #12]
}
 80152b0:	4618      	mov	r0, r3
 80152b2:	3710      	adds	r7, #16
 80152b4:	46bd      	mov	sp, r7
 80152b6:	bdb0      	pop	{r4, r5, r7, pc}

080152b8 <_ZN8gemmlowp13ExactMulByPotILin1ElLi2EEENS_10FixedPointIT0_XplT_T1_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tExponent + tIntegerBits> ExactMulByPot(
 80152b8:	b590      	push	{r4, r7, lr}
 80152ba:	b085      	sub	sp, #20
 80152bc:	af00      	add	r7, sp, #0
 80152be:	6078      	str	r0, [r7, #4]
  c.raw() = a.raw();
 80152c0:	1d3b      	adds	r3, r7, #4
 80152c2:	4618      	mov	r0, r3
 80152c4:	f000 f83d 	bl	8015342 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 80152c8:	4604      	mov	r4, r0
 80152ca:	f107 030c 	add.w	r3, r7, #12
 80152ce:	4618      	mov	r0, r3
 80152d0:	f000 f86a 	bl	80153a8 <_ZN8gemmlowp10FixedPointIlLi1EE3rawEv>
 80152d4:	4602      	mov	r2, r0
 80152d6:	6823      	ldr	r3, [r4, #0]
 80152d8:	6013      	str	r3, [r2, #0]
  return c;
 80152da:	68fb      	ldr	r3, [r7, #12]
}
 80152dc:	4618      	mov	r0, r3
 80152de:	3714      	adds	r7, #20
 80152e0:	46bd      	mov	sp, r7
 80152e2:	bd90      	pop	{r4, r7, pc}

080152e4 <_ZN8gemmlowp7RescaleILi0ElLi1EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 80152e4:	b5b0      	push	{r4, r5, r7, lr}
 80152e6:	b084      	sub	sp, #16
 80152e8:	af00      	add	r7, sp, #0
 80152ea:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 80152ec:	1d3b      	adds	r3, r7, #4
 80152ee:	4618      	mov	r0, r3
 80152f0:	f000 f85a 	bl	80153a8 <_ZN8gemmlowp10FixedPointIlLi1EE3rawEv>
 80152f4:	4603      	mov	r3, r0
 80152f6:	681d      	ldr	r5, [r3, #0]
 80152f8:	f107 030c 	add.w	r3, r7, #12
 80152fc:	4618      	mov	r0, r3
 80152fe:	f7ff fecf 	bl	80150a0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8015302:	4604      	mov	r4, r0
 8015304:	4628      	mov	r0, r5
 8015306:	f000 f85a 	bl	80153be <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi1ElEET0_S1_>
 801530a:	4603      	mov	r3, r0
 801530c:	6023      	str	r3, [r4, #0]
  return result;
 801530e:	68fb      	ldr	r3, [r7, #12]
}
 8015310:	4618      	mov	r0, r3
 8015312:	3710      	adds	r7, #16
 8015314:	46bd      	mov	sp, r7
 8015316:	bdb0      	pop	{r4, r5, r7, pc}

08015318 <_ZN8gemmlowp3SubIlEET_S1_S1_>:
tIntegerType Sub(tIntegerType a, tIntegerType b) {
 8015318:	b480      	push	{r7}
 801531a:	b083      	sub	sp, #12
 801531c:	af00      	add	r7, sp, #0
 801531e:	6078      	str	r0, [r7, #4]
 8015320:	6039      	str	r1, [r7, #0]
  return a - b;
 8015322:	687a      	ldr	r2, [r7, #4]
 8015324:	683b      	ldr	r3, [r7, #0]
 8015326:	1ad3      	subs	r3, r2, r3
}
 8015328:	4618      	mov	r0, r3
 801532a:	370c      	adds	r7, #12
 801532c:	46bd      	mov	sp, r7
 801532e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015332:	4770      	bx	lr

08015334 <_ZN8gemmlowp10FixedPointIlLi0EE12ScalarRawMaxEv>:
  static const ScalarRawType ScalarRawMax() {
 8015334:	b580      	push	{r7, lr}
 8015336:	af00      	add	r7, sp, #0
    return std::numeric_limits<ScalarRawType>::max();
 8015338:	f7fd fefc 	bl	8013134 <_ZNSt14numeric_limitsIlE3maxEv>
 801533c:	4603      	mov	r3, r0
  }
 801533e:	4618      	mov	r0, r3
 8015340:	bd80      	pop	{r7, pc}

08015342 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>:
  RawType& raw() { return i_; }
 8015342:	b480      	push	{r7}
 8015344:	b083      	sub	sp, #12
 8015346:	af00      	add	r7, sp, #0
 8015348:	6078      	str	r0, [r7, #4]
 801534a:	687b      	ldr	r3, [r7, #4]
 801534c:	4618      	mov	r0, r3
 801534e:	370c      	adds	r7, #12
 8015350:	46bd      	mov	sp, r7
 8015352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015356:	4770      	bx	lr

08015358 <_ZN8gemmlowp10FixedPointIlLi2EE7FromRawEl>:
  static FixedPoint FromRaw(RawType x) {
 8015358:	b580      	push	{r7, lr}
 801535a:	b084      	sub	sp, #16
 801535c:	af00      	add	r7, sp, #0
 801535e:	6078      	str	r0, [r7, #4]
    retval.raw() = x;
 8015360:	f107 030c 	add.w	r3, r7, #12
 8015364:	4618      	mov	r0, r3
 8015366:	f7ff ffec 	bl	8015342 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 801536a:	4602      	mov	r2, r0
 801536c:	687b      	ldr	r3, [r7, #4]
 801536e:	6013      	str	r3, [r2, #0]
    return retval;
 8015370:	68fb      	ldr	r3, [r7, #12]
  }
 8015372:	4618      	mov	r0, r3
 8015374:	3710      	adds	r7, #16
 8015376:	46bd      	mov	sp, r7
 8015378:	bd80      	pop	{r7, pc}

0801537a <_ZN8gemmlowp10FixedPointIlLi4EE3rawEv>:
  RawType& raw() { return i_; }
 801537a:	b480      	push	{r7}
 801537c:	b083      	sub	sp, #12
 801537e:	af00      	add	r7, sp, #0
 8015380:	6078      	str	r0, [r7, #4]
 8015382:	687b      	ldr	r3, [r7, #4]
 8015384:	4618      	mov	r0, r3
 8015386:	370c      	adds	r7, #12
 8015388:	46bd      	mov	sp, r7
 801538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801538e:	4770      	bx	lr

08015390 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi2ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 8015390:	b580      	push	{r7, lr}
 8015392:	b082      	sub	sp, #8
 8015394:	af00      	add	r7, sp, #0
 8015396:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 8015398:	6878      	ldr	r0, [r7, #4]
 801539a:	f000 f81d 	bl	80153d8 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2ElLi1EE4evalEl>
 801539e:	4603      	mov	r3, r0
}
 80153a0:	4618      	mov	r0, r3
 80153a2:	3708      	adds	r7, #8
 80153a4:	46bd      	mov	sp, r7
 80153a6:	bd80      	pop	{r7, pc}

080153a8 <_ZN8gemmlowp10FixedPointIlLi1EE3rawEv>:
  RawType& raw() { return i_; }
 80153a8:	b480      	push	{r7}
 80153aa:	b083      	sub	sp, #12
 80153ac:	af00      	add	r7, sp, #0
 80153ae:	6078      	str	r0, [r7, #4]
 80153b0:	687b      	ldr	r3, [r7, #4]
 80153b2:	4618      	mov	r0, r3
 80153b4:	370c      	adds	r7, #12
 80153b6:	46bd      	mov	sp, r7
 80153b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153bc:	4770      	bx	lr

080153be <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi1ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 80153be:	b580      	push	{r7, lr}
 80153c0:	b082      	sub	sp, #8
 80153c2:	af00      	add	r7, sp, #0
 80153c4:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 80153c6:	6878      	ldr	r0, [r7, #4]
 80153c8:	f000 f848 	bl	801545c <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi1ElLi1EE4evalEl>
 80153cc:	4603      	mov	r3, r0
}
 80153ce:	4618      	mov	r0, r3
 80153d0:	3708      	adds	r7, #8
 80153d2:	46bd      	mov	sp, r7
 80153d4:	bd80      	pop	{r7, pc}
	...

080153d8 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2ElLi1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 80153d8:	b580      	push	{r7, lr}
 80153da:	b08a      	sub	sp, #40	; 0x28
 80153dc:	af00      	add	r7, sp, #0
 80153de:	6078      	str	r0, [r7, #4]
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::min());
 80153e0:	f7fe fc1f 	bl	8013c22 <_ZNSt14numeric_limitsIlE3minEv>
 80153e4:	4603      	mov	r3, r0
 80153e6:	4618      	mov	r0, r3
 80153e8:	f7ff fc64 	bl	8014cb4 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 80153ec:	6278      	str	r0, [r7, #36]	; 0x24
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::max());
 80153ee:	f7fd fea1 	bl	8013134 <_ZNSt14numeric_limitsIlE3maxEv>
 80153f2:	4603      	mov	r3, r0
 80153f4:	4618      	mov	r0, r3
 80153f6:	f7ff fc5d 	bl	8014cb4 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 80153fa:	6238      	str	r0, [r7, #32]
    const int ScalarIntegerTypeBits = 8 * sizeof(ScalarIntegerType);
 80153fc:	2320      	movs	r3, #32
 80153fe:	61fb      	str	r3, [r7, #28]
    const std::int32_t threshold =
 8015400:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8015404:	61bb      	str	r3, [r7, #24]
        MaskIfGreaterThan(x, Dup<IntegerType>(threshold));
 8015406:	f06f 4060 	mvn.w	r0, #3758096384	; 0xe0000000
 801540a:	f7ff fc53 	bl	8014cb4 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801540e:	4603      	mov	r3, r0
 8015410:	4619      	mov	r1, r3
 8015412:	6878      	ldr	r0, [r7, #4]
 8015414:	f7ff fc98 	bl	8014d48 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 8015418:	6178      	str	r0, [r7, #20]
        MaskIfLessThan(x, Dup<IntegerType>(-threshold));
 801541a:	480f      	ldr	r0, [pc, #60]	; (8015458 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2ElLi1EE4evalEl+0x80>)
 801541c:	f7ff fc4a 	bl	8014cb4 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8015420:	4603      	mov	r3, r0
 8015422:	4619      	mov	r1, r3
 8015424:	6878      	ldr	r0, [r7, #4]
 8015426:	f7ff fc6d 	bl	8014d04 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 801542a:	6138      	str	r0, [r7, #16]
    IntegerType result = ShiftLeft(x, Exponent);
 801542c:	2102      	movs	r1, #2
 801542e:	6878      	ldr	r0, [r7, #4]
 8015430:	f000 f856 	bl	80154e0 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i>
 8015434:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(positive_mask, max, result);
 8015436:	68fa      	ldr	r2, [r7, #12]
 8015438:	6a39      	ldr	r1, [r7, #32]
 801543a:	6978      	ldr	r0, [r7, #20]
 801543c:	f000 f894 	bl	8015568 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 8015440:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(negative_mask, min, result);
 8015442:	68fa      	ldr	r2, [r7, #12]
 8015444:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015446:	6938      	ldr	r0, [r7, #16]
 8015448:	f000 f88e 	bl	8015568 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 801544c:	60f8      	str	r0, [r7, #12]
    return result;
 801544e:	68fb      	ldr	r3, [r7, #12]
  }
 8015450:	4618      	mov	r0, r3
 8015452:	3728      	adds	r7, #40	; 0x28
 8015454:	46bd      	mov	sp, r7
 8015456:	bd80      	pop	{r7, pc}
 8015458:	e0000001 	.word	0xe0000001

0801545c <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi1ElLi1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 801545c:	b580      	push	{r7, lr}
 801545e:	b08a      	sub	sp, #40	; 0x28
 8015460:	af00      	add	r7, sp, #0
 8015462:	6078      	str	r0, [r7, #4]
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::min());
 8015464:	f7fe fbdd 	bl	8013c22 <_ZNSt14numeric_limitsIlE3minEv>
 8015468:	4603      	mov	r3, r0
 801546a:	4618      	mov	r0, r3
 801546c:	f7ff fc22 	bl	8014cb4 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8015470:	6278      	str	r0, [r7, #36]	; 0x24
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::max());
 8015472:	f7fd fe5f 	bl	8013134 <_ZNSt14numeric_limitsIlE3maxEv>
 8015476:	4603      	mov	r3, r0
 8015478:	4618      	mov	r0, r3
 801547a:	f7ff fc1b 	bl	8014cb4 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801547e:	6238      	str	r0, [r7, #32]
    const int ScalarIntegerTypeBits = 8 * sizeof(ScalarIntegerType);
 8015480:	2320      	movs	r3, #32
 8015482:	61fb      	str	r3, [r7, #28]
    const std::int32_t threshold =
 8015484:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8015488:	61bb      	str	r3, [r7, #24]
        MaskIfGreaterThan(x, Dup<IntegerType>(threshold));
 801548a:	f06f 4040 	mvn.w	r0, #3221225472	; 0xc0000000
 801548e:	f7ff fc11 	bl	8014cb4 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8015492:	4603      	mov	r3, r0
 8015494:	4619      	mov	r1, r3
 8015496:	6878      	ldr	r0, [r7, #4]
 8015498:	f7ff fc56 	bl	8014d48 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 801549c:	6178      	str	r0, [r7, #20]
        MaskIfLessThan(x, Dup<IntegerType>(-threshold));
 801549e:	480f      	ldr	r0, [pc, #60]	; (80154dc <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi1ElLi1EE4evalEl+0x80>)
 80154a0:	f7ff fc08 	bl	8014cb4 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 80154a4:	4603      	mov	r3, r0
 80154a6:	4619      	mov	r1, r3
 80154a8:	6878      	ldr	r0, [r7, #4]
 80154aa:	f7ff fc2b 	bl	8014d04 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 80154ae:	6138      	str	r0, [r7, #16]
    IntegerType result = ShiftLeft(x, Exponent);
 80154b0:	2101      	movs	r1, #1
 80154b2:	6878      	ldr	r0, [r7, #4]
 80154b4:	f000 f814 	bl	80154e0 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i>
 80154b8:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(positive_mask, max, result);
 80154ba:	68fa      	ldr	r2, [r7, #12]
 80154bc:	6a39      	ldr	r1, [r7, #32]
 80154be:	6978      	ldr	r0, [r7, #20]
 80154c0:	f000 f852 	bl	8015568 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 80154c4:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(negative_mask, min, result);
 80154c6:	68fa      	ldr	r2, [r7, #12]
 80154c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80154ca:	6938      	ldr	r0, [r7, #16]
 80154cc:	f000 f84c 	bl	8015568 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 80154d0:	60f8      	str	r0, [r7, #12]
    return result;
 80154d2:	68fb      	ldr	r3, [r7, #12]
  }
 80154d4:	4618      	mov	r0, r3
 80154d6:	3728      	adds	r7, #40	; 0x28
 80154d8:	46bd      	mov	sp, r7
 80154da:	bd80      	pop	{r7, pc}
 80154dc:	c0000001 	.word	0xc0000001

080154e0 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i>:
tIntegerType ShiftLeft(tIntegerType a, int offset) {
 80154e0:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 80154e4:	b089      	sub	sp, #36	; 0x24
 80154e6:	af00      	add	r7, sp, #0
 80154e8:	6078      	str	r0, [r7, #4]
 80154ea:	6039      	str	r1, [r7, #0]
  const std::int64_t wide_a = static_cast<std::int64_t>(a);
 80154ec:	6879      	ldr	r1, [r7, #4]
 80154ee:	17c8      	asrs	r0, r1, #31
 80154f0:	4688      	mov	r8, r1
 80154f2:	4681      	mov	r9, r0
 80154f4:	e9c7 8906 	strd	r8, r9, [r7, #24]
  const std::int64_t wide_shifted = wide_a * (1 << offset);
 80154f8:	2001      	movs	r0, #1
 80154fa:	6839      	ldr	r1, [r7, #0]
 80154fc:	fa00 f101 	lsl.w	r1, r0, r1
 8015500:	17c8      	asrs	r0, r1, #31
 8015502:	460c      	mov	r4, r1
 8015504:	4605      	mov	r5, r0
 8015506:	69f9      	ldr	r1, [r7, #28]
 8015508:	fb04 f001 	mul.w	r0, r4, r1
 801550c:	69b9      	ldr	r1, [r7, #24]
 801550e:	fb05 f101 	mul.w	r1, r5, r1
 8015512:	4401      	add	r1, r0
 8015514:	69b8      	ldr	r0, [r7, #24]
 8015516:	fba0 2304 	umull	r2, r3, r0, r4
 801551a:	4419      	add	r1, r3
 801551c:	460b      	mov	r3, r1
 801551e:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8015522:	e9c7 2304 	strd	r2, r3, [r7, #16]
  const auto min = std::numeric_limits<tIntegerType>::min();
 8015526:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801552a:	60fb      	str	r3, [r7, #12]
  const auto max = std::numeric_limits<tIntegerType>::max();
 801552c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8015530:	60bb      	str	r3, [r7, #8]
             ? min
 8015532:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8015536:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 801553a:	f173 33ff 	sbcs.w	r3, r3, #4294967295
 801553e:	db0b      	blt.n	8015558 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i+0x78>
             : wide_shifted > max ? max
 8015540:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8015544:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8015548:	f173 0300 	sbcs.w	r3, r3, #0
 801554c:	da01      	bge.n	8015552 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i+0x72>
 801554e:	693b      	ldr	r3, [r7, #16]
                                  : static_cast<tIntegerType>(wide_shifted);
 8015550:	e004      	b.n	801555c <_ZN8gemmlowp9ShiftLeftIlEET_S1_i+0x7c>
             : wide_shifted > max ? max
 8015552:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
                                  : static_cast<tIntegerType>(wide_shifted);
 8015556:	e001      	b.n	801555c <_ZN8gemmlowp9ShiftLeftIlEET_S1_i+0x7c>
             ? min
 8015558:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 801555c:	4618      	mov	r0, r3
 801555e:	3724      	adds	r7, #36	; 0x24
 8015560:	46bd      	mov	sp, r7
 8015562:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 8015566:	4770      	bx	lr

08015568 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>:
tIntegerType SelectUsingMask(tIntegerType if_mask, tIntegerType then_val,
 8015568:	b590      	push	{r4, r7, lr}
 801556a:	b085      	sub	sp, #20
 801556c:	af00      	add	r7, sp, #0
 801556e:	60f8      	str	r0, [r7, #12]
 8015570:	60b9      	str	r1, [r7, #8]
 8015572:	607a      	str	r2, [r7, #4]
  return BitXor(BitAnd(if_mask, then_val), BitAnd(BitNot(if_mask), else_val));
 8015574:	68b9      	ldr	r1, [r7, #8]
 8015576:	68f8      	ldr	r0, [r7, #12]
 8015578:	f7ff fba7 	bl	8014cca <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 801557c:	4604      	mov	r4, r0
 801557e:	68f8      	ldr	r0, [r7, #12]
 8015580:	f7ff fc07 	bl	8014d92 <_ZN8gemmlowp6BitNotIlEET_S1_>
 8015584:	4603      	mov	r3, r0
 8015586:	6879      	ldr	r1, [r7, #4]
 8015588:	4618      	mov	r0, r3
 801558a:	f7ff fb9e 	bl	8014cca <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 801558e:	4603      	mov	r3, r0
 8015590:	4619      	mov	r1, r3
 8015592:	4620      	mov	r0, r4
 8015594:	f000 f805 	bl	80155a2 <_ZN8gemmlowp6BitXorIlEET_S1_S1_>
 8015598:	4603      	mov	r3, r0
}
 801559a:	4618      	mov	r0, r3
 801559c:	3714      	adds	r7, #20
 801559e:	46bd      	mov	sp, r7
 80155a0:	bd90      	pop	{r4, r7, pc}

080155a2 <_ZN8gemmlowp6BitXorIlEET_S1_S1_>:
tIntegerType BitXor(tIntegerType a, tIntegerType b) {
 80155a2:	b480      	push	{r7}
 80155a4:	b083      	sub	sp, #12
 80155a6:	af00      	add	r7, sp, #0
 80155a8:	6078      	str	r0, [r7, #4]
 80155aa:	6039      	str	r1, [r7, #0]
  return a ^ b;
 80155ac:	687a      	ldr	r2, [r7, #4]
 80155ae:	683b      	ldr	r3, [r7, #0]
 80155b0:	4053      	eors	r3, r2
}
 80155b2:	4618      	mov	r0, r3
 80155b4:	370c      	adds	r7, #12
 80155b6:	46bd      	mov	sp, r7
 80155b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155bc:	4770      	bx	lr

080155be <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:
// TODO(b/169801227): This global struct is needed for the linker to drop unused
// code (for example, by using Register_FULLY_CONNECTED_INT8 instead of
// Register_FULLY_CONNECTED).
TfLiteRegistration fully_connected_registration;

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
 80155be:	b580      	push	{r7, lr}
 80155c0:	b084      	sub	sp, #16
 80155c2:	af00      	add	r7, sp, #0
 80155c4:	60f8      	str	r0, [r7, #12]
 80155c6:	60b9      	str	r1, [r7, #8]
 80155c8:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 80155ca:	68fb      	ldr	r3, [r7, #12]
 80155cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80155ce:	2b00      	cmp	r3, #0
 80155d0:	d101      	bne.n	80155d6 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0x18>
 80155d2:	f004 fedf 	bl	801a394 <abort>
  return context->AllocatePersistentBuffer(context, sizeof(OpData));
 80155d6:	68fb      	ldr	r3, [r7, #12]
 80155d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80155da:	2124      	movs	r1, #36	; 0x24
 80155dc:	68f8      	ldr	r0, [r7, #12]
 80155de:	4798      	blx	r3
 80155e0:	4603      	mov	r3, r0
}
 80155e2:	4618      	mov	r0, r3
 80155e4:	3710      	adds	r7, #16
 80155e6:	46bd      	mov	sp, r7
 80155e8:	bd80      	pop	{r7, pc}
	...

080155ec <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 80155ec:	b5b0      	push	{r4, r5, r7, lr}
 80155ee:	b0a0      	sub	sp, #128	; 0x80
 80155f0:	af04      	add	r7, sp, #16
 80155f2:	6078      	str	r0, [r7, #4]
 80155f4:	6039      	str	r1, [r7, #0]
 80155f6:	2400      	movs	r4, #0
  TFLITE_DCHECK(node->user_data != nullptr);
 80155f8:	683b      	ldr	r3, [r7, #0]
 80155fa:	691b      	ldr	r3, [r3, #16]
 80155fc:	2b00      	cmp	r3, #0
 80155fe:	d101      	bne.n	8015604 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x18>
 8015600:	f004 fec8 	bl	801a394 <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
 8015604:	683b      	ldr	r3, [r7, #0]
 8015606:	695b      	ldr	r3, [r3, #20]
 8015608:	2b00      	cmp	r3, #0
 801560a:	d101      	bne.n	8015610 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x24>
 801560c:	f004 fec2 	bl	801a394 <abort>

  OpData* data = static_cast<OpData*>(node->user_data);
 8015610:	683b      	ldr	r3, [r7, #0]
 8015612:	691b      	ldr	r3, [r3, #16]
 8015614:	66fb      	str	r3, [r7, #108]	; 0x6c
  const auto params =
 8015616:	683b      	ldr	r3, [r7, #0]
 8015618:	695b      	ldr	r3, [r3, #20]
 801561a:	66bb      	str	r3, [r7, #104]	; 0x68
      static_cast<const TfLiteFullyConnectedParams*>(node->builtin_data);

  const TfLiteTensor* input =
      GetInput(context, node, kFullyConnectedInputTensor);
 801561c:	4b81      	ldr	r3, [pc, #516]	; (8015824 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x238>)
 801561e:	681b      	ldr	r3, [r3, #0]
 8015620:	461a      	mov	r2, r3
 8015622:	6839      	ldr	r1, [r7, #0]
 8015624:	6878      	ldr	r0, [r7, #4]
 8015626:	f7fd fff9 	bl	801361c <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 801562a:	6678      	str	r0, [r7, #100]	; 0x64
  TF_LITE_ENSURE(context, input != nullptr);
 801562c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801562e:	2b00      	cmp	r3, #0
 8015630:	d10a      	bne.n	8015648 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x5c>
 8015632:	687b      	ldr	r3, [r7, #4]
 8015634:	695c      	ldr	r4, [r3, #20]
 8015636:	4b7c      	ldr	r3, [pc, #496]	; (8015828 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 8015638:	9300      	str	r3, [sp, #0]
 801563a:	2340      	movs	r3, #64	; 0x40
 801563c:	4a7b      	ldr	r2, [pc, #492]	; (801582c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x240>)
 801563e:	497c      	ldr	r1, [pc, #496]	; (8015830 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x244>)
 8015640:	6878      	ldr	r0, [r7, #4]
 8015642:	47a0      	blx	r4
 8015644:	2401      	movs	r4, #1
 8015646:	e0e7      	b.n	8015818 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22c>
  const TfLiteTensor* filter =
      GetInput(context, node, kFullyConnectedWeightsTensor);
 8015648:	4b7a      	ldr	r3, [pc, #488]	; (8015834 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x248>)
 801564a:	681b      	ldr	r3, [r3, #0]
 801564c:	461a      	mov	r2, r3
 801564e:	6839      	ldr	r1, [r7, #0]
 8015650:	6878      	ldr	r0, [r7, #4]
 8015652:	f7fd ffe3 	bl	801361c <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8015656:	6638      	str	r0, [r7, #96]	; 0x60
  TF_LITE_ENSURE(context, filter != nullptr);
 8015658:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801565a:	2b00      	cmp	r3, #0
 801565c:	d10a      	bne.n	8015674 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x88>
 801565e:	687b      	ldr	r3, [r7, #4]
 8015660:	695c      	ldr	r4, [r3, #20]
 8015662:	4b75      	ldr	r3, [pc, #468]	; (8015838 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x24c>)
 8015664:	9300      	str	r3, [sp, #0]
 8015666:	2343      	movs	r3, #67	; 0x43
 8015668:	4a70      	ldr	r2, [pc, #448]	; (801582c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x240>)
 801566a:	4971      	ldr	r1, [pc, #452]	; (8015830 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x244>)
 801566c:	6878      	ldr	r0, [r7, #4]
 801566e:	47a0      	blx	r4
 8015670:	2401      	movs	r4, #1
 8015672:	e0d1      	b.n	8015818 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22c>
  const TfLiteTensor* bias =
      GetOptionalInputTensor(context, node, kFullyConnectedBiasTensor);
 8015674:	4b71      	ldr	r3, [pc, #452]	; (801583c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x250>)
 8015676:	681b      	ldr	r3, [r3, #0]
 8015678:	461a      	mov	r2, r3
 801567a:	6839      	ldr	r1, [r7, #0]
 801567c:	6878      	ldr	r0, [r7, #4]
 801567e:	f7fd fffd 	bl	801367c <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>
 8015682:	65f8      	str	r0, [r7, #92]	; 0x5c
  TfLiteTensor* output = GetOutput(context, node, kFullyConnectedOutputTensor);
 8015684:	4b6e      	ldr	r3, [pc, #440]	; (8015840 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x254>)
 8015686:	681b      	ldr	r3, [r3, #0]
 8015688:	461a      	mov	r2, r3
 801568a:	6839      	ldr	r1, [r7, #0]
 801568c:	6878      	ldr	r0, [r7, #4]
 801568e:	f7fd ffd5 	bl	801363c <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 8015692:	65b8      	str	r0, [r7, #88]	; 0x58
  TF_LITE_ENSURE(context, output != nullptr);
 8015694:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8015696:	2b00      	cmp	r3, #0
 8015698:	d10a      	bne.n	80156b0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xc4>
 801569a:	687b      	ldr	r3, [r7, #4]
 801569c:	695c      	ldr	r4, [r3, #20]
 801569e:	4b69      	ldr	r3, [pc, #420]	; (8015844 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x258>)
 80156a0:	9300      	str	r3, [sp, #0]
 80156a2:	2347      	movs	r3, #71	; 0x47
 80156a4:	4a61      	ldr	r2, [pc, #388]	; (801582c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x240>)
 80156a6:	4962      	ldr	r1, [pc, #392]	; (8015830 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x244>)
 80156a8:	6878      	ldr	r0, [r7, #4]
 80156aa:	47a0      	blx	r4
 80156ac:	2401      	movs	r4, #1
 80156ae:	e0b3      	b.n	8015818 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22c>

  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
 80156b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80156b2:	781a      	ldrb	r2, [r3, #0]
 80156b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80156b6:	781b      	ldrb	r3, [r3, #0]
 80156b8:	429a      	cmp	r2, r3
 80156ba:	d01a      	beq.n	80156f2 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x106>
 80156bc:	687b      	ldr	r3, [r7, #4]
 80156be:	695c      	ldr	r4, [r3, #20]
 80156c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80156c2:	781b      	ldrb	r3, [r3, #0]
 80156c4:	4618      	mov	r0, r3
 80156c6:	f7fd fcb9 	bl	801303c <TfLiteTypeGetName>
 80156ca:	4605      	mov	r5, r0
 80156cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80156ce:	781b      	ldrb	r3, [r3, #0]
 80156d0:	4618      	mov	r0, r3
 80156d2:	f7fd fcb3 	bl	801303c <TfLiteTypeGetName>
 80156d6:	4603      	mov	r3, r0
 80156d8:	9303      	str	r3, [sp, #12]
 80156da:	9502      	str	r5, [sp, #8]
 80156dc:	4b5a      	ldr	r3, [pc, #360]	; (8015848 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x25c>)
 80156de:	9301      	str	r3, [sp, #4]
 80156e0:	4b5a      	ldr	r3, [pc, #360]	; (801584c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x260>)
 80156e2:	9300      	str	r3, [sp, #0]
 80156e4:	2349      	movs	r3, #73	; 0x49
 80156e6:	4a51      	ldr	r2, [pc, #324]	; (801582c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x240>)
 80156e8:	4959      	ldr	r1, [pc, #356]	; (8015850 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x264>)
 80156ea:	6878      	ldr	r0, [r7, #4]
 80156ec:	47a0      	blx	r4
 80156ee:	2401      	movs	r4, #1
 80156f0:	e092      	b.n	8015818 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22c>
  TF_LITE_ENSURE_MSG(context, input->type == filter->type,
 80156f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80156f4:	781a      	ldrb	r2, [r3, #0]
 80156f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80156f8:	781b      	ldrb	r3, [r3, #0]
 80156fa:	429a      	cmp	r2, r3
 80156fc:	d006      	beq.n	801570c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x120>
 80156fe:	687b      	ldr	r3, [r7, #4]
 8015700:	695b      	ldr	r3, [r3, #20]
 8015702:	4954      	ldr	r1, [pc, #336]	; (8015854 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x268>)
 8015704:	6878      	ldr	r0, [r7, #4]
 8015706:	4798      	blx	r3
 8015708:	2401      	movs	r4, #1
 801570a:	e085      	b.n	8015818 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22c>
                     "Hybrid models are not supported on TFLite Micro.");

  // Set buffer index to a reset value
  data->buffer_idx = -1;
 801570c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801570e:	f04f 32ff 	mov.w	r2, #4294967295
 8015712:	621a      	str	r2, [r3, #32]
  TF_LITE_ENSURE_STATUS(CalculateOpDataFullyConnected(
 8015714:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015716:	7819      	ldrb	r1, [r3, #0]
 8015718:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801571a:	781a      	ldrb	r2, [r3, #0]
 801571c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801571e:	9303      	str	r3, [sp, #12]
 8015720:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8015722:	9302      	str	r3, [sp, #8]
 8015724:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015726:	9301      	str	r3, [sp, #4]
 8015728:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801572a:	9300      	str	r3, [sp, #0]
 801572c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801572e:	6878      	ldr	r0, [r7, #4]
 8015730:	f000 fae4 	bl	8015cfc <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE>
 8015734:	4603      	mov	r3, r0
 8015736:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 801573a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801573e:	2b00      	cmp	r3, #0
 8015740:	d002      	beq.n	8015748 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x15c>
 8015742:	f897 4057 	ldrb.w	r4, [r7, #87]	; 0x57
 8015746:	e067      	b.n	8015818 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22c>
      context, params->activation, input->type, input, filter, bias, output,
      &(data->reference_op_data)));

  if (input->type == kTfLiteInt8) {
 8015748:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801574a:	781b      	ldrb	r3, [r3, #0]
 801574c:	2b09      	cmp	r3, #9
 801574e:	d162      	bne.n	8015816 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22a>
    RuntimeShape filter_shape = GetTensorShape(filter);
 8015750:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8015754:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8015756:	4618      	mov	r0, r3
 8015758:	f7fe fa45 	bl	8013be6 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    RuntimeShape output_shape = GetTensorShape(output);
 801575c:	f107 0318 	add.w	r3, r7, #24
 8015760:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8015762:	4618      	mov	r0, r3
 8015764:	f7fe fa3f 	bl	8013be6 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>

    TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 2);
 8015768:	f107 0318 	add.w	r3, r7, #24
 801576c:	4618      	mov	r0, r3
 801576e:	f7fe f9d6 	bl	8013b1e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8015772:	4603      	mov	r3, r0
 8015774:	2b02      	cmp	r3, #2
 8015776:	d001      	beq.n	801577c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x190>
 8015778:	f004 fe0c 	bl	801a394 <abort>
    const int filter_dim_count = filter_shape.DimensionsCount();
 801577c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8015780:	4618      	mov	r0, r3
 8015782:	f7fe f9cc 	bl	8013b1e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8015786:	6538      	str	r0, [r7, #80]	; 0x50
    cmsis_nn_dims filter_dims;
    filter_dims.n = filter_shape.Dims(filter_dim_count - 1);
 8015788:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801578a:	1e5a      	subs	r2, r3, #1
 801578c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8015790:	4611      	mov	r1, r2
 8015792:	4618      	mov	r0, r3
 8015794:	f7fe fad0 	bl	8013d38 <_ZNK6tflite12RuntimeShape4DimsEi>
 8015798:	4603      	mov	r3, r0
 801579a:	60bb      	str	r3, [r7, #8]
    filter_dims.h = 1;
 801579c:	2301      	movs	r3, #1
 801579e:	60fb      	str	r3, [r7, #12]
    filter_dims.w = 1;
 80157a0:	2301      	movs	r3, #1
 80157a2:	613b      	str	r3, [r7, #16]
    filter_dims.c = output_shape.Dims(1);
 80157a4:	f107 0318 	add.w	r3, r7, #24
 80157a8:	2101      	movs	r1, #1
 80157aa:	4618      	mov	r0, r3
 80157ac:	f7fe fac4 	bl	8013d38 <_ZNK6tflite12RuntimeShape4DimsEi>
 80157b0:	4603      	mov	r3, r0
 80157b2:	617b      	str	r3, [r7, #20]

    const int32_t buf_size =
        arm_fully_connected_s8_get_buffer_size(&filter_dims);
 80157b4:	f107 0308 	add.w	r3, r7, #8
 80157b8:	4618      	mov	r0, r3
 80157ba:	f7f6 fc0a 	bl	800bfd2 <arm_fully_connected_s8_get_buffer_size>
 80157be:	64f8      	str	r0, [r7, #76]	; 0x4c

    if (buf_size > 0) {
 80157c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80157c2:	2b00      	cmp	r3, #0
 80157c4:	dd11      	ble.n	80157ea <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1fe>
      TF_LITE_ENSURE_STATUS(context->RequestScratchBufferInArena(
 80157c6:	687b      	ldr	r3, [r7, #4]
 80157c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80157ca:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80157cc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80157ce:	3220      	adds	r2, #32
 80157d0:	6878      	ldr	r0, [r7, #4]
 80157d2:	4798      	blx	r3
 80157d4:	4603      	mov	r3, r0
 80157d6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 80157da:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80157de:	2b00      	cmp	r3, #0
 80157e0:	d007      	beq.n	80157f2 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x206>
 80157e2:	f897 404b 	ldrb.w	r4, [r7, #75]	; 0x4b
 80157e6:	2500      	movs	r5, #0
 80157e8:	e004      	b.n	80157f4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x208>
          context, buf_size, &data->buffer_idx));
    } else {
      data->buffer_idx = -1;
 80157ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80157ec:	f04f 32ff 	mov.w	r2, #4294967295
 80157f0:	621a      	str	r2, [r3, #32]
 80157f2:	2501      	movs	r5, #1
 80157f4:	f107 0318 	add.w	r3, r7, #24
 80157f8:	4618      	mov	r0, r3
 80157fa:	f7fe f97a 	bl	8013af2 <_ZN6tflite12RuntimeShapeD1Ev>
 80157fe:	2d01      	cmp	r5, #1
 8015800:	d001      	beq.n	8015806 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x21a>
 8015802:	2500      	movs	r5, #0
 8015804:	e000      	b.n	8015808 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x21c>
 8015806:	2501      	movs	r5, #1
 8015808:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801580c:	4618      	mov	r0, r3
 801580e:	f7fe f970 	bl	8013af2 <_ZN6tflite12RuntimeShapeD1Ev>
 8015812:	2d01      	cmp	r5, #1
 8015814:	d100      	bne.n	8015818 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22c>
    }
  }
  return kTfLiteOk;
 8015816:	2400      	movs	r4, #0
}
 8015818:	4623      	mov	r3, r4
 801581a:	4618      	mov	r0, r3
 801581c:	3770      	adds	r7, #112	; 0x70
 801581e:	46bd      	mov	sp, r7
 8015820:	bdb0      	pop	{r4, r5, r7, pc}
 8015822:	bf00      	nop
 8015824:	0801d3b4 	.word	0x0801d3b4
 8015828:	0801c9ec 	.word	0x0801c9ec
 801582c:	0801c944 	.word	0x0801c944
 8015830:	0801c9d4 	.word	0x0801c9d4
 8015834:	0801d3b8 	.word	0x0801d3b8
 8015838:	0801ca00 	.word	0x0801ca00
 801583c:	0801d3bc 	.word	0x0801d3bc
 8015840:	0801d3c0 	.word	0x0801d3c0
 8015844:	0801ca14 	.word	0x0801ca14
 8015848:	0801ca44 	.word	0x0801ca44
 801584c:	0801ca54 	.word	0x0801ca54
 8015850:	0801ca28 	.word	0x0801ca28
 8015854:	0801ca60 	.word	0x0801ca60

08015858 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_>:
TfLiteStatus EvalQuantizedInt8(TfLiteContext* context, TfLiteNode* node,
                               const OpData& data,
                               const TfLiteEvalTensor* input,
                               const TfLiteEvalTensor* filter,
                               const TfLiteEvalTensor* bias,
                               TfLiteEvalTensor* output) {
 8015858:	b5f0      	push	{r4, r5, r6, r7, lr}
 801585a:	b0bf      	sub	sp, #252	; 0xfc
 801585c:	af08      	add	r7, sp, #32
 801585e:	6178      	str	r0, [r7, #20]
 8015860:	6139      	str	r1, [r7, #16]
 8015862:	60fa      	str	r2, [r7, #12]
 8015864:	60bb      	str	r3, [r7, #8]
  const RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
 8015866:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801586a:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 801586e:	4618      	mov	r0, r3
 8015870:	f000 faaa 	bl	8015dc8 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 2);
 8015874:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8015878:	4618      	mov	r0, r3
 801587a:	f7fe f950 	bl	8013b1e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801587e:	4603      	mov	r3, r0
 8015880:	2b02      	cmp	r3, #2
 8015882:	d001      	beq.n	8015888 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x30>
 8015884:	f004 fd86 	bl	801a394 <abort>
  const int batches = output_shape.Dims(0);
 8015888:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801588c:	2100      	movs	r1, #0
 801588e:	4618      	mov	r0, r3
 8015890:	f7fe fa52 	bl	8013d38 <_ZNK6tflite12RuntimeShape4DimsEi>
 8015894:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
  const int output_depth = output_shape.Dims(1);
 8015898:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801589c:	2101      	movs	r1, #1
 801589e:	4618      	mov	r0, r3
 80158a0:	f7fe fa4a 	bl	8013d38 <_ZNK6tflite12RuntimeShape4DimsEi>
 80158a4:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
  const RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
 80158a8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80158ac:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 80158b0:	4618      	mov	r0, r3
 80158b2:	f000 fa89 	bl	8015dc8 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  const int filter_dim_count = filter_shape.DimensionsCount();
 80158b6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80158ba:	4618      	mov	r0, r3
 80158bc:	f7fe f92f 	bl	8013b1e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80158c0:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
 80158c4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80158c8:	1e5a      	subs	r2, r3, #1
 80158ca:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80158ce:	4611      	mov	r1, r2
 80158d0:	4618      	mov	r0, r3
 80158d2:	f7fe fa31 	bl	8013d38 <_ZNK6tflite12RuntimeShape4DimsEi>
 80158d6:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
  const RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
 80158da:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80158de:	68b9      	ldr	r1, [r7, #8]
 80158e0:	4618      	mov	r0, r3
 80158e2:	f000 fa71 	bl	8015dc8 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>

  cmsis_nn_fc_params fc_params;
  fc_params.input_offset = -data.reference_op_data.input_zero_point;
 80158e6:	68fb      	ldr	r3, [r7, #12]
 80158e8:	695b      	ldr	r3, [r3, #20]
 80158ea:	425b      	negs	r3, r3
 80158ec:	66fb      	str	r3, [r7, #108]	; 0x6c
  fc_params.output_offset = data.reference_op_data.output_zero_point;
 80158ee:	68fb      	ldr	r3, [r7, #12]
 80158f0:	69db      	ldr	r3, [r3, #28]
 80158f2:	677b      	str	r3, [r7, #116]	; 0x74
  fc_params.filter_offset = -data.reference_op_data.filter_zero_point;
 80158f4:	68fb      	ldr	r3, [r7, #12]
 80158f6:	699b      	ldr	r3, [r3, #24]
 80158f8:	425b      	negs	r3, r3
 80158fa:	673b      	str	r3, [r7, #112]	; 0x70
  fc_params.activation.min = data.reference_op_data.output_activation_min;
 80158fc:	68fb      	ldr	r3, [r7, #12]
 80158fe:	689b      	ldr	r3, [r3, #8]
 8015900:	67bb      	str	r3, [r7, #120]	; 0x78
  fc_params.activation.max = data.reference_op_data.output_activation_max;
 8015902:	68fb      	ldr	r3, [r7, #12]
 8015904:	68db      	ldr	r3, [r3, #12]
 8015906:	67fb      	str	r3, [r7, #124]	; 0x7c

  cmsis_nn_per_tensor_quant_params quant_params;
  quant_params.multiplier = data.reference_op_data.output_multiplier;
 8015908:	68fb      	ldr	r3, [r7, #12]
 801590a:	681b      	ldr	r3, [r3, #0]
 801590c:	667b      	str	r3, [r7, #100]	; 0x64
  quant_params.shift = data.reference_op_data.output_shift;
 801590e:	68fb      	ldr	r3, [r7, #12]
 8015910:	685b      	ldr	r3, [r3, #4]
 8015912:	66bb      	str	r3, [r7, #104]	; 0x68

  cmsis_nn_dims input_dims;
  input_dims.n = batches;
 8015914:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8015918:	657b      	str	r3, [r7, #84]	; 0x54
  input_dims.h = 1;
 801591a:	2301      	movs	r3, #1
 801591c:	65bb      	str	r3, [r7, #88]	; 0x58
  input_dims.w = 1;
 801591e:	2301      	movs	r3, #1
 8015920:	65fb      	str	r3, [r7, #92]	; 0x5c
  input_dims.c = accum_depth;
 8015922:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8015926:	663b      	str	r3, [r7, #96]	; 0x60

  cmsis_nn_dims filter_dims;
  filter_dims.n = accum_depth;
 8015928:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801592c:	647b      	str	r3, [r7, #68]	; 0x44
  filter_dims.h = 1;
 801592e:	2301      	movs	r3, #1
 8015930:	64bb      	str	r3, [r7, #72]	; 0x48
  filter_dims.w = 1;
 8015932:	2301      	movs	r3, #1
 8015934:	64fb      	str	r3, [r7, #76]	; 0x4c
  filter_dims.c = output_depth;
 8015936:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801593a:	653b      	str	r3, [r7, #80]	; 0x50

  cmsis_nn_dims bias_dims;
  bias_dims.n = 1;
 801593c:	2301      	movs	r3, #1
 801593e:	637b      	str	r3, [r7, #52]	; 0x34
  bias_dims.h = 1;
 8015940:	2301      	movs	r3, #1
 8015942:	63bb      	str	r3, [r7, #56]	; 0x38
  bias_dims.w = 1;
 8015944:	2301      	movs	r3, #1
 8015946:	63fb      	str	r3, [r7, #60]	; 0x3c
  bias_dims.c = output_depth;
 8015948:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801594c:	643b      	str	r3, [r7, #64]	; 0x40

  cmsis_nn_dims output_dims;
  output_dims.n = batches;
 801594e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8015952:	627b      	str	r3, [r7, #36]	; 0x24
  output_dims.h = 1;
 8015954:	2301      	movs	r3, #1
 8015956:	62bb      	str	r3, [r7, #40]	; 0x28
  output_dims.w = 1;
 8015958:	2301      	movs	r3, #1
 801595a:	62fb      	str	r3, [r7, #44]	; 0x2c
  output_dims.c = output_depth;
 801595c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8015960:	633b      	str	r3, [r7, #48]	; 0x30

  cmsis_nn_context ctx;
  ctx.buf = nullptr;
 8015962:	2300      	movs	r3, #0
 8015964:	61fb      	str	r3, [r7, #28]
  ctx.size = 0;
 8015966:	2300      	movs	r3, #0
 8015968:	623b      	str	r3, [r7, #32]

  if (data.buffer_idx > -1) {
 801596a:	68fb      	ldr	r3, [r7, #12]
 801596c:	6a1b      	ldr	r3, [r3, #32]
 801596e:	2b00      	cmp	r3, #0
 8015970:	db08      	blt.n	8015984 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x12c>
    ctx.buf = context->GetScratchBuffer(context, data.buffer_idx);
 8015972:	697b      	ldr	r3, [r7, #20]
 8015974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015976:	68fa      	ldr	r2, [r7, #12]
 8015978:	6a12      	ldr	r2, [r2, #32]
 801597a:	4611      	mov	r1, r2
 801597c:	6978      	ldr	r0, [r7, #20]
 801597e:	4798      	blx	r3
 8015980:	4603      	mov	r3, r0
 8015982:	61fb      	str	r3, [r7, #28]
  }

  TF_LITE_ENSURE_EQ(
 8015984:	68b8      	ldr	r0, [r7, #8]
 8015986:	f7fe ffa9 	bl	80148dc <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 801598a:	4605      	mov	r5, r0
 801598c:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 8015990:	f7fe ffa4 	bl	80148dc <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 8015994:	4606      	mov	r6, r0
 8015996:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 801599a:	f7ff fa20 	bl	8014dde <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor>
 801599e:	6078      	str	r0, [r7, #4]
 80159a0:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 80159a4:	f7fe ffa9 	bl	80148fa <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 80159a8:	4603      	mov	r3, r0
 80159aa:	f107 0454 	add.w	r4, r7, #84	; 0x54
 80159ae:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80159b2:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 80159b6:	f107 001c 	add.w	r0, r7, #28
 80159ba:	9306      	str	r3, [sp, #24]
 80159bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80159c0:	9305      	str	r3, [sp, #20]
 80159c2:	687b      	ldr	r3, [r7, #4]
 80159c4:	9304      	str	r3, [sp, #16]
 80159c6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80159ca:	9303      	str	r3, [sp, #12]
 80159cc:	9602      	str	r6, [sp, #8]
 80159ce:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80159d2:	9301      	str	r3, [sp, #4]
 80159d4:	9500      	str	r5, [sp, #0]
 80159d6:	4623      	mov	r3, r4
 80159d8:	f7f6 fab4 	bl	800bf44 <arm_fully_connected_s8>
 80159dc:	4603      	mov	r3, r0
 80159de:	2b00      	cmp	r3, #0
 80159e0:	bf14      	ite	ne
 80159e2:	2301      	movne	r3, #1
 80159e4:	2300      	moveq	r3, #0
 80159e6:	b2db      	uxtb	r3, r3
 80159e8:	2b00      	cmp	r3, #0
 80159ea:	d03e      	beq.n	8015a6a <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x212>
 80159ec:	697b      	ldr	r3, [r7, #20]
 80159ee:	695c      	ldr	r4, [r3, #20]
 80159f0:	68b8      	ldr	r0, [r7, #8]
 80159f2:	f7fe ff73 	bl	80148dc <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 80159f6:	4606      	mov	r6, r0
 80159f8:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 80159fc:	f7fe ff6e 	bl	80148dc <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 8015a00:	6078      	str	r0, [r7, #4]
 8015a02:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 8015a06:	f7ff f9ea 	bl	8014dde <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor>
 8015a0a:	6038      	str	r0, [r7, #0]
 8015a0c:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 8015a10:	f7fe ff73 	bl	80148fa <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 8015a14:	4603      	mov	r3, r0
 8015a16:	f107 0554 	add.w	r5, r7, #84	; 0x54
 8015a1a:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8015a1e:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8015a22:	f107 001c 	add.w	r0, r7, #28
 8015a26:	9306      	str	r3, [sp, #24]
 8015a28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8015a2c:	9305      	str	r3, [sp, #20]
 8015a2e:	683b      	ldr	r3, [r7, #0]
 8015a30:	9304      	str	r3, [sp, #16]
 8015a32:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8015a36:	9303      	str	r3, [sp, #12]
 8015a38:	687b      	ldr	r3, [r7, #4]
 8015a3a:	9302      	str	r3, [sp, #8]
 8015a3c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8015a40:	9301      	str	r3, [sp, #4]
 8015a42:	9600      	str	r6, [sp, #0]
 8015a44:	462b      	mov	r3, r5
 8015a46:	f7f6 fa7d 	bl	800bf44 <arm_fully_connected_s8>
 8015a4a:	4603      	mov	r3, r0
 8015a4c:	461a      	mov	r2, r3
 8015a4e:	2300      	movs	r3, #0
 8015a50:	9303      	str	r3, [sp, #12]
 8015a52:	9202      	str	r2, [sp, #8]
 8015a54:	4b0f      	ldr	r3, [pc, #60]	; (8015a94 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x23c>)
 8015a56:	9301      	str	r3, [sp, #4]
 8015a58:	4b0f      	ldr	r3, [pc, #60]	; (8015a98 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x240>)
 8015a5a:	9300      	str	r3, [sp, #0]
 8015a5c:	23a6      	movs	r3, #166	; 0xa6
 8015a5e:	4a0f      	ldr	r2, [pc, #60]	; (8015a9c <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x244>)
 8015a60:	490f      	ldr	r1, [pc, #60]	; (8015aa0 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x248>)
 8015a62:	6978      	ldr	r0, [r7, #20]
 8015a64:	47a0      	blx	r4
 8015a66:	2401      	movs	r4, #1
 8015a68:	e000      	b.n	8015a6c <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x214>
          tflite::micro::GetTensorData<int8_t>(filter), &bias_dims,
          tflite::micro::GetTensorData<int32_t>(bias), &output_dims,
          tflite::micro::GetTensorData<int8_t>(output)),
      ARM_MATH_SUCCESS);

  return kTfLiteOk;
 8015a6a:	2400      	movs	r4, #0
  const RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
 8015a6c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8015a70:	4618      	mov	r0, r3
 8015a72:	f7fe f83e 	bl	8013af2 <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
 8015a76:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8015a7a:	4618      	mov	r0, r3
 8015a7c:	f7fe f839 	bl	8013af2 <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
 8015a80:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8015a84:	4618      	mov	r0, r3
 8015a86:	f7fe f834 	bl	8013af2 <_ZN6tflite12RuntimeShapeD1Ev>
}
 8015a8a:	4623      	mov	r3, r4
 8015a8c:	4618      	mov	r0, r3
 8015a8e:	37dc      	adds	r7, #220	; 0xdc
 8015a90:	46bd      	mov	sp, r7
 8015a92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015a94:	0801cb3c 	.word	0x0801cb3c
 8015a98:	0801cb50 	.word	0x0801cb50
 8015a9c:	0801c944 	.word	0x0801c944
 8015aa0:	0801cb20 	.word	0x0801cb20

08015aa4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 8015aa4:	b590      	push	{r4, r7, lr}
 8015aa6:	b0d1      	sub	sp, #324	; 0x144
 8015aa8:	af04      	add	r7, sp, #16
 8015aaa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015aae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8015ab2:	6018      	str	r0, [r3, #0]
 8015ab4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015ab8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8015abc:	6019      	str	r1, [r3, #0]
  TFLITE_DCHECK(node->builtin_data != nullptr);
 8015abe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015ac2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8015ac6:	681b      	ldr	r3, [r3, #0]
 8015ac8:	695b      	ldr	r3, [r3, #20]
 8015aca:	2b00      	cmp	r3, #0
 8015acc:	d101      	bne.n	8015ad2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2e>
 8015ace:	f004 fc61 	bl	801a394 <abort>
  const auto* params =
 8015ad2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015ad6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8015ada:	681b      	ldr	r3, [r3, #0]
 8015adc:	695b      	ldr	r3, [r3, #20]
 8015ade:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
      static_cast<const TfLiteFullyConnectedParams*>(node->builtin_data);

  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kFullyConnectedInputTensor);
 8015ae2:	4b67      	ldr	r3, [pc, #412]	; (8015c80 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1dc>)
 8015ae4:	681a      	ldr	r2, [r3, #0]
 8015ae6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015aea:	f5a3 7198 	sub.w	r1, r3, #304	; 0x130
 8015aee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015af2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8015af6:	6809      	ldr	r1, [r1, #0]
 8015af8:	6818      	ldr	r0, [r3, #0]
 8015afa:	f7fe f9f1 	bl	8013ee0 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8015afe:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128
  const TfLiteEvalTensor* filter =
      tflite::micro::GetEvalInput(context, node, kFullyConnectedWeightsTensor);
 8015b02:	4b60      	ldr	r3, [pc, #384]	; (8015c84 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1e0>)
 8015b04:	681a      	ldr	r2, [r3, #0]
 8015b06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015b0a:	f5a3 7198 	sub.w	r1, r3, #304	; 0x130
 8015b0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015b12:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8015b16:	6809      	ldr	r1, [r1, #0]
 8015b18:	6818      	ldr	r0, [r3, #0]
 8015b1a:	f7fe f9e1 	bl	8013ee0 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8015b1e:	f8c7 0124 	str.w	r0, [r7, #292]	; 0x124
  const TfLiteEvalTensor* bias =
      tflite::micro::GetEvalInput(context, node, kFullyConnectedBiasTensor);
 8015b22:	4b59      	ldr	r3, [pc, #356]	; (8015c88 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1e4>)
 8015b24:	681a      	ldr	r2, [r3, #0]
 8015b26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015b2a:	f5a3 7198 	sub.w	r1, r3, #304	; 0x130
 8015b2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015b32:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8015b36:	6809      	ldr	r1, [r1, #0]
 8015b38:	6818      	ldr	r0, [r3, #0]
 8015b3a:	f7fe f9d1 	bl	8013ee0 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8015b3e:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kFullyConnectedOutputTensor);
 8015b42:	4b52      	ldr	r3, [pc, #328]	; (8015c8c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1e8>)
 8015b44:	681a      	ldr	r2, [r3, #0]
 8015b46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015b4a:	f5a3 7198 	sub.w	r1, r3, #304	; 0x130
 8015b4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015b52:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8015b56:	6809      	ldr	r1, [r1, #0]
 8015b58:	6818      	ldr	r0, [r3, #0]
 8015b5a:	f7fe f9d1 	bl	8013f00 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 8015b5e:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c

  TFLITE_DCHECK(node->user_data != nullptr);
 8015b62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015b66:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8015b6a:	681b      	ldr	r3, [r3, #0]
 8015b6c:	691b      	ldr	r3, [r3, #16]
 8015b6e:	2b00      	cmp	r3, #0
 8015b70:	d101      	bne.n	8015b76 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xd2>
 8015b72:	f004 fc0f 	bl	801a394 <abort>
  const OpData& data = *(static_cast<const OpData*>(node->user_data));
 8015b76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015b7a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8015b7e:	681b      	ldr	r3, [r3, #0]
 8015b80:	691b      	ldr	r3, [r3, #16]
 8015b82:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

  // Checks in Prepare ensure input, output and filter types are all the same.
  switch (input->type) {
 8015b86:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015b8a:	7a1b      	ldrb	r3, [r3, #8]
 8015b8c:	2b09      	cmp	r3, #9
 8015b8e:	d021      	beq.n	8015bd4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x130>
 8015b90:	2b09      	cmp	r3, #9
 8015b92:	dc55      	bgt.n	8015c40 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x19c>
 8015b94:	2b01      	cmp	r3, #1
 8015b96:	d002      	beq.n	8015b9e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xfa>
 8015b98:	2b03      	cmp	r3, #3
 8015b9a:	d036      	beq.n	8015c0a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x166>
 8015b9c:	e050      	b.n	8015c40 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x19c>
    case kTfLiteFloat32: {
      #if EI_TFLITE_DISABLE_FULLY_CONNECTED_IN_F32
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 8015b9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015ba2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8015ba6:	681b      	ldr	r3, [r3, #0]
 8015ba8:	695c      	ldr	r4, [r3, #20]
 8015baa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015bae:	7a1b      	ldrb	r3, [r3, #8]
 8015bb0:	4618      	mov	r0, r3
 8015bb2:	f7fd fa43 	bl	801303c <TfLiteTypeGetName>
 8015bb6:	4602      	mov	r2, r0
 8015bb8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015bbc:	7a1b      	ldrb	r3, [r3, #8]
 8015bbe:	4619      	mov	r1, r3
 8015bc0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015bc4:	f5a3 7096 	sub.w	r0, r3, #300	; 0x12c
 8015bc8:	460b      	mov	r3, r1
 8015bca:	4931      	ldr	r1, [pc, #196]	; (8015c90 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1ec>)
 8015bcc:	6800      	ldr	r0, [r0, #0]
 8015bce:	47a0      	blx	r4
                      TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 8015bd0:	2301      	movs	r3, #1
 8015bd2:	e04f      	b.n	8015c74 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1d0>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
                      TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
      #endif

      return EvalQuantizedInt8(context, node, data, input, filter, bias,
 8015bd4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015bd8:	f5a3 7198 	sub.w	r1, r3, #304	; 0x130
 8015bdc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015be0:	f5a3 7096 	sub.w	r0, r3, #300	; 0x12c
 8015be4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8015be8:	9302      	str	r3, [sp, #8]
 8015bea:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8015bee:	9301      	str	r3, [sp, #4]
 8015bf0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8015bf4:	9300      	str	r3, [sp, #0]
 8015bf6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015bfa:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8015bfe:	6809      	ldr	r1, [r1, #0]
 8015c00:	6800      	ldr	r0, [r0, #0]
 8015c02:	f7ff fe29 	bl	8015858 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_>
 8015c06:	4603      	mov	r3, r0
                               output);
 8015c08:	e034      	b.n	8015c74 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1d0>
    }
    case kTfLiteUInt8: {
      #if EI_TFLITE_DISABLE_FULLY_CONNECTED_IN_U8
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 8015c0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015c0e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8015c12:	681b      	ldr	r3, [r3, #0]
 8015c14:	695c      	ldr	r4, [r3, #20]
 8015c16:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015c1a:	7a1b      	ldrb	r3, [r3, #8]
 8015c1c:	4618      	mov	r0, r3
 8015c1e:	f7fd fa0d 	bl	801303c <TfLiteTypeGetName>
 8015c22:	4602      	mov	r2, r0
 8015c24:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015c28:	7a1b      	ldrb	r3, [r3, #8]
 8015c2a:	4619      	mov	r1, r3
 8015c2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015c30:	f5a3 7096 	sub.w	r0, r3, #300	; 0x12c
 8015c34:	460b      	mov	r3, r1
 8015c36:	4916      	ldr	r1, [pc, #88]	; (8015c90 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1ec>)
 8015c38:	6800      	ldr	r0, [r0, #0]
 8015c3a:	47a0      	blx	r4
                      TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 8015c3c:	2301      	movs	r3, #1
 8015c3e:	e019      	b.n	8015c74 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1d0>
          tflite::micro::GetTensorShape(output),
          tflite::micro::GetTensorData<uint8_t>(output));
      break;
    }
    default: {
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 8015c40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015c44:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8015c48:	681b      	ldr	r3, [r3, #0]
 8015c4a:	695c      	ldr	r4, [r3, #20]
 8015c4c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015c50:	7a1b      	ldrb	r3, [r3, #8]
 8015c52:	4618      	mov	r0, r3
 8015c54:	f7fd f9f2 	bl	801303c <TfLiteTypeGetName>
 8015c58:	4602      	mov	r2, r0
 8015c5a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015c5e:	7a1b      	ldrb	r3, [r3, #8]
 8015c60:	4619      	mov	r1, r3
 8015c62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015c66:	f5a3 7096 	sub.w	r0, r3, #300	; 0x12c
 8015c6a:	460b      	mov	r3, r1
 8015c6c:	4908      	ldr	r1, [pc, #32]	; (8015c90 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1ec>)
 8015c6e:	6800      	ldr	r0, [r0, #0]
 8015c70:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 8015c72:	2301      	movs	r3, #1
    }
  }
  return kTfLiteOk;
}
 8015c74:	4618      	mov	r0, r3
 8015c76:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8015c7a:	46bd      	mov	sp, r7
 8015c7c:	bd90      	pop	{r4, r7, pc}
 8015c7e:	bf00      	nop
 8015c80:	0801d3b4 	.word	0x0801d3b4
 8015c84:	0801d3b8 	.word	0x0801d3b8
 8015c88:	0801d3bc 	.word	0x0801d3bc
 8015c8c:	0801d3c0 	.word	0x0801d3c0
 8015c90:	0801cc74 	.word	0x0801cc74

08015c94 <_ZN6tflite24Register_FULLY_CONNECTEDEv>:
  return EvalQuantizedInt8(context, node, data, input, filter, bias, output);
}

}  // namespace

TfLiteRegistration Register_FULLY_CONNECTED() {
 8015c94:	b4b0      	push	{r4, r5, r7}
 8015c96:	b083      	sub	sp, #12
 8015c98:	af00      	add	r7, sp, #0
 8015c9a:	6078      	str	r0, [r7, #4]
  fully_connected_registration.init = Init;
 8015c9c:	4b13      	ldr	r3, [pc, #76]	; (8015cec <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 8015c9e:	4a14      	ldr	r2, [pc, #80]	; (8015cf0 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x5c>)
 8015ca0:	601a      	str	r2, [r3, #0]
  fully_connected_registration.free = nullptr;
 8015ca2:	4b12      	ldr	r3, [pc, #72]	; (8015cec <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 8015ca4:	2200      	movs	r2, #0
 8015ca6:	605a      	str	r2, [r3, #4]
  fully_connected_registration.prepare = Prepare;
 8015ca8:	4b10      	ldr	r3, [pc, #64]	; (8015cec <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 8015caa:	4a12      	ldr	r2, [pc, #72]	; (8015cf4 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x60>)
 8015cac:	609a      	str	r2, [r3, #8]
  fully_connected_registration.invoke = Eval;
 8015cae:	4b0f      	ldr	r3, [pc, #60]	; (8015cec <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 8015cb0:	4a11      	ldr	r2, [pc, #68]	; (8015cf8 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x64>)
 8015cb2:	60da      	str	r2, [r3, #12]
  fully_connected_registration.profiling_string = nullptr;
 8015cb4:	4b0d      	ldr	r3, [pc, #52]	; (8015cec <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 8015cb6:	2200      	movs	r2, #0
 8015cb8:	611a      	str	r2, [r3, #16]
  fully_connected_registration.builtin_code = 0;
 8015cba:	4b0c      	ldr	r3, [pc, #48]	; (8015cec <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 8015cbc:	2200      	movs	r2, #0
 8015cbe:	615a      	str	r2, [r3, #20]
  fully_connected_registration.custom_name = nullptr;
 8015cc0:	4b0a      	ldr	r3, [pc, #40]	; (8015cec <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 8015cc2:	2200      	movs	r2, #0
 8015cc4:	619a      	str	r2, [r3, #24]
  fully_connected_registration.version = 0;
 8015cc6:	4b09      	ldr	r3, [pc, #36]	; (8015cec <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 8015cc8:	2200      	movs	r2, #0
 8015cca:	61da      	str	r2, [r3, #28]
  return fully_connected_registration;
 8015ccc:	687b      	ldr	r3, [r7, #4]
 8015cce:	4a07      	ldr	r2, [pc, #28]	; (8015cec <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 8015cd0:	461c      	mov	r4, r3
 8015cd2:	4615      	mov	r5, r2
 8015cd4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015cd6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015cd8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8015cdc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8015ce0:	6878      	ldr	r0, [r7, #4]
 8015ce2:	370c      	adds	r7, #12
 8015ce4:	46bd      	mov	sp, r7
 8015ce6:	bcb0      	pop	{r4, r5, r7}
 8015ce8:	4770      	bx	lr
 8015cea:	bf00      	nop
 8015cec:	20002a2c 	.word	0x20002a2c
 8015cf0:	080155bf 	.word	0x080155bf
 8015cf4:	080155ed 	.word	0x080155ed
 8015cf8:	08015aa5 	.word	0x08015aa5

08015cfc <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE>:

TfLiteStatus CalculateOpDataFullyConnected(
    TfLiteContext* context, TfLiteFusedActivation activation,
    TfLiteType data_type, const TfLiteTensor* input, const TfLiteTensor* filter,
    const TfLiteTensor* bias, TfLiteTensor* output,
    OpDataFullyConnected* data) {
 8015cfc:	b580      	push	{r7, lr}
 8015cfe:	b08a      	sub	sp, #40	; 0x28
 8015d00:	af02      	add	r7, sp, #8
 8015d02:	60f8      	str	r0, [r7, #12]
 8015d04:	607b      	str	r3, [r7, #4]
 8015d06:	460b      	mov	r3, r1
 8015d08:	72fb      	strb	r3, [r7, #11]
 8015d0a:	4613      	mov	r3, r2
 8015d0c:	72bb      	strb	r3, [r7, #10]
  if (data_type != kTfLiteFloat32) {
 8015d0e:	7abb      	ldrb	r3, [r7, #10]
 8015d10:	2b01      	cmp	r3, #1
 8015d12:	d03e      	beq.n	8015d92 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x96>
    double real_multiplier = 0.0;
 8015d14:	f04f 0200 	mov.w	r2, #0
 8015d18:	f04f 0300 	mov.w	r3, #0
 8015d1c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
 8015d20:	f107 0310 	add.w	r3, r7, #16
 8015d24:	9301      	str	r3, [sp, #4]
 8015d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d28:	9300      	str	r3, [sp, #0]
 8015d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015d2e:	6879      	ldr	r1, [r7, #4]
 8015d30:	68f8      	ldr	r0, [r7, #12]
 8015d32:	f7fd fcb5 	bl	80136a0 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>
 8015d36:	4603      	mov	r3, r0
 8015d38:	77fb      	strb	r3, [r7, #31]
 8015d3a:	7ffb      	ldrb	r3, [r7, #31]
 8015d3c:	2b00      	cmp	r3, #0
 8015d3e:	d001      	beq.n	8015d44 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x48>
 8015d40:	7ffb      	ldrb	r3, [r7, #31]
 8015d42:	e027      	b.n	8015d94 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x98>
        context, input, filter, bias, output, &real_multiplier));
    QuantizeMultiplier(real_multiplier, &data->output_multiplier,
 8015d44:	ed97 7b04 	vldr	d7, [r7, #16]
 8015d48:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015d4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015d4c:	3304      	adds	r3, #4
 8015d4e:	4619      	mov	r1, r3
 8015d50:	4610      	mov	r0, r2
 8015d52:	eeb0 0a47 	vmov.f32	s0, s14
 8015d56:	eef0 0a67 	vmov.f32	s1, s15
 8015d5a:	f7fd f9f5 	bl	8013148 <_ZN6tflite18QuantizeMultiplierEdPlPi>
                       &data->output_shift);

    data->input_zero_point = input->params.zero_point;
 8015d5e:	687b      	ldr	r3, [r7, #4]
 8015d60:	691a      	ldr	r2, [r3, #16]
 8015d62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015d64:	615a      	str	r2, [r3, #20]
    data->filter_zero_point = filter->params.zero_point;
 8015d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d68:	691a      	ldr	r2, [r3, #16]
 8015d6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015d6c:	619a      	str	r2, [r3, #24]
    data->output_zero_point = output->params.zero_point;
 8015d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d70:	691a      	ldr	r2, [r3, #16]
 8015d72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015d74:	61da      	str	r2, [r3, #28]

    return CalculateActivationRangeQuantized(context, activation, output,
 8015d76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015d78:	f103 0208 	add.w	r2, r3, #8
 8015d7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015d7e:	330c      	adds	r3, #12
 8015d80:	7af9      	ldrb	r1, [r7, #11]
 8015d82:	9300      	str	r3, [sp, #0]
 8015d84:	4613      	mov	r3, r2
 8015d86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015d88:	68f8      	ldr	r0, [r7, #12]
 8015d8a:	f7fd fe15 	bl	80139b8 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>
 8015d8e:	4603      	mov	r3, r0
                                             &data->output_activation_min,
                                             &data->output_activation_max);
 8015d90:	e000      	b.n	8015d94 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x98>
  }
  return kTfLiteOk;
 8015d92:	2300      	movs	r3, #0
}
 8015d94:	4618      	mov	r0, r3
 8015d96:	3720      	adds	r7, #32
 8015d98:	46bd      	mov	sp, r7
 8015d9a:	bd80      	pop	{r7, pc}

08015d9c <_ZSt3maxIsERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 8015d9c:	b480      	push	{r7}
 8015d9e:	b083      	sub	sp, #12
 8015da0:	af00      	add	r7, sp, #0
 8015da2:	6078      	str	r0, [r7, #4]
 8015da4:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 8015da6:	687b      	ldr	r3, [r7, #4]
 8015da8:	f9b3 2000 	ldrsh.w	r2, [r3]
 8015dac:	683b      	ldr	r3, [r7, #0]
 8015dae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015db2:	429a      	cmp	r2, r3
 8015db4:	da01      	bge.n	8015dba <_ZSt3maxIsERKT_S2_S2_+0x1e>
	return __b;
 8015db6:	683b      	ldr	r3, [r7, #0]
 8015db8:	e000      	b.n	8015dbc <_ZSt3maxIsERKT_S2_S2_+0x20>
      return __a;
 8015dba:	687b      	ldr	r3, [r7, #4]
    }
 8015dbc:	4618      	mov	r0, r3
 8015dbe:	370c      	adds	r7, #12
 8015dc0:	46bd      	mov	sp, r7
 8015dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015dc6:	4770      	bx	lr

08015dc8 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>:
  TFLITE_DCHECK(input1 != nullptr);
  TFLITE_DCHECK(input2 != nullptr);
  return TfLiteIntArrayEqual(input1->dims, input2->dims);
}

const RuntimeShape GetTensorShape(const TfLiteEvalTensor* tensor) {
 8015dc8:	b580      	push	{r7, lr}
 8015dca:	b086      	sub	sp, #24
 8015dcc:	af00      	add	r7, sp, #0
 8015dce:	6078      	str	r0, [r7, #4]
 8015dd0:	6039      	str	r1, [r7, #0]
  if (tensor == nullptr || tensor->dims == nullptr) {
 8015dd2:	683b      	ldr	r3, [r7, #0]
 8015dd4:	2b00      	cmp	r3, #0
 8015dd6:	d003      	beq.n	8015de0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x18>
 8015dd8:	683b      	ldr	r3, [r7, #0]
 8015dda:	685b      	ldr	r3, [r3, #4]
 8015ddc:	2b00      	cmp	r3, #0
 8015dde:	d103      	bne.n	8015de8 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x20>
    return RuntimeShape();
 8015de0:	6878      	ldr	r0, [r7, #4]
 8015de2:	f7fd fe65 	bl	8013ab0 <_ZN6tflite12RuntimeShapeC1Ev>
 8015de6:	e00d      	b.n	8015e04 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x3c>
  }
  TfLiteIntArray* dims = tensor->dims;
 8015de8:	683b      	ldr	r3, [r7, #0]
 8015dea:	685b      	ldr	r3, [r3, #4]
 8015dec:	617b      	str	r3, [r7, #20]
  const int dims_size = dims->size;
 8015dee:	697b      	ldr	r3, [r7, #20]
 8015df0:	681b      	ldr	r3, [r3, #0]
 8015df2:	613b      	str	r3, [r7, #16]
  const int32_t* dims_data = reinterpret_cast<const int32_t*>(dims->data);
 8015df4:	697b      	ldr	r3, [r7, #20]
 8015df6:	3304      	adds	r3, #4
 8015df8:	60fb      	str	r3, [r7, #12]
  return RuntimeShape(dims_size, dims_data);
 8015dfa:	68fa      	ldr	r2, [r7, #12]
 8015dfc:	6939      	ldr	r1, [r7, #16]
 8015dfe:	6878      	ldr	r0, [r7, #4]
 8015e00:	f7fd fe64 	bl	8013acc <_ZN6tflite12RuntimeShapeC1EiPKl>
}
 8015e04:	6878      	ldr	r0, [r7, #4]
 8015e06:	3718      	adds	r7, #24
 8015e08:	46bd      	mov	sp, r7
 8015e0a:	bd80      	pop	{r7, pc}

08015e0c <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>:
}

// Data is required to be contiguous, and so many operators can use either the
// full array flat size or the flat size with one dimension skipped (commonly
// the depth).
inline int FlatSizeSkipDim(const RuntimeShape& shape, int skip_dim) {
 8015e0c:	b580      	push	{r7, lr}
 8015e0e:	b086      	sub	sp, #24
 8015e10:	af00      	add	r7, sp, #0
 8015e12:	6078      	str	r0, [r7, #4]
 8015e14:	6039      	str	r1, [r7, #0]
  const int dims_count = shape.DimensionsCount();
 8015e16:	6878      	ldr	r0, [r7, #4]
 8015e18:	f7fd fe81 	bl	8013b1e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8015e1c:	60f8      	str	r0, [r7, #12]
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
 8015e1e:	683b      	ldr	r3, [r7, #0]
 8015e20:	2b00      	cmp	r3, #0
 8015e22:	db03      	blt.n	8015e2c <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x20>
 8015e24:	683a      	ldr	r2, [r7, #0]
 8015e26:	68fb      	ldr	r3, [r7, #12]
 8015e28:	429a      	cmp	r2, r3
 8015e2a:	db01      	blt.n	8015e30 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x24>
 8015e2c:	f004 fab2 	bl	801a394 <abort>
  const auto* dims_data = shape.DimsData();
 8015e30:	6878      	ldr	r0, [r7, #4]
 8015e32:	f7fd ffa6 	bl	8013d82 <_ZNK6tflite12RuntimeShape8DimsDataEv>
 8015e36:	60b8      	str	r0, [r7, #8]
  int flat_size = 1;
 8015e38:	2301      	movs	r3, #1
 8015e3a:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < dims_count; ++i) {
 8015e3c:	2300      	movs	r3, #0
 8015e3e:	613b      	str	r3, [r7, #16]
 8015e40:	693a      	ldr	r2, [r7, #16]
 8015e42:	68fb      	ldr	r3, [r7, #12]
 8015e44:	429a      	cmp	r2, r3
 8015e46:	da12      	bge.n	8015e6e <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x62>
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
 8015e48:	693a      	ldr	r2, [r7, #16]
 8015e4a:	683b      	ldr	r3, [r7, #0]
 8015e4c:	429a      	cmp	r2, r3
 8015e4e:	d005      	beq.n	8015e5c <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x50>
 8015e50:	693b      	ldr	r3, [r7, #16]
 8015e52:	009b      	lsls	r3, r3, #2
 8015e54:	68ba      	ldr	r2, [r7, #8]
 8015e56:	4413      	add	r3, r2
 8015e58:	681b      	ldr	r3, [r3, #0]
 8015e5a:	e000      	b.n	8015e5e <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x52>
 8015e5c:	2301      	movs	r3, #1
 8015e5e:	697a      	ldr	r2, [r7, #20]
 8015e60:	fb02 f303 	mul.w	r3, r2, r3
 8015e64:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < dims_count; ++i) {
 8015e66:	693b      	ldr	r3, [r7, #16]
 8015e68:	3301      	adds	r3, #1
 8015e6a:	613b      	str	r3, [r7, #16]
 8015e6c:	e7e8      	b.n	8015e40 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x34>
  }
  return flat_size;
 8015e6e:	697b      	ldr	r3, [r7, #20]
}
 8015e70:	4618      	mov	r0, r3
 8015e72:	3718      	adds	r7, #24
 8015e74:	46bd      	mov	sp, r7
 8015e76:	bd80      	pop	{r7, pc}

08015e78 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>:

// A combination of MatchingFlatSize() and FlatSizeSkipDim().
inline int MatchingFlatSizeSkipDim(const RuntimeShape& shape, int skip_dim,
                                   const RuntimeShape& check_shape_0) {
 8015e78:	b590      	push	{r4, r7, lr}
 8015e7a:	b087      	sub	sp, #28
 8015e7c:	af00      	add	r7, sp, #0
 8015e7e:	60f8      	str	r0, [r7, #12]
 8015e80:	60b9      	str	r1, [r7, #8]
 8015e82:	607a      	str	r2, [r7, #4]
  const int dims_count = shape.DimensionsCount();
 8015e84:	68f8      	ldr	r0, [r7, #12]
 8015e86:	f7fd fe4a 	bl	8013b1e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8015e8a:	6138      	str	r0, [r7, #16]
  for (int i = 0; i < dims_count; ++i) {
 8015e8c:	2300      	movs	r3, #0
 8015e8e:	617b      	str	r3, [r7, #20]
 8015e90:	697a      	ldr	r2, [r7, #20]
 8015e92:	693b      	ldr	r3, [r7, #16]
 8015e94:	429a      	cmp	r2, r3
 8015e96:	da15      	bge.n	8015ec4 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x4c>
    if (i != skip_dim) {
 8015e98:	697a      	ldr	r2, [r7, #20]
 8015e9a:	68bb      	ldr	r3, [r7, #8]
 8015e9c:	429a      	cmp	r2, r3
 8015e9e:	d00d      	beq.n	8015ebc <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x44>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 8015ea0:	6979      	ldr	r1, [r7, #20]
 8015ea2:	68f8      	ldr	r0, [r7, #12]
 8015ea4:	f7fd ff48 	bl	8013d38 <_ZNK6tflite12RuntimeShape4DimsEi>
 8015ea8:	4604      	mov	r4, r0
 8015eaa:	6979      	ldr	r1, [r7, #20]
 8015eac:	6878      	ldr	r0, [r7, #4]
 8015eae:	f7fd ff43 	bl	8013d38 <_ZNK6tflite12RuntimeShape4DimsEi>
 8015eb2:	4603      	mov	r3, r0
 8015eb4:	429c      	cmp	r4, r3
 8015eb6:	d001      	beq.n	8015ebc <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x44>
 8015eb8:	f004 fa6c 	bl	801a394 <abort>
  for (int i = 0; i < dims_count; ++i) {
 8015ebc:	697b      	ldr	r3, [r7, #20]
 8015ebe:	3301      	adds	r3, #1
 8015ec0:	617b      	str	r3, [r7, #20]
 8015ec2:	e7e5      	b.n	8015e90 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x18>
    }
  }
  return FlatSizeSkipDim(shape, skip_dim);
 8015ec4:	68b9      	ldr	r1, [r7, #8]
 8015ec6:	68f8      	ldr	r0, [r7, #12]
 8015ec8:	f7ff ffa0 	bl	8015e0c <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
 8015ecc:	4603      	mov	r3, r0
}
 8015ece:	4618      	mov	r0, r3
 8015ed0:	371c      	adds	r7, #28
 8015ed2:	46bd      	mov	sp, r7
 8015ed4:	bd90      	pop	{r4, r7, pc}

08015ed6 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>:
inline typename FixedPointType::ScalarRawType RescaleConstantInitializer(
 8015ed6:	b580      	push	{r7, lr}
 8015ed8:	b082      	sub	sp, #8
 8015eda:	af00      	add	r7, sp, #0
 8015edc:	6078      	str	r0, [r7, #4]
      RoundingDivideByPOT<std::int32_t>(int32_value, 32 - ScalarTypeBits));
 8015ede:	2100      	movs	r1, #0
 8015ee0:	6878      	ldr	r0, [r7, #4]
 8015ee2:	f7fe fb23 	bl	801452c <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 8015ee6:	4603      	mov	r3, r0
}
 8015ee8:	4618      	mov	r0, r3
 8015eea:	3708      	adds	r7, #8
 8015eec:	46bd      	mov	sp, r7
 8015eee:	bd80      	pop	{r7, pc}

08015ef0 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 8015ef0:	b580      	push	{r7, lr}
 8015ef2:	b082      	sub	sp, #8
 8015ef4:	af00      	add	r7, sp, #0
 8015ef6:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 8015ef8:	6878      	ldr	r0, [r7, #4]
 8015efa:	f000 f805 	bl	8015f08 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin1ElLin1EE4evalEl>
 8015efe:	4603      	mov	r3, r0
}
 8015f00:	4618      	mov	r0, r3
 8015f02:	3708      	adds	r7, #8
 8015f04:	46bd      	mov	sp, r7
 8015f06:	bd80      	pop	{r7, pc}

08015f08 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin1ElLin1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 8015f08:	b580      	push	{r7, lr}
 8015f0a:	b082      	sub	sp, #8
 8015f0c:	af00      	add	r7, sp, #0
 8015f0e:	6078      	str	r0, [r7, #4]
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
 8015f10:	2101      	movs	r1, #1
 8015f12:	6878      	ldr	r0, [r7, #4]
 8015f14:	f7fe fb0a 	bl	801452c <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 8015f18:	4603      	mov	r3, r0
  }
 8015f1a:	4618      	mov	r0, r3
 8015f1c:	3708      	adds	r7, #8
 8015f1e:	46bd      	mov	sp, r7
 8015f20:	bd80      	pop	{r7, pc}

08015f22 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>:
FixedPoint<tRawType, tIntegerBits> SelectUsingMask(
 8015f22:	b590      	push	{r4, r7, lr}
 8015f24:	b085      	sub	sp, #20
 8015f26:	af00      	add	r7, sp, #0
 8015f28:	60f8      	str	r0, [r7, #12]
 8015f2a:	60b9      	str	r1, [r7, #8]
 8015f2c:	607a      	str	r2, [r7, #4]
      SelectUsingMask(if_mask, then_val.raw(), else_val.raw()));
 8015f2e:	f107 0308 	add.w	r3, r7, #8
 8015f32:	4618      	mov	r0, r3
 8015f34:	f7ff f8b4 	bl	80150a0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8015f38:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 8015f3a:	681c      	ldr	r4, [r3, #0]
      SelectUsingMask(if_mask, then_val.raw(), else_val.raw()));
 8015f3c:	1d3b      	adds	r3, r7, #4
 8015f3e:	4618      	mov	r0, r3
 8015f40:	f7ff f8ae 	bl	80150a0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8015f44:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 8015f46:	681b      	ldr	r3, [r3, #0]
 8015f48:	461a      	mov	r2, r3
 8015f4a:	4621      	mov	r1, r4
 8015f4c:	68f8      	ldr	r0, [r7, #12]
 8015f4e:	f7ff fb0b 	bl	8015568 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 8015f52:	4603      	mov	r3, r0
 8015f54:	4618      	mov	r0, r3
 8015f56:	f7ff f831 	bl	8014fbc <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 8015f5a:	4603      	mov	r3, r0
}
 8015f5c:	4618      	mov	r0, r3
 8015f5e:	3714      	adds	r7, #20
 8015f60:	46bd      	mov	sp, r7
 8015f62:	bd90      	pop	{r4, r7, pc}

08015f64 <_ZN8gemmlowp10MaskIfZeroIlEET_S1_>:
tIntegerType MaskIfZero(tIntegerType a) {
 8015f64:	b580      	push	{r7, lr}
 8015f66:	b082      	sub	sp, #8
 8015f68:	af00      	add	r7, sp, #0
 8015f6a:	6078      	str	r0, [r7, #4]
  return MaskIfNonZero<tIntegerType>(!a);
 8015f6c:	687b      	ldr	r3, [r7, #4]
 8015f6e:	2b00      	cmp	r3, #0
 8015f70:	bf0c      	ite	eq
 8015f72:	2301      	moveq	r3, #1
 8015f74:	2300      	movne	r3, #0
 8015f76:	b2db      	uxtb	r3, r3
 8015f78:	4618      	mov	r0, r3
 8015f7a:	f7fe fef9 	bl	8014d70 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8015f7e:	4603      	mov	r3, r0
}
 8015f80:	4618      	mov	r0, r3
 8015f82:	3708      	adds	r7, #8
 8015f84:	46bd      	mov	sp, r7
 8015f86:	bd80      	pop	{r7, pc}

08015f88 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_>:
FixedPoint<tRawType, 0> exp_on_interval_between_negative_one_quarter_and_0_excl(
 8015f88:	b580      	push	{r7, lr}
 8015f8a:	b08a      	sub	sp, #40	; 0x28
 8015f8c:	af00      	add	r7, sp, #0
 8015f8e:	6078      	str	r0, [r7, #4]
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F, 1895147668, std::exp(-1.0 / 8.0));
 8015f90:	482c      	ldr	r0, [pc, #176]	; (8016044 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_+0xbc>)
 8015f92:	f7ff ffa0 	bl	8015ed6 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 8015f96:	4603      	mov	r3, r0
 8015f98:	4618      	mov	r0, r3
 8015f9a:	f7ff f88c 	bl	80150b6 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8015f9e:	4603      	mov	r3, r0
 8015fa0:	627b      	str	r3, [r7, #36]	; 0x24
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F, 715827883, 1.0 / 3.0);
 8015fa2:	4829      	ldr	r0, [pc, #164]	; (8016048 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_+0xc0>)
 8015fa4:	f7ff ff97 	bl	8015ed6 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 8015fa8:	4603      	mov	r3, r0
 8015faa:	4618      	mov	r0, r3
 8015fac:	f7ff f883 	bl	80150b6 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8015fb0:	4603      	mov	r3, r0
 8015fb2:	623b      	str	r3, [r7, #32]
  F x = a + F::template ConstantPOT<-3>();
 8015fb4:	f000 f86c 	bl	8016090 <_ZN8gemmlowp10FixedPointIlLi0EE11ConstantPOTILin3EEES1_v>
 8015fb8:	4603      	mov	r3, r0
 8015fba:	4619      	mov	r1, r3
 8015fbc:	6878      	ldr	r0, [r7, #4]
 8015fbe:	f000 f870 	bl	80160a2 <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8015fc2:	4603      	mov	r3, r0
 8015fc4:	61fb      	str	r3, [r7, #28]
  F x2 = x * x;
 8015fc6:	69f9      	ldr	r1, [r7, #28]
 8015fc8:	69f8      	ldr	r0, [r7, #28]
 8015fca:	f000 f83f 	bl	801604c <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8015fce:	4603      	mov	r3, r0
 8015fd0:	61bb      	str	r3, [r7, #24]
  F x3 = x2 * x;
 8015fd2:	69f9      	ldr	r1, [r7, #28]
 8015fd4:	69b8      	ldr	r0, [r7, #24]
 8015fd6:	f000 f839 	bl	801604c <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8015fda:	4603      	mov	r3, r0
 8015fdc:	617b      	str	r3, [r7, #20]
  F x4 = x2 * x2;
 8015fde:	69b9      	ldr	r1, [r7, #24]
 8015fe0:	69b8      	ldr	r0, [r7, #24]
 8015fe2:	f000 f833 	bl	801604c <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8015fe6:	4603      	mov	r3, r0
 8015fe8:	613b      	str	r3, [r7, #16]
  F x4_over_4 = SaturatingRoundingMultiplyByPOT<-2>(x4);
 8015fea:	6938      	ldr	r0, [r7, #16]
 8015fec:	f000 f877 	bl	80160de <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>
 8015ff0:	4603      	mov	r3, r0
 8015ff2:	60fb      	str	r3, [r7, #12]
      SaturatingRoundingMultiplyByPOT<-1>(
 8015ff4:	6979      	ldr	r1, [r7, #20]
 8015ff6:	68f8      	ldr	r0, [r7, #12]
 8015ff8:	f000 f853 	bl	80160a2 <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8015ffc:	4603      	mov	r3, r0
 8015ffe:	6a39      	ldr	r1, [r7, #32]
 8016000:	4618      	mov	r0, r3
 8016002:	f000 f823 	bl	801604c <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8016006:	4603      	mov	r3, r0
 8016008:	69b9      	ldr	r1, [r7, #24]
 801600a:	4618      	mov	r0, r3
 801600c:	f000 f849 	bl	80160a2 <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8016010:	4603      	mov	r3, r0
 8016012:	4618      	mov	r0, r3
 8016014:	f000 f879 	bl	801610a <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>
 8016018:	4603      	mov	r3, r0
 801601a:	60bb      	str	r3, [r7, #8]
  return AddSaturatingIf16Bit(
 801601c:	68b9      	ldr	r1, [r7, #8]
 801601e:	69f8      	ldr	r0, [r7, #28]
 8016020:	f000 f83f 	bl	80160a2 <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8016024:	4603      	mov	r3, r0
 8016026:	4619      	mov	r1, r3
 8016028:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801602a:	f000 f80f 	bl	801604c <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801602e:	4603      	mov	r3, r0
 8016030:	4619      	mov	r1, r3
 8016032:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016034:	f000 f87f 	bl	8016136 <_ZN8gemmlowp20AddSaturatingIf16BitIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8016038:	4603      	mov	r3, r0
}
 801603a:	4618      	mov	r0, r3
 801603c:	3728      	adds	r7, #40	; 0x28
 801603e:	46bd      	mov	sp, r7
 8016040:	bd80      	pop	{r7, pc}
 8016042:	bf00      	nop
 8016044:	70f5a894 	.word	0x70f5a894
 8016048:	2aaaaaab 	.word	0x2aaaaaab

0801604c <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
 801604c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801604e:	b085      	sub	sp, #20
 8016050:	af00      	add	r7, sp, #0
 8016052:	6078      	str	r0, [r7, #4]
 8016054:	6039      	str	r1, [r7, #0]
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
 8016056:	1d3b      	adds	r3, r7, #4
 8016058:	4618      	mov	r0, r3
 801605a:	f7ff f821 	bl	80150a0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801605e:	4603      	mov	r3, r0
 8016060:	681d      	ldr	r5, [r3, #0]
 8016062:	463b      	mov	r3, r7
 8016064:	4618      	mov	r0, r3
 8016066:	f7ff f81b 	bl	80150a0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801606a:	4603      	mov	r3, r0
 801606c:	681e      	ldr	r6, [r3, #0]
 801606e:	f107 030c 	add.w	r3, r7, #12
 8016072:	4618      	mov	r0, r3
 8016074:	f7ff f814 	bl	80150a0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8016078:	4604      	mov	r4, r0
 801607a:	4631      	mov	r1, r6
 801607c:	4628      	mov	r0, r5
 801607e:	f7fd fde5 	bl	8013c4c <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 8016082:	4603      	mov	r3, r0
 8016084:	6023      	str	r3, [r4, #0]
  return c;
 8016086:	68fb      	ldr	r3, [r7, #12]
}
 8016088:	4618      	mov	r0, r3
 801608a:	3714      	adds	r7, #20
 801608c:	46bd      	mov	sp, r7
 801608e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016090 <_ZN8gemmlowp10FixedPointIlLi0EE11ConstantPOTILin3EEES1_v>:
  static FixedPoint ConstantPOT() {
 8016090:	b580      	push	{r7, lr}
 8016092:	af00      	add	r7, sp, #0
    return FromScalarRaw(ScalarRawType(1) << kOffset);
 8016094:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8016098:	f7ff f80d 	bl	80150b6 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 801609c:	4603      	mov	r3, r0
  }
 801609e:	4618      	mov	r0, r3
 80160a0:	bd80      	pop	{r7, pc}

080160a2 <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator+, Add)
 80160a2:	b590      	push	{r4, r7, lr}
 80160a4:	b083      	sub	sp, #12
 80160a6:	af00      	add	r7, sp, #0
 80160a8:	6078      	str	r0, [r7, #4]
 80160aa:	6039      	str	r1, [r7, #0]
 80160ac:	1d3b      	adds	r3, r7, #4
 80160ae:	4618      	mov	r0, r3
 80160b0:	f7fe fff6 	bl	80150a0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 80160b4:	4603      	mov	r3, r0
 80160b6:	681c      	ldr	r4, [r3, #0]
 80160b8:	463b      	mov	r3, r7
 80160ba:	4618      	mov	r0, r3
 80160bc:	f7fe fff0 	bl	80150a0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 80160c0:	4603      	mov	r3, r0
 80160c2:	681b      	ldr	r3, [r3, #0]
 80160c4:	4619      	mov	r1, r3
 80160c6:	4620      	mov	r0, r4
 80160c8:	f7fe fe30 	bl	8014d2c <_ZN8gemmlowp3AddIlEET_S1_S1_>
 80160cc:	4603      	mov	r3, r0
 80160ce:	4618      	mov	r0, r3
 80160d0:	f7fe ff74 	bl	8014fbc <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 80160d4:	4603      	mov	r3, r0
 80160d6:	4618      	mov	r0, r3
 80160d8:	370c      	adds	r7, #12
 80160da:	46bd      	mov	sp, r7
 80160dc:	bd90      	pop	{r4, r7, pc}

080160de <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>:
FixedPoint<tRawType, tIntegerBits> SaturatingRoundingMultiplyByPOT(
 80160de:	b580      	push	{r7, lr}
 80160e0:	b082      	sub	sp, #8
 80160e2:	af00      	add	r7, sp, #0
 80160e4:	6078      	str	r0, [r7, #4]
      SaturatingRoundingMultiplyByPOT<tExponent>(a.raw()));
 80160e6:	1d3b      	adds	r3, r7, #4
 80160e8:	4618      	mov	r0, r3
 80160ea:	f7fe ffd9 	bl	80150a0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 80160ee:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 80160f0:	681b      	ldr	r3, [r3, #0]
 80160f2:	4618      	mov	r0, r3
 80160f4:	f000 f83d 	bl	8016172 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElEET0_S1_>
 80160f8:	4603      	mov	r3, r0
 80160fa:	4618      	mov	r0, r3
 80160fc:	f7fe ff5e 	bl	8014fbc <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 8016100:	4603      	mov	r3, r0
}
 8016102:	4618      	mov	r0, r3
 8016104:	3708      	adds	r7, #8
 8016106:	46bd      	mov	sp, r7
 8016108:	bd80      	pop	{r7, pc}

0801610a <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>:
FixedPoint<tRawType, tIntegerBits> SaturatingRoundingMultiplyByPOT(
 801610a:	b580      	push	{r7, lr}
 801610c:	b082      	sub	sp, #8
 801610e:	af00      	add	r7, sp, #0
 8016110:	6078      	str	r0, [r7, #4]
      SaturatingRoundingMultiplyByPOT<tExponent>(a.raw()));
 8016112:	1d3b      	adds	r3, r7, #4
 8016114:	4618      	mov	r0, r3
 8016116:	f7fe ffc3 	bl	80150a0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801611a:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 801611c:	681b      	ldr	r3, [r3, #0]
 801611e:	4618      	mov	r0, r3
 8016120:	f7ff fee6 	bl	8015ef0 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElEET0_S1_>
 8016124:	4603      	mov	r3, r0
 8016126:	4618      	mov	r0, r3
 8016128:	f7fe ff48 	bl	8014fbc <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 801612c:	4603      	mov	r3, r0
}
 801612e:	4618      	mov	r0, r3
 8016130:	3708      	adds	r7, #8
 8016132:	46bd      	mov	sp, r7
 8016134:	bd80      	pop	{r7, pc}

08016136 <_ZN8gemmlowp20AddSaturatingIf16BitIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>:
FixedPoint<tRawType, tIntegerBits> AddSaturatingIf16Bit(
 8016136:	b590      	push	{r4, r7, lr}
 8016138:	b083      	sub	sp, #12
 801613a:	af00      	add	r7, sp, #0
 801613c:	6078      	str	r0, [r7, #4]
 801613e:	6039      	str	r1, [r7, #0]
      AddSaturatingIf16Bit(a.raw(), b.raw()));
 8016140:	1d3b      	adds	r3, r7, #4
 8016142:	4618      	mov	r0, r3
 8016144:	f7fe ffac 	bl	80150a0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8016148:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 801614a:	681c      	ldr	r4, [r3, #0]
      AddSaturatingIf16Bit(a.raw(), b.raw()));
 801614c:	463b      	mov	r3, r7
 801614e:	4618      	mov	r0, r3
 8016150:	f7fe ffa6 	bl	80150a0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8016154:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 8016156:	681b      	ldr	r3, [r3, #0]
 8016158:	4619      	mov	r1, r3
 801615a:	4620      	mov	r0, r4
 801615c:	f000 f815 	bl	801618a <_ZN8gemmlowp20AddSaturatingIf16BitIlEET_S1_S1_>
 8016160:	4603      	mov	r3, r0
 8016162:	4618      	mov	r0, r3
 8016164:	f7fe ff2a 	bl	8014fbc <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 8016168:	4603      	mov	r3, r0
}
 801616a:	4618      	mov	r0, r3
 801616c:	370c      	adds	r7, #12
 801616e:	46bd      	mov	sp, r7
 8016170:	bd90      	pop	{r4, r7, pc}

08016172 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 8016172:	b580      	push	{r7, lr}
 8016174:	b082      	sub	sp, #8
 8016176:	af00      	add	r7, sp, #0
 8016178:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 801617a:	6878      	ldr	r0, [r7, #4]
 801617c:	f000 f813 	bl	80161a6 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin2ElLin1EE4evalEl>
 8016180:	4603      	mov	r3, r0
}
 8016182:	4618      	mov	r0, r3
 8016184:	3708      	adds	r7, #8
 8016186:	46bd      	mov	sp, r7
 8016188:	bd80      	pop	{r7, pc}

0801618a <_ZN8gemmlowp20AddSaturatingIf16BitIlEET_S1_S1_>:
IntegerType AddSaturatingIf16Bit(IntegerType a, IntegerType b) {
 801618a:	b580      	push	{r7, lr}
 801618c:	b082      	sub	sp, #8
 801618e:	af00      	add	r7, sp, #0
 8016190:	6078      	str	r0, [r7, #4]
 8016192:	6039      	str	r1, [r7, #0]
  return AddSaturatingIf16BitImpl<IntegerType, sizeof(ScalarType) == 2>::Run(a,
 8016194:	6839      	ldr	r1, [r7, #0]
 8016196:	6878      	ldr	r0, [r7, #4]
 8016198:	f000 f812 	bl	80161c0 <_ZN8gemmlowp24AddSaturatingIf16BitImplIlLb0EE3RunEll>
 801619c:	4603      	mov	r3, r0
}
 801619e:	4618      	mov	r0, r3
 80161a0:	3708      	adds	r7, #8
 80161a2:	46bd      	mov	sp, r7
 80161a4:	bd80      	pop	{r7, pc}

080161a6 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin2ElLin1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 80161a6:	b580      	push	{r7, lr}
 80161a8:	b082      	sub	sp, #8
 80161aa:	af00      	add	r7, sp, #0
 80161ac:	6078      	str	r0, [r7, #4]
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
 80161ae:	2102      	movs	r1, #2
 80161b0:	6878      	ldr	r0, [r7, #4]
 80161b2:	f7fe f9bb 	bl	801452c <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 80161b6:	4603      	mov	r3, r0
  }
 80161b8:	4618      	mov	r0, r3
 80161ba:	3708      	adds	r7, #8
 80161bc:	46bd      	mov	sp, r7
 80161be:	bd80      	pop	{r7, pc}

080161c0 <_ZN8gemmlowp24AddSaturatingIf16BitImplIlLb0EE3RunEll>:
  static IntegerType Run(IntegerType a, IntegerType b) { return Add(a, b); }
 80161c0:	b580      	push	{r7, lr}
 80161c2:	b082      	sub	sp, #8
 80161c4:	af00      	add	r7, sp, #0
 80161c6:	6078      	str	r0, [r7, #4]
 80161c8:	6039      	str	r1, [r7, #0]
 80161ca:	6839      	ldr	r1, [r7, #0]
 80161cc:	6878      	ldr	r0, [r7, #4]
 80161ce:	f7fe fdad 	bl	8014d2c <_ZN8gemmlowp3AddIlEET_S1_S1_>
 80161d2:	4603      	mov	r3, r0
 80161d4:	4618      	mov	r0, r3
 80161d6:	3708      	adds	r7, #8
 80161d8:	46bd      	mov	sp, r7
 80161da:	bd80      	pop	{r7, pc}

080161dc <_ZSt3maxIhERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 80161dc:	b480      	push	{r7}
 80161de:	b083      	sub	sp, #12
 80161e0:	af00      	add	r7, sp, #0
 80161e2:	6078      	str	r0, [r7, #4]
 80161e4:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 80161e6:	687b      	ldr	r3, [r7, #4]
 80161e8:	781a      	ldrb	r2, [r3, #0]
 80161ea:	683b      	ldr	r3, [r7, #0]
 80161ec:	781b      	ldrb	r3, [r3, #0]
 80161ee:	429a      	cmp	r2, r3
 80161f0:	d201      	bcs.n	80161f6 <_ZSt3maxIhERKT_S2_S2_+0x1a>
	return __b;
 80161f2:	683b      	ldr	r3, [r7, #0]
 80161f4:	e000      	b.n	80161f8 <_ZSt3maxIhERKT_S2_S2_+0x1c>
      return __a;
 80161f6:	687b      	ldr	r3, [r7, #4]
    }
 80161f8:	4618      	mov	r0, r3
 80161fa:	370c      	adds	r7, #12
 80161fc:	46bd      	mov	sp, r7
 80161fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016202:	4770      	bx	lr

08016204 <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 8016204:	b480      	push	{r7}
 8016206:	b083      	sub	sp, #12
 8016208:	af00      	add	r7, sp, #0
 801620a:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 801620c:	687b      	ldr	r3, [r7, #4]
 801620e:	2b00      	cmp	r3, #0
 8016210:	d002      	beq.n	8016218 <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor+0x14>
 8016212:	687b      	ldr	r3, [r7, #4]
 8016214:	681b      	ldr	r3, [r3, #0]
 8016216:	e000      	b.n	801621a <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor+0x16>
 8016218:	2300      	movs	r3, #0
}
 801621a:	4618      	mov	r0, r3
 801621c:	370c      	adds	r7, #12
 801621e:	46bd      	mov	sp, r7
 8016220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016224:	4770      	bx	lr
	...

08016228 <_ZN6tflite26generic_int16_table_lookupEsPKs>:
inline int16_t generic_int16_table_lookup(int16_t value, const int16_t* lut) {
 8016228:	b580      	push	{r7, lr}
 801622a:	b086      	sub	sp, #24
 801622c:	af00      	add	r7, sp, #0
 801622e:	4603      	mov	r3, r0
 8016230:	6039      	str	r1, [r7, #0]
 8016232:	80fb      	strh	r3, [r7, #6]
  uint16_t index = static_cast<uint16_t>(256 + (value >> 7));
 8016234:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8016238:	11db      	asrs	r3, r3, #7
 801623a:	b21b      	sxth	r3, r3
 801623c:	b29b      	uxth	r3, r3
 801623e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8016242:	82fb      	strh	r3, [r7, #22]
  assert(index < 512 && "LUT index out of range.");
 8016244:	8afb      	ldrh	r3, [r7, #22]
 8016246:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801624a:	d306      	bcc.n	801625a <_ZN6tflite26generic_int16_table_lookupEsPKs+0x32>
 801624c:	4b1a      	ldr	r3, [pc, #104]	; (80162b8 <_ZN6tflite26generic_int16_table_lookupEsPKs+0x90>)
 801624e:	4a1b      	ldr	r2, [pc, #108]	; (80162bc <_ZN6tflite26generic_int16_table_lookupEsPKs+0x94>)
 8016250:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8016254:	481a      	ldr	r0, [pc, #104]	; (80162c0 <_ZN6tflite26generic_int16_table_lookupEsPKs+0x98>)
 8016256:	f004 f8a5 	bl	801a3a4 <__assert_func>
  int16_t offset = value & 0x7f;
 801625a:	88fb      	ldrh	r3, [r7, #6]
 801625c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016260:	82bb      	strh	r3, [r7, #20]
  int16_t base = lut[index];
 8016262:	8afb      	ldrh	r3, [r7, #22]
 8016264:	005b      	lsls	r3, r3, #1
 8016266:	683a      	ldr	r2, [r7, #0]
 8016268:	4413      	add	r3, r2
 801626a:	881b      	ldrh	r3, [r3, #0]
 801626c:	827b      	strh	r3, [r7, #18]
  int16_t slope = lut[index + 1] - lut[index];
 801626e:	8afb      	ldrh	r3, [r7, #22]
 8016270:	3301      	adds	r3, #1
 8016272:	005b      	lsls	r3, r3, #1
 8016274:	683a      	ldr	r2, [r7, #0]
 8016276:	4413      	add	r3, r2
 8016278:	f9b3 3000 	ldrsh.w	r3, [r3]
 801627c:	b29a      	uxth	r2, r3
 801627e:	8afb      	ldrh	r3, [r7, #22]
 8016280:	005b      	lsls	r3, r3, #1
 8016282:	6839      	ldr	r1, [r7, #0]
 8016284:	440b      	add	r3, r1
 8016286:	f9b3 3000 	ldrsh.w	r3, [r3]
 801628a:	b29b      	uxth	r3, r3
 801628c:	1ad3      	subs	r3, r2, r3
 801628e:	b29b      	uxth	r3, r3
 8016290:	823b      	strh	r3, [r7, #16]
  int32_t delta = (static_cast<int32_t>(slope) * offset + 64) >> 7;
 8016292:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8016296:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801629a:	fb02 f303 	mul.w	r3, r2, r3
 801629e:	3340      	adds	r3, #64	; 0x40
 80162a0:	11db      	asrs	r3, r3, #7
 80162a2:	60fb      	str	r3, [r7, #12]
  return base + delta;
 80162a4:	68fb      	ldr	r3, [r7, #12]
 80162a6:	b29a      	uxth	r2, r3
 80162a8:	8a7b      	ldrh	r3, [r7, #18]
 80162aa:	4413      	add	r3, r2
 80162ac:	b29b      	uxth	r3, r3
 80162ae:	b21b      	sxth	r3, r3
}
 80162b0:	4618      	mov	r0, r3
 80162b2:	3718      	adds	r7, #24
 80162b4:	46bd      	mov	sp, r7
 80162b6:	bd80      	pop	{r7, pc}
 80162b8:	0801cc90 	.word	0x0801cc90
 80162bc:	0801ccbc 	.word	0x0801ccbc
 80162c0:	0801cd00 	.word	0x0801cd00

080162c4 <_ZN6tflite13reference_ops19SoftMaxCalculateExpERKNS_13SoftmaxParamsEPKsisii>:
}

// Computes exp(input - max_input)
inline int16_t SoftMaxCalculateExp(const SoftmaxParams& params,
                                   const int16_t* input_data, const int depth,
                                   int16_t max_in_row, int i, int c) {
 80162c4:	b580      	push	{r7, lr}
 80162c6:	b08a      	sub	sp, #40	; 0x28
 80162c8:	af00      	add	r7, sp, #0
 80162ca:	60f8      	str	r0, [r7, #12]
 80162cc:	60b9      	str	r1, [r7, #8]
 80162ce:	607a      	str	r2, [r7, #4]
 80162d0:	807b      	strh	r3, [r7, #2]
  int32_t input_diff = input_data[i * depth + c] - max_in_row;
 80162d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80162d4:	687a      	ldr	r2, [r7, #4]
 80162d6:	fb03 f202 	mul.w	r2, r3, r2
 80162da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80162dc:	4413      	add	r3, r2
 80162de:	005b      	lsls	r3, r3, #1
 80162e0:	68ba      	ldr	r2, [r7, #8]
 80162e2:	4413      	add	r3, r2
 80162e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80162e8:	461a      	mov	r2, r3
 80162ea:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80162ee:	1ad3      	subs	r3, r2, r3
 80162f0:	627b      	str	r3, [r7, #36]	; 0x24
  // scale the input_diff such that [-65535, 0] correspond to [-10.0, 0.0]
  // exp lut generated with range [-10, 0], as exp(-10) is negligible.
  int32_t scaled_diff = MultiplyByQuantizedMultiplier(
      input_diff, params.input_multiplier, params.input_left_shift);
 80162f2:	68fb      	ldr	r3, [r7, #12]
 80162f4:	6899      	ldr	r1, [r3, #8]
 80162f6:	68fb      	ldr	r3, [r7, #12]
 80162f8:	68db      	ldr	r3, [r3, #12]
  int32_t scaled_diff = MultiplyByQuantizedMultiplier(
 80162fa:	461a      	mov	r2, r3
 80162fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80162fe:	f7fd fdab 	bl	8013e58 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 8016302:	6238      	str	r0, [r7, #32]
  // recenter to [-32768, 32767]
  int32_t sym_scaled_diff = scaled_diff + 32767;
 8016304:	6a3b      	ldr	r3, [r7, #32]
 8016306:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 801630a:	337f      	adds	r3, #127	; 0x7f
 801630c:	613b      	str	r3, [r7, #16]
  int16_t sat_sym_scaled_diff =
      std::min(std::max(sym_scaled_diff, static_cast<int32_t>(-32768)),
 801630e:	4b12      	ldr	r3, [pc, #72]	; (8016358 <_ZN6tflite13reference_ops19SoftMaxCalculateExpERKNS_13SoftmaxParamsEPKsisii+0x94>)
 8016310:	617b      	str	r3, [r7, #20]
               static_cast<int32_t>(32767));
 8016312:	f107 0214 	add.w	r2, r7, #20
 8016316:	f107 0310 	add.w	r3, r7, #16
 801631a:	4611      	mov	r1, r2
 801631c:	4618      	mov	r0, r3
 801631e:	f7fd fbb3 	bl	8013a88 <_ZSt3maxIlERKT_S2_S2_>
 8016322:	4602      	mov	r2, r0
 8016324:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8016328:	61bb      	str	r3, [r7, #24]
 801632a:	f107 0318 	add.w	r3, r7, #24
 801632e:	4619      	mov	r1, r3
 8016330:	4610      	mov	r0, r2
 8016332:	f7fd fb95 	bl	8013a60 <_ZSt3minIlERKT_S2_S2_>
 8016336:	4603      	mov	r3, r0
      std::min(std::max(sym_scaled_diff, static_cast<int32_t>(-32768)),
 8016338:	681b      	ldr	r3, [r3, #0]
               static_cast<int32_t>(32767));
 801633a:	83fb      	strh	r3, [r7, #30]
  // apply the exp() LUT activation function
  return generic_int16_table_lookup(sat_sym_scaled_diff, params.exp_lut);
 801633c:	68fb      	ldr	r3, [r7, #12]
 801633e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8016340:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8016344:	4611      	mov	r1, r2
 8016346:	4618      	mov	r0, r3
 8016348:	f7ff ff6e 	bl	8016228 <_ZN6tflite26generic_int16_table_lookupEsPKs>
 801634c:	4603      	mov	r3, r0
}
 801634e:	4618      	mov	r0, r3
 8016350:	3728      	adds	r7, #40	; 0x28
 8016352:	46bd      	mov	sp, r7
 8016354:	bd80      	pop	{r7, pc}
 8016356:	bf00      	nop
 8016358:	ffff8000 	.word	0xffff8000

0801635c <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps>:
// Quantized softmax with int16_t input and int16_t output.
inline void SoftmaxInt16(const SoftmaxParams& params,
                         const RuntimeShape& input_shape,
                         const int16_t* input_data,
                         const RuntimeShape& output_shape,
                         int16_t* output_data) {
 801635c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016360:	b0ab      	sub	sp, #172	; 0xac
 8016362:	af02      	add	r7, sp, #8
 8016364:	63f8      	str	r0, [r7, #60]	; 0x3c
 8016366:	63b9      	str	r1, [r7, #56]	; 0x38
 8016368:	637a      	str	r2, [r7, #52]	; 0x34
 801636a:	633b      	str	r3, [r7, #48]	; 0x30
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 801636c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801636e:	f7fd fbd6 	bl	8013b1e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8016372:	4603      	mov	r3, r0
 8016374:	3b01      	subs	r3, #1
 8016376:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  const int outer_size =
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 801637a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801637c:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8016380:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8016382:	f7ff fd79 	bl	8015e78 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 8016386:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
  const int depth =
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 801638a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801638e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016390:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8016394:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8016396:	f7fe fd31 	bl	8014dfc <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 801639a:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80

  for (int i = 0; i < outer_size; ++i) {
 801639e:	2300      	movs	r3, #0
 80163a0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80163a4:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80163a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80163ac:	429a      	cmp	r2, r3
 80163ae:	f280 8157 	bge.w	8016660 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x304>
    // Find the largest element
    int16_t max_in_row = std::numeric_limits<int16_t>::min();
 80163b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80163b6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
    for (int c = 0; c < depth; ++c) {
 80163ba:	2300      	movs	r3, #0
 80163bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80163c0:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80163c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80163c8:	429a      	cmp	r2, r3
 80163ca:	da1c      	bge.n	8016406 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0xaa>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
 80163cc:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80163d0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80163d4:	fb03 f202 	mul.w	r2, r3, r2
 80163d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80163dc:	4413      	add	r3, r2
 80163de:	005a      	lsls	r2, r3, #1
 80163e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80163e2:	441a      	add	r2, r3
 80163e4:	f107 034e 	add.w	r3, r7, #78	; 0x4e
 80163e8:	4611      	mov	r1, r2
 80163ea:	4618      	mov	r0, r3
 80163ec:	f7ff fcd6 	bl	8015d9c <_ZSt3maxIsERKT_S2_S2_>
 80163f0:	4603      	mov	r3, r0
 80163f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80163f6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
    for (int c = 0; c < depth; ++c) {
 80163fa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80163fe:	3301      	adds	r3, #1
 8016400:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8016404:	e7dc      	b.n	80163c0 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x64>

    // This loops computes the exp values and their sum. We will need the exp
    // values later on in the function so we cache them in the output_data
    // buffer. This is an optimization done to avoid calculating the exp values
    // twice making use of the output_data buffer as scratch memory.
    int32_t sum_of_exps = 0;  // Q16.15 fixed point format.
 8016406:	2300      	movs	r3, #0
 8016408:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    int16_t* exp_results_Q015 = output_data + i * depth;
 801640c:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8016410:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8016414:	fb02 f303 	mul.w	r3, r2, r3
 8016418:	005a      	lsls	r2, r3, #1
 801641a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801641e:	4413      	add	r3, r2
 8016420:	67fb      	str	r3, [r7, #124]	; 0x7c
    for (int c = 0; c < depth; ++c) {
 8016422:	2300      	movs	r3, #0
 8016424:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8016428:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 801642c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8016430:	429a      	cmp	r2, r3
 8016432:	da28      	bge.n	8016486 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x12a>
      exp_results_Q015[c] =
          SoftMaxCalculateExp(params, input_data, depth, max_in_row, i, c);
 8016434:	f9b7 104e 	ldrsh.w	r1, [r7, #78]	; 0x4e
      exp_results_Q015[c] =
 8016438:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801643c:	005a      	lsls	r2, r3, #1
 801643e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8016440:	189c      	adds	r4, r3, r2
          SoftMaxCalculateExp(params, input_data, depth, max_in_row, i, c);
 8016442:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8016446:	9301      	str	r3, [sp, #4]
 8016448:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801644c:	9300      	str	r3, [sp, #0]
 801644e:	460b      	mov	r3, r1
 8016450:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8016454:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8016456:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8016458:	f7ff ff34 	bl	80162c4 <_ZN6tflite13reference_ops19SoftMaxCalculateExpERKNS_13SoftmaxParamsEPKsisii>
 801645c:	4603      	mov	r3, r0
      exp_results_Q015[c] =
 801645e:	8023      	strh	r3, [r4, #0]
      sum_of_exps += exp_results_Q015[c];
 8016460:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8016464:	005a      	lsls	r2, r3, #1
 8016466:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8016468:	4413      	add	r3, r2
 801646a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801646e:	461a      	mov	r2, r3
 8016470:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8016474:	4413      	add	r3, r2
 8016476:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    for (int c = 0; c < depth; ++c) {
 801647a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801647e:	3301      	adds	r3, #1
 8016480:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8016484:	e7d0      	b.n	8016428 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0xcc>
    }

    // Compute the reciprocal 1/sum_of_exps
    uint8_t headroom_plus_one =
        CountLeadingZeros(static_cast<uint32_t>(sum_of_exps));
 8016486:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801648a:	4618      	mov	r0, r3
 801648c:	f7fe fd84 	bl	8014f98 <_ZN6tflite17CountLeadingZerosImEEiT_>
 8016490:	4603      	mov	r3, r0
 8016492:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
    int32_t shifted_sum =
        ((static_cast<int64_t>(sum_of_exps) << (headroom_plus_one - 1)) +
 8016496:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801649a:	17da      	asrs	r2, r3, #31
 801649c:	623b      	str	r3, [r7, #32]
 801649e:	627a      	str	r2, [r7, #36]	; 0x24
 80164a0:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 80164a4:	1e59      	subs	r1, r3, #1
 80164a6:	f1a1 0320 	sub.w	r3, r1, #32
 80164aa:	f1c1 0220 	rsb	r2, r1, #32
 80164ae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80164b0:	fa00 f901 	lsl.w	r9, r0, r1
 80164b4:	6a38      	ldr	r0, [r7, #32]
 80164b6:	fa00 f303 	lsl.w	r3, r0, r3
 80164ba:	ea49 0903 	orr.w	r9, r9, r3
 80164be:	6a3b      	ldr	r3, [r7, #32]
 80164c0:	fa23 f202 	lsr.w	r2, r3, r2
 80164c4:	ea49 0902 	orr.w	r9, r9, r2
 80164c8:	6a3b      	ldr	r3, [r7, #32]
 80164ca:	fa03 f801 	lsl.w	r8, r3, r1
 80164ce:	f518 5300 	adds.w	r3, r8, #8192	; 0x2000
 80164d2:	61bb      	str	r3, [r7, #24]
 80164d4:	f149 0300 	adc.w	r3, r9, #0
 80164d8:	61fb      	str	r3, [r7, #28]
         (1 << 13)) >>
 80164da:	f04f 0200 	mov.w	r2, #0
 80164de:	f04f 0300 	mov.w	r3, #0
 80164e2:	69b9      	ldr	r1, [r7, #24]
 80164e4:	0b8a      	lsrs	r2, r1, #14
 80164e6:	69f9      	ldr	r1, [r7, #28]
 80164e8:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
 80164ec:	69f9      	ldr	r1, [r7, #28]
 80164ee:	138b      	asrs	r3, r1, #14
    int32_t shifted_sum =
 80164f0:	4613      	mov	r3, r2
 80164f2:	677b      	str	r3, [r7, #116]	; 0x74
        14;
    // since the LUT computes 1/(1 + x) we need to first compute x = (sum - 1).
    // also, the LUT expects a symmetrical input, so we must also recenter x
    // from [0, 65535] to [-32768, 32767].
    int32_t sym_shifted_sum = shifted_sum + (-((1 << 15) + (1 << 16)));
 80164f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80164f6:	f5a3 33c0 	sub.w	r3, r3, #98304	; 0x18000
 80164fa:	64bb      	str	r3, [r7, #72]	; 0x48
    int16_t sat_sym_shifted_sum = static_cast<int16_t>(
        std::min(std::max(sym_shifted_sum, static_cast<int32_t>(-32768)),
 80164fc:	4b5b      	ldr	r3, [pc, #364]	; (801666c <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x310>)
 80164fe:	653b      	str	r3, [r7, #80]	; 0x50
                 static_cast<int32_t>(32767)));
 8016500:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8016504:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8016508:	4611      	mov	r1, r2
 801650a:	4618      	mov	r0, r3
 801650c:	f7fd fabc 	bl	8013a88 <_ZSt3maxIlERKT_S2_S2_>
 8016510:	4602      	mov	r2, r0
 8016512:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8016516:	657b      	str	r3, [r7, #84]	; 0x54
 8016518:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801651c:	4619      	mov	r1, r3
 801651e:	4610      	mov	r0, r2
 8016520:	f7fd fa9e 	bl	8013a60 <_ZSt3minIlERKT_S2_S2_>
 8016524:	4603      	mov	r3, r0
        std::min(std::max(sym_shifted_sum, static_cast<int32_t>(-32768)),
 8016526:	681b      	ldr	r3, [r3, #0]
                 static_cast<int32_t>(32767)));
 8016528:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
    // apply 1/(1 + x) LUT activation function
    int16_t reciprocal_scale_Q015 = generic_int16_table_lookup(
        sat_sym_shifted_sum, params.one_over_one_plus_x_lut);
 801652c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801652e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    int16_t reciprocal_scale_Q015 = generic_int16_table_lookup(
 8016530:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	; 0x72
 8016534:	4611      	mov	r1, r2
 8016536:	4618      	mov	r0, r3
 8016538:	f7ff fe76 	bl	8016228 <_ZN6tflite26generic_int16_table_lookupEsPKs>
 801653c:	4603      	mov	r3, r0
 801653e:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70

    // Rescale the exp_result with reciprocal
    // range of output is [0, 32767] correspond to [0.0, 1.0]
    for (int c = 0; c < depth; ++c) {
 8016542:	2300      	movs	r3, #0
 8016544:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8016548:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 801654c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8016550:	429a      	cmp	r2, r3
 8016552:	da7f      	bge.n	8016654 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x2f8>
      uint8_t right_shift = 31 - headroom_plus_one;
 8016554:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8016558:	f1c3 031f 	rsb	r3, r3, #31
 801655c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      int64_t round = 1 << (right_shift - 1);
 8016560:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8016564:	1e5a      	subs	r2, r3, #1
 8016566:	2301      	movs	r3, #1
 8016568:	4093      	lsls	r3, r2
 801656a:	17da      	asrs	r2, r3, #31
 801656c:	603b      	str	r3, [r7, #0]
 801656e:	607a      	str	r2, [r7, #4]
 8016570:	e9d7 3400 	ldrd	r3, r4, [r7]
 8016574:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
      int32_t result = (static_cast<int64_t>(exp_results_Q015[c]) *
 8016578:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801657c:	005a      	lsls	r2, r3, #1
 801657e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8016580:	4413      	add	r3, r2
 8016582:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016586:	b21b      	sxth	r3, r3
 8016588:	17da      	asrs	r2, r3, #31
 801658a:	613b      	str	r3, [r7, #16]
 801658c:	617a      	str	r2, [r7, #20]
                            static_cast<int64_t>(reciprocal_scale_Q015) +
 801658e:	f9b7 3070 	ldrsh.w	r3, [r7, #112]	; 0x70
 8016592:	17da      	asrs	r2, r3, #31
 8016594:	60bb      	str	r3, [r7, #8]
 8016596:	60fa      	str	r2, [r7, #12]
      int32_t result = (static_cast<int64_t>(exp_results_Q015[c]) *
 8016598:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801659c:	460b      	mov	r3, r1
 801659e:	68ba      	ldr	r2, [r7, #8]
 80165a0:	fb02 f203 	mul.w	r2, r2, r3
 80165a4:	68fb      	ldr	r3, [r7, #12]
 80165a6:	e9c7 0104 	strd	r0, r1, [r7, #16]
 80165aa:	4601      	mov	r1, r0
 80165ac:	fb01 f303 	mul.w	r3, r1, r3
 80165b0:	4413      	add	r3, r2
 80165b2:	693a      	ldr	r2, [r7, #16]
 80165b4:	68b9      	ldr	r1, [r7, #8]
 80165b6:	fba2 ab01 	umull	sl, fp, r2, r1
 80165ba:	445b      	add	r3, fp
 80165bc:	469b      	mov	fp, r3
                            static_cast<int64_t>(reciprocal_scale_Q015) +
 80165be:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80165c2:	eb1a 0502 	adds.w	r5, sl, r2
 80165c6:	eb4b 0603 	adc.w	r6, fp, r3
                        round) >>
                       right_shift;
 80165ca:	f897 106f 	ldrb.w	r1, [r7, #111]	; 0x6f
                        round) >>
 80165ce:	f1c1 0320 	rsb	r3, r1, #32
 80165d2:	f1b1 0220 	subs.w	r2, r1, #32
 80165d6:	fa25 f001 	lsr.w	r0, r5, r1
 80165da:	62b8      	str	r0, [r7, #40]	; 0x28
 80165dc:	fa06 f303 	lsl.w	r3, r6, r3
 80165e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80165e2:	ea40 0003 	orr.w	r0, r0, r3
 80165e6:	62b8      	str	r0, [r7, #40]	; 0x28
 80165e8:	d404      	bmi.n	80165f4 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x298>
 80165ea:	fa46 f202 	asr.w	r2, r6, r2
 80165ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80165f0:	4313      	orrs	r3, r2
 80165f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80165f4:	fa46 f301 	asr.w	r3, r6, r1
 80165f8:	62fb      	str	r3, [r7, #44]	; 0x2c
      int32_t result = (static_cast<int64_t>(exp_results_Q015[c]) *
 80165fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80165fc:	647b      	str	r3, [r7, #68]	; 0x44
      output_data[i * depth + c] = static_cast<int16_t>(
          std::min(std::max(result, static_cast<int32_t>(0)),
 80165fe:	2300      	movs	r3, #0
 8016600:	65bb      	str	r3, [r7, #88]	; 0x58
                   static_cast<int32_t>(32767)));
 8016602:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8016606:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801660a:	4611      	mov	r1, r2
 801660c:	4618      	mov	r0, r3
 801660e:	f7fd fa3b 	bl	8013a88 <_ZSt3maxIlERKT_S2_S2_>
 8016612:	4602      	mov	r2, r0
 8016614:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8016618:	65fb      	str	r3, [r7, #92]	; 0x5c
 801661a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801661e:	4619      	mov	r1, r3
 8016620:	4610      	mov	r0, r2
 8016622:	f7fd fa1d 	bl	8013a60 <_ZSt3minIlERKT_S2_S2_>
 8016626:	4603      	mov	r3, r0
          std::min(std::max(result, static_cast<int32_t>(0)),
 8016628:	6819      	ldr	r1, [r3, #0]
      output_data[i * depth + c] = static_cast<int16_t>(
 801662a:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 801662e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8016632:	fb03 f202 	mul.w	r2, r3, r2
 8016636:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801663a:	4413      	add	r3, r2
 801663c:	005a      	lsls	r2, r3, #1
 801663e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8016642:	441a      	add	r2, r3
 8016644:	b20b      	sxth	r3, r1
 8016646:	8013      	strh	r3, [r2, #0]
    for (int c = 0; c < depth; ++c) {
 8016648:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801664c:	3301      	adds	r3, #1
 801664e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8016652:	e779      	b.n	8016548 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x1ec>
  for (int i = 0; i < outer_size; ++i) {
 8016654:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8016658:	3301      	adds	r3, #1
 801665a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801665e:	e6a1      	b.n	80163a4 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x48>
    }
  }
}
 8016660:	bf00      	nop
 8016662:	37a4      	adds	r7, #164	; 0xa4
 8016664:	46bd      	mov	sp, r7
 8016666:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801666a:	bf00      	nop
 801666c:	ffff8000 	.word	0xffff8000

08016670 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE>:

namespace tflite {
namespace {

void SoftmaxQuantized(const TfLiteEvalTensor* input, TfLiteEvalTensor* output,
                      const SoftmaxParams& op_data) {
 8016670:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016674:	b0bc      	sub	sp, #240	; 0xf0
 8016676:	af04      	add	r7, sp, #16
 8016678:	60f8      	str	r0, [r7, #12]
 801667a:	60b9      	str	r1, [r7, #8]
 801667c:	607a      	str	r2, [r7, #4]
  if (input->type == kTfLiteUInt8) {
 801667e:	68fb      	ldr	r3, [r7, #12]
 8016680:	7a1b      	ldrb	r3, [r3, #8]
 8016682:	2b03      	cmp	r3, #3
 8016684:	d127      	bne.n	80166d6 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x66>
    tflite::reference_ops::Softmax(
        op_data, tflite::micro::GetTensorShape(input),
 8016686:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801668a:	68f9      	ldr	r1, [r7, #12]
 801668c:	4618      	mov	r0, r3
 801668e:	f7ff fb9b 	bl	8015dc8 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    tflite::reference_ops::Softmax(
 8016692:	68f8      	ldr	r0, [r7, #12]
 8016694:	f7fe f98e 	bl	80149b4 <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>
 8016698:	4604      	mov	r4, r0
        tflite::micro::GetTensorData<uint8_t>(input),
        tflite::micro::GetTensorShape(output),
 801669a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801669e:	68b9      	ldr	r1, [r7, #8]
 80166a0:	4618      	mov	r0, r3
 80166a2:	f7ff fb91 	bl	8015dc8 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    tflite::reference_ops::Softmax(
 80166a6:	68b8      	ldr	r0, [r7, #8]
 80166a8:	f7fe f993 	bl	80149d2 <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor>
 80166ac:	4602      	mov	r2, r0
 80166ae:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80166b2:	f107 0144 	add.w	r1, r7, #68	; 0x44
 80166b6:	9200      	str	r2, [sp, #0]
 80166b8:	4622      	mov	r2, r4
 80166ba:	6878      	ldr	r0, [r7, #4]
 80166bc:	f000 f930 	bl	8016920 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>
        tflite::micro::GetTensorShape(output),
 80166c0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80166c4:	4618      	mov	r0, r3
 80166c6:	f7fd fa14 	bl	8013af2 <_ZN6tflite12RuntimeShapeD1Ev>
        op_data, tflite::micro::GetTensorShape(input),
 80166ca:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80166ce:	4618      	mov	r0, r3
 80166d0:	f7fd fa0f 	bl	8013af2 <_ZN6tflite12RuntimeShapeD1Ev>
 80166d4:	e080      	b.n	80167d8 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x168>
        tflite::micro::GetTensorData<uint8_t>(output));
  } else if (input->type == kTfLiteInt8) {
 80166d6:	68fb      	ldr	r3, [r7, #12]
 80166d8:	7a1b      	ldrb	r3, [r3, #8]
 80166da:	2b09      	cmp	r3, #9
 80166dc:	d153      	bne.n	8016786 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x116>
    if (output->type == kTfLiteInt16) {
 80166de:	68bb      	ldr	r3, [r7, #8]
 80166e0:	7a1b      	ldrb	r3, [r3, #8]
 80166e2:	2b07      	cmp	r3, #7
 80166e4:	d077      	beq.n	80167d6 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x166>
          op_data, tflite::micro::GetTensorShape(input),
          tflite::micro::GetTensorData<int8_t>(input),
          tflite::micro::GetTensorShape(output),
          tflite::micro::GetTensorData<int16_t>(output));
    } else {
      const auto input_shape = tflite::micro::GetTensorShape(input);
 80166e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80166ea:	68f9      	ldr	r1, [r7, #12]
 80166ec:	4618      	mov	r0, r3
 80166ee:	f7ff fb6b 	bl	8015dc8 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      const auto output_shape = tflite::micro::GetTensorShape(output);
 80166f2:	f107 0314 	add.w	r3, r7, #20
 80166f6:	68b9      	ldr	r1, [r7, #8]
 80166f8:	4618      	mov	r0, r3
 80166fa:	f7ff fb65 	bl	8015dc8 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      const int trailing_dim = input_shape.DimensionsCount() - 1;
 80166fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8016702:	4618      	mov	r0, r3
 8016704:	f7fd fa0b 	bl	8013b1e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8016708:	4603      	mov	r3, r0
 801670a:	3b01      	subs	r3, #1
 801670c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
      const int outer_size =
          MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 8016710:	f107 0214 	add.w	r2, r7, #20
 8016714:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8016718:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 801671c:	4618      	mov	r0, r3
 801671e:	f7ff fbab 	bl	8015e78 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 8016722:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
      const int depth =
          MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 8016726:	f107 0214 	add.w	r2, r7, #20
 801672a:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 801672e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8016732:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8016736:	f7fe fb61 	bl	8014dfc <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 801673a:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4

      arm_softmax_s8(tflite::micro::GetTensorData<int8_t>(input), outer_size,
 801673e:	68f8      	ldr	r0, [r7, #12]
 8016740:	f7fe f8cc 	bl	80148dc <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 8016744:	4680      	mov	r8, r0
                     depth, op_data.input_multiplier, op_data.input_left_shift,
 8016746:	687b      	ldr	r3, [r7, #4]
 8016748:	689e      	ldr	r6, [r3, #8]
 801674a:	687b      	ldr	r3, [r7, #4]
 801674c:	68dc      	ldr	r4, [r3, #12]
                     op_data.diff_min,
 801674e:	687b      	ldr	r3, [r7, #4]
 8016750:	699d      	ldr	r5, [r3, #24]
      arm_softmax_s8(tflite::micro::GetTensorData<int8_t>(input), outer_size,
 8016752:	68b8      	ldr	r0, [r7, #8]
 8016754:	f7fe f8d1 	bl	80148fa <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 8016758:	4603      	mov	r3, r0
 801675a:	9302      	str	r3, [sp, #8]
 801675c:	9501      	str	r5, [sp, #4]
 801675e:	9400      	str	r4, [sp, #0]
 8016760:	4633      	mov	r3, r6
 8016762:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8016766:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 801676a:	4640      	mov	r0, r8
 801676c:	f7f8 fa28 	bl	800ebc0 <arm_softmax_s8>
      const auto output_shape = tflite::micro::GetTensorShape(output);
 8016770:	f107 0314 	add.w	r3, r7, #20
 8016774:	4618      	mov	r0, r3
 8016776:	f7fd f9bc 	bl	8013af2 <_ZN6tflite12RuntimeShapeD1Ev>
      const auto input_shape = tflite::micro::GetTensorShape(input);
 801677a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801677e:	4618      	mov	r0, r3
 8016780:	f7fd f9b7 	bl	8013af2 <_ZN6tflite12RuntimeShapeD1Ev>
 8016784:	e028      	b.n	80167d8 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x168>
                     tflite::micro::GetTensorData<int8_t>(output));
    }
  } else {
    tflite::reference_ops::SoftmaxInt16(
        op_data, tflite::micro::GetTensorShape(input),
 8016786:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 801678a:	68f9      	ldr	r1, [r7, #12]
 801678c:	4618      	mov	r0, r3
 801678e:	f7ff fb1b 	bl	8015dc8 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    tflite::reference_ops::SoftmaxInt16(
 8016792:	68f8      	ldr	r0, [r7, #12]
 8016794:	f7fe fb61 	bl	8014e5a <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor>
 8016798:	4604      	mov	r4, r0
        tflite::micro::GetTensorData<int16_t>(input),
        tflite::micro::GetTensorShape(output),
 801679a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 801679e:	68b9      	ldr	r1, [r7, #8]
 80167a0:	4618      	mov	r0, r3
 80167a2:	f7ff fb11 	bl	8015dc8 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    tflite::reference_ops::SoftmaxInt16(
 80167a6:	68b8      	ldr	r0, [r7, #8]
 80167a8:	f7ff fd2c 	bl	8016204 <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor>
 80167ac:	4602      	mov	r2, r0
 80167ae:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80167b2:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 80167b6:	9200      	str	r2, [sp, #0]
 80167b8:	4622      	mov	r2, r4
 80167ba:	6878      	ldr	r0, [r7, #4]
 80167bc:	f7ff fdce 	bl	801635c <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps>
        tflite::micro::GetTensorShape(output),
 80167c0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80167c4:	4618      	mov	r0, r3
 80167c6:	f7fd f994 	bl	8013af2 <_ZN6tflite12RuntimeShapeD1Ev>
        op_data, tflite::micro::GetTensorShape(input),
 80167ca:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80167ce:	4618      	mov	r0, r3
 80167d0:	f7fd f98f 	bl	8013af2 <_ZN6tflite12RuntimeShapeD1Ev>
 80167d4:	e000      	b.n	80167d8 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x168>
      return;
 80167d6:	bf00      	nop
        tflite::micro::GetTensorData<int16_t>(output));
  }
}
 80167d8:	37e0      	adds	r7, #224	; 0xe0
 80167da:	46bd      	mov	sp, r7
 80167dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080167e0 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus SoftmaxEval(TfLiteContext* context, TfLiteNode* node) {
 80167e0:	b5b0      	push	{r4, r5, r7, lr}
 80167e2:	b09e      	sub	sp, #120	; 0x78
 80167e4:	af00      	add	r7, sp, #0
 80167e6:	6078      	str	r0, [r7, #4]
 80167e8:	6039      	str	r1, [r7, #0]
  const TfLiteEvalTensor* input = tflite::micro::GetEvalInput(context, node, 0);
 80167ea:	2200      	movs	r2, #0
 80167ec:	6839      	ldr	r1, [r7, #0]
 80167ee:	6878      	ldr	r0, [r7, #4]
 80167f0:	f7fd fb76 	bl	8013ee0 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 80167f4:	6778      	str	r0, [r7, #116]	; 0x74
  TfLiteEvalTensor* output = tflite::micro::GetEvalOutput(context, node, 0);
 80167f6:	2200      	movs	r2, #0
 80167f8:	6839      	ldr	r1, [r7, #0]
 80167fa:	6878      	ldr	r0, [r7, #4]
 80167fc:	f7fd fb80 	bl	8013f00 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 8016800:	6738      	str	r0, [r7, #112]	; 0x70

  TFLITE_DCHECK(node->user_data != nullptr);
 8016802:	683b      	ldr	r3, [r7, #0]
 8016804:	691b      	ldr	r3, [r3, #16]
 8016806:	2b00      	cmp	r3, #0
 8016808:	d101      	bne.n	801680e <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x2e>
 801680a:	f003 fdc3 	bl	801a394 <abort>
  const SoftmaxParams data =
      *static_cast<const SoftmaxParams*>(node->user_data);
 801680e:	683b      	ldr	r3, [r7, #0]
 8016810:	691b      	ldr	r3, [r3, #16]
  const SoftmaxParams data =
 8016812:	f107 0408 	add.w	r4, r7, #8
 8016816:	461d      	mov	r5, r3
 8016818:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801681a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801681c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801681e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016820:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016822:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016824:	e895 0003 	ldmia.w	r5, {r0, r1}
 8016828:	e884 0003 	stmia.w	r4, {r0, r1}

  switch (input->type) {
 801682c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801682e:	7a1b      	ldrb	r3, [r3, #8]
 8016830:	3b01      	subs	r3, #1
 8016832:	2b08      	cmp	r3, #8
 8016834:	d84a      	bhi.n	80168cc <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xec>
 8016836:	a201      	add	r2, pc, #4	; (adr r2, 801683c <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x5c>)
 8016838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801683c:	08016861 	.word	0x08016861
 8016840:	080168cd 	.word	0x080168cd
 8016844:	08016891 	.word	0x08016891
 8016848:	080168cd 	.word	0x080168cd
 801684c:	080168cd 	.word	0x080168cd
 8016850:	080168cd 	.word	0x080168cd
 8016854:	080168af 	.word	0x080168af
 8016858:	080168cd 	.word	0x080168cd
 801685c:	0801687f 	.word	0x0801687f
    case kTfLiteFloat32: {
      #if EI_TFLITE_DISABLE_SOFTMAX_IN_F32
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 8016860:	687b      	ldr	r3, [r7, #4]
 8016862:	695c      	ldr	r4, [r3, #20]
 8016864:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016866:	7a1b      	ldrb	r3, [r3, #8]
 8016868:	4618      	mov	r0, r3
 801686a:	f7fc fbe7 	bl	801303c <TfLiteTypeGetName>
 801686e:	4602      	mov	r2, r0
 8016870:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016872:	7a1b      	ldrb	r3, [r3, #8]
 8016874:	491e      	ldr	r1, [pc, #120]	; (80168f0 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x110>)
 8016876:	6878      	ldr	r0, [r7, #4]
 8016878:	47a0      	blx	r4
                      TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 801687a:	2301      	movs	r3, #1
 801687c:	e034      	b.n	80168e8 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x108>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
                      TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
      #endif

      SoftmaxQuantized(input, output, data);
 801687e:	f107 0308 	add.w	r3, r7, #8
 8016882:	461a      	mov	r2, r3
 8016884:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8016886:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8016888:	f7ff fef2 	bl	8016670 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE>
      return kTfLiteOk;
 801688c:	2300      	movs	r3, #0
 801688e:	e02b      	b.n	80168e8 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x108>
    }
    case kTfLiteUInt8: {
      #if EI_TFLITE_DISABLE_SOFTMAX_IN_U8
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 8016890:	687b      	ldr	r3, [r7, #4]
 8016892:	695c      	ldr	r4, [r3, #20]
 8016894:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016896:	7a1b      	ldrb	r3, [r3, #8]
 8016898:	4618      	mov	r0, r3
 801689a:	f7fc fbcf 	bl	801303c <TfLiteTypeGetName>
 801689e:	4602      	mov	r2, r0
 80168a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80168a2:	7a1b      	ldrb	r3, [r3, #8]
 80168a4:	4912      	ldr	r1, [pc, #72]	; (80168f0 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x110>)
 80168a6:	6878      	ldr	r0, [r7, #4]
 80168a8:	47a0      	blx	r4
                      TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 80168aa:	2301      	movs	r3, #1
 80168ac:	e01c      	b.n	80168e8 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x108>
      SoftmaxQuantized(input, output, data);
      return kTfLiteOk;
    }
    case kTfLiteInt16: {
      #if EI_TFLITE_DISABLE_SOFTMAX_IN_I16
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 80168ae:	687b      	ldr	r3, [r7, #4]
 80168b0:	695c      	ldr	r4, [r3, #20]
 80168b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80168b4:	7a1b      	ldrb	r3, [r3, #8]
 80168b6:	4618      	mov	r0, r3
 80168b8:	f7fc fbc0 	bl	801303c <TfLiteTypeGetName>
 80168bc:	4602      	mov	r2, r0
 80168be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80168c0:	7a1b      	ldrb	r3, [r3, #8]
 80168c2:	490b      	ldr	r1, [pc, #44]	; (80168f0 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x110>)
 80168c4:	6878      	ldr	r0, [r7, #4]
 80168c6:	47a0      	blx	r4
                      TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 80168c8:	2301      	movs	r3, #1
 80168ca:	e00d      	b.n	80168e8 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x108>

      SoftmaxQuantized(input, output, data);
      return kTfLiteOk;
    }
    default:
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 80168cc:	687b      	ldr	r3, [r7, #4]
 80168ce:	695c      	ldr	r4, [r3, #20]
 80168d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80168d2:	7a1b      	ldrb	r3, [r3, #8]
 80168d4:	4618      	mov	r0, r3
 80168d6:	f7fc fbb1 	bl	801303c <TfLiteTypeGetName>
 80168da:	4602      	mov	r2, r0
 80168dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80168de:	7a1b      	ldrb	r3, [r3, #8]
 80168e0:	4903      	ldr	r1, [pc, #12]	; (80168f0 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x110>)
 80168e2:	6878      	ldr	r0, [r7, #4]
 80168e4:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 80168e6:	2301      	movs	r3, #1
  }
}
 80168e8:	4618      	mov	r0, r3
 80168ea:	3778      	adds	r7, #120	; 0x78
 80168ec:	46bd      	mov	sp, r7
 80168ee:	bdb0      	pop	{r4, r5, r7, pc}
 80168f0:	0801cd88 	.word	0x0801cd88

080168f4 <_ZN6tflite16Register_SOFTMAXEv>:

}  // namespace

TfLiteRegistration Register_SOFTMAX() {
 80168f4:	b4b0      	push	{r4, r5, r7}
 80168f6:	b083      	sub	sp, #12
 80168f8:	af00      	add	r7, sp, #0
 80168fa:	6078      	str	r0, [r7, #4]
          /*prepare=*/SoftmaxPrepare,
          /*invoke=*/SoftmaxEval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
 80168fc:	687b      	ldr	r3, [r7, #4]
 80168fe:	4a07      	ldr	r2, [pc, #28]	; (801691c <_ZN6tflite16Register_SOFTMAXEv+0x28>)
 8016900:	461c      	mov	r4, r3
 8016902:	4615      	mov	r5, r2
 8016904:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016906:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016908:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801690c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8016910:	6878      	ldr	r0, [r7, #4]
 8016912:	370c      	adds	r7, #12
 8016914:	46bd      	mov	sp, r7
 8016916:	bcb0      	pop	{r4, r5, r7}
 8016918:	4770      	bx	lr
 801691a:	bf00      	nop
 801691c:	0801cda4 	.word	0x0801cda4

08016920 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>:
inline void Softmax(const SoftmaxParams& params,
 8016920:	b590      	push	{r4, r7, lr}
 8016922:	b09f      	sub	sp, #124	; 0x7c
 8016924:	af00      	add	r7, sp, #0
 8016926:	60f8      	str	r0, [r7, #12]
 8016928:	60b9      	str	r1, [r7, #8]
 801692a:	607a      	str	r2, [r7, #4]
 801692c:	603b      	str	r3, [r7, #0]
  const int32_t input_beta_multiplier = params.input_multiplier;
 801692e:	68fb      	ldr	r3, [r7, #12]
 8016930:	689b      	ldr	r3, [r3, #8]
 8016932:	667b      	str	r3, [r7, #100]	; 0x64
  const int32_t input_beta_left_shift = params.input_left_shift;
 8016934:	68fb      	ldr	r3, [r7, #12]
 8016936:	68db      	ldr	r3, [r3, #12]
 8016938:	663b      	str	r3, [r7, #96]	; 0x60
  const int diff_min = params.diff_min;
 801693a:	68fb      	ldr	r3, [r7, #12]
 801693c:	699b      	ldr	r3, [r3, #24]
 801693e:	65fb      	str	r3, [r7, #92]	; 0x5c
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 8016940:	68b8      	ldr	r0, [r7, #8]
 8016942:	f7fd f8ec 	bl	8013b1e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8016946:	4603      	mov	r3, r0
 8016948:	3b01      	subs	r3, #1
 801694a:	65bb      	str	r3, [r7, #88]	; 0x58
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 801694c:	683a      	ldr	r2, [r7, #0]
 801694e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8016950:	68b8      	ldr	r0, [r7, #8]
 8016952:	f7ff fa91 	bl	8015e78 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 8016956:	6578      	str	r0, [r7, #84]	; 0x54
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 8016958:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801695a:	683a      	ldr	r2, [r7, #0]
 801695c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801695e:	68b8      	ldr	r0, [r7, #8]
 8016960:	f7fe fa4c 	bl	8014dfc <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8016964:	6538      	str	r0, [r7, #80]	; 0x50
  for (int i = 0; i < outer_size; ++i) {
 8016966:	2300      	movs	r3, #0
 8016968:	677b      	str	r3, [r7, #116]	; 0x74
 801696a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801696c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801696e:	429a      	cmp	r2, r3
 8016970:	f280 80ed 	bge.w	8016b4e <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x22e>
    InputT max_in_row = std::numeric_limits<InputT>::min();
 8016974:	2300      	movs	r3, #0
 8016976:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int c = 0; c < depth; ++c) {
 801697a:	2300      	movs	r3, #0
 801697c:	673b      	str	r3, [r7, #112]	; 0x70
 801697e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8016980:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016982:	429a      	cmp	r2, r3
 8016984:	da16      	bge.n	80169b4 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x94>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
 8016986:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016988:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801698a:	fb03 f202 	mul.w	r2, r3, r2
 801698e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8016990:	4413      	add	r3, r2
 8016992:	461a      	mov	r2, r3
 8016994:	687b      	ldr	r3, [r7, #4]
 8016996:	441a      	add	r2, r3
 8016998:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 801699c:	4611      	mov	r1, r2
 801699e:	4618      	mov	r0, r3
 80169a0:	f7ff fc1c 	bl	80161dc <_ZSt3maxIhERKT_S2_S2_>
 80169a4:	4603      	mov	r3, r0
 80169a6:	781b      	ldrb	r3, [r3, #0]
 80169a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int c = 0; c < depth; ++c) {
 80169ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80169ae:	3301      	adds	r3, #1
 80169b0:	673b      	str	r3, [r7, #112]	; 0x70
 80169b2:	e7e4      	b.n	801697e <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x5e>
    FixedPointAccum sum_of_exps = FixedPointAccum::Zero();
 80169b4:	f000 f8cf 	bl	8016b56 <_ZN8gemmlowp10FixedPointIlLi12EE4ZeroEv>
 80169b8:	4603      	mov	r3, r0
 80169ba:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int c = 0; c < depth; ++c) {
 80169bc:	2300      	movs	r3, #0
 80169be:	66fb      	str	r3, [r7, #108]	; 0x6c
 80169c0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80169c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80169c4:	429a      	cmp	r2, r3
 80169c6:	da2f      	bge.n	8016a28 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x108>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
 80169c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80169ca:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80169cc:	fb03 f202 	mul.w	r2, r3, r2
 80169d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80169d2:	4413      	add	r3, r2
 80169d4:	461a      	mov	r2, r3
 80169d6:	687b      	ldr	r3, [r7, #4]
 80169d8:	4413      	add	r3, r2
 80169da:	781b      	ldrb	r3, [r3, #0]
 80169dc:	461a      	mov	r2, r3
 80169de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
      int32_t input_diff =
 80169e2:	1ad3      	subs	r3, r2, r3
 80169e4:	64fb      	str	r3, [r7, #76]	; 0x4c
      if (input_diff >= diff_min) {
 80169e6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80169e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80169ea:	429a      	cmp	r2, r3
 80169ec:	db18      	blt.n	8016a20 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x100>
            MultiplyByQuantizedMultiplierGreaterThanOne(
 80169ee:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80169f0:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80169f2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80169f4:	f7fe fa92 	bl	8014f1c <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>
 80169f8:	64b8      	str	r0, [r7, #72]	; 0x48
            FixedPointScaledDiff::FromRaw(input_diff_rescaled);
 80169fa:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80169fc:	f000 f8b3 	bl	8016b66 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 8016a00:	4603      	mov	r3, r0
 8016a02:	61fb      	str	r3, [r7, #28]
        sum_of_exps = sum_of_exps + gemmlowp::Rescale<kAccumulationIntegerBits>(
 8016a04:	69f8      	ldr	r0, [r7, #28]
 8016a06:	f000 f8dd 	bl	8016bc4 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
 8016a0a:	4603      	mov	r3, r0
 8016a0c:	4618      	mov	r0, r3
 8016a0e:	f000 fa21 	bl	8016e54 <_ZN8gemmlowp7RescaleILi12ElLi0EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 8016a12:	4603      	mov	r3, r0
 8016a14:	4619      	mov	r1, r3
 8016a16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016a18:	f000 f8b6 	bl	8016b88 <_ZN8gemmlowpplIlLi12EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8016a1c:	4603      	mov	r3, r0
 8016a1e:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int c = 0; c < depth; ++c) {
 8016a20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016a22:	3301      	adds	r3, #1
 8016a24:	66fb      	str	r3, [r7, #108]	; 0x6c
 8016a26:	e7cb      	b.n	80169c0 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xa0>
        sum_of_exps.raw(), kAccumulationIntegerBits, &num_bits_over_unit));
 8016a28:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8016a2c:	4618      	mov	r0, r3
 8016a2e:	f000 fa2b 	bl	8016e88 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 8016a32:	4603      	mov	r3, r0
    FixedPoint0 shifted_scale = FixedPoint0::FromRaw(GetReciprocal(
 8016a34:	681b      	ldr	r3, [r3, #0]
 8016a36:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8016a3a:	210c      	movs	r1, #12
 8016a3c:	4618      	mov	r0, r3
 8016a3e:	f7fe fa80 	bl	8014f42 <_ZN6tflite13GetReciprocalEliPi>
 8016a42:	4603      	mov	r3, r0
 8016a44:	4618      	mov	r0, r3
 8016a46:	f7fe fab9 	bl	8014fbc <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 8016a4a:	4603      	mov	r3, r0
 8016a4c:	623b      	str	r3, [r7, #32]
    for (int c = 0; c < depth; ++c) {
 8016a4e:	2300      	movs	r3, #0
 8016a50:	66bb      	str	r3, [r7, #104]	; 0x68
 8016a52:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8016a54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016a56:	429a      	cmp	r2, r3
 8016a58:	da75      	bge.n	8016b46 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x226>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
 8016a5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016a5c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8016a5e:	fb03 f202 	mul.w	r2, r3, r2
 8016a62:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8016a64:	4413      	add	r3, r2
 8016a66:	461a      	mov	r2, r3
 8016a68:	687b      	ldr	r3, [r7, #4]
 8016a6a:	4413      	add	r3, r2
 8016a6c:	781b      	ldrb	r3, [r3, #0]
 8016a6e:	461a      	mov	r2, r3
 8016a70:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
      int32_t input_diff =
 8016a74:	1ad3      	subs	r3, r2, r3
 8016a76:	647b      	str	r3, [r7, #68]	; 0x44
      if (input_diff >= diff_min) {
 8016a78:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016a7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016a7c:	429a      	cmp	r2, r3
 8016a7e:	db50      	blt.n	8016b22 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x202>
            MultiplyByQuantizedMultiplierGreaterThanOne(
 8016a80:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8016a82:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8016a84:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8016a86:	f7fe fa49 	bl	8014f1c <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>
 8016a8a:	6438      	str	r0, [r7, #64]	; 0x40
            FixedPointScaledDiff::FromRaw(input_diff_rescaled);
 8016a8c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8016a8e:	f000 f86a 	bl	8016b66 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 8016a92:	4603      	mov	r3, r0
 8016a94:	61bb      	str	r3, [r7, #24]
        FixedPoint0 exp_in_0 = exp_on_negative_values(scaled_diff_f8);
 8016a96:	69b8      	ldr	r0, [r7, #24]
 8016a98:	f000 f894 	bl	8016bc4 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
 8016a9c:	4603      	mov	r3, r0
 8016a9e:	617b      	str	r3, [r7, #20]
            (shifted_scale * exp_in_0).raw(),
 8016aa0:	6979      	ldr	r1, [r7, #20]
 8016aa2:	6a38      	ldr	r0, [r7, #32]
 8016aa4:	f7ff fad2 	bl	801604c <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8016aa8:	4603      	mov	r3, r0
 8016aaa:	633b      	str	r3, [r7, #48]	; 0x30
 8016aac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8016ab0:	4618      	mov	r0, r3
 8016ab2:	f7fe faf5 	bl	80150a0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8016ab6:	4603      	mov	r3, r0
        int32_t unsat_output = gemmlowp::RoundingDivideByPOT(
 8016ab8:	681b      	ldr	r3, [r3, #0]
            num_bits_over_unit + 31 - (sizeof(OutputT) * 8));
 8016aba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016abc:	3217      	adds	r2, #23
        int32_t unsat_output = gemmlowp::RoundingDivideByPOT(
 8016abe:	4611      	mov	r1, r2
 8016ac0:	4618      	mov	r0, r3
 8016ac2:	f7fd fd33 	bl	801452c <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 8016ac6:	63f8      	str	r0, [r7, #60]	; 0x3c
            static_cast<int32_t>(std::numeric_limits<OutputT>::min());
 8016ac8:	f7fc fd07 	bl	80134da <_ZNSt14numeric_limitsIhE3minEv>
 8016acc:	4603      	mov	r3, r0
 8016ace:	461a      	mov	r2, r3
            unsat_output +
 8016ad0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016ad2:	4413      	add	r3, r2
        const int32_t shifted_output =
 8016ad4:	613b      	str	r3, [r7, #16]
                     static_cast<int32_t>(std::numeric_limits<OutputT>::max())),
 8016ad6:	f7fc fd08 	bl	80134ea <_ZNSt14numeric_limitsIhE3maxEv>
 8016ada:	4603      	mov	r3, r0
 8016adc:	637b      	str	r3, [r7, #52]	; 0x34
            static_cast<int32_t>(std::numeric_limits<OutputT>::min())));
 8016ade:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8016ae2:	f107 0310 	add.w	r3, r7, #16
 8016ae6:	4611      	mov	r1, r2
 8016ae8:	4618      	mov	r0, r3
 8016aea:	f7fc ffb9 	bl	8013a60 <_ZSt3minIlERKT_S2_S2_>
 8016aee:	4604      	mov	r4, r0
 8016af0:	f7fc fcf3 	bl	80134da <_ZNSt14numeric_limitsIhE3minEv>
 8016af4:	4603      	mov	r3, r0
 8016af6:	63bb      	str	r3, [r7, #56]	; 0x38
 8016af8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8016afc:	4619      	mov	r1, r3
 8016afe:	4620      	mov	r0, r4
 8016b00:	f7fc ffc2 	bl	8013a88 <_ZSt3maxIlERKT_S2_S2_>
 8016b04:	4603      	mov	r3, r0
        output_data[i * depth + c] = static_cast<OutputT>(std::max(
 8016b06:	6819      	ldr	r1, [r3, #0]
 8016b08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016b0a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8016b0c:	fb03 f202 	mul.w	r2, r3, r2
 8016b10:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8016b12:	4413      	add	r3, r2
 8016b14:	461a      	mov	r2, r3
 8016b16:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8016b1a:	4413      	add	r3, r2
 8016b1c:	b2ca      	uxtb	r2, r1
 8016b1e:	701a      	strb	r2, [r3, #0]
 8016b20:	e00d      	b.n	8016b3e <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x21e>
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
 8016b22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016b24:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8016b26:	fb03 f202 	mul.w	r2, r3, r2
 8016b2a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8016b2c:	4413      	add	r3, r2
 8016b2e:	461a      	mov	r2, r3
 8016b30:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8016b34:	189c      	adds	r4, r3, r2
 8016b36:	f7fc fcd0 	bl	80134da <_ZNSt14numeric_limitsIhE3minEv>
 8016b3a:	4603      	mov	r3, r0
 8016b3c:	7023      	strb	r3, [r4, #0]
    for (int c = 0; c < depth; ++c) {
 8016b3e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8016b40:	3301      	adds	r3, #1
 8016b42:	66bb      	str	r3, [r7, #104]	; 0x68
 8016b44:	e785      	b.n	8016a52 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x132>
  for (int i = 0; i < outer_size; ++i) {
 8016b46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016b48:	3301      	adds	r3, #1
 8016b4a:	677b      	str	r3, [r7, #116]	; 0x74
 8016b4c:	e70d      	b.n	801696a <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x4a>
}
 8016b4e:	bf00      	nop
 8016b50:	377c      	adds	r7, #124	; 0x7c
 8016b52:	46bd      	mov	sp, r7
 8016b54:	bd90      	pop	{r4, r7, pc}

08016b56 <_ZN8gemmlowp10FixedPointIlLi12EE4ZeroEv>:
  static FixedPoint Zero() { return FromScalarRaw(0); }
 8016b56:	b580      	push	{r7, lr}
 8016b58:	af00      	add	r7, sp, #0
 8016b5a:	2000      	movs	r0, #0
 8016b5c:	f000 f99f 	bl	8016e9e <_ZN8gemmlowp10FixedPointIlLi12EE13FromScalarRawEl>
 8016b60:	4603      	mov	r3, r0
 8016b62:	4618      	mov	r0, r3
 8016b64:	bd80      	pop	{r7, pc}

08016b66 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>:
  static FixedPoint FromRaw(RawType x) {
 8016b66:	b580      	push	{r7, lr}
 8016b68:	b084      	sub	sp, #16
 8016b6a:	af00      	add	r7, sp, #0
 8016b6c:	6078      	str	r0, [r7, #4]
    retval.raw() = x;
 8016b6e:	f107 030c 	add.w	r3, r7, #12
 8016b72:	4618      	mov	r0, r3
 8016b74:	f000 f9a7 	bl	8016ec6 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 8016b78:	4602      	mov	r2, r0
 8016b7a:	687b      	ldr	r3, [r7, #4]
 8016b7c:	6013      	str	r3, [r2, #0]
    return retval;
 8016b7e:	68fb      	ldr	r3, [r7, #12]
  }
 8016b80:	4618      	mov	r0, r3
 8016b82:	3710      	adds	r7, #16
 8016b84:	46bd      	mov	sp, r7
 8016b86:	bd80      	pop	{r7, pc}

08016b88 <_ZN8gemmlowpplIlLi12EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator+, Add)
 8016b88:	b590      	push	{r4, r7, lr}
 8016b8a:	b083      	sub	sp, #12
 8016b8c:	af00      	add	r7, sp, #0
 8016b8e:	6078      	str	r0, [r7, #4]
 8016b90:	6039      	str	r1, [r7, #0]
 8016b92:	1d3b      	adds	r3, r7, #4
 8016b94:	4618      	mov	r0, r3
 8016b96:	f000 f977 	bl	8016e88 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 8016b9a:	4603      	mov	r3, r0
 8016b9c:	681c      	ldr	r4, [r3, #0]
 8016b9e:	463b      	mov	r3, r7
 8016ba0:	4618      	mov	r0, r3
 8016ba2:	f000 f971 	bl	8016e88 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 8016ba6:	4603      	mov	r3, r0
 8016ba8:	681b      	ldr	r3, [r3, #0]
 8016baa:	4619      	mov	r1, r3
 8016bac:	4620      	mov	r0, r4
 8016bae:	f7fe f8bd 	bl	8014d2c <_ZN8gemmlowp3AddIlEET_S1_S1_>
 8016bb2:	4603      	mov	r3, r0
 8016bb4:	4618      	mov	r0, r3
 8016bb6:	f000 f991 	bl	8016edc <_ZN8gemmlowp10FixedPointIlLi12EE7FromRawEl>
 8016bba:	4603      	mov	r3, r0
 8016bbc:	4618      	mov	r0, r3
 8016bbe:	370c      	adds	r7, #12
 8016bc0:	46bd      	mov	sp, r7
 8016bc2:	bd90      	pop	{r4, r7, pc}

08016bc4 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>:
FixedPoint<tRawType, 0> exp_on_negative_values(
 8016bc4:	b590      	push	{r4, r7, lr}
 8016bc6:	b091      	sub	sp, #68	; 0x44
 8016bc8:	af00      	add	r7, sp, #0
 8016bca:	6078      	str	r0, [r7, #4]
  const InputF kOneQuarter = InputF::template ConstantPOT<-2>();
 8016bcc:	f000 f997 	bl	8016efe <_ZN8gemmlowp10FixedPointIlLi5EE11ConstantPOTILin2EEES1_v>
 8016bd0:	4603      	mov	r3, r0
 8016bd2:	637b      	str	r3, [r7, #52]	; 0x34
  InputF mask = kOneQuarter - InputF::FromScalarRaw(1);
 8016bd4:	2001      	movs	r0, #1
 8016bd6:	f000 f99b 	bl	8016f10 <_ZN8gemmlowp10FixedPointIlLi5EE13FromScalarRawEl>
 8016bda:	4603      	mov	r3, r0
 8016bdc:	4619      	mov	r1, r3
 8016bde:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8016be0:	f000 f9aa 	bl	8016f38 <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8016be4:	4603      	mov	r3, r0
 8016be6:	633b      	str	r3, [r7, #48]	; 0x30
  InputF a_mod_quarter_minus_one_quarter = (a & mask) - kOneQuarter;
 8016be8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8016bea:	6878      	ldr	r0, [r7, #4]
 8016bec:	f000 f9c2 	bl	8016f74 <_ZN8gemmlowpanIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8016bf0:	4603      	mov	r3, r0
 8016bf2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8016bf4:	4618      	mov	r0, r3
 8016bf6:	f000 f99f 	bl	8016f38 <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8016bfa:	4603      	mov	r3, r0
 8016bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  ResultF result = exp_on_interval_between_negative_one_quarter_and_0_excl(
 8016bfe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016c00:	f000 f9d6 	bl	8016fb0 <_ZN8gemmlowp7RescaleILi0ElLi5EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 8016c04:	4603      	mov	r3, r0
 8016c06:	4618      	mov	r0, r3
 8016c08:	f7ff f9be 	bl	8015f88 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_>
 8016c0c:	4603      	mov	r3, r0
 8016c0e:	62bb      	str	r3, [r7, #40]	; 0x28
  tRawType remainder = (a_mod_quarter_minus_one_quarter - a).raw();
 8016c10:	6879      	ldr	r1, [r7, #4]
 8016c12:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016c14:	f000 f990 	bl	8016f38 <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8016c18:	4603      	mov	r3, r0
 8016c1a:	63bb      	str	r3, [r7, #56]	; 0x38
 8016c1c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8016c20:	4618      	mov	r0, r3
 8016c22:	f000 f950 	bl	8016ec6 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 8016c26:	4603      	mov	r3, r0
 8016c28:	681b      	ldr	r3, [r3, #0]
 8016c2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  GEMMLOWP_EXP_BARREL_SHIFTER(-2, 1672461947);
 8016c2c:	4883      	ldr	r0, [pc, #524]	; (8016e3c <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x278>)
 8016c2e:	f7ff f952 	bl	8015ed6 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 8016c32:	4603      	mov	r3, r0
 8016c34:	4618      	mov	r0, r3
 8016c36:	f7fe fa3e 	bl	80150b6 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8016c3a:	4603      	mov	r3, r0
 8016c3c:	627b      	str	r3, [r7, #36]	; 0x24
 8016c3e:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8016c42:	f7fe f837 	bl	8014cb4 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8016c46:	4603      	mov	r3, r0
 8016c48:	4619      	mov	r1, r3
 8016c4a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8016c4c:	f7fe f83d 	bl	8014cca <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8016c50:	4603      	mov	r3, r0
 8016c52:	4618      	mov	r0, r3
 8016c54:	f7fe f88c 	bl	8014d70 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8016c58:	4604      	mov	r4, r0
 8016c5a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016c5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016c5e:	f7ff f9f5 	bl	801604c <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8016c62:	4603      	mov	r3, r0
 8016c64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016c66:	4619      	mov	r1, r3
 8016c68:	4620      	mov	r0, r4
 8016c6a:	f7ff f95a 	bl	8015f22 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 8016c6e:	4603      	mov	r3, r0
 8016c70:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(-1, 1302514674);
 8016c72:	4873      	ldr	r0, [pc, #460]	; (8016e40 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x27c>)
 8016c74:	f7ff f92f 	bl	8015ed6 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 8016c78:	4603      	mov	r3, r0
 8016c7a:	4618      	mov	r0, r3
 8016c7c:	f7fe fa1b 	bl	80150b6 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8016c80:	4603      	mov	r3, r0
 8016c82:	623b      	str	r3, [r7, #32]
 8016c84:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8016c88:	f7fe f814 	bl	8014cb4 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8016c8c:	4603      	mov	r3, r0
 8016c8e:	4619      	mov	r1, r3
 8016c90:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8016c92:	f7fe f81a 	bl	8014cca <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8016c96:	4603      	mov	r3, r0
 8016c98:	4618      	mov	r0, r3
 8016c9a:	f7fe f869 	bl	8014d70 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8016c9e:	4604      	mov	r4, r0
 8016ca0:	6a39      	ldr	r1, [r7, #32]
 8016ca2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016ca4:	f7ff f9d2 	bl	801604c <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8016ca8:	4603      	mov	r3, r0
 8016caa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016cac:	4619      	mov	r1, r3
 8016cae:	4620      	mov	r0, r4
 8016cb0:	f7ff f937 	bl	8015f22 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 8016cb4:	4603      	mov	r3, r0
 8016cb6:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+0, 790015084);
 8016cb8:	4862      	ldr	r0, [pc, #392]	; (8016e44 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x280>)
 8016cba:	f7ff f90c 	bl	8015ed6 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 8016cbe:	4603      	mov	r3, r0
 8016cc0:	4618      	mov	r0, r3
 8016cc2:	f7fe f9f8 	bl	80150b6 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8016cc6:	4603      	mov	r3, r0
 8016cc8:	61fb      	str	r3, [r7, #28]
 8016cca:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8016cce:	f7fd fff1 	bl	8014cb4 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8016cd2:	4603      	mov	r3, r0
 8016cd4:	4619      	mov	r1, r3
 8016cd6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8016cd8:	f7fd fff7 	bl	8014cca <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8016cdc:	4603      	mov	r3, r0
 8016cde:	4618      	mov	r0, r3
 8016ce0:	f7fe f846 	bl	8014d70 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8016ce4:	4604      	mov	r4, r0
 8016ce6:	69f9      	ldr	r1, [r7, #28]
 8016ce8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016cea:	f7ff f9af 	bl	801604c <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8016cee:	4603      	mov	r3, r0
 8016cf0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016cf2:	4619      	mov	r1, r3
 8016cf4:	4620      	mov	r0, r4
 8016cf6:	f7ff f914 	bl	8015f22 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 8016cfa:	4603      	mov	r3, r0
 8016cfc:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+1, 290630308);
 8016cfe:	4852      	ldr	r0, [pc, #328]	; (8016e48 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x284>)
 8016d00:	f7ff f8e9 	bl	8015ed6 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 8016d04:	4603      	mov	r3, r0
 8016d06:	4618      	mov	r0, r3
 8016d08:	f7fe f9d5 	bl	80150b6 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8016d0c:	4603      	mov	r3, r0
 8016d0e:	61bb      	str	r3, [r7, #24]
 8016d10:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8016d14:	f7fd ffce 	bl	8014cb4 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8016d18:	4603      	mov	r3, r0
 8016d1a:	4619      	mov	r1, r3
 8016d1c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8016d1e:	f7fd ffd4 	bl	8014cca <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8016d22:	4603      	mov	r3, r0
 8016d24:	4618      	mov	r0, r3
 8016d26:	f7fe f823 	bl	8014d70 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8016d2a:	4604      	mov	r4, r0
 8016d2c:	69b9      	ldr	r1, [r7, #24]
 8016d2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016d30:	f7ff f98c 	bl	801604c <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8016d34:	4603      	mov	r3, r0
 8016d36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016d38:	4619      	mov	r1, r3
 8016d3a:	4620      	mov	r0, r4
 8016d3c:	f7ff f8f1 	bl	8015f22 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 8016d40:	4603      	mov	r3, r0
 8016d42:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+2, 39332535);
 8016d44:	4841      	ldr	r0, [pc, #260]	; (8016e4c <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x288>)
 8016d46:	f7ff f8c6 	bl	8015ed6 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 8016d4a:	4603      	mov	r3, r0
 8016d4c:	4618      	mov	r0, r3
 8016d4e:	f7fe f9b2 	bl	80150b6 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8016d52:	4603      	mov	r3, r0
 8016d54:	617b      	str	r3, [r7, #20]
 8016d56:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8016d5a:	f7fd ffab 	bl	8014cb4 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8016d5e:	4603      	mov	r3, r0
 8016d60:	4619      	mov	r1, r3
 8016d62:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8016d64:	f7fd ffb1 	bl	8014cca <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8016d68:	4603      	mov	r3, r0
 8016d6a:	4618      	mov	r0, r3
 8016d6c:	f7fe f800 	bl	8014d70 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8016d70:	4604      	mov	r4, r0
 8016d72:	6979      	ldr	r1, [r7, #20]
 8016d74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016d76:	f7ff f969 	bl	801604c <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8016d7a:	4603      	mov	r3, r0
 8016d7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016d7e:	4619      	mov	r1, r3
 8016d80:	4620      	mov	r0, r4
 8016d82:	f7ff f8ce 	bl	8015f22 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 8016d86:	4603      	mov	r3, r0
 8016d88:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+3, 720401);
 8016d8a:	4831      	ldr	r0, [pc, #196]	; (8016e50 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x28c>)
 8016d8c:	f7ff f8a3 	bl	8015ed6 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 8016d90:	4603      	mov	r3, r0
 8016d92:	4618      	mov	r0, r3
 8016d94:	f7fe f98f 	bl	80150b6 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8016d98:	4603      	mov	r3, r0
 8016d9a:	613b      	str	r3, [r7, #16]
 8016d9c:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8016da0:	f7fd ff88 	bl	8014cb4 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8016da4:	4603      	mov	r3, r0
 8016da6:	4619      	mov	r1, r3
 8016da8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8016daa:	f7fd ff8e 	bl	8014cca <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8016dae:	4603      	mov	r3, r0
 8016db0:	4618      	mov	r0, r3
 8016db2:	f7fd ffdd 	bl	8014d70 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8016db6:	4604      	mov	r4, r0
 8016db8:	6939      	ldr	r1, [r7, #16]
 8016dba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016dbc:	f7ff f946 	bl	801604c <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8016dc0:	4603      	mov	r3, r0
 8016dc2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016dc4:	4619      	mov	r1, r3
 8016dc6:	4620      	mov	r0, r4
 8016dc8:	f7ff f8ab 	bl	8015f22 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 8016dcc:	4603      	mov	r3, r0
 8016dce:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+4, 242);
 8016dd0:	20f2      	movs	r0, #242	; 0xf2
 8016dd2:	f7ff f880 	bl	8015ed6 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 8016dd6:	4603      	mov	r3, r0
 8016dd8:	4618      	mov	r0, r3
 8016dda:	f7fe f96c 	bl	80150b6 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8016dde:	4603      	mov	r3, r0
 8016de0:	60fb      	str	r3, [r7, #12]
 8016de2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8016de6:	f7fd ff65 	bl	8014cb4 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8016dea:	4603      	mov	r3, r0
 8016dec:	4619      	mov	r1, r3
 8016dee:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8016df0:	f7fd ff6b 	bl	8014cca <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8016df4:	4603      	mov	r3, r0
 8016df6:	4618      	mov	r0, r3
 8016df8:	f7fd ffba 	bl	8014d70 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8016dfc:	4604      	mov	r4, r0
 8016dfe:	68f9      	ldr	r1, [r7, #12]
 8016e00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016e02:	f7ff f923 	bl	801604c <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8016e06:	4603      	mov	r3, r0
 8016e08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016e0a:	4619      	mov	r1, r3
 8016e0c:	4620      	mov	r0, r4
 8016e0e:	f7ff f888 	bl	8015f22 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 8016e12:	4603      	mov	r3, r0
 8016e14:	62bb      	str	r3, [r7, #40]	; 0x28
  result = SelectUsingMask(MaskIfZero(a), ResultF::One(), result);
 8016e16:	6878      	ldr	r0, [r7, #4]
 8016e18:	f000 f8e4 	bl	8016fe4 <_ZN8gemmlowp10MaskIfZeroIlLi5EEET_NS_10FixedPointIS1_XT0_EEE>
 8016e1c:	4604      	mov	r4, r0
 8016e1e:	f7fe f95e 	bl	80150de <_ZN8gemmlowp10FixedPointIlLi0EE3OneEv>
 8016e22:	4603      	mov	r3, r0
 8016e24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016e26:	4619      	mov	r1, r3
 8016e28:	4620      	mov	r0, r4
 8016e2a:	f7ff f87a 	bl	8015f22 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 8016e2e:	4603      	mov	r3, r0
 8016e30:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8016e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8016e34:	4618      	mov	r0, r3
 8016e36:	3744      	adds	r7, #68	; 0x44
 8016e38:	46bd      	mov	sp, r7
 8016e3a:	bd90      	pop	{r4, r7, pc}
 8016e3c:	63afbe7b 	.word	0x63afbe7b
 8016e40:	4da2cbf2 	.word	0x4da2cbf2
 8016e44:	2f16ac6c 	.word	0x2f16ac6c
 8016e48:	1152aaa4 	.word	0x1152aaa4
 8016e4c:	02582ab7 	.word	0x02582ab7
 8016e50:	000afe11 	.word	0x000afe11

08016e54 <_ZN8gemmlowp7RescaleILi12ElLi0EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 8016e54:	b5b0      	push	{r4, r5, r7, lr}
 8016e56:	b084      	sub	sp, #16
 8016e58:	af00      	add	r7, sp, #0
 8016e5a:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 8016e5c:	1d3b      	adds	r3, r7, #4
 8016e5e:	4618      	mov	r0, r3
 8016e60:	f7fe f91e 	bl	80150a0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8016e64:	4603      	mov	r3, r0
 8016e66:	681d      	ldr	r5, [r3, #0]
 8016e68:	f107 030c 	add.w	r3, r7, #12
 8016e6c:	4618      	mov	r0, r3
 8016e6e:	f000 f80b 	bl	8016e88 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 8016e72:	4604      	mov	r4, r0
 8016e74:	4628      	mov	r0, r5
 8016e76:	f000 f8c7 	bl	8017008 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin12ElEET0_S1_>
 8016e7a:	4603      	mov	r3, r0
 8016e7c:	6023      	str	r3, [r4, #0]
  return result;
 8016e7e:	68fb      	ldr	r3, [r7, #12]
}
 8016e80:	4618      	mov	r0, r3
 8016e82:	3710      	adds	r7, #16
 8016e84:	46bd      	mov	sp, r7
 8016e86:	bdb0      	pop	{r4, r5, r7, pc}

08016e88 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>:
  RawType& raw() { return i_; }
 8016e88:	b480      	push	{r7}
 8016e8a:	b083      	sub	sp, #12
 8016e8c:	af00      	add	r7, sp, #0
 8016e8e:	6078      	str	r0, [r7, #4]
 8016e90:	687b      	ldr	r3, [r7, #4]
 8016e92:	4618      	mov	r0, r3
 8016e94:	370c      	adds	r7, #12
 8016e96:	46bd      	mov	sp, r7
 8016e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e9c:	4770      	bx	lr

08016e9e <_ZN8gemmlowp10FixedPointIlLi12EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 8016e9e:	b590      	push	{r4, r7, lr}
 8016ea0:	b085      	sub	sp, #20
 8016ea2:	af00      	add	r7, sp, #0
 8016ea4:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 8016ea6:	f107 030c 	add.w	r3, r7, #12
 8016eaa:	4618      	mov	r0, r3
 8016eac:	f7ff ffec 	bl	8016e88 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 8016eb0:	4604      	mov	r4, r0
 8016eb2:	6878      	ldr	r0, [r7, #4]
 8016eb4:	f7fd fefe 	bl	8014cb4 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8016eb8:	4603      	mov	r3, r0
 8016eba:	6023      	str	r3, [r4, #0]
    return retval;
 8016ebc:	68fb      	ldr	r3, [r7, #12]
  }
 8016ebe:	4618      	mov	r0, r3
 8016ec0:	3714      	adds	r7, #20
 8016ec2:	46bd      	mov	sp, r7
 8016ec4:	bd90      	pop	{r4, r7, pc}

08016ec6 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>:
  RawType& raw() { return i_; }
 8016ec6:	b480      	push	{r7}
 8016ec8:	b083      	sub	sp, #12
 8016eca:	af00      	add	r7, sp, #0
 8016ecc:	6078      	str	r0, [r7, #4]
 8016ece:	687b      	ldr	r3, [r7, #4]
 8016ed0:	4618      	mov	r0, r3
 8016ed2:	370c      	adds	r7, #12
 8016ed4:	46bd      	mov	sp, r7
 8016ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016eda:	4770      	bx	lr

08016edc <_ZN8gemmlowp10FixedPointIlLi12EE7FromRawEl>:
  static FixedPoint FromRaw(RawType x) {
 8016edc:	b580      	push	{r7, lr}
 8016ede:	b084      	sub	sp, #16
 8016ee0:	af00      	add	r7, sp, #0
 8016ee2:	6078      	str	r0, [r7, #4]
    retval.raw() = x;
 8016ee4:	f107 030c 	add.w	r3, r7, #12
 8016ee8:	4618      	mov	r0, r3
 8016eea:	f7ff ffcd 	bl	8016e88 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 8016eee:	4602      	mov	r2, r0
 8016ef0:	687b      	ldr	r3, [r7, #4]
 8016ef2:	6013      	str	r3, [r2, #0]
    return retval;
 8016ef4:	68fb      	ldr	r3, [r7, #12]
  }
 8016ef6:	4618      	mov	r0, r3
 8016ef8:	3710      	adds	r7, #16
 8016efa:	46bd      	mov	sp, r7
 8016efc:	bd80      	pop	{r7, pc}

08016efe <_ZN8gemmlowp10FixedPointIlLi5EE11ConstantPOTILin2EEES1_v>:
  static FixedPoint ConstantPOT() {
 8016efe:	b580      	push	{r7, lr}
 8016f00:	af00      	add	r7, sp, #0
    return FromScalarRaw(ScalarRawType(1) << kOffset);
 8016f02:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8016f06:	f000 f803 	bl	8016f10 <_ZN8gemmlowp10FixedPointIlLi5EE13FromScalarRawEl>
 8016f0a:	4603      	mov	r3, r0
  }
 8016f0c:	4618      	mov	r0, r3
 8016f0e:	bd80      	pop	{r7, pc}

08016f10 <_ZN8gemmlowp10FixedPointIlLi5EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 8016f10:	b590      	push	{r4, r7, lr}
 8016f12:	b085      	sub	sp, #20
 8016f14:	af00      	add	r7, sp, #0
 8016f16:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 8016f18:	f107 030c 	add.w	r3, r7, #12
 8016f1c:	4618      	mov	r0, r3
 8016f1e:	f7ff ffd2 	bl	8016ec6 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 8016f22:	4604      	mov	r4, r0
 8016f24:	6878      	ldr	r0, [r7, #4]
 8016f26:	f7fd fec5 	bl	8014cb4 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8016f2a:	4603      	mov	r3, r0
 8016f2c:	6023      	str	r3, [r4, #0]
    return retval;
 8016f2e:	68fb      	ldr	r3, [r7, #12]
  }
 8016f30:	4618      	mov	r0, r3
 8016f32:	3714      	adds	r7, #20
 8016f34:	46bd      	mov	sp, r7
 8016f36:	bd90      	pop	{r4, r7, pc}

08016f38 <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator-, Sub)
 8016f38:	b590      	push	{r4, r7, lr}
 8016f3a:	b083      	sub	sp, #12
 8016f3c:	af00      	add	r7, sp, #0
 8016f3e:	6078      	str	r0, [r7, #4]
 8016f40:	6039      	str	r1, [r7, #0]
 8016f42:	1d3b      	adds	r3, r7, #4
 8016f44:	4618      	mov	r0, r3
 8016f46:	f7ff ffbe 	bl	8016ec6 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 8016f4a:	4603      	mov	r3, r0
 8016f4c:	681c      	ldr	r4, [r3, #0]
 8016f4e:	463b      	mov	r3, r7
 8016f50:	4618      	mov	r0, r3
 8016f52:	f7ff ffb8 	bl	8016ec6 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 8016f56:	4603      	mov	r3, r0
 8016f58:	681b      	ldr	r3, [r3, #0]
 8016f5a:	4619      	mov	r1, r3
 8016f5c:	4620      	mov	r0, r4
 8016f5e:	f7fe f9db 	bl	8015318 <_ZN8gemmlowp3SubIlEET_S1_S1_>
 8016f62:	4603      	mov	r3, r0
 8016f64:	4618      	mov	r0, r3
 8016f66:	f7ff fdfe 	bl	8016b66 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 8016f6a:	4603      	mov	r3, r0
 8016f6c:	4618      	mov	r0, r3
 8016f6e:	370c      	adds	r7, #12
 8016f70:	46bd      	mov	sp, r7
 8016f72:	bd90      	pop	{r4, r7, pc}

08016f74 <_ZN8gemmlowpanIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator&, BitAnd)
 8016f74:	b590      	push	{r4, r7, lr}
 8016f76:	b083      	sub	sp, #12
 8016f78:	af00      	add	r7, sp, #0
 8016f7a:	6078      	str	r0, [r7, #4]
 8016f7c:	6039      	str	r1, [r7, #0]
 8016f7e:	1d3b      	adds	r3, r7, #4
 8016f80:	4618      	mov	r0, r3
 8016f82:	f7ff ffa0 	bl	8016ec6 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 8016f86:	4603      	mov	r3, r0
 8016f88:	681c      	ldr	r4, [r3, #0]
 8016f8a:	463b      	mov	r3, r7
 8016f8c:	4618      	mov	r0, r3
 8016f8e:	f7ff ff9a 	bl	8016ec6 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 8016f92:	4603      	mov	r3, r0
 8016f94:	681b      	ldr	r3, [r3, #0]
 8016f96:	4619      	mov	r1, r3
 8016f98:	4620      	mov	r0, r4
 8016f9a:	f7fd fe96 	bl	8014cca <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8016f9e:	4603      	mov	r3, r0
 8016fa0:	4618      	mov	r0, r3
 8016fa2:	f7ff fde0 	bl	8016b66 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 8016fa6:	4603      	mov	r3, r0
 8016fa8:	4618      	mov	r0, r3
 8016faa:	370c      	adds	r7, #12
 8016fac:	46bd      	mov	sp, r7
 8016fae:	bd90      	pop	{r4, r7, pc}

08016fb0 <_ZN8gemmlowp7RescaleILi0ElLi5EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 8016fb0:	b5b0      	push	{r4, r5, r7, lr}
 8016fb2:	b084      	sub	sp, #16
 8016fb4:	af00      	add	r7, sp, #0
 8016fb6:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 8016fb8:	1d3b      	adds	r3, r7, #4
 8016fba:	4618      	mov	r0, r3
 8016fbc:	f7ff ff83 	bl	8016ec6 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 8016fc0:	4603      	mov	r3, r0
 8016fc2:	681d      	ldr	r5, [r3, #0]
 8016fc4:	f107 030c 	add.w	r3, r7, #12
 8016fc8:	4618      	mov	r0, r3
 8016fca:	f7fe f869 	bl	80150a0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8016fce:	4604      	mov	r4, r0
 8016fd0:	4628      	mov	r0, r5
 8016fd2:	f000 f825 	bl	8017020 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi5ElEET0_S1_>
 8016fd6:	4603      	mov	r3, r0
 8016fd8:	6023      	str	r3, [r4, #0]
  return result;
 8016fda:	68fb      	ldr	r3, [r7, #12]
}
 8016fdc:	4618      	mov	r0, r3
 8016fde:	3710      	adds	r7, #16
 8016fe0:	46bd      	mov	sp, r7
 8016fe2:	bdb0      	pop	{r4, r5, r7, pc}

08016fe4 <_ZN8gemmlowp10MaskIfZeroIlLi5EEET_NS_10FixedPointIS1_XT0_EEE>:
MAKE_FIXEDPOINT_UNARY_FUNC_RETURNING_RAW(MaskIfZero)
 8016fe4:	b580      	push	{r7, lr}
 8016fe6:	b082      	sub	sp, #8
 8016fe8:	af00      	add	r7, sp, #0
 8016fea:	6078      	str	r0, [r7, #4]
 8016fec:	1d3b      	adds	r3, r7, #4
 8016fee:	4618      	mov	r0, r3
 8016ff0:	f7ff ff69 	bl	8016ec6 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 8016ff4:	4603      	mov	r3, r0
 8016ff6:	681b      	ldr	r3, [r3, #0]
 8016ff8:	4618      	mov	r0, r3
 8016ffa:	f7fe ffb3 	bl	8015f64 <_ZN8gemmlowp10MaskIfZeroIlEET_S1_>
 8016ffe:	4603      	mov	r3, r0
 8017000:	4618      	mov	r0, r3
 8017002:	3708      	adds	r7, #8
 8017004:	46bd      	mov	sp, r7
 8017006:	bd80      	pop	{r7, pc}

08017008 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin12ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 8017008:	b580      	push	{r7, lr}
 801700a:	b082      	sub	sp, #8
 801700c:	af00      	add	r7, sp, #0
 801700e:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 8017010:	6878      	ldr	r0, [r7, #4]
 8017012:	f000 f811 	bl	8017038 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin12ElLin1EE4evalEl>
 8017016:	4603      	mov	r3, r0
}
 8017018:	4618      	mov	r0, r3
 801701a:	3708      	adds	r7, #8
 801701c:	46bd      	mov	sp, r7
 801701e:	bd80      	pop	{r7, pc}

08017020 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi5ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 8017020:	b580      	push	{r7, lr}
 8017022:	b082      	sub	sp, #8
 8017024:	af00      	add	r7, sp, #0
 8017026:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 8017028:	6878      	ldr	r0, [r7, #4]
 801702a:	f000 f813 	bl	8017054 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi5ElLi1EE4evalEl>
 801702e:	4603      	mov	r3, r0
}
 8017030:	4618      	mov	r0, r3
 8017032:	3708      	adds	r7, #8
 8017034:	46bd      	mov	sp, r7
 8017036:	bd80      	pop	{r7, pc}

08017038 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin12ElLin1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 8017038:	b580      	push	{r7, lr}
 801703a:	b082      	sub	sp, #8
 801703c:	af00      	add	r7, sp, #0
 801703e:	6078      	str	r0, [r7, #4]
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
 8017040:	210c      	movs	r1, #12
 8017042:	6878      	ldr	r0, [r7, #4]
 8017044:	f7fd fa72 	bl	801452c <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 8017048:	4603      	mov	r3, r0
  }
 801704a:	4618      	mov	r0, r3
 801704c:	3708      	adds	r7, #8
 801704e:	46bd      	mov	sp, r7
 8017050:	bd80      	pop	{r7, pc}
	...

08017054 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi5ElLi1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 8017054:	b580      	push	{r7, lr}
 8017056:	b08a      	sub	sp, #40	; 0x28
 8017058:	af00      	add	r7, sp, #0
 801705a:	6078      	str	r0, [r7, #4]
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::min());
 801705c:	f7fc fde1 	bl	8013c22 <_ZNSt14numeric_limitsIlE3minEv>
 8017060:	4603      	mov	r3, r0
 8017062:	4618      	mov	r0, r3
 8017064:	f7fd fe26 	bl	8014cb4 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8017068:	6278      	str	r0, [r7, #36]	; 0x24
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::max());
 801706a:	f7fc f863 	bl	8013134 <_ZNSt14numeric_limitsIlE3maxEv>
 801706e:	4603      	mov	r3, r0
 8017070:	4618      	mov	r0, r3
 8017072:	f7fd fe1f 	bl	8014cb4 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8017076:	6238      	str	r0, [r7, #32]
    const int ScalarIntegerTypeBits = 8 * sizeof(ScalarIntegerType);
 8017078:	2320      	movs	r3, #32
 801707a:	61fb      	str	r3, [r7, #28]
    const std::int32_t threshold =
 801707c:	f06f 437c 	mvn.w	r3, #4227858432	; 0xfc000000
 8017080:	61bb      	str	r3, [r7, #24]
        MaskIfGreaterThan(x, Dup<IntegerType>(threshold));
 8017082:	f06f 407c 	mvn.w	r0, #4227858432	; 0xfc000000
 8017086:	f7fd fe15 	bl	8014cb4 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801708a:	4603      	mov	r3, r0
 801708c:	4619      	mov	r1, r3
 801708e:	6878      	ldr	r0, [r7, #4]
 8017090:	f7fd fe5a 	bl	8014d48 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 8017094:	6178      	str	r0, [r7, #20]
        MaskIfLessThan(x, Dup<IntegerType>(-threshold));
 8017096:	480f      	ldr	r0, [pc, #60]	; (80170d4 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi5ElLi1EE4evalEl+0x80>)
 8017098:	f7fd fe0c 	bl	8014cb4 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801709c:	4603      	mov	r3, r0
 801709e:	4619      	mov	r1, r3
 80170a0:	6878      	ldr	r0, [r7, #4]
 80170a2:	f7fd fe2f 	bl	8014d04 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 80170a6:	6138      	str	r0, [r7, #16]
    IntegerType result = ShiftLeft(x, Exponent);
 80170a8:	2105      	movs	r1, #5
 80170aa:	6878      	ldr	r0, [r7, #4]
 80170ac:	f7fe fa18 	bl	80154e0 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i>
 80170b0:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(positive_mask, max, result);
 80170b2:	68fa      	ldr	r2, [r7, #12]
 80170b4:	6a39      	ldr	r1, [r7, #32]
 80170b6:	6978      	ldr	r0, [r7, #20]
 80170b8:	f7fe fa56 	bl	8015568 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 80170bc:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(negative_mask, min, result);
 80170be:	68fa      	ldr	r2, [r7, #12]
 80170c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80170c2:	6938      	ldr	r0, [r7, #16]
 80170c4:	f7fe fa50 	bl	8015568 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 80170c8:	60f8      	str	r0, [r7, #12]
    return result;
 80170ca:	68fb      	ldr	r3, [r7, #12]
  }
 80170cc:	4618      	mov	r0, r3
 80170ce:	3728      	adds	r7, #40	; 0x28
 80170d0:	46bd      	mov	sp, r7
 80170d2:	bd80      	pop	{r7, pc}
 80170d4:	fc000001 	.word	0xfc000001

080170d8 <_ZN6tflite7gen_lutEPFffEffPsi>:
                    const int num) {
 80170d8:	b580      	push	{r7, lr}
 80170da:	ed2d 8b02 	vpush	{d8}
 80170de:	b094      	sub	sp, #80	; 0x50
 80170e0:	af00      	add	r7, sp, #0
 80170e2:	6178      	str	r0, [r7, #20]
 80170e4:	ed87 0a04 	vstr	s0, [r7, #16]
 80170e8:	edc7 0a03 	vstr	s1, [r7, #12]
 80170ec:	60b9      	str	r1, [r7, #8]
 80170ee:	607a      	str	r2, [r7, #4]
  float step = (max - min) / (num - 1);
 80170f0:	ed97 7a03 	vldr	s14, [r7, #12]
 80170f4:	edd7 7a04 	vldr	s15, [r7, #16]
 80170f8:	ee77 6a67 	vsub.f32	s13, s14, s15
 80170fc:	687b      	ldr	r3, [r7, #4]
 80170fe:	3b01      	subs	r3, #1
 8017100:	ee07 3a90 	vmov	s15, r3
 8017104:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8017108:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801710c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
  float half_step = step / 2.0f;
 8017110:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8017114:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8017118:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801711c:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
  for (int i = 0; i < num - 1; i++) {
 8017120:	2300      	movs	r3, #0
 8017122:	64fb      	str	r3, [r7, #76]	; 0x4c
 8017124:	687b      	ldr	r3, [r7, #4]
 8017126:	3b01      	subs	r3, #1
 8017128:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801712a:	429a      	cmp	r2, r3
 801712c:	f280 80c0 	bge.w	80172b0 <_ZN6tflite7gen_lutEPFffEffPsi+0x1d8>
    float sample_val = TfLiteRound(func(min + i * step) * 32768.0f);
 8017130:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017132:	ee07 3a90 	vmov	s15, r3
 8017136:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801713a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 801713e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8017142:	edd7 7a04 	vldr	s15, [r7, #16]
 8017146:	ee77 7a27 	vadd.f32	s15, s14, s15
 801714a:	697b      	ldr	r3, [r7, #20]
 801714c:	eeb0 0a67 	vmov.f32	s0, s15
 8017150:	4798      	blx	r3
 8017152:	eef0 7a40 	vmov.f32	s15, s0
 8017156:	ed9f 7a74 	vldr	s14, [pc, #464]	; 8017328 <_ZN6tflite7gen_lutEPFffEffPsi+0x250>
 801715a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801715e:	eeb0 0a67 	vmov.f32	s0, s15
 8017162:	f7fc f999 	bl	8013498 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 8017166:	ed87 0a10 	vstr	s0, [r7, #64]	; 0x40
        TfLiteRound((func(min + (i + 1) * step) * 32768.0f +
 801716a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801716c:	3301      	adds	r3, #1
 801716e:	ee07 3a90 	vmov	s15, r3
 8017172:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8017176:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 801717a:	ee27 7a27 	vmul.f32	s14, s14, s15
 801717e:	edd7 7a04 	vldr	s15, [r7, #16]
 8017182:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017186:	697b      	ldr	r3, [r7, #20]
 8017188:	eeb0 0a67 	vmov.f32	s0, s15
 801718c:	4798      	blx	r3
 801718e:	eef0 7a40 	vmov.f32	s15, s0
 8017192:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8017328 <_ZN6tflite7gen_lutEPFffEffPsi+0x250>
 8017196:	ee27 8a87 	vmul.f32	s16, s15, s14
                     TfLiteRound(func(min + i * step) * 32768.0f)) /
 801719a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801719c:	ee07 3a90 	vmov	s15, r3
 80171a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80171a4:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80171a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80171ac:	edd7 7a04 	vldr	s15, [r7, #16]
 80171b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80171b4:	697b      	ldr	r3, [r7, #20]
 80171b6:	eeb0 0a67 	vmov.f32	s0, s15
 80171ba:	4798      	blx	r3
 80171bc:	eef0 7a40 	vmov.f32	s15, s0
 80171c0:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8017328 <_ZN6tflite7gen_lutEPFffEffPsi+0x250>
 80171c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80171c8:	eeb0 0a67 	vmov.f32	s0, s15
 80171cc:	f7fc f964 	bl	8013498 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 80171d0:	eef0 7a40 	vmov.f32	s15, s0
        TfLiteRound((func(min + (i + 1) * step) * 32768.0f +
 80171d4:	ee78 7a27 	vadd.f32	s15, s16, s15
 80171d8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80171dc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80171e0:	eeb0 0a47 	vmov.f32	s0, s14
 80171e4:	f7fc f958 	bl	8013498 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 80171e8:	ed87 0a0f 	vstr	s0, [r7, #60]	; 0x3c
        TfLiteRound(func(min + i * step + half_step) * 32768.0f);
 80171ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80171ee:	ee07 3a90 	vmov	s15, r3
 80171f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80171f6:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80171fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80171fe:	edd7 7a04 	vldr	s15, [r7, #16]
 8017202:	ee37 7a27 	vadd.f32	s14, s14, s15
 8017206:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 801720a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801720e:	697b      	ldr	r3, [r7, #20]
 8017210:	eeb0 0a67 	vmov.f32	s0, s15
 8017214:	4798      	blx	r3
 8017216:	eef0 7a40 	vmov.f32	s15, s0
 801721a:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8017328 <_ZN6tflite7gen_lutEPFffEffPsi+0x250>
 801721e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8017222:	eeb0 0a67 	vmov.f32	s0, s15
 8017226:	f7fc f937 	bl	8013498 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 801722a:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
    float midpoint_err = midpoint_interp_val - midpoint_val;
 801722e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8017232:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8017236:	ee77 7a67 	vsub.f32	s15, s14, s15
 801723a:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
    float bias = TfLiteRound(midpoint_err / 2.0f);
 801723e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8017242:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8017246:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801724a:	eeb0 0a47 	vmov.f32	s0, s14
 801724e:	f7fc f923 	bl	8013498 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 8017252:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30
    table[i] = std::min<float>(std::max<float>(sample_val - bias, -32768.0f),
 8017256:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 801725a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 801725e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017262:	edc7 7a06 	vstr	s15, [r7, #24]
 8017266:	f04f 4347 	mov.w	r3, #3338665984	; 0xc7000000
 801726a:	61fb      	str	r3, [r7, #28]
                               32767.0f);
 801726c:	f107 021c 	add.w	r2, r7, #28
 8017270:	f107 0318 	add.w	r3, r7, #24
 8017274:	4611      	mov	r1, r2
 8017276:	4618      	mov	r0, r3
 8017278:	f7ed f8e8 	bl	800444c <_ZSt3maxIfERKT_S2_S2_>
 801727c:	4602      	mov	r2, r0
 801727e:	4b2b      	ldr	r3, [pc, #172]	; (801732c <_ZN6tflite7gen_lutEPFffEffPsi+0x254>)
 8017280:	623b      	str	r3, [r7, #32]
 8017282:	f107 0320 	add.w	r3, r7, #32
 8017286:	4619      	mov	r1, r3
 8017288:	4610      	mov	r0, r2
 801728a:	f7fc f8d8 	bl	801343e <_ZSt3minIfERKT_S2_S2_>
 801728e:	4603      	mov	r3, r0
    table[i] = std::min<float>(std::max<float>(sample_val - bias, -32768.0f),
 8017290:	edd3 7a00 	vldr	s15, [r3]
 8017294:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017296:	005b      	lsls	r3, r3, #1
 8017298:	68ba      	ldr	r2, [r7, #8]
 801729a:	4413      	add	r3, r2
 801729c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80172a0:	ee17 2a90 	vmov	r2, s15
 80172a4:	b212      	sxth	r2, r2
 80172a6:	801a      	strh	r2, [r3, #0]
  for (int i = 0; i < num - 1; i++) {
 80172a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80172aa:	3301      	adds	r3, #1
 80172ac:	64fb      	str	r3, [r7, #76]	; 0x4c
 80172ae:	e739      	b.n	8017124 <_ZN6tflite7gen_lutEPFffEffPsi+0x4c>
      std::max<float>(TfLiteRound(func(max) * 32768.0f), -32768.0f), 32767.0f);
 80172b0:	697b      	ldr	r3, [r7, #20]
 80172b2:	ed97 0a03 	vldr	s0, [r7, #12]
 80172b6:	4798      	blx	r3
 80172b8:	eef0 7a40 	vmov.f32	s15, s0
 80172bc:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8017328 <_ZN6tflite7gen_lutEPFffEffPsi+0x250>
 80172c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80172c4:	eeb0 0a67 	vmov.f32	s0, s15
 80172c8:	f7fc f8e6 	bl	8013498 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 80172cc:	eef0 7a40 	vmov.f32	s15, s0
 80172d0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 80172d4:	f04f 4347 	mov.w	r3, #3338665984	; 0xc7000000
 80172d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80172da:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80172de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80172e2:	4611      	mov	r1, r2
 80172e4:	4618      	mov	r0, r3
 80172e6:	f7ed f8b1 	bl	800444c <_ZSt3maxIfERKT_S2_S2_>
 80172ea:	4602      	mov	r2, r0
 80172ec:	4b0f      	ldr	r3, [pc, #60]	; (801732c <_ZN6tflite7gen_lutEPFffEffPsi+0x254>)
 80172ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80172f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80172f4:	4619      	mov	r1, r3
 80172f6:	4610      	mov	r0, r2
 80172f8:	f7fc f8a1 	bl	801343e <_ZSt3minIfERKT_S2_S2_>
 80172fc:	4603      	mov	r3, r0
  table[num - 1] = std::min<float>(
 80172fe:	edd3 7a00 	vldr	s15, [r3]
 8017302:	687b      	ldr	r3, [r7, #4]
 8017304:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8017308:	3b01      	subs	r3, #1
 801730a:	005b      	lsls	r3, r3, #1
 801730c:	68ba      	ldr	r2, [r7, #8]
 801730e:	4413      	add	r3, r2
 8017310:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017314:	ee17 2a90 	vmov	r2, s15
 8017318:	b212      	sxth	r2, r2
 801731a:	801a      	strh	r2, [r3, #0]
}
 801731c:	bf00      	nop
 801731e:	3750      	adds	r7, #80	; 0x50
 8017320:	46bd      	mov	sp, r7
 8017322:	ecbd 8b02 	vpop	{d8}
 8017326:	bd80      	pop	{r7, pc}
 8017328:	47000000 	.word	0x47000000
 801732c:	46fffe00 	.word	0x46fffe00

08017330 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE>:

TfLiteStatus CalculateSoftmaxParams(TfLiteContext* context,
                                    const TfLiteTensor* input,
                                    TfLiteTensor* output,
                                    const TfLiteSoftmaxParams* params,
                                    SoftmaxParams* op_data) {
 8017330:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8017334:	b090      	sub	sp, #64	; 0x40
 8017336:	af06      	add	r7, sp, #24
 8017338:	60f8      	str	r0, [r7, #12]
 801733a:	60b9      	str	r1, [r7, #8]
 801733c:	607a      	str	r2, [r7, #4]
 801733e:	603b      	str	r3, [r7, #0]
  if (input->type == kTfLiteInt8 || input->type == kTfLiteInt16) {
 8017340:	68bb      	ldr	r3, [r7, #8]
 8017342:	781b      	ldrb	r3, [r3, #0]
 8017344:	2b09      	cmp	r3, #9
 8017346:	d004      	beq.n	8017352 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x22>
 8017348:	68bb      	ldr	r3, [r7, #8]
 801734a:	781b      	ldrb	r3, [r3, #0]
 801734c:	2b07      	cmp	r3, #7
 801734e:	f040 81b6 	bne.w	80176be <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x38e>
    if (input->type == kTfLiteInt16) {
 8017352:	68bb      	ldr	r3, [r7, #8]
 8017354:	781b      	ldrb	r3, [r3, #0]
 8017356:	2b07      	cmp	r3, #7
 8017358:	d156      	bne.n	8017408 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xd8>
      TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
 801735a:	687b      	ldr	r3, [r7, #4]
 801735c:	691b      	ldr	r3, [r3, #16]
 801735e:	2b00      	cmp	r3, #0
 8017360:	d011      	beq.n	8017386 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x56>
 8017362:	68fb      	ldr	r3, [r7, #12]
 8017364:	695c      	ldr	r4, [r3, #20]
 8017366:	687b      	ldr	r3, [r7, #4]
 8017368:	691b      	ldr	r3, [r3, #16]
 801736a:	2200      	movs	r2, #0
 801736c:	9203      	str	r2, [sp, #12]
 801736e:	9302      	str	r3, [sp, #8]
 8017370:	4ba1      	ldr	r3, [pc, #644]	; (80175f8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2c8>)
 8017372:	9301      	str	r3, [sp, #4]
 8017374:	4ba1      	ldr	r3, [pc, #644]	; (80175fc <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2cc>)
 8017376:	9300      	str	r3, [sp, #0]
 8017378:	2325      	movs	r3, #37	; 0x25
 801737a:	4aa1      	ldr	r2, [pc, #644]	; (8017600 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 801737c:	49a1      	ldr	r1, [pc, #644]	; (8017604 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d4>)
 801737e:	68f8      	ldr	r0, [r7, #12]
 8017380:	47a0      	blx	r4
 8017382:	2301      	movs	r3, #1
 8017384:	e1e0      	b.n	8017748 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
      TF_LITE_ENSURE_NEAR(context, output->params.scale, 1.f / 32768,
 8017386:	687b      	ldr	r3, [r7, #4]
 8017388:	edd3 7a03 	vldr	s15, [r3, #12]
 801738c:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 8017608 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d8>
 8017390:	eef4 7ac7 	vcmpe.f32	s15, s14
 8017394:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017398:	dd07      	ble.n	80173aa <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x7a>
 801739a:	687b      	ldr	r3, [r7, #4]
 801739c:	edd3 7a03 	vldr	s15, [r3, #12]
 80173a0:	ed9f 7a99 	vldr	s14, [pc, #612]	; 8017608 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d8>
 80173a4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80173a8:	e006      	b.n	80173b8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x88>
 80173aa:	687b      	ldr	r3, [r7, #4]
 80173ac:	edd3 7a03 	vldr	s15, [r3, #12]
 80173b0:	ed9f 7a95 	vldr	s14, [pc, #596]	; 8017608 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d8>
 80173b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80173b8:	edc7 7a08 	vstr	s15, [r7, #32]
 80173bc:	edd7 7a08 	vldr	s15, [r7, #32]
 80173c0:	ed9f 7a92 	vldr	s14, [pc, #584]	; 801760c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2dc>
 80173c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80173c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80173cc:	f340 80dd 	ble.w	801758a <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x25a>
 80173d0:	68fb      	ldr	r3, [r7, #12]
 80173d2:	695c      	ldr	r4, [r3, #20]
 80173d4:	687b      	ldr	r3, [r7, #4]
 80173d6:	68db      	ldr	r3, [r3, #12]
 80173d8:	4618      	mov	r0, r3
 80173da:	f7e9 f8bf 	bl	800055c <__aeabi_f2d>
 80173de:	4602      	mov	r2, r0
 80173e0:	460b      	mov	r3, r1
 80173e2:	f04f 0000 	mov.w	r0, #0
 80173e6:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80173ea:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80173ee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80173f2:	4b87      	ldr	r3, [pc, #540]	; (8017610 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e0>)
 80173f4:	9301      	str	r3, [sp, #4]
 80173f6:	4b87      	ldr	r3, [pc, #540]	; (8017614 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e4>)
 80173f8:	9300      	str	r3, [sp, #0]
 80173fa:	2326      	movs	r3, #38	; 0x26
 80173fc:	4a80      	ldr	r2, [pc, #512]	; (8017600 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 80173fe:	4986      	ldr	r1, [pc, #536]	; (8017618 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e8>)
 8017400:	68f8      	ldr	r0, [r7, #12]
 8017402:	47a0      	blx	r4
 8017404:	2301      	movs	r3, #1
 8017406:	e19f      	b.n	8017748 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
                          (0.001f * 1.f / 32768));
    } else {  // input->type == kTfLiteInt8
      TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteInt8);
 8017408:	68bb      	ldr	r3, [r7, #8]
 801740a:	781b      	ldrb	r3, [r3, #0]
 801740c:	2b09      	cmp	r3, #9
 801740e:	d018      	beq.n	8017442 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x112>
 8017410:	68fb      	ldr	r3, [r7, #12]
 8017412:	695c      	ldr	r4, [r3, #20]
 8017414:	68bb      	ldr	r3, [r7, #8]
 8017416:	781b      	ldrb	r3, [r3, #0]
 8017418:	4618      	mov	r0, r3
 801741a:	f7fb fe0f 	bl	801303c <TfLiteTypeGetName>
 801741e:	4605      	mov	r5, r0
 8017420:	2009      	movs	r0, #9
 8017422:	f7fb fe0b 	bl	801303c <TfLiteTypeGetName>
 8017426:	4603      	mov	r3, r0
 8017428:	9303      	str	r3, [sp, #12]
 801742a:	9502      	str	r5, [sp, #8]
 801742c:	4b7b      	ldr	r3, [pc, #492]	; (801761c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2ec>)
 801742e:	9301      	str	r3, [sp, #4]
 8017430:	4b7b      	ldr	r3, [pc, #492]	; (8017620 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f0>)
 8017432:	9300      	str	r3, [sp, #0]
 8017434:	2329      	movs	r3, #41	; 0x29
 8017436:	4a72      	ldr	r2, [pc, #456]	; (8017600 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 8017438:	497a      	ldr	r1, [pc, #488]	; (8017624 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f4>)
 801743a:	68f8      	ldr	r0, [r7, #12]
 801743c:	47a0      	blx	r4
 801743e:	2301      	movs	r3, #1
 8017440:	e182      	b.n	8017748 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
      if (output->type == kTfLiteInt16) {
 8017442:	687b      	ldr	r3, [r7, #4]
 8017444:	781b      	ldrb	r3, [r3, #0]
 8017446:	2b07      	cmp	r3, #7
 8017448:	d155      	bne.n	80174f6 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x1c6>
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -32768);
 801744a:	687b      	ldr	r3, [r7, #4]
 801744c:	691b      	ldr	r3, [r3, #16]
 801744e:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8017452:	d011      	beq.n	8017478 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x148>
 8017454:	68fb      	ldr	r3, [r7, #12]
 8017456:	695c      	ldr	r4, [r3, #20]
 8017458:	687b      	ldr	r3, [r7, #4]
 801745a:	691b      	ldr	r3, [r3, #16]
 801745c:	4a72      	ldr	r2, [pc, #456]	; (8017628 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f8>)
 801745e:	9203      	str	r2, [sp, #12]
 8017460:	9302      	str	r3, [sp, #8]
 8017462:	4b72      	ldr	r3, [pc, #456]	; (801762c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2fc>)
 8017464:	9301      	str	r3, [sp, #4]
 8017466:	4b65      	ldr	r3, [pc, #404]	; (80175fc <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2cc>)
 8017468:	9300      	str	r3, [sp, #0]
 801746a:	232b      	movs	r3, #43	; 0x2b
 801746c:	4a64      	ldr	r2, [pc, #400]	; (8017600 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 801746e:	4965      	ldr	r1, [pc, #404]	; (8017604 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d4>)
 8017470:	68f8      	ldr	r0, [r7, #12]
 8017472:	47a0      	blx	r4
 8017474:	2301      	movs	r3, #1
 8017476:	e167      	b.n	8017748 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
        TF_LITE_ENSURE_NEAR(context, output->params.scale, 1.f / 65536,
 8017478:	687b      	ldr	r3, [r7, #4]
 801747a:	edd3 7a03 	vldr	s15, [r3, #12]
 801747e:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8017630 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x300>
 8017482:	eef4 7ac7 	vcmpe.f32	s15, s14
 8017486:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801748a:	dd07      	ble.n	801749c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x16c>
 801748c:	687b      	ldr	r3, [r7, #4]
 801748e:	edd3 7a03 	vldr	s15, [r3, #12]
 8017492:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8017630 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x300>
 8017496:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801749a:	e006      	b.n	80174aa <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x17a>
 801749c:	687b      	ldr	r3, [r7, #4]
 801749e:	edd3 7a03 	vldr	s15, [r3, #12]
 80174a2:	ed9f 7a63 	vldr	s14, [pc, #396]	; 8017630 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x300>
 80174a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80174aa:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 80174ae:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80174b2:	ed9f 7a60 	vldr	s14, [pc, #384]	; 8017634 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x304>
 80174b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80174ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80174be:	dd64      	ble.n	801758a <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x25a>
 80174c0:	68fb      	ldr	r3, [r7, #12]
 80174c2:	695c      	ldr	r4, [r3, #20]
 80174c4:	687b      	ldr	r3, [r7, #4]
 80174c6:	68db      	ldr	r3, [r3, #12]
 80174c8:	4618      	mov	r0, r3
 80174ca:	f7e9 f847 	bl	800055c <__aeabi_f2d>
 80174ce:	4602      	mov	r2, r0
 80174d0:	460b      	mov	r3, r1
 80174d2:	f04f 0000 	mov.w	r0, #0
 80174d6:	4958      	ldr	r1, [pc, #352]	; (8017638 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x308>)
 80174d8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80174dc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80174e0:	4b56      	ldr	r3, [pc, #344]	; (801763c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x30c>)
 80174e2:	9301      	str	r3, [sp, #4]
 80174e4:	4b4b      	ldr	r3, [pc, #300]	; (8017614 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e4>)
 80174e6:	9300      	str	r3, [sp, #0]
 80174e8:	232c      	movs	r3, #44	; 0x2c
 80174ea:	4a45      	ldr	r2, [pc, #276]	; (8017600 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 80174ec:	494a      	ldr	r1, [pc, #296]	; (8017618 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e8>)
 80174ee:	68f8      	ldr	r0, [r7, #12]
 80174f0:	47a0      	blx	r4
 80174f2:	2301      	movs	r3, #1
 80174f4:	e128      	b.n	8017748 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
                            (0.001f * 1.f / 65536));
      } else {  // output->type == kTfLiteint8
        TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteInt8);
 80174f6:	687b      	ldr	r3, [r7, #4]
 80174f8:	781b      	ldrb	r3, [r3, #0]
 80174fa:	2b09      	cmp	r3, #9
 80174fc:	d018      	beq.n	8017530 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x200>
 80174fe:	68fb      	ldr	r3, [r7, #12]
 8017500:	695c      	ldr	r4, [r3, #20]
 8017502:	687b      	ldr	r3, [r7, #4]
 8017504:	781b      	ldrb	r3, [r3, #0]
 8017506:	4618      	mov	r0, r3
 8017508:	f7fb fd98 	bl	801303c <TfLiteTypeGetName>
 801750c:	4605      	mov	r5, r0
 801750e:	2009      	movs	r0, #9
 8017510:	f7fb fd94 	bl	801303c <TfLiteTypeGetName>
 8017514:	4603      	mov	r3, r0
 8017516:	9303      	str	r3, [sp, #12]
 8017518:	9502      	str	r5, [sp, #8]
 801751a:	4b40      	ldr	r3, [pc, #256]	; (801761c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2ec>)
 801751c:	9301      	str	r3, [sp, #4]
 801751e:	4b48      	ldr	r3, [pc, #288]	; (8017640 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x310>)
 8017520:	9300      	str	r3, [sp, #0]
 8017522:	232f      	movs	r3, #47	; 0x2f
 8017524:	4a36      	ldr	r2, [pc, #216]	; (8017600 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 8017526:	493f      	ldr	r1, [pc, #252]	; (8017624 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f4>)
 8017528:	68f8      	ldr	r0, [r7, #12]
 801752a:	47a0      	blx	r4
 801752c:	2301      	movs	r3, #1
 801752e:	e10b      	b.n	8017748 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -128);
 8017530:	687b      	ldr	r3, [r7, #4]
 8017532:	691b      	ldr	r3, [r3, #16]
 8017534:	f113 0f80 	cmn.w	r3, #128	; 0x80
 8017538:	d012      	beq.n	8017560 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x230>
 801753a:	68fb      	ldr	r3, [r7, #12]
 801753c:	695c      	ldr	r4, [r3, #20]
 801753e:	687b      	ldr	r3, [r7, #4]
 8017540:	691b      	ldr	r3, [r3, #16]
 8017542:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 8017546:	9203      	str	r2, [sp, #12]
 8017548:	9302      	str	r3, [sp, #8]
 801754a:	4b3e      	ldr	r3, [pc, #248]	; (8017644 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x314>)
 801754c:	9301      	str	r3, [sp, #4]
 801754e:	4b2b      	ldr	r3, [pc, #172]	; (80175fc <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2cc>)
 8017550:	9300      	str	r3, [sp, #0]
 8017552:	2330      	movs	r3, #48	; 0x30
 8017554:	4a2a      	ldr	r2, [pc, #168]	; (8017600 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 8017556:	492b      	ldr	r1, [pc, #172]	; (8017604 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d4>)
 8017558:	68f8      	ldr	r0, [r7, #12]
 801755a:	47a0      	blx	r4
 801755c:	2301      	movs	r3, #1
 801755e:	e0f3      	b.n	8017748 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
        TF_LITE_ENSURE(context, output->params.scale == 1.f / 256);
 8017560:	687b      	ldr	r3, [r7, #4]
 8017562:	edd3 7a03 	vldr	s15, [r3, #12]
 8017566:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8017648 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x318>
 801756a:	eef4 7a47 	vcmp.f32	s15, s14
 801756e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017572:	d00a      	beq.n	801758a <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x25a>
 8017574:	68fb      	ldr	r3, [r7, #12]
 8017576:	695c      	ldr	r4, [r3, #20]
 8017578:	4b34      	ldr	r3, [pc, #208]	; (801764c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x31c>)
 801757a:	9300      	str	r3, [sp, #0]
 801757c:	2331      	movs	r3, #49	; 0x31
 801757e:	4a20      	ldr	r2, [pc, #128]	; (8017600 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 8017580:	4933      	ldr	r1, [pc, #204]	; (8017650 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x320>)
 8017582:	68f8      	ldr	r0, [r7, #12]
 8017584:	47a0      	blx	r4
 8017586:	2301      	movs	r3, #1
 8017588:	e0de      	b.n	8017748 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
    }

    static const int kScaledDiffIntegerBits = 5;

    // Calculate input_multiplier and input_left_shift
    if (input->type == kTfLiteInt16) {
 801758a:	68bb      	ldr	r3, [r7, #8]
 801758c:	781b      	ldrb	r3, [r3, #0]
 801758e:	2b07      	cmp	r3, #7
 8017590:	d160      	bne.n	8017654 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x324>
      int input_left_shift;
      double input_scale_beta_rescale =
          static_cast<double>(input->params.scale) *
 8017592:	68bb      	ldr	r3, [r7, #8]
 8017594:	68db      	ldr	r3, [r3, #12]
 8017596:	4618      	mov	r0, r3
 8017598:	f7e8 ffe0 	bl	800055c <__aeabi_f2d>
 801759c:	4604      	mov	r4, r0
 801759e:	460d      	mov	r5, r1
          static_cast<double>(params->beta) /
 80175a0:	683b      	ldr	r3, [r7, #0]
 80175a2:	681b      	ldr	r3, [r3, #0]
 80175a4:	4618      	mov	r0, r3
 80175a6:	f7e8 ffd9 	bl	800055c <__aeabi_f2d>
 80175aa:	4602      	mov	r2, r0
 80175ac:	460b      	mov	r3, r1
          static_cast<double>(input->params.scale) *
 80175ae:	4620      	mov	r0, r4
 80175b0:	4629      	mov	r1, r5
 80175b2:	f7e9 f82b 	bl	800060c <__aeabi_dmul>
 80175b6:	4602      	mov	r2, r0
 80175b8:	460b      	mov	r3, r1
 80175ba:	4610      	mov	r0, r2
 80175bc:	4619      	mov	r1, r3
      double input_scale_beta_rescale =
 80175be:	a30c      	add	r3, pc, #48	; (adr r3, 80175f0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2c0>)
 80175c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80175c4:	f7e9 f94c 	bl	8000860 <__aeabi_ddiv>
 80175c8:	4602      	mov	r2, r0
 80175ca:	460b      	mov	r3, r1
 80175cc:	e9c7 2306 	strd	r2, r3, [r7, #24]
          (10.0 / 65535.0);  // scale the input_diff such that [-65535, 0]
                             // correspond to [-10.0, 0.0]
      QuantizeMultiplier(input_scale_beta_rescale, &op_data->input_multiplier,
 80175d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80175d2:	3308      	adds	r3, #8
 80175d4:	f107 0214 	add.w	r2, r7, #20
 80175d8:	4611      	mov	r1, r2
 80175da:	4618      	mov	r0, r3
 80175dc:	ed97 0b06 	vldr	d0, [r7, #24]
 80175e0:	f7fb fdb2 	bl	8013148 <_ZN6tflite18QuantizeMultiplierEdPlPi>
                         &input_left_shift);
      op_data->input_left_shift = input_left_shift;
 80175e4:	697a      	ldr	r2, [r7, #20]
 80175e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80175e8:	60da      	str	r2, [r3, #12]
          &op_data->input_multiplier, &input_left_shift);
      op_data->input_left_shift = input_left_shift;
      op_data->diff_min =
          -1.0 * tflite::CalculateInputRadius(kScaledDiffIntegerBits,
                                              op_data->input_left_shift);
    }
 80175ea:	e0ac      	b.n	8017746 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x416>
 80175ec:	f3af 8000 	nop.w
 80175f0:	00140014 	.word	0x00140014
 80175f4:	3f240014 	.word	0x3f240014
 80175f8:	0801cf78 	.word	0x0801cf78
 80175fc:	0801cf7c 	.word	0x0801cf7c
 8017600:	0801cecc 	.word	0x0801cecc
 8017604:	0801cf5c 	.word	0x0801cf5c
 8017608:	38000000 	.word	0x38000000
 801760c:	3303126f 	.word	0x3303126f
 8017610:	0801cfb8 	.word	0x0801cfb8
 8017614:	0801cfc4 	.word	0x0801cfc4
 8017618:	0801cf98 	.word	0x0801cf98
 801761c:	0801cff8 	.word	0x0801cff8
 8017620:	0801d004 	.word	0x0801d004
 8017624:	0801cfdc 	.word	0x0801cfdc
 8017628:	ffff8000 	.word	0xffff8000
 801762c:	0801d010 	.word	0x0801d010
 8017630:	37800000 	.word	0x37800000
 8017634:	3283126f 	.word	0x3283126f
 8017638:	3ef00000 	.word	0x3ef00000
 801763c:	0801d018 	.word	0x0801d018
 8017640:	0801d024 	.word	0x0801d024
 8017644:	0801d034 	.word	0x0801d034
 8017648:	3b800000 	.word	0x3b800000
 801764c:	0801d054 	.word	0x0801d054
 8017650:	0801d03c 	.word	0x0801d03c
          static_cast<double>(params->beta),
 8017654:	683b      	ldr	r3, [r7, #0]
 8017656:	681b      	ldr	r3, [r3, #0]
      tflite::PreprocessSoftmaxScaling(
 8017658:	4618      	mov	r0, r3
 801765a:	f7e8 ff7f 	bl	800055c <__aeabi_f2d>
 801765e:	4680      	mov	r8, r0
 8017660:	4689      	mov	r9, r1
          static_cast<double>(input->params.scale), kScaledDiffIntegerBits,
 8017662:	68bb      	ldr	r3, [r7, #8]
 8017664:	68db      	ldr	r3, [r3, #12]
      tflite::PreprocessSoftmaxScaling(
 8017666:	4618      	mov	r0, r3
 8017668:	f7e8 ff78 	bl	800055c <__aeabi_f2d>
 801766c:	4682      	mov	sl, r0
 801766e:	468b      	mov	fp, r1
 8017670:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017672:	3308      	adds	r3, #8
 8017674:	f107 0210 	add.w	r2, r7, #16
 8017678:	4619      	mov	r1, r3
 801767a:	2005      	movs	r0, #5
 801767c:	ec4b ab11 	vmov	d1, sl, fp
 8017680:	ec49 8b10 	vmov	d0, r8, r9
 8017684:	f7fb fe2c 	bl	80132e0 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi>
      op_data->input_left_shift = input_left_shift;
 8017688:	693a      	ldr	r2, [r7, #16]
 801768a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801768c:	60da      	str	r2, [r3, #12]
                                              op_data->input_left_shift);
 801768e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017690:	68db      	ldr	r3, [r3, #12]
          -1.0 * tflite::CalculateInputRadius(kScaledDiffIntegerBits,
 8017692:	221f      	movs	r2, #31
 8017694:	4619      	mov	r1, r3
 8017696:	2005      	movs	r0, #5
 8017698:	f7fb fe6a 	bl	8013370 <_ZN6tflite20CalculateInputRadiusEiii>
 801769c:	4603      	mov	r3, r0
 801769e:	4618      	mov	r0, r3
 80176a0:	f7e8 ff4a 	bl	8000538 <__aeabi_i2d>
 80176a4:	4602      	mov	r2, r0
 80176a6:	460b      	mov	r3, r1
 80176a8:	4614      	mov	r4, r2
 80176aa:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
      op_data->diff_min =
 80176ae:	4620      	mov	r0, r4
 80176b0:	4629      	mov	r1, r5
 80176b2:	f7e9 fa5b 	bl	8000b6c <__aeabi_d2iz>
 80176b6:	4602      	mov	r2, r0
 80176b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80176ba:	619a      	str	r2, [r3, #24]
    }
 80176bc:	e043      	b.n	8017746 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x416>
  } else {
    TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteFloat32);
 80176be:	68bb      	ldr	r3, [r7, #8]
 80176c0:	781b      	ldrb	r3, [r3, #0]
 80176c2:	2b01      	cmp	r3, #1
 80176c4:	d018      	beq.n	80176f8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x3c8>
 80176c6:	68fb      	ldr	r3, [r7, #12]
 80176c8:	695c      	ldr	r4, [r3, #20]
 80176ca:	68bb      	ldr	r3, [r7, #8]
 80176cc:	781b      	ldrb	r3, [r3, #0]
 80176ce:	4618      	mov	r0, r3
 80176d0:	f7fb fcb4 	bl	801303c <TfLiteTypeGetName>
 80176d4:	4605      	mov	r5, r0
 80176d6:	2001      	movs	r0, #1
 80176d8:	f7fb fcb0 	bl	801303c <TfLiteTypeGetName>
 80176dc:	4603      	mov	r3, r0
 80176de:	9303      	str	r3, [sp, #12]
 80176e0:	9502      	str	r5, [sp, #8]
 80176e2:	4b1c      	ldr	r3, [pc, #112]	; (8017754 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x424>)
 80176e4:	9301      	str	r3, [sp, #4]
 80176e6:	4b1c      	ldr	r3, [pc, #112]	; (8017758 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x428>)
 80176e8:	9300      	str	r3, [sp, #0]
 80176ea:	234e      	movs	r3, #78	; 0x4e
 80176ec:	4a1b      	ldr	r2, [pc, #108]	; (801775c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x42c>)
 80176ee:	491c      	ldr	r1, [pc, #112]	; (8017760 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x430>)
 80176f0:	68f8      	ldr	r0, [r7, #12]
 80176f2:	47a0      	blx	r4
 80176f4:	2301      	movs	r3, #1
 80176f6:	e027      	b.n	8017748 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
    TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteFloat32);
 80176f8:	687b      	ldr	r3, [r7, #4]
 80176fa:	781b      	ldrb	r3, [r3, #0]
 80176fc:	2b01      	cmp	r3, #1
 80176fe:	d018      	beq.n	8017732 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x402>
 8017700:	68fb      	ldr	r3, [r7, #12]
 8017702:	695c      	ldr	r4, [r3, #20]
 8017704:	687b      	ldr	r3, [r7, #4]
 8017706:	781b      	ldrb	r3, [r3, #0]
 8017708:	4618      	mov	r0, r3
 801770a:	f7fb fc97 	bl	801303c <TfLiteTypeGetName>
 801770e:	4605      	mov	r5, r0
 8017710:	2001      	movs	r0, #1
 8017712:	f7fb fc93 	bl	801303c <TfLiteTypeGetName>
 8017716:	4603      	mov	r3, r0
 8017718:	9303      	str	r3, [sp, #12]
 801771a:	9502      	str	r5, [sp, #8]
 801771c:	4b0d      	ldr	r3, [pc, #52]	; (8017754 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x424>)
 801771e:	9301      	str	r3, [sp, #4]
 8017720:	4b10      	ldr	r3, [pc, #64]	; (8017764 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x434>)
 8017722:	9300      	str	r3, [sp, #0]
 8017724:	234f      	movs	r3, #79	; 0x4f
 8017726:	4a0d      	ldr	r2, [pc, #52]	; (801775c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x42c>)
 8017728:	490d      	ldr	r1, [pc, #52]	; (8017760 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x430>)
 801772a:	68f8      	ldr	r0, [r7, #12]
 801772c:	47a0      	blx	r4
 801772e:	2301      	movs	r3, #1
 8017730:	e00a      	b.n	8017748 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
    op_data->beta = static_cast<double>(params->beta);
 8017732:	683b      	ldr	r3, [r7, #0]
 8017734:	681b      	ldr	r3, [r3, #0]
 8017736:	4618      	mov	r0, r3
 8017738:	f7e8 ff10 	bl	800055c <__aeabi_f2d>
 801773c:	4602      	mov	r2, r0
 801773e:	460b      	mov	r3, r1
 8017740:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8017742:	e9c1 2300 	strd	r2, r3, [r1]
  }
  return kTfLiteOk;
 8017746:	2300      	movs	r3, #0
}
 8017748:	4618      	mov	r0, r3
 801774a:	3728      	adds	r7, #40	; 0x28
 801774c:	46bd      	mov	sp, r7
 801774e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8017752:	bf00      	nop
 8017754:	0801d078 	.word	0x0801d078
 8017758:	0801d004 	.word	0x0801d004
 801775c:	0801cecc 	.word	0x0801cecc
 8017760:	0801cfdc 	.word	0x0801cfdc
 8017764:	0801d024 	.word	0x0801d024

08017768 <_ZN6tflite11SoftmaxInitEP13TfLiteContextPKcj>:

}  // namespace

void* SoftmaxInit(TfLiteContext* context, const char* buffer, size_t length) {
 8017768:	b580      	push	{r7, lr}
 801776a:	b084      	sub	sp, #16
 801776c:	af00      	add	r7, sp, #0
 801776e:	60f8      	str	r0, [r7, #12]
 8017770:	60b9      	str	r1, [r7, #8]
 8017772:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 8017774:	68fb      	ldr	r3, [r7, #12]
 8017776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017778:	2b00      	cmp	r3, #0
 801777a:	d101      	bne.n	8017780 <_ZN6tflite11SoftmaxInitEP13TfLiteContextPKcj+0x18>
 801777c:	f002 fe0a 	bl	801a394 <abort>
  return context->AllocatePersistentBuffer(context, sizeof(SoftmaxParams));
 8017780:	68fb      	ldr	r3, [r7, #12]
 8017782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017784:	2138      	movs	r1, #56	; 0x38
 8017786:	68f8      	ldr	r0, [r7, #12]
 8017788:	4798      	blx	r3
 801778a:	4603      	mov	r3, r0
}
 801778c:	4618      	mov	r0, r3
 801778e:	3710      	adds	r7, #16
 8017790:	46bd      	mov	sp, r7
 8017792:	bd80      	pop	{r7, pc}

08017794 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE_clEf>:
  // Populate LUT if required
  if (input->type == kTfLiteInt16) {
    TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
    // exp LUT only used on negative values
    // we consider exp(-10.0) is insignificant to accumulation
    gen_lut([](float value) { return std::exp(value); }, -10.0f, 0.0f,
 8017794:	b580      	push	{r7, lr}
 8017796:	b082      	sub	sp, #8
 8017798:	af00      	add	r7, sp, #0
 801779a:	6078      	str	r0, [r7, #4]
 801779c:	ed87 0a00 	vstr	s0, [r7]
 80177a0:	ed97 0a00 	vldr	s0, [r7]
 80177a4:	f7ea f83e 	bl	8001824 <_ZSt3expf>
 80177a8:	eef0 7a40 	vmov.f32	s15, s0
 80177ac:	eeb0 0a67 	vmov.f32	s0, s15
 80177b0:	3708      	adds	r7, #8
 80177b2:	46bd      	mov	sp, r7
 80177b4:	bd80      	pop	{r7, pc}

080177b6 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENUlfE_4_FUNEf>:
 80177b6:	b580      	push	{r7, lr}
 80177b8:	b082      	sub	sp, #8
 80177ba:	af00      	add	r7, sp, #0
 80177bc:	ed87 0a01 	vstr	s0, [r7, #4]
 80177c0:	ed97 0a01 	vldr	s0, [r7, #4]
 80177c4:	2000      	movs	r0, #0
 80177c6:	f7ff ffe5 	bl	8017794 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE_clEf>
 80177ca:	eef0 7a40 	vmov.f32	s15, s0
 80177ce:	eeb0 0a67 	vmov.f32	s0, s15
 80177d2:	3708      	adds	r7, #8
 80177d4:	46bd      	mov	sp, r7
 80177d6:	bd80      	pop	{r7, pc}

080177d8 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE_cvPFffEEv>:
 80177d8:	b480      	push	{r7}
 80177da:	b083      	sub	sp, #12
 80177dc:	af00      	add	r7, sp, #0
 80177de:	6078      	str	r0, [r7, #4]
 80177e0:	4b03      	ldr	r3, [pc, #12]	; (80177f0 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE_cvPFffEEv+0x18>)
 80177e2:	4618      	mov	r0, r3
 80177e4:	370c      	adds	r7, #12
 80177e6:	46bd      	mov	sp, r7
 80177e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177ec:	4770      	bx	lr
 80177ee:	bf00      	nop
 80177f0:	080177b7 	.word	0x080177b7

080177f4 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE0_clEf>:
            op_data->exp_lut, kInt16LUTArraySize);
    gen_lut([](float value) { return 1.0f / (1.0f + value); }, 0.0f, 1.0f,
 80177f4:	b480      	push	{r7}
 80177f6:	b083      	sub	sp, #12
 80177f8:	af00      	add	r7, sp, #0
 80177fa:	6078      	str	r0, [r7, #4]
 80177fc:	ed87 0a00 	vstr	s0, [r7]
 8017800:	edd7 7a00 	vldr	s15, [r7]
 8017804:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8017808:	ee77 7a87 	vadd.f32	s15, s15, s14
 801780c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8017810:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8017814:	eef0 7a66 	vmov.f32	s15, s13
 8017818:	eeb0 0a67 	vmov.f32	s0, s15
 801781c:	370c      	adds	r7, #12
 801781e:	46bd      	mov	sp, r7
 8017820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017824:	4770      	bx	lr

08017826 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENUlfE0_4_FUNEf>:
 8017826:	b580      	push	{r7, lr}
 8017828:	b082      	sub	sp, #8
 801782a:	af00      	add	r7, sp, #0
 801782c:	ed87 0a01 	vstr	s0, [r7, #4]
 8017830:	ed97 0a01 	vldr	s0, [r7, #4]
 8017834:	2000      	movs	r0, #0
 8017836:	f7ff ffdd 	bl	80177f4 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE0_clEf>
 801783a:	eef0 7a40 	vmov.f32	s15, s0
 801783e:	eeb0 0a67 	vmov.f32	s0, s15
 8017842:	3708      	adds	r7, #8
 8017844:	46bd      	mov	sp, r7
 8017846:	bd80      	pop	{r7, pc}

08017848 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE0_cvPFffEEv>:
 8017848:	b480      	push	{r7}
 801784a:	b083      	sub	sp, #12
 801784c:	af00      	add	r7, sp, #0
 801784e:	6078      	str	r0, [r7, #4]
 8017850:	4b03      	ldr	r3, [pc, #12]	; (8017860 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE0_cvPFffEEv+0x18>)
 8017852:	4618      	mov	r0, r3
 8017854:	370c      	adds	r7, #12
 8017856:	46bd      	mov	sp, r7
 8017858:	f85d 7b04 	ldr.w	r7, [sp], #4
 801785c:	4770      	bx	lr
 801785e:	bf00      	nop
 8017860:	08017827 	.word	0x08017827

08017864 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus SoftmaxPrepare(TfLiteContext* context, TfLiteNode* node) {
 8017864:	b590      	push	{r4, r7, lr}
 8017866:	b08f      	sub	sp, #60	; 0x3c
 8017868:	af04      	add	r7, sp, #16
 801786a:	6078      	str	r0, [r7, #4]
 801786c:	6039      	str	r1, [r7, #0]
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
 801786e:	6838      	ldr	r0, [r7, #0]
 8017870:	f7fd fa9b 	bl	8014daa <_ZN6tflite9NumInputsEPK10TfLiteNode>
 8017874:	4603      	mov	r3, r0
 8017876:	2b01      	cmp	r3, #1
 8017878:	bf14      	ite	ne
 801787a:	2301      	movne	r3, #1
 801787c:	2300      	moveq	r3, #0
 801787e:	b2db      	uxtb	r3, r3
 8017880:	2b00      	cmp	r3, #0
 8017882:	d013      	beq.n	80178ac <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x48>
 8017884:	687b      	ldr	r3, [r7, #4]
 8017886:	695c      	ldr	r4, [r3, #20]
 8017888:	6838      	ldr	r0, [r7, #0]
 801788a:	f7fd fa8e 	bl	8014daa <_ZN6tflite9NumInputsEPK10TfLiteNode>
 801788e:	4603      	mov	r3, r0
 8017890:	2201      	movs	r2, #1
 8017892:	9203      	str	r2, [sp, #12]
 8017894:	9302      	str	r3, [sp, #8]
 8017896:	4b7c      	ldr	r3, [pc, #496]	; (8017a88 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x224>)
 8017898:	9301      	str	r3, [sp, #4]
 801789a:	4b7c      	ldr	r3, [pc, #496]	; (8017a8c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x228>)
 801789c:	9300      	str	r3, [sp, #0]
 801789e:	235d      	movs	r3, #93	; 0x5d
 80178a0:	4a7b      	ldr	r2, [pc, #492]	; (8017a90 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 80178a2:	497c      	ldr	r1, [pc, #496]	; (8017a94 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x230>)
 80178a4:	6878      	ldr	r0, [r7, #4]
 80178a6:	47a0      	blx	r4
 80178a8:	2301      	movs	r3, #1
 80178aa:	e146      	b.n	8017b3a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
 80178ac:	6838      	ldr	r0, [r7, #0]
 80178ae:	f7fd fa89 	bl	8014dc4 <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 80178b2:	4603      	mov	r3, r0
 80178b4:	2b01      	cmp	r3, #1
 80178b6:	bf14      	ite	ne
 80178b8:	2301      	movne	r3, #1
 80178ba:	2300      	moveq	r3, #0
 80178bc:	b2db      	uxtb	r3, r3
 80178be:	2b00      	cmp	r3, #0
 80178c0:	d013      	beq.n	80178ea <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x86>
 80178c2:	687b      	ldr	r3, [r7, #4]
 80178c4:	695c      	ldr	r4, [r3, #20]
 80178c6:	6838      	ldr	r0, [r7, #0]
 80178c8:	f7fd fa7c 	bl	8014dc4 <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 80178cc:	4603      	mov	r3, r0
 80178ce:	2201      	movs	r2, #1
 80178d0:	9203      	str	r2, [sp, #12]
 80178d2:	9302      	str	r3, [sp, #8]
 80178d4:	4b6c      	ldr	r3, [pc, #432]	; (8017a88 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x224>)
 80178d6:	9301      	str	r3, [sp, #4]
 80178d8:	4b6f      	ldr	r3, [pc, #444]	; (8017a98 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x234>)
 80178da:	9300      	str	r3, [sp, #0]
 80178dc:	235e      	movs	r3, #94	; 0x5e
 80178de:	4a6c      	ldr	r2, [pc, #432]	; (8017a90 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 80178e0:	496c      	ldr	r1, [pc, #432]	; (8017a94 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x230>)
 80178e2:	6878      	ldr	r0, [r7, #4]
 80178e4:	47a0      	blx	r4
 80178e6:	2301      	movs	r3, #1
 80178e8:	e127      	b.n	8017b3a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  const TfLiteTensor* input = GetInput(context, node, 0);
 80178ea:	2200      	movs	r2, #0
 80178ec:	6839      	ldr	r1, [r7, #0]
 80178ee:	6878      	ldr	r0, [r7, #4]
 80178f0:	f7fb fe94 	bl	801361c <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 80178f4:	6278      	str	r0, [r7, #36]	; 0x24
  TF_LITE_ENSURE(context, input != nullptr);
 80178f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80178f8:	2b00      	cmp	r3, #0
 80178fa:	d10a      	bne.n	8017912 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xae>
 80178fc:	687b      	ldr	r3, [r7, #4]
 80178fe:	695c      	ldr	r4, [r3, #20]
 8017900:	4b66      	ldr	r3, [pc, #408]	; (8017a9c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x238>)
 8017902:	9300      	str	r3, [sp, #0]
 8017904:	2360      	movs	r3, #96	; 0x60
 8017906:	4a62      	ldr	r2, [pc, #392]	; (8017a90 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 8017908:	4965      	ldr	r1, [pc, #404]	; (8017aa0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 801790a:	6878      	ldr	r0, [r7, #4]
 801790c:	47a0      	blx	r4
 801790e:	2301      	movs	r3, #1
 8017910:	e113      	b.n	8017b3a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  TF_LITE_ENSURE(context, NumDimensions(input) >= 1);
 8017912:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017914:	f7fb fe05 	bl	8013522 <_ZN6tflite13NumDimensionsEPK12TfLiteTensor>
 8017918:	4603      	mov	r3, r0
 801791a:	2b00      	cmp	r3, #0
 801791c:	bfd4      	ite	le
 801791e:	2301      	movle	r3, #1
 8017920:	2300      	movgt	r3, #0
 8017922:	b2db      	uxtb	r3, r3
 8017924:	2b00      	cmp	r3, #0
 8017926:	d00a      	beq.n	801793e <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xda>
 8017928:	687b      	ldr	r3, [r7, #4]
 801792a:	695c      	ldr	r4, [r3, #20]
 801792c:	4b5d      	ldr	r3, [pc, #372]	; (8017aa4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x240>)
 801792e:	9300      	str	r3, [sp, #0]
 8017930:	2361      	movs	r3, #97	; 0x61
 8017932:	4a57      	ldr	r2, [pc, #348]	; (8017a90 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 8017934:	495a      	ldr	r1, [pc, #360]	; (8017aa0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 8017936:	6878      	ldr	r0, [r7, #4]
 8017938:	47a0      	blx	r4
 801793a:	2301      	movs	r3, #1
 801793c:	e0fd      	b.n	8017b3a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  TfLiteTensor* output = GetOutput(context, node, 0);
 801793e:	2200      	movs	r2, #0
 8017940:	6839      	ldr	r1, [r7, #0]
 8017942:	6878      	ldr	r0, [r7, #4]
 8017944:	f7fb fe7a 	bl	801363c <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 8017948:	6238      	str	r0, [r7, #32]
  TF_LITE_ENSURE(context, output != nullptr);
 801794a:	6a3b      	ldr	r3, [r7, #32]
 801794c:	2b00      	cmp	r3, #0
 801794e:	d10a      	bne.n	8017966 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x102>
 8017950:	687b      	ldr	r3, [r7, #4]
 8017952:	695c      	ldr	r4, [r3, #20]
 8017954:	4b54      	ldr	r3, [pc, #336]	; (8017aa8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x244>)
 8017956:	9300      	str	r3, [sp, #0]
 8017958:	2363      	movs	r3, #99	; 0x63
 801795a:	4a4d      	ldr	r2, [pc, #308]	; (8017a90 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 801795c:	4950      	ldr	r1, [pc, #320]	; (8017aa0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 801795e:	6878      	ldr	r0, [r7, #4]
 8017960:	47a0      	blx	r4
 8017962:	2301      	movs	r3, #1
 8017964:	e0e9      	b.n	8017b3a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  TF_LITE_ENSURE(context, node->user_data != nullptr);
 8017966:	683b      	ldr	r3, [r7, #0]
 8017968:	691b      	ldr	r3, [r3, #16]
 801796a:	2b00      	cmp	r3, #0
 801796c:	d10a      	bne.n	8017984 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x120>
 801796e:	687b      	ldr	r3, [r7, #4]
 8017970:	695c      	ldr	r4, [r3, #20]
 8017972:	4b4e      	ldr	r3, [pc, #312]	; (8017aac <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x248>)
 8017974:	9300      	str	r3, [sp, #0]
 8017976:	2365      	movs	r3, #101	; 0x65
 8017978:	4a45      	ldr	r2, [pc, #276]	; (8017a90 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 801797a:	4949      	ldr	r1, [pc, #292]	; (8017aa0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 801797c:	6878      	ldr	r0, [r7, #4]
 801797e:	47a0      	blx	r4
 8017980:	2301      	movs	r3, #1
 8017982:	e0da      	b.n	8017b3a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  SoftmaxParams* op_data = static_cast<SoftmaxParams*>(node->user_data);
 8017984:	683b      	ldr	r3, [r7, #0]
 8017986:	691b      	ldr	r3, [r3, #16]
 8017988:	61fb      	str	r3, [r7, #28]
  if (input->type == kTfLiteInt16) {
 801798a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801798c:	781b      	ldrb	r3, [r3, #0]
 801798e:	2b07      	cmp	r3, #7
 8017990:	d12f      	bne.n	80179f2 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x18e>
    void* raw_exp_lut = context->AllocatePersistentBuffer(
 8017992:	687b      	ldr	r3, [r7, #4]
 8017994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017996:	f240 4102 	movw	r1, #1026	; 0x402
 801799a:	6878      	ldr	r0, [r7, #4]
 801799c:	4798      	blx	r3
 801799e:	61b8      	str	r0, [r7, #24]
    TF_LITE_ENSURE(context, raw_exp_lut != nullptr);
 80179a0:	69bb      	ldr	r3, [r7, #24]
 80179a2:	2b00      	cmp	r3, #0
 80179a4:	d10a      	bne.n	80179bc <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x158>
 80179a6:	687b      	ldr	r3, [r7, #4]
 80179a8:	695c      	ldr	r4, [r3, #20]
 80179aa:	4b41      	ldr	r3, [pc, #260]	; (8017ab0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x24c>)
 80179ac:	9300      	str	r3, [sp, #0]
 80179ae:	236b      	movs	r3, #107	; 0x6b
 80179b0:	4a37      	ldr	r2, [pc, #220]	; (8017a90 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 80179b2:	493b      	ldr	r1, [pc, #236]	; (8017aa0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 80179b4:	6878      	ldr	r0, [r7, #4]
 80179b6:	47a0      	blx	r4
 80179b8:	2301      	movs	r3, #1
 80179ba:	e0be      	b.n	8017b3a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
    op_data->exp_lut = reinterpret_cast<int16_t*>(raw_exp_lut);
 80179bc:	69fb      	ldr	r3, [r7, #28]
 80179be:	69ba      	ldr	r2, [r7, #24]
 80179c0:	629a      	str	r2, [r3, #40]	; 0x28
    void* one_over_one_plus_x_lut = context->AllocatePersistentBuffer(
 80179c2:	687b      	ldr	r3, [r7, #4]
 80179c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80179c6:	f240 4102 	movw	r1, #1026	; 0x402
 80179ca:	6878      	ldr	r0, [r7, #4]
 80179cc:	4798      	blx	r3
 80179ce:	6178      	str	r0, [r7, #20]
    TF_LITE_ENSURE(context, one_over_one_plus_x_lut != nullptr);
 80179d0:	697b      	ldr	r3, [r7, #20]
 80179d2:	2b00      	cmp	r3, #0
 80179d4:	d10a      	bne.n	80179ec <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x188>
 80179d6:	687b      	ldr	r3, [r7, #4]
 80179d8:	695c      	ldr	r4, [r3, #20]
 80179da:	4b36      	ldr	r3, [pc, #216]	; (8017ab4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x250>)
 80179dc:	9300      	str	r3, [sp, #0]
 80179de:	236f      	movs	r3, #111	; 0x6f
 80179e0:	4a2b      	ldr	r2, [pc, #172]	; (8017a90 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 80179e2:	492f      	ldr	r1, [pc, #188]	; (8017aa0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 80179e4:	6878      	ldr	r0, [r7, #4]
 80179e6:	47a0      	blx	r4
 80179e8:	2301      	movs	r3, #1
 80179ea:	e0a6      	b.n	8017b3a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
    op_data->one_over_one_plus_x_lut =
 80179ec:	69fb      	ldr	r3, [r7, #28]
 80179ee:	697a      	ldr	r2, [r7, #20]
 80179f0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (output->type == kTfLiteInt16) {
 80179f2:	6a3b      	ldr	r3, [r7, #32]
 80179f4:	781b      	ldrb	r3, [r3, #0]
 80179f6:	2b07      	cmp	r3, #7
 80179f8:	d112      	bne.n	8017a20 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1bc>
    TF_LITE_ENSURE(context,
 80179fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80179fc:	781b      	ldrb	r3, [r3, #0]
 80179fe:	2b09      	cmp	r3, #9
 8017a00:	d028      	beq.n	8017a54 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1f0>
 8017a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a04:	781b      	ldrb	r3, [r3, #0]
 8017a06:	2b07      	cmp	r3, #7
 8017a08:	d024      	beq.n	8017a54 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1f0>
 8017a0a:	687b      	ldr	r3, [r7, #4]
 8017a0c:	695c      	ldr	r4, [r3, #20]
 8017a0e:	4b2a      	ldr	r3, [pc, #168]	; (8017ab8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x254>)
 8017a10:	9300      	str	r3, [sp, #0]
 8017a12:	2375      	movs	r3, #117	; 0x75
 8017a14:	4a1e      	ldr	r2, [pc, #120]	; (8017a90 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 8017a16:	4922      	ldr	r1, [pc, #136]	; (8017aa0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 8017a18:	6878      	ldr	r0, [r7, #4]
 8017a1a:	47a0      	blx	r4
 8017a1c:	2301      	movs	r3, #1
 8017a1e:	e08c      	b.n	8017b3a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
    TF_LITE_ENSURE_EQ(context, input->type, output->type);
 8017a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a22:	781a      	ldrb	r2, [r3, #0]
 8017a24:	6a3b      	ldr	r3, [r7, #32]
 8017a26:	781b      	ldrb	r3, [r3, #0]
 8017a28:	429a      	cmp	r2, r3
 8017a2a:	d013      	beq.n	8017a54 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1f0>
 8017a2c:	687b      	ldr	r3, [r7, #4]
 8017a2e:	695c      	ldr	r4, [r3, #20]
 8017a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a32:	781b      	ldrb	r3, [r3, #0]
 8017a34:	461a      	mov	r2, r3
 8017a36:	6a3b      	ldr	r3, [r7, #32]
 8017a38:	781b      	ldrb	r3, [r3, #0]
 8017a3a:	9303      	str	r3, [sp, #12]
 8017a3c:	9202      	str	r2, [sp, #8]
 8017a3e:	4b1f      	ldr	r3, [pc, #124]	; (8017abc <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x258>)
 8017a40:	9301      	str	r3, [sp, #4]
 8017a42:	4b1f      	ldr	r3, [pc, #124]	; (8017ac0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x25c>)
 8017a44:	9300      	str	r3, [sp, #0]
 8017a46:	2378      	movs	r3, #120	; 0x78
 8017a48:	4a11      	ldr	r2, [pc, #68]	; (8017a90 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 8017a4a:	4912      	ldr	r1, [pc, #72]	; (8017a94 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x230>)
 8017a4c:	6878      	ldr	r0, [r7, #4]
 8017a4e:	47a0      	blx	r4
 8017a50:	2301      	movs	r3, #1
 8017a52:	e072      	b.n	8017b3a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  if (input->type == kTfLiteInt16) {
 8017a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a56:	781b      	ldrb	r3, [r3, #0]
 8017a58:	2b07      	cmp	r3, #7
 8017a5a:	d161      	bne.n	8017b20 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2bc>
    TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
 8017a5c:	6a3b      	ldr	r3, [r7, #32]
 8017a5e:	691b      	ldr	r3, [r3, #16]
 8017a60:	2b00      	cmp	r3, #0
 8017a62:	d035      	beq.n	8017ad0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x26c>
 8017a64:	687b      	ldr	r3, [r7, #4]
 8017a66:	695c      	ldr	r4, [r3, #20]
 8017a68:	6a3b      	ldr	r3, [r7, #32]
 8017a6a:	691b      	ldr	r3, [r3, #16]
 8017a6c:	2200      	movs	r2, #0
 8017a6e:	9203      	str	r2, [sp, #12]
 8017a70:	9302      	str	r3, [sp, #8]
 8017a72:	4b14      	ldr	r3, [pc, #80]	; (8017ac4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x260>)
 8017a74:	9301      	str	r3, [sp, #4]
 8017a76:	4b14      	ldr	r3, [pc, #80]	; (8017ac8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x264>)
 8017a78:	9300      	str	r3, [sp, #0]
 8017a7a:	237d      	movs	r3, #125	; 0x7d
 8017a7c:	4a04      	ldr	r2, [pc, #16]	; (8017a90 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 8017a7e:	4905      	ldr	r1, [pc, #20]	; (8017a94 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x230>)
 8017a80:	6878      	ldr	r0, [r7, #4]
 8017a82:	47a0      	blx	r4
 8017a84:	2301      	movs	r3, #1
 8017a86:	e058      	b.n	8017b3a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
 8017a88:	0801d088 	.word	0x0801d088
 8017a8c:	0801d08c 	.word	0x0801d08c
 8017a90:	0801cecc 	.word	0x0801cecc
 8017a94:	0801cf5c 	.word	0x0801cf5c
 8017a98:	0801d09c 	.word	0x0801d09c
 8017a9c:	0801d0b0 	.word	0x0801d0b0
 8017aa0:	0801d03c 	.word	0x0801d03c
 8017aa4:	0801d0c4 	.word	0x0801d0c4
 8017aa8:	0801d0e0 	.word	0x0801d0e0
 8017aac:	0801d0f4 	.word	0x0801d0f4
 8017ab0:	0801d110 	.word	0x0801d110
 8017ab4:	0801d128 	.word	0x0801d128
 8017ab8:	0801d14c 	.word	0x0801d14c
 8017abc:	0801d024 	.word	0x0801d024
 8017ac0:	0801d004 	.word	0x0801d004
 8017ac4:	0801cf78 	.word	0x0801cf78
 8017ac8:	0801cf7c 	.word	0x0801cf7c
 8017acc:	00000000 	.word	0x00000000
    gen_lut([](float value) { return std::exp(value); }, -10.0f, 0.0f,
 8017ad0:	f107 0308 	add.w	r3, r7, #8
 8017ad4:	4618      	mov	r0, r3
 8017ad6:	f7ff fe7f 	bl	80177d8 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE_cvPFffEEv>
 8017ada:	69fb      	ldr	r3, [r7, #28]
 8017adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017ade:	f240 2201 	movw	r2, #513	; 0x201
 8017ae2:	4619      	mov	r1, r3
 8017ae4:	ed5f 0a07 	vldr	s1, [pc, #-28]	; 8017acc <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x268>
 8017ae8:	eeba 0a04 	vmov.f32	s0, #164	; 0xc1200000 -10.0
 8017aec:	f7ff faf4 	bl	80170d8 <_ZN6tflite7gen_lutEPFffEffPsi>
    gen_lut([](float value) { return 1.0f / (1.0f + value); }, 0.0f, 1.0f,
 8017af0:	f107 030c 	add.w	r3, r7, #12
 8017af4:	4618      	mov	r0, r3
 8017af6:	f7ff fea7 	bl	8017848 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE0_cvPFffEEv>
 8017afa:	69fb      	ldr	r3, [r7, #28]
 8017afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017afe:	f240 2201 	movw	r2, #513	; 0x201
 8017b02:	4619      	mov	r1, r3
 8017b04:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8017b08:	ed1f 0a10 	vldr	s0, [pc, #-64]	; 8017acc <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x268>
 8017b0c:	f7ff fae4 	bl	80170d8 <_ZN6tflite7gen_lutEPFffEffPsi>
            op_data->one_over_one_plus_x_lut, kInt16LUTArraySize);
    op_data->zero_point = output->params.zero_point;
 8017b10:	6a3b      	ldr	r3, [r7, #32]
 8017b12:	691a      	ldr	r2, [r3, #16]
 8017b14:	69fb      	ldr	r3, [r7, #28]
 8017b16:	61da      	str	r2, [r3, #28]
    op_data->scale = output->params.scale;
 8017b18:	6a3b      	ldr	r3, [r7, #32]
 8017b1a:	68da      	ldr	r2, [r3, #12]
 8017b1c:	69fb      	ldr	r3, [r7, #28]
 8017b1e:	621a      	str	r2, [r3, #32]
  }

  auto* params = static_cast<TfLiteSoftmaxParams*>(node->builtin_data);
 8017b20:	683b      	ldr	r3, [r7, #0]
 8017b22:	695b      	ldr	r3, [r3, #20]
 8017b24:	613b      	str	r3, [r7, #16]
  return CalculateSoftmaxParams(context, input, output, params, op_data);
 8017b26:	69fb      	ldr	r3, [r7, #28]
 8017b28:	9300      	str	r3, [sp, #0]
 8017b2a:	693b      	ldr	r3, [r7, #16]
 8017b2c:	6a3a      	ldr	r2, [r7, #32]
 8017b2e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017b30:	6878      	ldr	r0, [r7, #4]
 8017b32:	f7ff fbfd 	bl	8017330 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE>
 8017b36:	4603      	mov	r3, r0
 8017b38:	bf00      	nop
}
 8017b3a:	4618      	mov	r0, r3
 8017b3c:	372c      	adds	r7, #44	; 0x2c
 8017b3e:	46bd      	mov	sp, r7
 8017b40:	bd90      	pop	{r4, r7, pc}
 8017b42:	bf00      	nop

08017b44 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj>:
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_SOFTMAX, },
};
static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                       size_t bytes) {
 8017b44:	b580      	push	{r7, lr}
 8017b46:	b084      	sub	sp, #16
 8017b48:	af00      	add	r7, sp, #0
 8017b4a:	6078      	str	r0, [r7, #4]
 8017b4c:	6039      	str	r1, [r7, #0]
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
 8017b4e:	4b21      	ldr	r3, [pc, #132]	; (8017bd4 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x90>)
 8017b50:	681a      	ldr	r2, [r3, #0]
 8017b52:	683b      	ldr	r3, [r7, #0]
 8017b54:	425b      	negs	r3, r3
 8017b56:	441a      	add	r2, r3
 8017b58:	4b1f      	ldr	r3, [pc, #124]	; (8017bd8 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x94>)
 8017b5a:	681b      	ldr	r3, [r3, #0]
 8017b5c:	429a      	cmp	r2, r3
 8017b5e:	d224      	bcs.n	8017baa <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x66>
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
 8017b60:	4b1e      	ldr	r3, [pc, #120]	; (8017bdc <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x98>)
 8017b62:	681b      	ldr	r3, [r3, #0]
 8017b64:	2b09      	cmp	r3, #9
 8017b66:	d906      	bls.n	8017b76 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x32>
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
 8017b68:	683b      	ldr	r3, [r7, #0]
 8017b6a:	4619      	mov	r1, r3
 8017b6c:	481c      	ldr	r0, [pc, #112]	; (8017be0 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x9c>)
 8017b6e:	f7ec f95d 	bl	8003e2c <_Z9ei_printfPKcz>
        (int)bytes);
      return NULL;
 8017b72:	2300      	movs	r3, #0
 8017b74:	e029      	b.n	8017bca <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x86>
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
 8017b76:	2101      	movs	r1, #1
 8017b78:	6838      	ldr	r0, [r7, #0]
 8017b7a:	f7fb fa29 	bl	8012fd0 <_Z9ei_callocjj>
 8017b7e:	60f8      	str	r0, [r7, #12]
    if (ptr == NULL) {
 8017b80:	68fb      	ldr	r3, [r7, #12]
 8017b82:	2b00      	cmp	r3, #0
 8017b84:	d106      	bne.n	8017b94 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x50>
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
 8017b86:	683b      	ldr	r3, [r7, #0]
 8017b88:	4619      	mov	r1, r3
 8017b8a:	4816      	ldr	r0, [pc, #88]	; (8017be4 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0xa0>)
 8017b8c:	f7ec f94e 	bl	8003e2c <_Z9ei_printfPKcz>
      return NULL;
 8017b90:	2300      	movs	r3, #0
 8017b92:	e01a      	b.n	8017bca <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x86>
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
 8017b94:	4b11      	ldr	r3, [pc, #68]	; (8017bdc <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x98>)
 8017b96:	681b      	ldr	r3, [r3, #0]
 8017b98:	1c5a      	adds	r2, r3, #1
 8017b9a:	4910      	ldr	r1, [pc, #64]	; (8017bdc <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x98>)
 8017b9c:	600a      	str	r2, [r1, #0]
 8017b9e:	4912      	ldr	r1, [pc, #72]	; (8017be8 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0xa4>)
 8017ba0:	68fa      	ldr	r2, [r7, #12]
 8017ba2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    return ptr;
 8017ba6:	68fb      	ldr	r3, [r7, #12]
 8017ba8:	e00f      	b.n	8017bca <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x86>
  }

  current_location -= bytes;
 8017baa:	4b0a      	ldr	r3, [pc, #40]	; (8017bd4 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x90>)
 8017bac:	681a      	ldr	r2, [r3, #0]
 8017bae:	683b      	ldr	r3, [r7, #0]
 8017bb0:	425b      	negs	r3, r3
 8017bb2:	4413      	add	r3, r2
 8017bb4:	4a07      	ldr	r2, [pc, #28]	; (8017bd4 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x90>)
 8017bb6:	6013      	str	r3, [r2, #0]

  ptr = current_location;
 8017bb8:	4b06      	ldr	r3, [pc, #24]	; (8017bd4 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x90>)
 8017bba:	681b      	ldr	r3, [r3, #0]
 8017bbc:	60fb      	str	r3, [r7, #12]
  memset(ptr, 0, bytes);
 8017bbe:	683a      	ldr	r2, [r7, #0]
 8017bc0:	2100      	movs	r1, #0
 8017bc2:	68f8      	ldr	r0, [r7, #12]
 8017bc4:	f002 fc8c 	bl	801a4e0 <memset>

  return ptr;
 8017bc8:	68fb      	ldr	r3, [r7, #12]
}
 8017bca:	4618      	mov	r0, r3
 8017bcc:	3710      	adds	r7, #16
 8017bce:	46bd      	mov	sp, r7
 8017bd0:	bd80      	pop	{r7, pc}
 8017bd2:	bf00      	nop
 8017bd4:	20002a54 	.word	0x20002a54
 8017bd8:	20002a50 	.word	0x20002a50
 8017bdc:	20002eec 	.word	0x20002eec
 8017be0:	0801d19c 	.word	0x0801d19c
 8017be4:	0801d21c 	.word	0x0801d21c
 8017be8:	20002ec4 	.word	0x20002ec4

08017bec <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi>:
} scratch_buffer_t;
static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
 8017bec:	b580      	push	{r7, lr}
 8017bee:	b086      	sub	sp, #24
 8017bf0:	af00      	add	r7, sp, #0
 8017bf2:	60f8      	str	r0, [r7, #12]
 8017bf4:	60b9      	str	r1, [r7, #8]
 8017bf6:	607a      	str	r2, [r7, #4]
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
 8017bf8:	4b1b      	ldr	r3, [pc, #108]	; (8017c68 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x7c>)
 8017bfa:	681b      	ldr	r3, [r3, #0]
 8017bfc:	2b03      	cmp	r3, #3
 8017bfe:	d906      	bls.n	8017c0e <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x22>
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
 8017c00:	68bb      	ldr	r3, [r7, #8]
 8017c02:	4619      	mov	r1, r3
 8017c04:	4819      	ldr	r0, [pc, #100]	; (8017c6c <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x80>)
 8017c06:	f7ec f911 	bl	8003e2c <_Z9ei_printfPKcz>
      (int)bytes);
    return kTfLiteError;
 8017c0a:	2301      	movs	r3, #1
 8017c0c:	e028      	b.n	8017c60 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x74>
  }

  scratch_buffer_t b;
  b.bytes = bytes;
 8017c0e:	68bb      	ldr	r3, [r7, #8]
 8017c10:	613b      	str	r3, [r7, #16]

  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
 8017c12:	693b      	ldr	r3, [r7, #16]
 8017c14:	4619      	mov	r1, r3
 8017c16:	68f8      	ldr	r0, [r7, #12]
 8017c18:	f7ff ff94 	bl	8017b44 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj>
 8017c1c:	4603      	mov	r3, r0
 8017c1e:	617b      	str	r3, [r7, #20]
  if (!b.ptr) {
 8017c20:	697b      	ldr	r3, [r7, #20]
 8017c22:	2b00      	cmp	r3, #0
 8017c24:	d106      	bne.n	8017c34 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x48>
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
 8017c26:	68bb      	ldr	r3, [r7, #8]
 8017c28:	4619      	mov	r1, r3
 8017c2a:	4811      	ldr	r0, [pc, #68]	; (8017c70 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x84>)
 8017c2c:	f7ec f8fe 	bl	8003e2c <_Z9ei_printfPKcz>
      (int)bytes);
    return kTfLiteError;
 8017c30:	2301      	movs	r3, #1
 8017c32:	e015      	b.n	8017c60 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x74>
  }

  scratch_buffers[scratch_buffers_ix] = b;
 8017c34:	4b0c      	ldr	r3, [pc, #48]	; (8017c68 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x7c>)
 8017c36:	681b      	ldr	r3, [r3, #0]
 8017c38:	4a0e      	ldr	r2, [pc, #56]	; (8017c74 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x88>)
 8017c3a:	00db      	lsls	r3, r3, #3
 8017c3c:	4413      	add	r3, r2
 8017c3e:	f107 0210 	add.w	r2, r7, #16
 8017c42:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017c46:	e883 0003 	stmia.w	r3, {r0, r1}
  *buffer_idx = scratch_buffers_ix;
 8017c4a:	4b07      	ldr	r3, [pc, #28]	; (8017c68 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x7c>)
 8017c4c:	681b      	ldr	r3, [r3, #0]
 8017c4e:	461a      	mov	r2, r3
 8017c50:	687b      	ldr	r3, [r7, #4]
 8017c52:	601a      	str	r2, [r3, #0]

  scratch_buffers_ix++;
 8017c54:	4b04      	ldr	r3, [pc, #16]	; (8017c68 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x7c>)
 8017c56:	681b      	ldr	r3, [r3, #0]
 8017c58:	3301      	adds	r3, #1
 8017c5a:	4a03      	ldr	r2, [pc, #12]	; (8017c68 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x7c>)
 8017c5c:	6013      	str	r3, [r2, #0]

  return kTfLiteOk;
 8017c5e:	2300      	movs	r3, #0
}
 8017c60:	4618      	mov	r0, r3
 8017c62:	3718      	adds	r7, #24
 8017c64:	46bd      	mov	sp, r7
 8017c66:	bd80      	pop	{r7, pc}
 8017c68:	20002f10 	.word	0x20002f10
 8017c6c:	0801d254 	.word	0x0801d254
 8017c70:	0801d2ac 	.word	0x0801d2ac
 8017c74:	20002ef0 	.word	0x20002ef0

08017c78 <_ZN12_GLOBAL__N_1L16GetScratchBufferEP13TfLiteContexti>:

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
 8017c78:	b480      	push	{r7}
 8017c7a:	b083      	sub	sp, #12
 8017c7c:	af00      	add	r7, sp, #0
 8017c7e:	6078      	str	r0, [r7, #4]
 8017c80:	6039      	str	r1, [r7, #0]
  if (buffer_idx > (int)scratch_buffers_ix) {
 8017c82:	4b09      	ldr	r3, [pc, #36]	; (8017ca8 <_ZN12_GLOBAL__N_1L16GetScratchBufferEP13TfLiteContexti+0x30>)
 8017c84:	681b      	ldr	r3, [r3, #0]
 8017c86:	461a      	mov	r2, r3
 8017c88:	683b      	ldr	r3, [r7, #0]
 8017c8a:	4293      	cmp	r3, r2
 8017c8c:	dd01      	ble.n	8017c92 <_ZN12_GLOBAL__N_1L16GetScratchBufferEP13TfLiteContexti+0x1a>
    return NULL;
 8017c8e:	2300      	movs	r3, #0
 8017c90:	e004      	b.n	8017c9c <_ZN12_GLOBAL__N_1L16GetScratchBufferEP13TfLiteContexti+0x24>
  }
  return scratch_buffers[buffer_idx].ptr;
 8017c92:	4a06      	ldr	r2, [pc, #24]	; (8017cac <_ZN12_GLOBAL__N_1L16GetScratchBufferEP13TfLiteContexti+0x34>)
 8017c94:	683b      	ldr	r3, [r7, #0]
 8017c96:	00db      	lsls	r3, r3, #3
 8017c98:	4413      	add	r3, r2
 8017c9a:	685b      	ldr	r3, [r3, #4]
}
 8017c9c:	4618      	mov	r0, r3
 8017c9e:	370c      	adds	r7, #12
 8017ca0:	46bd      	mov	sp, r7
 8017ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ca6:	4770      	bx	lr
 8017ca8:	20002f10 	.word	0x20002f10
 8017cac:	20002ef0 	.word	0x20002ef0

08017cb0 <_ZN12_GLOBAL__N_1L9GetTensorEPK13TfLiteContexti>:

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {
 8017cb0:	b480      	push	{r7}
 8017cb2:	b083      	sub	sp, #12
 8017cb4:	af00      	add	r7, sp, #0
 8017cb6:	6078      	str	r0, [r7, #4]
 8017cb8:	6039      	str	r1, [r7, #0]
  return &tflTensors[tensor_idx];
 8017cba:	683b      	ldr	r3, [r7, #0]
 8017cbc:	019b      	lsls	r3, r3, #6
 8017cbe:	4a04      	ldr	r2, [pc, #16]	; (8017cd0 <_ZN12_GLOBAL__N_1L9GetTensorEPK13TfLiteContexti+0x20>)
 8017cc0:	4413      	add	r3, r2
}
 8017cc2:	4618      	mov	r0, r3
 8017cc4:	370c      	adds	r7, #12
 8017cc6:	46bd      	mov	sp, r7
 8017cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ccc:	4770      	bx	lr
 8017cce:	bf00      	nop
 8017cd0:	20002ab0 	.word	0x20002ab0

08017cd4 <_ZN12_GLOBAL__N_1L13GetEvalTensorEPK13TfLiteContexti>:

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {
 8017cd4:	b480      	push	{r7}
 8017cd6:	b083      	sub	sp, #12
 8017cd8:	af00      	add	r7, sp, #0
 8017cda:	6078      	str	r0, [r7, #4]
 8017cdc:	6039      	str	r1, [r7, #0]
  return &tflEvalTensors[tensor_idx];
 8017cde:	683a      	ldr	r2, [r7, #0]
 8017ce0:	4613      	mov	r3, r2
 8017ce2:	005b      	lsls	r3, r3, #1
 8017ce4:	4413      	add	r3, r2
 8017ce6:	009b      	lsls	r3, r3, #2
 8017ce8:	4a03      	ldr	r2, [pc, #12]	; (8017cf8 <_ZN12_GLOBAL__N_1L13GetEvalTensorEPK13TfLiteContexti+0x24>)
 8017cea:	4413      	add	r3, r2
}
 8017cec:	4618      	mov	r0, r3
 8017cee:	370c      	adds	r7, #12
 8017cf0:	46bd      	mov	sp, r7
 8017cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cf6:	4770      	bx	lr
 8017cf8:	20002d70 	.word	0x20002d70

08017cfc <_Z18trained_model_initPFPvjjE>:

} // namespace

TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
 8017cfc:	b5b0      	push	{r4, r5, r7, lr}
 8017cfe:	b092      	sub	sp, #72	; 0x48
 8017d00:	af00      	add	r7, sp, #0
 8017d02:	6278      	str	r0, [r7, #36]	; 0x24
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
 8017d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d06:	f44f 7180 	mov.w	r1, #256	; 0x100
 8017d0a:	2010      	movs	r0, #16
 8017d0c:	4798      	blx	r3
 8017d0e:	4603      	mov	r3, r0
 8017d10:	4aa3      	ldr	r2, [pc, #652]	; (8017fa0 <_Z18trained_model_initPFPvjjE+0x2a4>)
 8017d12:	6013      	str	r3, [r2, #0]
  if (!tensor_arena) {
 8017d14:	4ba2      	ldr	r3, [pc, #648]	; (8017fa0 <_Z18trained_model_initPFPvjjE+0x2a4>)
 8017d16:	681b      	ldr	r3, [r3, #0]
 8017d18:	2b00      	cmp	r3, #0
 8017d1a:	d104      	bne.n	8017d26 <_Z18trained_model_initPFPvjjE+0x2a>
    ei_printf("ERR: failed to allocate tensor arena\n");
 8017d1c:	48a1      	ldr	r0, [pc, #644]	; (8017fa4 <_Z18trained_model_initPFPvjjE+0x2a8>)
 8017d1e:	f7ec f885 	bl	8003e2c <_Z9ei_printfPKcz>
    return kTfLiteError;
 8017d22:	2301      	movs	r3, #1
 8017d24:	e21d      	b.n	8018162 <_Z18trained_model_initPFPvjjE+0x466>
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
 8017d26:	4b9e      	ldr	r3, [pc, #632]	; (8017fa0 <_Z18trained_model_initPFPvjjE+0x2a4>)
 8017d28:	681b      	ldr	r3, [r3, #0]
 8017d2a:	4a9f      	ldr	r2, [pc, #636]	; (8017fa8 <_Z18trained_model_initPFPvjjE+0x2ac>)
 8017d2c:	6013      	str	r3, [r2, #0]
  current_location = tensor_arena + kTensorArenaSize;
 8017d2e:	4b9c      	ldr	r3, [pc, #624]	; (8017fa0 <_Z18trained_model_initPFPvjjE+0x2a4>)
 8017d30:	681b      	ldr	r3, [r3, #0]
 8017d32:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8017d36:	4a9d      	ldr	r2, [pc, #628]	; (8017fac <_Z18trained_model_initPFPvjjE+0x2b0>)
 8017d38:	6013      	str	r3, [r2, #0]
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
 8017d3a:	4b9d      	ldr	r3, [pc, #628]	; (8017fb0 <_Z18trained_model_initPFPvjjE+0x2b4>)
 8017d3c:	4a9d      	ldr	r2, [pc, #628]	; (8017fb4 <_Z18trained_model_initPFPvjjE+0x2b8>)
 8017d3e:	639a      	str	r2, [r3, #56]	; 0x38
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
 8017d40:	4b9b      	ldr	r3, [pc, #620]	; (8017fb0 <_Z18trained_model_initPFPvjjE+0x2b4>)
 8017d42:	4a9d      	ldr	r2, [pc, #628]	; (8017fb8 <_Z18trained_model_initPFPvjjE+0x2bc>)
 8017d44:	641a      	str	r2, [r3, #64]	; 0x40
  ctx.GetScratchBuffer = &GetScratchBuffer;
 8017d46:	4b9a      	ldr	r3, [pc, #616]	; (8017fb0 <_Z18trained_model_initPFPvjjE+0x2b4>)
 8017d48:	4a9c      	ldr	r2, [pc, #624]	; (8017fbc <_Z18trained_model_initPFPvjjE+0x2c0>)
 8017d4a:	645a      	str	r2, [r3, #68]	; 0x44
  ctx.GetTensor = &GetTensor;
 8017d4c:	4b98      	ldr	r3, [pc, #608]	; (8017fb0 <_Z18trained_model_initPFPvjjE+0x2b4>)
 8017d4e:	4a9c      	ldr	r2, [pc, #624]	; (8017fc0 <_Z18trained_model_initPFPvjjE+0x2c4>)
 8017d50:	651a      	str	r2, [r3, #80]	; 0x50
  ctx.GetEvalTensor = &GetEvalTensor;
 8017d52:	4b97      	ldr	r3, [pc, #604]	; (8017fb0 <_Z18trained_model_initPFPvjjE+0x2b4>)
 8017d54:	4a9b      	ldr	r2, [pc, #620]	; (8017fc4 <_Z18trained_model_initPFPvjjE+0x2c8>)
 8017d56:	655a      	str	r2, [r3, #84]	; 0x54
  ctx.tensors = tflTensors;
 8017d58:	4b95      	ldr	r3, [pc, #596]	; (8017fb0 <_Z18trained_model_initPFPvjjE+0x2b4>)
 8017d5a:	4a9b      	ldr	r2, [pc, #620]	; (8017fc8 <_Z18trained_model_initPFPvjjE+0x2cc>)
 8017d5c:	609a      	str	r2, [r3, #8]
  ctx.tensors_size = 11;
 8017d5e:	4b94      	ldr	r3, [pc, #592]	; (8017fb0 <_Z18trained_model_initPFPvjjE+0x2b4>)
 8017d60:	220b      	movs	r2, #11
 8017d62:	601a      	str	r2, [r3, #0]
  for (size_t i = 0; i < 11; ++i) {
 8017d64:	2300      	movs	r3, #0
 8017d66:	647b      	str	r3, [r7, #68]	; 0x44
 8017d68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017d6a:	2b0a      	cmp	r3, #10
 8017d6c:	f200 810c 	bhi.w	8017f88 <_Z18trained_model_initPFPvjjE+0x28c>
    tflTensors[i].type = tensorData[i].type;
 8017d70:	4996      	ldr	r1, [pc, #600]	; (8017fcc <_Z18trained_model_initPFPvjjE+0x2d0>)
 8017d72:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017d74:	4613      	mov	r3, r2
 8017d76:	005b      	lsls	r3, r3, #1
 8017d78:	4413      	add	r3, r2
 8017d7a:	00db      	lsls	r3, r3, #3
 8017d7c:	440b      	add	r3, r1
 8017d7e:	3301      	adds	r3, #1
 8017d80:	7819      	ldrb	r1, [r3, #0]
 8017d82:	4a91      	ldr	r2, [pc, #580]	; (8017fc8 <_Z18trained_model_initPFPvjjE+0x2cc>)
 8017d84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017d86:	019b      	lsls	r3, r3, #6
 8017d88:	4413      	add	r3, r2
 8017d8a:	460a      	mov	r2, r1
 8017d8c:	701a      	strb	r2, [r3, #0]
    tflEvalTensors[i].type = tensorData[i].type;
 8017d8e:	498f      	ldr	r1, [pc, #572]	; (8017fcc <_Z18trained_model_initPFPvjjE+0x2d0>)
 8017d90:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017d92:	4613      	mov	r3, r2
 8017d94:	005b      	lsls	r3, r3, #1
 8017d96:	4413      	add	r3, r2
 8017d98:	00db      	lsls	r3, r3, #3
 8017d9a:	440b      	add	r3, r1
 8017d9c:	3301      	adds	r3, #1
 8017d9e:	7818      	ldrb	r0, [r3, #0]
 8017da0:	498b      	ldr	r1, [pc, #556]	; (8017fd0 <_Z18trained_model_initPFPvjjE+0x2d4>)
 8017da2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017da4:	4613      	mov	r3, r2
 8017da6:	005b      	lsls	r3, r3, #1
 8017da8:	4413      	add	r3, r2
 8017daa:	009b      	lsls	r3, r3, #2
 8017dac:	440b      	add	r3, r1
 8017dae:	3308      	adds	r3, #8
 8017db0:	4602      	mov	r2, r0
 8017db2:	701a      	strb	r2, [r3, #0]
    tflTensors[i].is_variable = 0;
 8017db4:	4a84      	ldr	r2, [pc, #528]	; (8017fc8 <_Z18trained_model_initPFPvjjE+0x2cc>)
 8017db6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017db8:	019b      	lsls	r3, r3, #6
 8017dba:	4413      	add	r3, r2
 8017dbc:	332d      	adds	r3, #45	; 0x2d
 8017dbe:	2200      	movs	r2, #0
 8017dc0:	701a      	strb	r2, [r3, #0]

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
 8017dc2:	4982      	ldr	r1, [pc, #520]	; (8017fcc <_Z18trained_model_initPFPvjjE+0x2d0>)
 8017dc4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017dc6:	4613      	mov	r3, r2
 8017dc8:	005b      	lsls	r3, r3, #1
 8017dca:	4413      	add	r3, r2
 8017dcc:	00db      	lsls	r3, r3, #3
 8017dce:	440b      	add	r3, r1
 8017dd0:	7819      	ldrb	r1, [r3, #0]
 8017dd2:	4a7d      	ldr	r2, [pc, #500]	; (8017fc8 <_Z18trained_model_initPFPvjjE+0x2cc>)
 8017dd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017dd6:	019b      	lsls	r3, r3, #6
 8017dd8:	4413      	add	r3, r2
 8017dda:	3314      	adds	r3, #20
 8017ddc:	460a      	mov	r2, r1
 8017dde:	701a      	strb	r2, [r3, #0]
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
 8017de0:	497a      	ldr	r1, [pc, #488]	; (8017fcc <_Z18trained_model_initPFPvjjE+0x2d0>)
 8017de2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017de4:	4613      	mov	r3, r2
 8017de6:	005b      	lsls	r3, r3, #1
 8017de8:	4413      	add	r3, r2
 8017dea:	00db      	lsls	r3, r3, #3
 8017dec:	440b      	add	r3, r1
 8017dee:	330c      	adds	r3, #12
 8017df0:	681a      	ldr	r2, [r3, #0]
 8017df2:	4975      	ldr	r1, [pc, #468]	; (8017fc8 <_Z18trained_model_initPFPvjjE+0x2cc>)
 8017df4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017df6:	019b      	lsls	r3, r3, #6
 8017df8:	440b      	add	r3, r1
 8017dfa:	3318      	adds	r3, #24
 8017dfc:	601a      	str	r2, [r3, #0]
    tflTensors[i].dims = tensorData[i].dims;
 8017dfe:	4973      	ldr	r1, [pc, #460]	; (8017fcc <_Z18trained_model_initPFPvjjE+0x2d0>)
 8017e00:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017e02:	4613      	mov	r3, r2
 8017e04:	005b      	lsls	r3, r3, #1
 8017e06:	4413      	add	r3, r2
 8017e08:	00db      	lsls	r3, r3, #3
 8017e0a:	440b      	add	r3, r1
 8017e0c:	3308      	adds	r3, #8
 8017e0e:	681a      	ldr	r2, [r3, #0]
 8017e10:	496d      	ldr	r1, [pc, #436]	; (8017fc8 <_Z18trained_model_initPFPvjjE+0x2cc>)
 8017e12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017e14:	019b      	lsls	r3, r3, #6
 8017e16:	440b      	add	r3, r1
 8017e18:	3308      	adds	r3, #8
 8017e1a:	601a      	str	r2, [r3, #0]
    tflEvalTensors[i].dims = tensorData[i].dims;
 8017e1c:	496b      	ldr	r1, [pc, #428]	; (8017fcc <_Z18trained_model_initPFPvjjE+0x2d0>)
 8017e1e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017e20:	4613      	mov	r3, r2
 8017e22:	005b      	lsls	r3, r3, #1
 8017e24:	4413      	add	r3, r2
 8017e26:	00db      	lsls	r3, r3, #3
 8017e28:	440b      	add	r3, r1
 8017e2a:	3308      	adds	r3, #8
 8017e2c:	6819      	ldr	r1, [r3, #0]
 8017e2e:	4868      	ldr	r0, [pc, #416]	; (8017fd0 <_Z18trained_model_initPFPvjjE+0x2d4>)
 8017e30:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017e32:	4613      	mov	r3, r2
 8017e34:	005b      	lsls	r3, r3, #1
 8017e36:	4413      	add	r3, r2
 8017e38:	009b      	lsls	r3, r3, #2
 8017e3a:	4403      	add	r3, r0
 8017e3c:	3304      	adds	r3, #4
 8017e3e:	6019      	str	r1, [r3, #0]

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
 8017e40:	4a61      	ldr	r2, [pc, #388]	; (8017fc8 <_Z18trained_model_initPFPvjjE+0x2cc>)
 8017e42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017e44:	019b      	lsls	r3, r3, #6
 8017e46:	4413      	add	r3, r2
 8017e48:	3314      	adds	r3, #20
 8017e4a:	781b      	ldrb	r3, [r3, #0]
 8017e4c:	2b02      	cmp	r3, #2
 8017e4e:	d11e      	bne.n	8017e8e <_Z18trained_model_initPFPvjjE+0x192>
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);
 8017e50:	495e      	ldr	r1, [pc, #376]	; (8017fcc <_Z18trained_model_initPFPvjjE+0x2d0>)
 8017e52:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017e54:	4613      	mov	r3, r2
 8017e56:	005b      	lsls	r3, r3, #1
 8017e58:	4413      	add	r3, r2
 8017e5a:	00db      	lsls	r3, r3, #3
 8017e5c:	440b      	add	r3, r1
 8017e5e:	3304      	adds	r3, #4
 8017e60:	681b      	ldr	r3, [r3, #0]
 8017e62:	461a      	mov	r2, r3
 8017e64:	4b4e      	ldr	r3, [pc, #312]	; (8017fa0 <_Z18trained_model_initPFPvjjE+0x2a4>)
 8017e66:	681b      	ldr	r3, [r3, #0]
 8017e68:	4413      	add	r3, r2
 8017e6a:	63bb      	str	r3, [r7, #56]	; 0x38

     tflTensors[i].data.data =  start;
 8017e6c:	4a56      	ldr	r2, [pc, #344]	; (8017fc8 <_Z18trained_model_initPFPvjjE+0x2cc>)
 8017e6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017e70:	019b      	lsls	r3, r3, #6
 8017e72:	4413      	add	r3, r2
 8017e74:	3304      	adds	r3, #4
 8017e76:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8017e78:	601a      	str	r2, [r3, #0]
     tflEvalTensors[i].data.data =  start;
 8017e7a:	4955      	ldr	r1, [pc, #340]	; (8017fd0 <_Z18trained_model_initPFPvjjE+0x2d4>)
 8017e7c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017e7e:	4613      	mov	r3, r2
 8017e80:	005b      	lsls	r3, r3, #1
 8017e82:	4413      	add	r3, r2
 8017e84:	009b      	lsls	r3, r3, #2
 8017e86:	440b      	add	r3, r1
 8017e88:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8017e8a:	601a      	str	r2, [r3, #0]
 8017e8c:	e01f      	b.n	8017ece <_Z18trained_model_initPFPvjjE+0x1d2>
    }
    else {
       tflTensors[i].data.data = tensorData[i].data;
 8017e8e:	494f      	ldr	r1, [pc, #316]	; (8017fcc <_Z18trained_model_initPFPvjjE+0x2d0>)
 8017e90:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017e92:	4613      	mov	r3, r2
 8017e94:	005b      	lsls	r3, r3, #1
 8017e96:	4413      	add	r3, r2
 8017e98:	00db      	lsls	r3, r3, #3
 8017e9a:	440b      	add	r3, r1
 8017e9c:	3304      	adds	r3, #4
 8017e9e:	681a      	ldr	r2, [r3, #0]
 8017ea0:	4949      	ldr	r1, [pc, #292]	; (8017fc8 <_Z18trained_model_initPFPvjjE+0x2cc>)
 8017ea2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017ea4:	019b      	lsls	r3, r3, #6
 8017ea6:	440b      	add	r3, r1
 8017ea8:	3304      	adds	r3, #4
 8017eaa:	601a      	str	r2, [r3, #0]
       tflEvalTensors[i].data.data = tensorData[i].data;
 8017eac:	4947      	ldr	r1, [pc, #284]	; (8017fcc <_Z18trained_model_initPFPvjjE+0x2d0>)
 8017eae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017eb0:	4613      	mov	r3, r2
 8017eb2:	005b      	lsls	r3, r3, #1
 8017eb4:	4413      	add	r3, r2
 8017eb6:	00db      	lsls	r3, r3, #3
 8017eb8:	440b      	add	r3, r1
 8017eba:	3304      	adds	r3, #4
 8017ebc:	6819      	ldr	r1, [r3, #0]
 8017ebe:	4844      	ldr	r0, [pc, #272]	; (8017fd0 <_Z18trained_model_initPFPvjjE+0x2d4>)
 8017ec0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017ec2:	4613      	mov	r3, r2
 8017ec4:	005b      	lsls	r3, r3, #1
 8017ec6:	4413      	add	r3, r2
 8017ec8:	009b      	lsls	r3, r3, #2
 8017eca:	4403      	add	r3, r0
 8017ecc:	6019      	str	r1, [r3, #0]
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
    tflEvalTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
 8017ece:	4a3e      	ldr	r2, [pc, #248]	; (8017fc8 <_Z18trained_model_initPFPvjjE+0x2cc>)
 8017ed0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017ed2:	019b      	lsls	r3, r3, #6
 8017ed4:	4413      	add	r3, r2
 8017ed6:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8017eda:	493c      	ldr	r1, [pc, #240]	; (8017fcc <_Z18trained_model_initPFPvjjE+0x2d0>)
 8017edc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017ede:	4613      	mov	r3, r2
 8017ee0:	005b      	lsls	r3, r3, #1
 8017ee2:	4413      	add	r3, r2
 8017ee4:	00db      	lsls	r3, r3, #3
 8017ee6:	440b      	add	r3, r1
 8017ee8:	f103 0210 	add.w	r2, r3, #16
 8017eec:	4603      	mov	r3, r0
 8017eee:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017ef2:	e883 0003 	stmia.w	r3, {r0, r1}
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
 8017ef6:	4a34      	ldr	r2, [pc, #208]	; (8017fc8 <_Z18trained_model_initPFPvjjE+0x2cc>)
 8017ef8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017efa:	019b      	lsls	r3, r3, #6
 8017efc:	4413      	add	r3, r2
 8017efe:	3330      	adds	r3, #48	; 0x30
 8017f00:	781b      	ldrb	r3, [r3, #0]
 8017f02:	2b01      	cmp	r3, #1
 8017f04:	d11b      	bne.n	8017f3e <_Z18trained_model_initPFPvjjE+0x242>
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
 8017f06:	4931      	ldr	r1, [pc, #196]	; (8017fcc <_Z18trained_model_initPFPvjjE+0x2d0>)
 8017f08:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017f0a:	4613      	mov	r3, r2
 8017f0c:	005b      	lsls	r3, r3, #1
 8017f0e:	4413      	add	r3, r2
 8017f10:	00db      	lsls	r3, r3, #3
 8017f12:	440b      	add	r3, r1
 8017f14:	3314      	adds	r3, #20
 8017f16:	681b      	ldr	r3, [r3, #0]
 8017f18:	637b      	str	r3, [r7, #52]	; 0x34
      tflTensors[i].params.scale = quant->scale->data[0];
 8017f1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017f1c:	681b      	ldr	r3, [r3, #0]
 8017f1e:	685a      	ldr	r2, [r3, #4]
 8017f20:	4929      	ldr	r1, [pc, #164]	; (8017fc8 <_Z18trained_model_initPFPvjjE+0x2cc>)
 8017f22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017f24:	019b      	lsls	r3, r3, #6
 8017f26:	440b      	add	r3, r1
 8017f28:	330c      	adds	r3, #12
 8017f2a:	601a      	str	r2, [r3, #0]
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
 8017f2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017f2e:	685b      	ldr	r3, [r3, #4]
 8017f30:	685a      	ldr	r2, [r3, #4]
 8017f32:	4925      	ldr	r1, [pc, #148]	; (8017fc8 <_Z18trained_model_initPFPvjjE+0x2cc>)
 8017f34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017f36:	019b      	lsls	r3, r3, #6
 8017f38:	440b      	add	r3, r1
 8017f3a:	3310      	adds	r3, #16
 8017f3c:	601a      	str	r2, [r3, #0]
    }
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
 8017f3e:	4a22      	ldr	r2, [pc, #136]	; (8017fc8 <_Z18trained_model_initPFPvjjE+0x2cc>)
 8017f40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017f42:	019b      	lsls	r3, r3, #6
 8017f44:	4413      	add	r3, r2
 8017f46:	3314      	adds	r3, #20
 8017f48:	781b      	ldrb	r3, [r3, #0]
 8017f4a:	2b02      	cmp	r3, #2
 8017f4c:	d118      	bne.n	8017f80 <_Z18trained_model_initPFPvjjE+0x284>
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
 8017f4e:	4a1e      	ldr	r2, [pc, #120]	; (8017fc8 <_Z18trained_model_initPFPvjjE+0x2cc>)
 8017f50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017f52:	019b      	lsls	r3, r3, #6
 8017f54:	4413      	add	r3, r2
 8017f56:	3304      	adds	r3, #4
 8017f58:	6819      	ldr	r1, [r3, #0]
 8017f5a:	481c      	ldr	r0, [pc, #112]	; (8017fcc <_Z18trained_model_initPFPvjjE+0x2d0>)
 8017f5c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017f5e:	4613      	mov	r3, r2
 8017f60:	005b      	lsls	r3, r3, #1
 8017f62:	4413      	add	r3, r2
 8017f64:	00db      	lsls	r3, r3, #3
 8017f66:	4403      	add	r3, r0
 8017f68:	330c      	adds	r3, #12
 8017f6a:	681b      	ldr	r3, [r3, #0]
 8017f6c:	440b      	add	r3, r1
 8017f6e:	633b      	str	r3, [r7, #48]	; 0x30
      if (data_end_ptr > tensor_boundary) {
 8017f70:	4b0d      	ldr	r3, [pc, #52]	; (8017fa8 <_Z18trained_model_initPFPvjjE+0x2ac>)
 8017f72:	681b      	ldr	r3, [r3, #0]
 8017f74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017f76:	429a      	cmp	r2, r3
 8017f78:	d902      	bls.n	8017f80 <_Z18trained_model_initPFPvjjE+0x284>
        tensor_boundary = data_end_ptr;
 8017f7a:	4a0b      	ldr	r2, [pc, #44]	; (8017fa8 <_Z18trained_model_initPFPvjjE+0x2ac>)
 8017f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f7e:	6013      	str	r3, [r2, #0]
  for (size_t i = 0; i < 11; ++i) {
 8017f80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017f82:	3301      	adds	r3, #1
 8017f84:	647b      	str	r3, [r7, #68]	; 0x44
 8017f86:	e6ef      	b.n	8017d68 <_Z18trained_model_initPFPvjjE+0x6c>
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
 8017f88:	4b07      	ldr	r3, [pc, #28]	; (8017fa8 <_Z18trained_model_initPFPvjjE+0x2ac>)
 8017f8a:	681a      	ldr	r2, [r3, #0]
 8017f8c:	4b07      	ldr	r3, [pc, #28]	; (8017fac <_Z18trained_model_initPFPvjjE+0x2b0>)
 8017f8e:	681b      	ldr	r3, [r3, #0]
 8017f90:	429a      	cmp	r2, r3
 8017f92:	d921      	bls.n	8017fd8 <_Z18trained_model_initPFPvjjE+0x2dc>
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
 8017f94:	480f      	ldr	r0, [pc, #60]	; (8017fd4 <_Z18trained_model_initPFPvjjE+0x2d8>)
 8017f96:	f7eb ff49 	bl	8003e2c <_Z9ei_printfPKcz>
    return kTfLiteError;
 8017f9a:	2301      	movs	r3, #1
 8017f9c:	e0e1      	b.n	8018162 <_Z18trained_model_initPFPvjjE+0x466>
 8017f9e:	bf00      	nop
 8017fa0:	20002a4c 	.word	0x20002a4c
 8017fa4:	0801d2e0 	.word	0x0801d2e0
 8017fa8:	20002a50 	.word	0x20002a50
 8017fac:	20002a54 	.word	0x20002a54
 8017fb0:	20002a58 	.word	0x20002a58
 8017fb4:	08017b45 	.word	0x08017b45
 8017fb8:	08017bed 	.word	0x08017bed
 8017fbc:	08017c79 	.word	0x08017c79
 8017fc0:	08017cb1 	.word	0x08017cb1
 8017fc4:	08017cd5 	.word	0x08017cd5
 8017fc8:	20002ab0 	.word	0x20002ab0
 8017fcc:	200000ec 	.word	0x200000ec
 8017fd0:	20002d70 	.word	0x20002d70
 8017fd4:	0801d308 	.word	0x0801d308
  }
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
 8017fd8:	4c64      	ldr	r4, [pc, #400]	; (801816c <_Z18trained_model_initPFPvjjE+0x470>)
 8017fda:	463b      	mov	r3, r7
 8017fdc:	4618      	mov	r0, r3
 8017fde:	f7fd fe59 	bl	8015c94 <_ZN6tflite24Register_FULLY_CONNECTEDEv>
 8017fe2:	4625      	mov	r5, r4
 8017fe4:	463c      	mov	r4, r7
 8017fe6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017fe8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8017fea:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8017fee:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  registrations[OP_SOFTMAX] = Register_SOFTMAX();
 8017ff2:	4c5e      	ldr	r4, [pc, #376]	; (801816c <_Z18trained_model_initPFPvjjE+0x470>)
 8017ff4:	463b      	mov	r3, r7
 8017ff6:	4618      	mov	r0, r3
 8017ff8:	f7fe fc7c 	bl	80168f4 <_ZN6tflite16Register_SOFTMAXEv>
 8017ffc:	3420      	adds	r4, #32
 8017ffe:	463d      	mov	r5, r7
 8018000:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018002:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018004:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8018008:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  for (size_t i = 0; i < 4; ++i) {
 801800c:	2300      	movs	r3, #0
 801800e:	643b      	str	r3, [r7, #64]	; 0x40
 8018010:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018012:	2b03      	cmp	r3, #3
 8018014:	d86f      	bhi.n	80180f6 <_Z18trained_model_initPFPvjjE+0x3fa>
    tflNodes[i].inputs = nodeData[i].inputs;
 8018016:	4a56      	ldr	r2, [pc, #344]	; (8018170 <_Z18trained_model_initPFPvjjE+0x474>)
 8018018:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801801a:	011b      	lsls	r3, r3, #4
 801801c:	4413      	add	r3, r2
 801801e:	6819      	ldr	r1, [r3, #0]
 8018020:	4854      	ldr	r0, [pc, #336]	; (8018174 <_Z18trained_model_initPFPvjjE+0x478>)
 8018022:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8018024:	4613      	mov	r3, r2
 8018026:	00db      	lsls	r3, r3, #3
 8018028:	4413      	add	r3, r2
 801802a:	009b      	lsls	r3, r3, #2
 801802c:	4403      	add	r3, r0
 801802e:	6019      	str	r1, [r3, #0]
    tflNodes[i].outputs = nodeData[i].outputs;
 8018030:	4a4f      	ldr	r2, [pc, #316]	; (8018170 <_Z18trained_model_initPFPvjjE+0x474>)
 8018032:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018034:	011b      	lsls	r3, r3, #4
 8018036:	4413      	add	r3, r2
 8018038:	3304      	adds	r3, #4
 801803a:	6819      	ldr	r1, [r3, #0]
 801803c:	484d      	ldr	r0, [pc, #308]	; (8018174 <_Z18trained_model_initPFPvjjE+0x478>)
 801803e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8018040:	4613      	mov	r3, r2
 8018042:	00db      	lsls	r3, r3, #3
 8018044:	4413      	add	r3, r2
 8018046:	009b      	lsls	r3, r3, #2
 8018048:	4403      	add	r3, r0
 801804a:	3304      	adds	r3, #4
 801804c:	6019      	str	r1, [r3, #0]
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
 801804e:	4a48      	ldr	r2, [pc, #288]	; (8018170 <_Z18trained_model_initPFPvjjE+0x474>)
 8018050:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018052:	011b      	lsls	r3, r3, #4
 8018054:	4413      	add	r3, r2
 8018056:	3308      	adds	r3, #8
 8018058:	6819      	ldr	r1, [r3, #0]
 801805a:	4846      	ldr	r0, [pc, #280]	; (8018174 <_Z18trained_model_initPFPvjjE+0x478>)
 801805c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801805e:	4613      	mov	r3, r2
 8018060:	00db      	lsls	r3, r3, #3
 8018062:	4413      	add	r3, r2
 8018064:	009b      	lsls	r3, r3, #2
 8018066:	4403      	add	r3, r0
 8018068:	3314      	adds	r3, #20
 801806a:	6019      	str	r1, [r3, #0]
tflNodes[i].custom_initial_data = nullptr;
 801806c:	4941      	ldr	r1, [pc, #260]	; (8018174 <_Z18trained_model_initPFPvjjE+0x478>)
 801806e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8018070:	4613      	mov	r3, r2
 8018072:	00db      	lsls	r3, r3, #3
 8018074:	4413      	add	r3, r2
 8018076:	009b      	lsls	r3, r3, #2
 8018078:	440b      	add	r3, r1
 801807a:	3318      	adds	r3, #24
 801807c:	2200      	movs	r2, #0
 801807e:	601a      	str	r2, [r3, #0]
      tflNodes[i].custom_initial_data_size = 0;
 8018080:	493c      	ldr	r1, [pc, #240]	; (8018174 <_Z18trained_model_initPFPvjjE+0x478>)
 8018082:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8018084:	4613      	mov	r3, r2
 8018086:	00db      	lsls	r3, r3, #3
 8018088:	4413      	add	r3, r2
 801808a:	009b      	lsls	r3, r3, #2
 801808c:	440b      	add	r3, r1
 801808e:	331c      	adds	r3, #28
 8018090:	2200      	movs	r2, #0
 8018092:	601a      	str	r2, [r3, #0]
if (registrations[nodeData[i].used_op_index].init) {
 8018094:	4a36      	ldr	r2, [pc, #216]	; (8018170 <_Z18trained_model_initPFPvjjE+0x474>)
 8018096:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018098:	011b      	lsls	r3, r3, #4
 801809a:	4413      	add	r3, r2
 801809c:	330c      	adds	r3, #12
 801809e:	781b      	ldrb	r3, [r3, #0]
 80180a0:	4a32      	ldr	r2, [pc, #200]	; (801816c <_Z18trained_model_initPFPvjjE+0x470>)
 80180a2:	015b      	lsls	r3, r3, #5
 80180a4:	4413      	add	r3, r2
 80180a6:	681b      	ldr	r3, [r3, #0]
 80180a8:	2b00      	cmp	r3, #0
 80180aa:	d020      	beq.n	80180ee <_Z18trained_model_initPFPvjjE+0x3f2>
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
 80180ac:	4a30      	ldr	r2, [pc, #192]	; (8018170 <_Z18trained_model_initPFPvjjE+0x474>)
 80180ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80180b0:	011b      	lsls	r3, r3, #4
 80180b2:	4413      	add	r3, r2
 80180b4:	330c      	adds	r3, #12
 80180b6:	781b      	ldrb	r3, [r3, #0]
 80180b8:	4a2c      	ldr	r2, [pc, #176]	; (801816c <_Z18trained_model_initPFPvjjE+0x470>)
 80180ba:	015b      	lsls	r3, r3, #5
 80180bc:	4413      	add	r3, r2
 80180be:	681c      	ldr	r4, [r3, #0]
 80180c0:	492c      	ldr	r1, [pc, #176]	; (8018174 <_Z18trained_model_initPFPvjjE+0x478>)
 80180c2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80180c4:	4613      	mov	r3, r2
 80180c6:	00db      	lsls	r3, r3, #3
 80180c8:	4413      	add	r3, r2
 80180ca:	009b      	lsls	r3, r3, #2
 80180cc:	440b      	add	r3, r1
 80180ce:	3314      	adds	r3, #20
 80180d0:	681b      	ldr	r3, [r3, #0]
 80180d2:	2200      	movs	r2, #0
 80180d4:	4619      	mov	r1, r3
 80180d6:	4828      	ldr	r0, [pc, #160]	; (8018178 <_Z18trained_model_initPFPvjjE+0x47c>)
 80180d8:	47a0      	blx	r4
 80180da:	4601      	mov	r1, r0
 80180dc:	4825      	ldr	r0, [pc, #148]	; (8018174 <_Z18trained_model_initPFPvjjE+0x478>)
 80180de:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80180e0:	4613      	mov	r3, r2
 80180e2:	00db      	lsls	r3, r3, #3
 80180e4:	4413      	add	r3, r2
 80180e6:	009b      	lsls	r3, r3, #2
 80180e8:	4403      	add	r3, r0
 80180ea:	3310      	adds	r3, #16
 80180ec:	6019      	str	r1, [r3, #0]
  for (size_t i = 0; i < 4; ++i) {
 80180ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80180f0:	3301      	adds	r3, #1
 80180f2:	643b      	str	r3, [r7, #64]	; 0x40
 80180f4:	e78c      	b.n	8018010 <_Z18trained_model_initPFPvjjE+0x314>
    }
  }
  for (size_t i = 0; i < 4; ++i) {
 80180f6:	2300      	movs	r3, #0
 80180f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80180fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80180fc:	2b03      	cmp	r3, #3
 80180fe:	d82f      	bhi.n	8018160 <_Z18trained_model_initPFPvjjE+0x464>
    if (registrations[nodeData[i].used_op_index].prepare) {
 8018100:	4a1b      	ldr	r2, [pc, #108]	; (8018170 <_Z18trained_model_initPFPvjjE+0x474>)
 8018102:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018104:	011b      	lsls	r3, r3, #4
 8018106:	4413      	add	r3, r2
 8018108:	330c      	adds	r3, #12
 801810a:	781b      	ldrb	r3, [r3, #0]
 801810c:	4a17      	ldr	r2, [pc, #92]	; (801816c <_Z18trained_model_initPFPvjjE+0x470>)
 801810e:	015b      	lsls	r3, r3, #5
 8018110:	4413      	add	r3, r2
 8018112:	3308      	adds	r3, #8
 8018114:	681b      	ldr	r3, [r3, #0]
 8018116:	2b00      	cmp	r3, #0
 8018118:	d01e      	beq.n	8018158 <_Z18trained_model_initPFPvjjE+0x45c>
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
 801811a:	4a15      	ldr	r2, [pc, #84]	; (8018170 <_Z18trained_model_initPFPvjjE+0x474>)
 801811c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801811e:	011b      	lsls	r3, r3, #4
 8018120:	4413      	add	r3, r2
 8018122:	330c      	adds	r3, #12
 8018124:	781b      	ldrb	r3, [r3, #0]
 8018126:	4a11      	ldr	r2, [pc, #68]	; (801816c <_Z18trained_model_initPFPvjjE+0x470>)
 8018128:	015b      	lsls	r3, r3, #5
 801812a:	4413      	add	r3, r2
 801812c:	3308      	adds	r3, #8
 801812e:	681c      	ldr	r4, [r3, #0]
 8018130:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8018132:	4613      	mov	r3, r2
 8018134:	00db      	lsls	r3, r3, #3
 8018136:	4413      	add	r3, r2
 8018138:	009b      	lsls	r3, r3, #2
 801813a:	4a0e      	ldr	r2, [pc, #56]	; (8018174 <_Z18trained_model_initPFPvjjE+0x478>)
 801813c:	4413      	add	r3, r2
 801813e:	4619      	mov	r1, r3
 8018140:	480d      	ldr	r0, [pc, #52]	; (8018178 <_Z18trained_model_initPFPvjjE+0x47c>)
 8018142:	47a0      	blx	r4
 8018144:	4603      	mov	r3, r0
 8018146:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      if (status != kTfLiteOk) {
 801814a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801814e:	2b00      	cmp	r3, #0
 8018150:	d002      	beq.n	8018158 <_Z18trained_model_initPFPvjjE+0x45c>
        return status;
 8018152:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018156:	e004      	b.n	8018162 <_Z18trained_model_initPFPvjjE+0x466>
  for (size_t i = 0; i < 4; ++i) {
 8018158:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801815a:	3301      	adds	r3, #1
 801815c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801815e:	e7cc      	b.n	80180fa <_Z18trained_model_initPFPvjjE+0x3fe>
      }
    }
  }
  return kTfLiteOk;
 8018160:	2300      	movs	r3, #0
}
 8018162:	4618      	mov	r0, r3
 8018164:	3748      	adds	r7, #72	; 0x48
 8018166:	46bd      	mov	sp, r7
 8018168:	bdb0      	pop	{r4, r5, r7, pc}
 801816a:	bf00      	nop
 801816c:	20002df4 	.word	0x20002df4
 8018170:	0801d8f4 	.word	0x0801d8f4
 8018174:	20002e34 	.word	0x20002e34
 8018178:	20002a58 	.word	0x20002a58

0801817c <_Z19trained_model_inputi>:

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
 801817c:	b480      	push	{r7}
 801817e:	b083      	sub	sp, #12
 8018180:	af00      	add	r7, sp, #0
 8018182:	6078      	str	r0, [r7, #4]
  return &ctx.tensors[inTensorIndices[index]];
 8018184:	4b05      	ldr	r3, [pc, #20]	; (801819c <_Z19trained_model_inputi+0x20>)
 8018186:	689a      	ldr	r2, [r3, #8]
 8018188:	2300      	movs	r3, #0
 801818a:	019b      	lsls	r3, r3, #6
 801818c:	4413      	add	r3, r2
}
 801818e:	4618      	mov	r0, r3
 8018190:	370c      	adds	r7, #12
 8018192:	46bd      	mov	sp, r7
 8018194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018198:	4770      	bx	lr
 801819a:	bf00      	nop
 801819c:	20002a58 	.word	0x20002a58

080181a0 <_Z20trained_model_outputi>:

static const int outTensorIndices[] = {
  10, 
};
TfLiteTensor* trained_model_output(int index) {
 80181a0:	b480      	push	{r7}
 80181a2:	b083      	sub	sp, #12
 80181a4:	af00      	add	r7, sp, #0
 80181a6:	6078      	str	r0, [r7, #4]
  return &ctx.tensors[outTensorIndices[index]];
 80181a8:	4b05      	ldr	r3, [pc, #20]	; (80181c0 <_Z20trained_model_outputi+0x20>)
 80181aa:	689a      	ldr	r2, [r3, #8]
 80181ac:	230a      	movs	r3, #10
 80181ae:	019b      	lsls	r3, r3, #6
 80181b0:	4413      	add	r3, r2
}
 80181b2:	4618      	mov	r0, r3
 80181b4:	370c      	adds	r7, #12
 80181b6:	46bd      	mov	sp, r7
 80181b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181bc:	4770      	bx	lr
 80181be:	bf00      	nop
 80181c0:	20002a58 	.word	0x20002a58

080181c4 <_Z20trained_model_invokev>:

TfLiteStatus trained_model_invoke() {
 80181c4:	b590      	push	{r4, r7, lr}
 80181c6:	b083      	sub	sp, #12
 80181c8:	af00      	add	r7, sp, #0
  for (size_t i = 0; i < 4; ++i) {
 80181ca:	2300      	movs	r3, #0
 80181cc:	607b      	str	r3, [r7, #4]
 80181ce:	687b      	ldr	r3, [r7, #4]
 80181d0:	2b03      	cmp	r3, #3
 80181d2:	d81f      	bhi.n	8018214 <_Z20trained_model_invokev+0x50>
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);
 80181d4:	4a12      	ldr	r2, [pc, #72]	; (8018220 <_Z20trained_model_invokev+0x5c>)
 80181d6:	687b      	ldr	r3, [r7, #4]
 80181d8:	011b      	lsls	r3, r3, #4
 80181da:	4413      	add	r3, r2
 80181dc:	330c      	adds	r3, #12
 80181de:	781b      	ldrb	r3, [r3, #0]
 80181e0:	4a10      	ldr	r2, [pc, #64]	; (8018224 <_Z20trained_model_invokev+0x60>)
 80181e2:	015b      	lsls	r3, r3, #5
 80181e4:	4413      	add	r3, r2
 80181e6:	330c      	adds	r3, #12
 80181e8:	681c      	ldr	r4, [r3, #0]
 80181ea:	687a      	ldr	r2, [r7, #4]
 80181ec:	4613      	mov	r3, r2
 80181ee:	00db      	lsls	r3, r3, #3
 80181f0:	4413      	add	r3, r2
 80181f2:	009b      	lsls	r3, r3, #2
 80181f4:	4a0c      	ldr	r2, [pc, #48]	; (8018228 <_Z20trained_model_invokev+0x64>)
 80181f6:	4413      	add	r3, r2
 80181f8:	4619      	mov	r1, r3
 80181fa:	480c      	ldr	r0, [pc, #48]	; (801822c <_Z20trained_model_invokev+0x68>)
 80181fc:	47a0      	blx	r4
 80181fe:	4603      	mov	r3, r0
 8018200:	70fb      	strb	r3, [r7, #3]
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
 8018202:	78fb      	ldrb	r3, [r7, #3]
 8018204:	2b00      	cmp	r3, #0
 8018206:	d001      	beq.n	801820c <_Z20trained_model_invokev+0x48>
      return status;
 8018208:	78fb      	ldrb	r3, [r7, #3]
 801820a:	e004      	b.n	8018216 <_Z20trained_model_invokev+0x52>
  for (size_t i = 0; i < 4; ++i) {
 801820c:	687b      	ldr	r3, [r7, #4]
 801820e:	3301      	adds	r3, #1
 8018210:	607b      	str	r3, [r7, #4]
 8018212:	e7dc      	b.n	80181ce <_Z20trained_model_invokev+0xa>
    }
  }
  return kTfLiteOk;
 8018214:	2300      	movs	r3, #0
}
 8018216:	4618      	mov	r0, r3
 8018218:	370c      	adds	r7, #12
 801821a:	46bd      	mov	sp, r7
 801821c:	bd90      	pop	{r4, r7, pc}
 801821e:	bf00      	nop
 8018220:	0801d8f4 	.word	0x0801d8f4
 8018224:	20002df4 	.word	0x20002df4
 8018228:	20002e34 	.word	0x20002e34
 801822c:	20002a58 	.word	0x20002a58

08018230 <_Z19trained_model_resetPFvPvE>:

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
 8018230:	b580      	push	{r7, lr}
 8018232:	b084      	sub	sp, #16
 8018234:	af00      	add	r7, sp, #0
 8018236:	6078      	str	r0, [r7, #4]
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
 8018238:	4b10      	ldr	r3, [pc, #64]	; (801827c <_Z19trained_model_resetPFvPvE+0x4c>)
 801823a:	681a      	ldr	r2, [r3, #0]
 801823c:	687b      	ldr	r3, [r7, #4]
 801823e:	4610      	mov	r0, r2
 8018240:	4798      	blx	r3
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;
 8018242:	4b0f      	ldr	r3, [pc, #60]	; (8018280 <_Z19trained_model_resetPFvPvE+0x50>)
 8018244:	2200      	movs	r2, #0
 8018246:	601a      	str	r2, [r3, #0]

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
 8018248:	2300      	movs	r3, #0
 801824a:	60fb      	str	r3, [r7, #12]
 801824c:	4b0d      	ldr	r3, [pc, #52]	; (8018284 <_Z19trained_model_resetPFvPvE+0x54>)
 801824e:	681b      	ldr	r3, [r3, #0]
 8018250:	68fa      	ldr	r2, [r7, #12]
 8018252:	429a      	cmp	r2, r3
 8018254:	d20a      	bcs.n	801826c <_Z19trained_model_resetPFvPvE+0x3c>
    ei_free(overflow_buffers[ix]);
 8018256:	4a0c      	ldr	r2, [pc, #48]	; (8018288 <_Z19trained_model_resetPFvPvE+0x58>)
 8018258:	68fb      	ldr	r3, [r7, #12]
 801825a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801825e:	4618      	mov	r0, r3
 8018260:	f7fa fec4 	bl	8012fec <_Z7ei_freePv>
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
 8018264:	68fb      	ldr	r3, [r7, #12]
 8018266:	3301      	adds	r3, #1
 8018268:	60fb      	str	r3, [r7, #12]
 801826a:	e7ef      	b.n	801824c <_Z19trained_model_resetPFvPvE+0x1c>
  }
  overflow_buffers_ix = 0;
 801826c:	4b05      	ldr	r3, [pc, #20]	; (8018284 <_Z19trained_model_resetPFvPvE+0x54>)
 801826e:	2200      	movs	r2, #0
 8018270:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 8018272:	2300      	movs	r3, #0
}
 8018274:	4618      	mov	r0, r3
 8018276:	3710      	adds	r7, #16
 8018278:	46bd      	mov	sp, r7
 801827a:	bd80      	pop	{r7, pc}
 801827c:	20002a4c 	.word	0x20002a4c
 8018280:	20002f10 	.word	0x20002f10
 8018284:	20002eec 	.word	0x20002eec
 8018288:	20002ec4 	.word	0x20002ec4

0801828c <_Z41__static_initialization_and_destruction_0ii>:
 801828c:	b480      	push	{r7}
 801828e:	b083      	sub	sp, #12
 8018290:	af00      	add	r7, sp, #0
 8018292:	6078      	str	r0, [r7, #4]
 8018294:	6039      	str	r1, [r7, #0]
 8018296:	687b      	ldr	r3, [r7, #4]
 8018298:	2b01      	cmp	r3, #1
 801829a:	d11f      	bne.n	80182dc <_Z41__static_initialization_and_destruction_0ii+0x50>
 801829c:	683b      	ldr	r3, [r7, #0]
 801829e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80182a2:	4293      	cmp	r3, r2
 80182a4:	d11a      	bne.n	80182dc <_Z41__static_initialization_and_destruction_0ii+0x50>
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 32, (TfLiteIntArray*)&tensor_dimension0, 21, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
 80182a6:	4b10      	ldr	r3, [pc, #64]	; (80182e8 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 80182a8:	681b      	ldr	r3, [r3, #0]
 80182aa:	3320      	adds	r3, #32
};const NodeInfo_t nodeData[] = {
 80182ac:	4a0f      	ldr	r2, [pc, #60]	; (80182ec <_Z41__static_initialization_and_destruction_0ii+0x60>)
 80182ae:	6053      	str	r3, [r2, #4]
 80182b0:	4b0d      	ldr	r3, [pc, #52]	; (80182e8 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 80182b2:	681b      	ldr	r3, [r3, #0]
 80182b4:	4a0d      	ldr	r2, [pc, #52]	; (80182ec <_Z41__static_initialization_and_destruction_0ii+0x60>)
 80182b6:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 32, (TfLiteIntArray*)&tensor_dimension8, 10, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
 80182ba:	4b0b      	ldr	r3, [pc, #44]	; (80182e8 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 80182bc:	681b      	ldr	r3, [r3, #0]
 80182be:	3320      	adds	r3, #32
};const NodeInfo_t nodeData[] = {
 80182c0:	4a0a      	ldr	r2, [pc, #40]	; (80182ec <_Z41__static_initialization_and_destruction_0ii+0x60>)
 80182c2:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 16, (TfLiteIntArray*)&tensor_dimension9, 2, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
 80182c6:	4b08      	ldr	r3, [pc, #32]	; (80182e8 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 80182c8:	681b      	ldr	r3, [r3, #0]
 80182ca:	3310      	adds	r3, #16
};const NodeInfo_t nodeData[] = {
 80182cc:	4a07      	ldr	r2, [pc, #28]	; (80182ec <_Z41__static_initialization_and_destruction_0ii+0x60>)
 80182ce:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 80182d2:	4b05      	ldr	r3, [pc, #20]	; (80182e8 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 80182d4:	681b      	ldr	r3, [r3, #0]
 80182d6:	4a05      	ldr	r2, [pc, #20]	; (80182ec <_Z41__static_initialization_and_destruction_0ii+0x60>)
 80182d8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
}
 80182dc:	bf00      	nop
 80182de:	370c      	adds	r7, #12
 80182e0:	46bd      	mov	sp, r7
 80182e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182e6:	4770      	bx	lr
 80182e8:	20002a4c 	.word	0x20002a4c
 80182ec:	200000ec 	.word	0x200000ec

080182f0 <_GLOBAL__sub_I__Z18trained_model_initPFPvjjE>:
 80182f0:	b580      	push	{r7, lr}
 80182f2:	af00      	add	r7, sp, #0
 80182f4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80182f8:	2001      	movs	r0, #1
 80182fa:	f7ff ffc7 	bl	801828c <_Z41__static_initialization_and_destruction_0ii>
 80182fe:	bd80      	pop	{r7, pc}

08018300 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8018300:	b580      	push	{r7, lr}
 8018302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8018304:	2200      	movs	r2, #0
 8018306:	4912      	ldr	r1, [pc, #72]	; (8018350 <MX_USB_DEVICE_Init+0x50>)
 8018308:	4812      	ldr	r0, [pc, #72]	; (8018354 <MX_USB_DEVICE_Init+0x54>)
 801830a:	f7f2 f9cb 	bl	800a6a4 <USBD_Init>
 801830e:	4603      	mov	r3, r0
 8018310:	2b00      	cmp	r3, #0
 8018312:	d001      	beq.n	8018318 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8018314:	f7ec f850 	bl	80043b8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8018318:	490f      	ldr	r1, [pc, #60]	; (8018358 <MX_USB_DEVICE_Init+0x58>)
 801831a:	480e      	ldr	r0, [pc, #56]	; (8018354 <MX_USB_DEVICE_Init+0x54>)
 801831c:	f7f2 f9f2 	bl	800a704 <USBD_RegisterClass>
 8018320:	4603      	mov	r3, r0
 8018322:	2b00      	cmp	r3, #0
 8018324:	d001      	beq.n	801832a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8018326:	f7ec f847 	bl	80043b8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 801832a:	490c      	ldr	r1, [pc, #48]	; (801835c <MX_USB_DEVICE_Init+0x5c>)
 801832c:	4809      	ldr	r0, [pc, #36]	; (8018354 <MX_USB_DEVICE_Init+0x54>)
 801832e:	f7f2 f8e3 	bl	800a4f8 <USBD_CDC_RegisterInterface>
 8018332:	4603      	mov	r3, r0
 8018334:	2b00      	cmp	r3, #0
 8018336:	d001      	beq.n	801833c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8018338:	f7ec f83e 	bl	80043b8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801833c:	4805      	ldr	r0, [pc, #20]	; (8018354 <MX_USB_DEVICE_Init+0x54>)
 801833e:	f7f2 fa17 	bl	800a770 <USBD_Start>
 8018342:	4603      	mov	r3, r0
 8018344:	2b00      	cmp	r3, #0
 8018346:	d001      	beq.n	801834c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8018348:	f7ec f836 	bl	80043b8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801834c:	bf00      	nop
 801834e:	bd80      	pop	{r7, pc}
 8018350:	20000208 	.word	0x20000208
 8018354:	20002f14 	.word	0x20002f14
 8018358:	20000060 	.word	0x20000060
 801835c:	200001f4 	.word	0x200001f4

08018360 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8018360:	b580      	push	{r7, lr}
 8018362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8018364:	2200      	movs	r2, #0
 8018366:	4905      	ldr	r1, [pc, #20]	; (801837c <CDC_Init_FS+0x1c>)
 8018368:	4805      	ldr	r0, [pc, #20]	; (8018380 <CDC_Init_FS+0x20>)
 801836a:	f7f2 f8df 	bl	800a52c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801836e:	4905      	ldr	r1, [pc, #20]	; (8018384 <CDC_Init_FS+0x24>)
 8018370:	4803      	ldr	r0, [pc, #12]	; (8018380 <CDC_Init_FS+0x20>)
 8018372:	f7f2 f8fd 	bl	800a570 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8018376:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8018378:	4618      	mov	r0, r3
 801837a:	bd80      	pop	{r7, pc}
 801837c:	200039f0 	.word	0x200039f0
 8018380:	20002f14 	.word	0x20002f14
 8018384:	200031f0 	.word	0x200031f0

08018388 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8018388:	b480      	push	{r7}
 801838a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801838c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801838e:	4618      	mov	r0, r3
 8018390:	46bd      	mov	sp, r7
 8018392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018396:	4770      	bx	lr

08018398 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8018398:	b480      	push	{r7}
 801839a:	b083      	sub	sp, #12
 801839c:	af00      	add	r7, sp, #0
 801839e:	4603      	mov	r3, r0
 80183a0:	6039      	str	r1, [r7, #0]
 80183a2:	71fb      	strb	r3, [r7, #7]
 80183a4:	4613      	mov	r3, r2
 80183a6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80183a8:	79fb      	ldrb	r3, [r7, #7]
 80183aa:	2b23      	cmp	r3, #35	; 0x23
 80183ac:	d84a      	bhi.n	8018444 <CDC_Control_FS+0xac>
 80183ae:	a201      	add	r2, pc, #4	; (adr r2, 80183b4 <CDC_Control_FS+0x1c>)
 80183b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80183b4:	08018445 	.word	0x08018445
 80183b8:	08018445 	.word	0x08018445
 80183bc:	08018445 	.word	0x08018445
 80183c0:	08018445 	.word	0x08018445
 80183c4:	08018445 	.word	0x08018445
 80183c8:	08018445 	.word	0x08018445
 80183cc:	08018445 	.word	0x08018445
 80183d0:	08018445 	.word	0x08018445
 80183d4:	08018445 	.word	0x08018445
 80183d8:	08018445 	.word	0x08018445
 80183dc:	08018445 	.word	0x08018445
 80183e0:	08018445 	.word	0x08018445
 80183e4:	08018445 	.word	0x08018445
 80183e8:	08018445 	.word	0x08018445
 80183ec:	08018445 	.word	0x08018445
 80183f0:	08018445 	.word	0x08018445
 80183f4:	08018445 	.word	0x08018445
 80183f8:	08018445 	.word	0x08018445
 80183fc:	08018445 	.word	0x08018445
 8018400:	08018445 	.word	0x08018445
 8018404:	08018445 	.word	0x08018445
 8018408:	08018445 	.word	0x08018445
 801840c:	08018445 	.word	0x08018445
 8018410:	08018445 	.word	0x08018445
 8018414:	08018445 	.word	0x08018445
 8018418:	08018445 	.word	0x08018445
 801841c:	08018445 	.word	0x08018445
 8018420:	08018445 	.word	0x08018445
 8018424:	08018445 	.word	0x08018445
 8018428:	08018445 	.word	0x08018445
 801842c:	08018445 	.word	0x08018445
 8018430:	08018445 	.word	0x08018445
 8018434:	08018445 	.word	0x08018445
 8018438:	08018445 	.word	0x08018445
 801843c:	08018445 	.word	0x08018445
 8018440:	08018445 	.word	0x08018445
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8018444:	bf00      	nop
  }

  return (USBD_OK);
 8018446:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8018448:	4618      	mov	r0, r3
 801844a:	370c      	adds	r7, #12
 801844c:	46bd      	mov	sp, r7
 801844e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018452:	4770      	bx	lr

08018454 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8018454:	b580      	push	{r7, lr}
 8018456:	b082      	sub	sp, #8
 8018458:	af00      	add	r7, sp, #0
 801845a:	6078      	str	r0, [r7, #4]
 801845c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801845e:	6879      	ldr	r1, [r7, #4]
 8018460:	4805      	ldr	r0, [pc, #20]	; (8018478 <CDC_Receive_FS+0x24>)
 8018462:	f7f2 f885 	bl	800a570 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8018466:	4804      	ldr	r0, [pc, #16]	; (8018478 <CDC_Receive_FS+0x24>)
 8018468:	f7f2 f8e6 	bl	800a638 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 801846c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801846e:	4618      	mov	r0, r3
 8018470:	3708      	adds	r7, #8
 8018472:	46bd      	mov	sp, r7
 8018474:	bd80      	pop	{r7, pc}
 8018476:	bf00      	nop
 8018478:	20002f14 	.word	0x20002f14

0801847c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 801847c:	b580      	push	{r7, lr}
 801847e:	b084      	sub	sp, #16
 8018480:	af00      	add	r7, sp, #0
 8018482:	6078      	str	r0, [r7, #4]
 8018484:	460b      	mov	r3, r1
 8018486:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8018488:	2300      	movs	r3, #0
 801848a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 801848c:	4b0d      	ldr	r3, [pc, #52]	; (80184c4 <CDC_Transmit_FS+0x48>)
 801848e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8018492:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8018494:	68bb      	ldr	r3, [r7, #8]
 8018496:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801849a:	2b00      	cmp	r3, #0
 801849c:	d001      	beq.n	80184a2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 801849e:	2301      	movs	r3, #1
 80184a0:	e00b      	b.n	80184ba <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80184a2:	887b      	ldrh	r3, [r7, #2]
 80184a4:	461a      	mov	r2, r3
 80184a6:	6879      	ldr	r1, [r7, #4]
 80184a8:	4806      	ldr	r0, [pc, #24]	; (80184c4 <CDC_Transmit_FS+0x48>)
 80184aa:	f7f2 f83f 	bl	800a52c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80184ae:	4805      	ldr	r0, [pc, #20]	; (80184c4 <CDC_Transmit_FS+0x48>)
 80184b0:	f7f2 f87c 	bl	800a5ac <USBD_CDC_TransmitPacket>
 80184b4:	4603      	mov	r3, r0
 80184b6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80184b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80184ba:	4618      	mov	r0, r3
 80184bc:	3710      	adds	r7, #16
 80184be:	46bd      	mov	sp, r7
 80184c0:	bd80      	pop	{r7, pc}
 80184c2:	bf00      	nop
 80184c4:	20002f14 	.word	0x20002f14

080184c8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80184c8:	b480      	push	{r7}
 80184ca:	b087      	sub	sp, #28
 80184cc:	af00      	add	r7, sp, #0
 80184ce:	60f8      	str	r0, [r7, #12]
 80184d0:	60b9      	str	r1, [r7, #8]
 80184d2:	4613      	mov	r3, r2
 80184d4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80184d6:	2300      	movs	r3, #0
 80184d8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80184da:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80184de:	4618      	mov	r0, r3
 80184e0:	371c      	adds	r7, #28
 80184e2:	46bd      	mov	sp, r7
 80184e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184e8:	4770      	bx	lr
	...

080184ec <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80184ec:	b480      	push	{r7}
 80184ee:	b083      	sub	sp, #12
 80184f0:	af00      	add	r7, sp, #0
 80184f2:	4603      	mov	r3, r0
 80184f4:	6039      	str	r1, [r7, #0]
 80184f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80184f8:	683b      	ldr	r3, [r7, #0]
 80184fa:	2212      	movs	r2, #18
 80184fc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80184fe:	4b03      	ldr	r3, [pc, #12]	; (801850c <USBD_FS_DeviceDescriptor+0x20>)
}
 8018500:	4618      	mov	r0, r3
 8018502:	370c      	adds	r7, #12
 8018504:	46bd      	mov	sp, r7
 8018506:	f85d 7b04 	ldr.w	r7, [sp], #4
 801850a:	4770      	bx	lr
 801850c:	20000224 	.word	0x20000224

08018510 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018510:	b480      	push	{r7}
 8018512:	b083      	sub	sp, #12
 8018514:	af00      	add	r7, sp, #0
 8018516:	4603      	mov	r3, r0
 8018518:	6039      	str	r1, [r7, #0]
 801851a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801851c:	683b      	ldr	r3, [r7, #0]
 801851e:	2204      	movs	r2, #4
 8018520:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8018522:	4b03      	ldr	r3, [pc, #12]	; (8018530 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8018524:	4618      	mov	r0, r3
 8018526:	370c      	adds	r7, #12
 8018528:	46bd      	mov	sp, r7
 801852a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801852e:	4770      	bx	lr
 8018530:	20000238 	.word	0x20000238

08018534 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018534:	b580      	push	{r7, lr}
 8018536:	b082      	sub	sp, #8
 8018538:	af00      	add	r7, sp, #0
 801853a:	4603      	mov	r3, r0
 801853c:	6039      	str	r1, [r7, #0]
 801853e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8018540:	79fb      	ldrb	r3, [r7, #7]
 8018542:	2b00      	cmp	r3, #0
 8018544:	d105      	bne.n	8018552 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8018546:	683a      	ldr	r2, [r7, #0]
 8018548:	4907      	ldr	r1, [pc, #28]	; (8018568 <USBD_FS_ProductStrDescriptor+0x34>)
 801854a:	4808      	ldr	r0, [pc, #32]	; (801856c <USBD_FS_ProductStrDescriptor+0x38>)
 801854c:	f7f3 fabc 	bl	800bac8 <USBD_GetString>
 8018550:	e004      	b.n	801855c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8018552:	683a      	ldr	r2, [r7, #0]
 8018554:	4904      	ldr	r1, [pc, #16]	; (8018568 <USBD_FS_ProductStrDescriptor+0x34>)
 8018556:	4805      	ldr	r0, [pc, #20]	; (801856c <USBD_FS_ProductStrDescriptor+0x38>)
 8018558:	f7f3 fab6 	bl	800bac8 <USBD_GetString>
  }
  return USBD_StrDesc;
 801855c:	4b02      	ldr	r3, [pc, #8]	; (8018568 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801855e:	4618      	mov	r0, r3
 8018560:	3708      	adds	r7, #8
 8018562:	46bd      	mov	sp, r7
 8018564:	bd80      	pop	{r7, pc}
 8018566:	bf00      	nop
 8018568:	200041f0 	.word	0x200041f0
 801856c:	0801d35c 	.word	0x0801d35c

08018570 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018570:	b580      	push	{r7, lr}
 8018572:	b082      	sub	sp, #8
 8018574:	af00      	add	r7, sp, #0
 8018576:	4603      	mov	r3, r0
 8018578:	6039      	str	r1, [r7, #0]
 801857a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801857c:	683a      	ldr	r2, [r7, #0]
 801857e:	4904      	ldr	r1, [pc, #16]	; (8018590 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8018580:	4804      	ldr	r0, [pc, #16]	; (8018594 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8018582:	f7f3 faa1 	bl	800bac8 <USBD_GetString>
  return USBD_StrDesc;
 8018586:	4b02      	ldr	r3, [pc, #8]	; (8018590 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8018588:	4618      	mov	r0, r3
 801858a:	3708      	adds	r7, #8
 801858c:	46bd      	mov	sp, r7
 801858e:	bd80      	pop	{r7, pc}
 8018590:	200041f0 	.word	0x200041f0
 8018594:	0801d374 	.word	0x0801d374

08018598 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018598:	b580      	push	{r7, lr}
 801859a:	b082      	sub	sp, #8
 801859c:	af00      	add	r7, sp, #0
 801859e:	4603      	mov	r3, r0
 80185a0:	6039      	str	r1, [r7, #0]
 80185a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80185a4:	683b      	ldr	r3, [r7, #0]
 80185a6:	221a      	movs	r2, #26
 80185a8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80185aa:	f000 f843 	bl	8018634 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80185ae:	4b02      	ldr	r3, [pc, #8]	; (80185b8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80185b0:	4618      	mov	r0, r3
 80185b2:	3708      	adds	r7, #8
 80185b4:	46bd      	mov	sp, r7
 80185b6:	bd80      	pop	{r7, pc}
 80185b8:	2000023c 	.word	0x2000023c

080185bc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80185bc:	b580      	push	{r7, lr}
 80185be:	b082      	sub	sp, #8
 80185c0:	af00      	add	r7, sp, #0
 80185c2:	4603      	mov	r3, r0
 80185c4:	6039      	str	r1, [r7, #0]
 80185c6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80185c8:	79fb      	ldrb	r3, [r7, #7]
 80185ca:	2b00      	cmp	r3, #0
 80185cc:	d105      	bne.n	80185da <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80185ce:	683a      	ldr	r2, [r7, #0]
 80185d0:	4907      	ldr	r1, [pc, #28]	; (80185f0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80185d2:	4808      	ldr	r0, [pc, #32]	; (80185f4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80185d4:	f7f3 fa78 	bl	800bac8 <USBD_GetString>
 80185d8:	e004      	b.n	80185e4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80185da:	683a      	ldr	r2, [r7, #0]
 80185dc:	4904      	ldr	r1, [pc, #16]	; (80185f0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80185de:	4805      	ldr	r0, [pc, #20]	; (80185f4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80185e0:	f7f3 fa72 	bl	800bac8 <USBD_GetString>
  }
  return USBD_StrDesc;
 80185e4:	4b02      	ldr	r3, [pc, #8]	; (80185f0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80185e6:	4618      	mov	r0, r3
 80185e8:	3708      	adds	r7, #8
 80185ea:	46bd      	mov	sp, r7
 80185ec:	bd80      	pop	{r7, pc}
 80185ee:	bf00      	nop
 80185f0:	200041f0 	.word	0x200041f0
 80185f4:	0801d388 	.word	0x0801d388

080185f8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80185f8:	b580      	push	{r7, lr}
 80185fa:	b082      	sub	sp, #8
 80185fc:	af00      	add	r7, sp, #0
 80185fe:	4603      	mov	r3, r0
 8018600:	6039      	str	r1, [r7, #0]
 8018602:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8018604:	79fb      	ldrb	r3, [r7, #7]
 8018606:	2b00      	cmp	r3, #0
 8018608:	d105      	bne.n	8018616 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801860a:	683a      	ldr	r2, [r7, #0]
 801860c:	4907      	ldr	r1, [pc, #28]	; (801862c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801860e:	4808      	ldr	r0, [pc, #32]	; (8018630 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8018610:	f7f3 fa5a 	bl	800bac8 <USBD_GetString>
 8018614:	e004      	b.n	8018620 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8018616:	683a      	ldr	r2, [r7, #0]
 8018618:	4904      	ldr	r1, [pc, #16]	; (801862c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801861a:	4805      	ldr	r0, [pc, #20]	; (8018630 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801861c:	f7f3 fa54 	bl	800bac8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8018620:	4b02      	ldr	r3, [pc, #8]	; (801862c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8018622:	4618      	mov	r0, r3
 8018624:	3708      	adds	r7, #8
 8018626:	46bd      	mov	sp, r7
 8018628:	bd80      	pop	{r7, pc}
 801862a:	bf00      	nop
 801862c:	200041f0 	.word	0x200041f0
 8018630:	0801d394 	.word	0x0801d394

08018634 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8018634:	b580      	push	{r7, lr}
 8018636:	b084      	sub	sp, #16
 8018638:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801863a:	4b0f      	ldr	r3, [pc, #60]	; (8018678 <Get_SerialNum+0x44>)
 801863c:	681b      	ldr	r3, [r3, #0]
 801863e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8018640:	4b0e      	ldr	r3, [pc, #56]	; (801867c <Get_SerialNum+0x48>)
 8018642:	681b      	ldr	r3, [r3, #0]
 8018644:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8018646:	4b0e      	ldr	r3, [pc, #56]	; (8018680 <Get_SerialNum+0x4c>)
 8018648:	681b      	ldr	r3, [r3, #0]
 801864a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801864c:	68fa      	ldr	r2, [r7, #12]
 801864e:	687b      	ldr	r3, [r7, #4]
 8018650:	4413      	add	r3, r2
 8018652:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8018654:	68fb      	ldr	r3, [r7, #12]
 8018656:	2b00      	cmp	r3, #0
 8018658:	d009      	beq.n	801866e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801865a:	2208      	movs	r2, #8
 801865c:	4909      	ldr	r1, [pc, #36]	; (8018684 <Get_SerialNum+0x50>)
 801865e:	68f8      	ldr	r0, [r7, #12]
 8018660:	f000 f814 	bl	801868c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8018664:	2204      	movs	r2, #4
 8018666:	4908      	ldr	r1, [pc, #32]	; (8018688 <Get_SerialNum+0x54>)
 8018668:	68b8      	ldr	r0, [r7, #8]
 801866a:	f000 f80f 	bl	801868c <IntToUnicode>
  }
}
 801866e:	bf00      	nop
 8018670:	3710      	adds	r7, #16
 8018672:	46bd      	mov	sp, r7
 8018674:	bd80      	pop	{r7, pc}
 8018676:	bf00      	nop
 8018678:	1fff7a10 	.word	0x1fff7a10
 801867c:	1fff7a14 	.word	0x1fff7a14
 8018680:	1fff7a18 	.word	0x1fff7a18
 8018684:	2000023e 	.word	0x2000023e
 8018688:	2000024e 	.word	0x2000024e

0801868c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801868c:	b480      	push	{r7}
 801868e:	b087      	sub	sp, #28
 8018690:	af00      	add	r7, sp, #0
 8018692:	60f8      	str	r0, [r7, #12]
 8018694:	60b9      	str	r1, [r7, #8]
 8018696:	4613      	mov	r3, r2
 8018698:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801869a:	2300      	movs	r3, #0
 801869c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801869e:	2300      	movs	r3, #0
 80186a0:	75fb      	strb	r3, [r7, #23]
 80186a2:	e027      	b.n	80186f4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80186a4:	68fb      	ldr	r3, [r7, #12]
 80186a6:	0f1b      	lsrs	r3, r3, #28
 80186a8:	2b09      	cmp	r3, #9
 80186aa:	d80b      	bhi.n	80186c4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80186ac:	68fb      	ldr	r3, [r7, #12]
 80186ae:	0f1b      	lsrs	r3, r3, #28
 80186b0:	b2da      	uxtb	r2, r3
 80186b2:	7dfb      	ldrb	r3, [r7, #23]
 80186b4:	005b      	lsls	r3, r3, #1
 80186b6:	4619      	mov	r1, r3
 80186b8:	68bb      	ldr	r3, [r7, #8]
 80186ba:	440b      	add	r3, r1
 80186bc:	3230      	adds	r2, #48	; 0x30
 80186be:	b2d2      	uxtb	r2, r2
 80186c0:	701a      	strb	r2, [r3, #0]
 80186c2:	e00a      	b.n	80186da <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80186c4:	68fb      	ldr	r3, [r7, #12]
 80186c6:	0f1b      	lsrs	r3, r3, #28
 80186c8:	b2da      	uxtb	r2, r3
 80186ca:	7dfb      	ldrb	r3, [r7, #23]
 80186cc:	005b      	lsls	r3, r3, #1
 80186ce:	4619      	mov	r1, r3
 80186d0:	68bb      	ldr	r3, [r7, #8]
 80186d2:	440b      	add	r3, r1
 80186d4:	3237      	adds	r2, #55	; 0x37
 80186d6:	b2d2      	uxtb	r2, r2
 80186d8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80186da:	68fb      	ldr	r3, [r7, #12]
 80186dc:	011b      	lsls	r3, r3, #4
 80186de:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80186e0:	7dfb      	ldrb	r3, [r7, #23]
 80186e2:	005b      	lsls	r3, r3, #1
 80186e4:	3301      	adds	r3, #1
 80186e6:	68ba      	ldr	r2, [r7, #8]
 80186e8:	4413      	add	r3, r2
 80186ea:	2200      	movs	r2, #0
 80186ec:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80186ee:	7dfb      	ldrb	r3, [r7, #23]
 80186f0:	3301      	adds	r3, #1
 80186f2:	75fb      	strb	r3, [r7, #23]
 80186f4:	7dfa      	ldrb	r2, [r7, #23]
 80186f6:	79fb      	ldrb	r3, [r7, #7]
 80186f8:	429a      	cmp	r2, r3
 80186fa:	d3d3      	bcc.n	80186a4 <IntToUnicode+0x18>
  }
}
 80186fc:	bf00      	nop
 80186fe:	bf00      	nop
 8018700:	371c      	adds	r7, #28
 8018702:	46bd      	mov	sp, r7
 8018704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018708:	4770      	bx	lr
	...

0801870c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801870c:	b580      	push	{r7, lr}
 801870e:	b08a      	sub	sp, #40	; 0x28
 8018710:	af00      	add	r7, sp, #0
 8018712:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8018714:	f107 0314 	add.w	r3, r7, #20
 8018718:	2200      	movs	r2, #0
 801871a:	601a      	str	r2, [r3, #0]
 801871c:	605a      	str	r2, [r3, #4]
 801871e:	609a      	str	r2, [r3, #8]
 8018720:	60da      	str	r2, [r3, #12]
 8018722:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8018724:	687b      	ldr	r3, [r7, #4]
 8018726:	681b      	ldr	r3, [r3, #0]
 8018728:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801872c:	d13a      	bne.n	80187a4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801872e:	2300      	movs	r3, #0
 8018730:	613b      	str	r3, [r7, #16]
 8018732:	4b1e      	ldr	r3, [pc, #120]	; (80187ac <HAL_PCD_MspInit+0xa0>)
 8018734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018736:	4a1d      	ldr	r2, [pc, #116]	; (80187ac <HAL_PCD_MspInit+0xa0>)
 8018738:	f043 0301 	orr.w	r3, r3, #1
 801873c:	6313      	str	r3, [r2, #48]	; 0x30
 801873e:	4b1b      	ldr	r3, [pc, #108]	; (80187ac <HAL_PCD_MspInit+0xa0>)
 8018740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018742:	f003 0301 	and.w	r3, r3, #1
 8018746:	613b      	str	r3, [r7, #16]
 8018748:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801874a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801874e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8018750:	2302      	movs	r3, #2
 8018752:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018754:	2300      	movs	r3, #0
 8018756:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8018758:	2303      	movs	r3, #3
 801875a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801875c:	230a      	movs	r3, #10
 801875e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8018760:	f107 0314 	add.w	r3, r7, #20
 8018764:	4619      	mov	r1, r3
 8018766:	4812      	ldr	r0, [pc, #72]	; (80187b0 <HAL_PCD_MspInit+0xa4>)
 8018768:	f7ed f814 	bl	8005794 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801876c:	4b0f      	ldr	r3, [pc, #60]	; (80187ac <HAL_PCD_MspInit+0xa0>)
 801876e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018770:	4a0e      	ldr	r2, [pc, #56]	; (80187ac <HAL_PCD_MspInit+0xa0>)
 8018772:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018776:	6353      	str	r3, [r2, #52]	; 0x34
 8018778:	2300      	movs	r3, #0
 801877a:	60fb      	str	r3, [r7, #12]
 801877c:	4b0b      	ldr	r3, [pc, #44]	; (80187ac <HAL_PCD_MspInit+0xa0>)
 801877e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018780:	4a0a      	ldr	r2, [pc, #40]	; (80187ac <HAL_PCD_MspInit+0xa0>)
 8018782:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8018786:	6453      	str	r3, [r2, #68]	; 0x44
 8018788:	4b08      	ldr	r3, [pc, #32]	; (80187ac <HAL_PCD_MspInit+0xa0>)
 801878a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801878c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8018790:	60fb      	str	r3, [r7, #12]
 8018792:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8018794:	2200      	movs	r2, #0
 8018796:	2100      	movs	r1, #0
 8018798:	2043      	movs	r0, #67	; 0x43
 801879a:	f7ec ffa8 	bl	80056ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801879e:	2043      	movs	r0, #67	; 0x43
 80187a0:	f7ec ffc1 	bl	8005726 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80187a4:	bf00      	nop
 80187a6:	3728      	adds	r7, #40	; 0x28
 80187a8:	46bd      	mov	sp, r7
 80187aa:	bd80      	pop	{r7, pc}
 80187ac:	40023800 	.word	0x40023800
 80187b0:	40020000 	.word	0x40020000

080187b4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80187b4:	b580      	push	{r7, lr}
 80187b6:	b082      	sub	sp, #8
 80187b8:	af00      	add	r7, sp, #0
 80187ba:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80187bc:	687b      	ldr	r3, [r7, #4]
 80187be:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80187c2:	687b      	ldr	r3, [r7, #4]
 80187c4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80187c8:	4619      	mov	r1, r3
 80187ca:	4610      	mov	r0, r2
 80187cc:	f7f2 f81d 	bl	800a80a <USBD_LL_SetupStage>
}
 80187d0:	bf00      	nop
 80187d2:	3708      	adds	r7, #8
 80187d4:	46bd      	mov	sp, r7
 80187d6:	bd80      	pop	{r7, pc}

080187d8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80187d8:	b580      	push	{r7, lr}
 80187da:	b082      	sub	sp, #8
 80187dc:	af00      	add	r7, sp, #0
 80187de:	6078      	str	r0, [r7, #4]
 80187e0:	460b      	mov	r3, r1
 80187e2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80187e4:	687b      	ldr	r3, [r7, #4]
 80187e6:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80187ea:	78fa      	ldrb	r2, [r7, #3]
 80187ec:	6879      	ldr	r1, [r7, #4]
 80187ee:	4613      	mov	r3, r2
 80187f0:	00db      	lsls	r3, r3, #3
 80187f2:	4413      	add	r3, r2
 80187f4:	009b      	lsls	r3, r3, #2
 80187f6:	440b      	add	r3, r1
 80187f8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80187fc:	681a      	ldr	r2, [r3, #0]
 80187fe:	78fb      	ldrb	r3, [r7, #3]
 8018800:	4619      	mov	r1, r3
 8018802:	f7f2 f857 	bl	800a8b4 <USBD_LL_DataOutStage>
}
 8018806:	bf00      	nop
 8018808:	3708      	adds	r7, #8
 801880a:	46bd      	mov	sp, r7
 801880c:	bd80      	pop	{r7, pc}

0801880e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801880e:	b580      	push	{r7, lr}
 8018810:	b082      	sub	sp, #8
 8018812:	af00      	add	r7, sp, #0
 8018814:	6078      	str	r0, [r7, #4]
 8018816:	460b      	mov	r3, r1
 8018818:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801881a:	687b      	ldr	r3, [r7, #4]
 801881c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8018820:	78fa      	ldrb	r2, [r7, #3]
 8018822:	6879      	ldr	r1, [r7, #4]
 8018824:	4613      	mov	r3, r2
 8018826:	00db      	lsls	r3, r3, #3
 8018828:	4413      	add	r3, r2
 801882a:	009b      	lsls	r3, r3, #2
 801882c:	440b      	add	r3, r1
 801882e:	334c      	adds	r3, #76	; 0x4c
 8018830:	681a      	ldr	r2, [r3, #0]
 8018832:	78fb      	ldrb	r3, [r7, #3]
 8018834:	4619      	mov	r1, r3
 8018836:	f7f2 f8f0 	bl	800aa1a <USBD_LL_DataInStage>
}
 801883a:	bf00      	nop
 801883c:	3708      	adds	r7, #8
 801883e:	46bd      	mov	sp, r7
 8018840:	bd80      	pop	{r7, pc}

08018842 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018842:	b580      	push	{r7, lr}
 8018844:	b082      	sub	sp, #8
 8018846:	af00      	add	r7, sp, #0
 8018848:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801884a:	687b      	ldr	r3, [r7, #4]
 801884c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8018850:	4618      	mov	r0, r3
 8018852:	f7f2 fa24 	bl	800ac9e <USBD_LL_SOF>
}
 8018856:	bf00      	nop
 8018858:	3708      	adds	r7, #8
 801885a:	46bd      	mov	sp, r7
 801885c:	bd80      	pop	{r7, pc}

0801885e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801885e:	b580      	push	{r7, lr}
 8018860:	b084      	sub	sp, #16
 8018862:	af00      	add	r7, sp, #0
 8018864:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8018866:	2301      	movs	r3, #1
 8018868:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801886a:	687b      	ldr	r3, [r7, #4]
 801886c:	68db      	ldr	r3, [r3, #12]
 801886e:	2b00      	cmp	r3, #0
 8018870:	d102      	bne.n	8018878 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8018872:	2300      	movs	r3, #0
 8018874:	73fb      	strb	r3, [r7, #15]
 8018876:	e008      	b.n	801888a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8018878:	687b      	ldr	r3, [r7, #4]
 801887a:	68db      	ldr	r3, [r3, #12]
 801887c:	2b02      	cmp	r3, #2
 801887e:	d102      	bne.n	8018886 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8018880:	2301      	movs	r3, #1
 8018882:	73fb      	strb	r3, [r7, #15]
 8018884:	e001      	b.n	801888a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8018886:	f7eb fd97 	bl	80043b8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801888a:	687b      	ldr	r3, [r7, #4]
 801888c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8018890:	7bfa      	ldrb	r2, [r7, #15]
 8018892:	4611      	mov	r1, r2
 8018894:	4618      	mov	r0, r3
 8018896:	f7f2 f9c4 	bl	800ac22 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801889a:	687b      	ldr	r3, [r7, #4]
 801889c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80188a0:	4618      	mov	r0, r3
 80188a2:	f7f2 f96c 	bl	800ab7e <USBD_LL_Reset>
}
 80188a6:	bf00      	nop
 80188a8:	3710      	adds	r7, #16
 80188aa:	46bd      	mov	sp, r7
 80188ac:	bd80      	pop	{r7, pc}
	...

080188b0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80188b0:	b580      	push	{r7, lr}
 80188b2:	b082      	sub	sp, #8
 80188b4:	af00      	add	r7, sp, #0
 80188b6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80188b8:	687b      	ldr	r3, [r7, #4]
 80188ba:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80188be:	4618      	mov	r0, r3
 80188c0:	f7f2 f9bf 	bl	800ac42 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80188c4:	687b      	ldr	r3, [r7, #4]
 80188c6:	681b      	ldr	r3, [r3, #0]
 80188c8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80188cc:	681b      	ldr	r3, [r3, #0]
 80188ce:	687a      	ldr	r2, [r7, #4]
 80188d0:	6812      	ldr	r2, [r2, #0]
 80188d2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80188d6:	f043 0301 	orr.w	r3, r3, #1
 80188da:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80188dc:	687b      	ldr	r3, [r7, #4]
 80188de:	6a1b      	ldr	r3, [r3, #32]
 80188e0:	2b00      	cmp	r3, #0
 80188e2:	d005      	beq.n	80188f0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80188e4:	4b04      	ldr	r3, [pc, #16]	; (80188f8 <HAL_PCD_SuspendCallback+0x48>)
 80188e6:	691b      	ldr	r3, [r3, #16]
 80188e8:	4a03      	ldr	r2, [pc, #12]	; (80188f8 <HAL_PCD_SuspendCallback+0x48>)
 80188ea:	f043 0306 	orr.w	r3, r3, #6
 80188ee:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80188f0:	bf00      	nop
 80188f2:	3708      	adds	r7, #8
 80188f4:	46bd      	mov	sp, r7
 80188f6:	bd80      	pop	{r7, pc}
 80188f8:	e000ed00 	.word	0xe000ed00

080188fc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80188fc:	b580      	push	{r7, lr}
 80188fe:	b082      	sub	sp, #8
 8018900:	af00      	add	r7, sp, #0
 8018902:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8018904:	687b      	ldr	r3, [r7, #4]
 8018906:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801890a:	4618      	mov	r0, r3
 801890c:	f7f2 f9af 	bl	800ac6e <USBD_LL_Resume>
}
 8018910:	bf00      	nop
 8018912:	3708      	adds	r7, #8
 8018914:	46bd      	mov	sp, r7
 8018916:	bd80      	pop	{r7, pc}

08018918 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018918:	b580      	push	{r7, lr}
 801891a:	b082      	sub	sp, #8
 801891c:	af00      	add	r7, sp, #0
 801891e:	6078      	str	r0, [r7, #4]
 8018920:	460b      	mov	r3, r1
 8018922:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8018924:	687b      	ldr	r3, [r7, #4]
 8018926:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801892a:	78fa      	ldrb	r2, [r7, #3]
 801892c:	4611      	mov	r1, r2
 801892e:	4618      	mov	r0, r3
 8018930:	f7f2 fa07 	bl	800ad42 <USBD_LL_IsoOUTIncomplete>
}
 8018934:	bf00      	nop
 8018936:	3708      	adds	r7, #8
 8018938:	46bd      	mov	sp, r7
 801893a:	bd80      	pop	{r7, pc}

0801893c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801893c:	b580      	push	{r7, lr}
 801893e:	b082      	sub	sp, #8
 8018940:	af00      	add	r7, sp, #0
 8018942:	6078      	str	r0, [r7, #4]
 8018944:	460b      	mov	r3, r1
 8018946:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8018948:	687b      	ldr	r3, [r7, #4]
 801894a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801894e:	78fa      	ldrb	r2, [r7, #3]
 8018950:	4611      	mov	r1, r2
 8018952:	4618      	mov	r0, r3
 8018954:	f7f2 f9c3 	bl	800acde <USBD_LL_IsoINIncomplete>
}
 8018958:	bf00      	nop
 801895a:	3708      	adds	r7, #8
 801895c:	46bd      	mov	sp, r7
 801895e:	bd80      	pop	{r7, pc}

08018960 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018960:	b580      	push	{r7, lr}
 8018962:	b082      	sub	sp, #8
 8018964:	af00      	add	r7, sp, #0
 8018966:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8018968:	687b      	ldr	r3, [r7, #4]
 801896a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801896e:	4618      	mov	r0, r3
 8018970:	f7f2 fa19 	bl	800ada6 <USBD_LL_DevConnected>
}
 8018974:	bf00      	nop
 8018976:	3708      	adds	r7, #8
 8018978:	46bd      	mov	sp, r7
 801897a:	bd80      	pop	{r7, pc}

0801897c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801897c:	b580      	push	{r7, lr}
 801897e:	b082      	sub	sp, #8
 8018980:	af00      	add	r7, sp, #0
 8018982:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8018984:	687b      	ldr	r3, [r7, #4]
 8018986:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801898a:	4618      	mov	r0, r3
 801898c:	f7f2 fa16 	bl	800adbc <USBD_LL_DevDisconnected>
}
 8018990:	bf00      	nop
 8018992:	3708      	adds	r7, #8
 8018994:	46bd      	mov	sp, r7
 8018996:	bd80      	pop	{r7, pc}

08018998 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8018998:	b580      	push	{r7, lr}
 801899a:	b082      	sub	sp, #8
 801899c:	af00      	add	r7, sp, #0
 801899e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80189a0:	687b      	ldr	r3, [r7, #4]
 80189a2:	781b      	ldrb	r3, [r3, #0]
 80189a4:	2b00      	cmp	r3, #0
 80189a6:	d13c      	bne.n	8018a22 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80189a8:	4a20      	ldr	r2, [pc, #128]	; (8018a2c <USBD_LL_Init+0x94>)
 80189aa:	687b      	ldr	r3, [r7, #4]
 80189ac:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 80189b0:	687b      	ldr	r3, [r7, #4]
 80189b2:	4a1e      	ldr	r2, [pc, #120]	; (8018a2c <USBD_LL_Init+0x94>)
 80189b4:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80189b8:	4b1c      	ldr	r3, [pc, #112]	; (8018a2c <USBD_LL_Init+0x94>)
 80189ba:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80189be:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80189c0:	4b1a      	ldr	r3, [pc, #104]	; (8018a2c <USBD_LL_Init+0x94>)
 80189c2:	2204      	movs	r2, #4
 80189c4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80189c6:	4b19      	ldr	r3, [pc, #100]	; (8018a2c <USBD_LL_Init+0x94>)
 80189c8:	2202      	movs	r2, #2
 80189ca:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80189cc:	4b17      	ldr	r3, [pc, #92]	; (8018a2c <USBD_LL_Init+0x94>)
 80189ce:	2200      	movs	r2, #0
 80189d0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80189d2:	4b16      	ldr	r3, [pc, #88]	; (8018a2c <USBD_LL_Init+0x94>)
 80189d4:	2202      	movs	r2, #2
 80189d6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80189d8:	4b14      	ldr	r3, [pc, #80]	; (8018a2c <USBD_LL_Init+0x94>)
 80189da:	2200      	movs	r2, #0
 80189dc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80189de:	4b13      	ldr	r3, [pc, #76]	; (8018a2c <USBD_LL_Init+0x94>)
 80189e0:	2200      	movs	r2, #0
 80189e2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80189e4:	4b11      	ldr	r3, [pc, #68]	; (8018a2c <USBD_LL_Init+0x94>)
 80189e6:	2200      	movs	r2, #0
 80189e8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80189ea:	4b10      	ldr	r3, [pc, #64]	; (8018a2c <USBD_LL_Init+0x94>)
 80189ec:	2200      	movs	r2, #0
 80189ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80189f0:	4b0e      	ldr	r3, [pc, #56]	; (8018a2c <USBD_LL_Init+0x94>)
 80189f2:	2200      	movs	r2, #0
 80189f4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80189f6:	480d      	ldr	r0, [pc, #52]	; (8018a2c <USBD_LL_Init+0x94>)
 80189f8:	f7ed f89a 	bl	8005b30 <HAL_PCD_Init>
 80189fc:	4603      	mov	r3, r0
 80189fe:	2b00      	cmp	r3, #0
 8018a00:	d001      	beq.n	8018a06 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8018a02:	f7eb fcd9 	bl	80043b8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8018a06:	2180      	movs	r1, #128	; 0x80
 8018a08:	4808      	ldr	r0, [pc, #32]	; (8018a2c <USBD_LL_Init+0x94>)
 8018a0a:	f7ee faf2 	bl	8006ff2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8018a0e:	2240      	movs	r2, #64	; 0x40
 8018a10:	2100      	movs	r1, #0
 8018a12:	4806      	ldr	r0, [pc, #24]	; (8018a2c <USBD_LL_Init+0x94>)
 8018a14:	f7ee faa6 	bl	8006f64 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8018a18:	2280      	movs	r2, #128	; 0x80
 8018a1a:	2101      	movs	r1, #1
 8018a1c:	4803      	ldr	r0, [pc, #12]	; (8018a2c <USBD_LL_Init+0x94>)
 8018a1e:	f7ee faa1 	bl	8006f64 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8018a22:	2300      	movs	r3, #0
}
 8018a24:	4618      	mov	r0, r3
 8018a26:	3708      	adds	r7, #8
 8018a28:	46bd      	mov	sp, r7
 8018a2a:	bd80      	pop	{r7, pc}
 8018a2c:	200043f0 	.word	0x200043f0

08018a30 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8018a30:	b580      	push	{r7, lr}
 8018a32:	b084      	sub	sp, #16
 8018a34:	af00      	add	r7, sp, #0
 8018a36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018a38:	2300      	movs	r3, #0
 8018a3a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018a3c:	2300      	movs	r3, #0
 8018a3e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8018a40:	687b      	ldr	r3, [r7, #4]
 8018a42:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8018a46:	4618      	mov	r0, r3
 8018a48:	f7ed f98f 	bl	8005d6a <HAL_PCD_Start>
 8018a4c:	4603      	mov	r3, r0
 8018a4e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018a50:	7bfb      	ldrb	r3, [r7, #15]
 8018a52:	4618      	mov	r0, r3
 8018a54:	f000 f942 	bl	8018cdc <USBD_Get_USB_Status>
 8018a58:	4603      	mov	r3, r0
 8018a5a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018a5c:	7bbb      	ldrb	r3, [r7, #14]
}
 8018a5e:	4618      	mov	r0, r3
 8018a60:	3710      	adds	r7, #16
 8018a62:	46bd      	mov	sp, r7
 8018a64:	bd80      	pop	{r7, pc}

08018a66 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8018a66:	b580      	push	{r7, lr}
 8018a68:	b084      	sub	sp, #16
 8018a6a:	af00      	add	r7, sp, #0
 8018a6c:	6078      	str	r0, [r7, #4]
 8018a6e:	4608      	mov	r0, r1
 8018a70:	4611      	mov	r1, r2
 8018a72:	461a      	mov	r2, r3
 8018a74:	4603      	mov	r3, r0
 8018a76:	70fb      	strb	r3, [r7, #3]
 8018a78:	460b      	mov	r3, r1
 8018a7a:	70bb      	strb	r3, [r7, #2]
 8018a7c:	4613      	mov	r3, r2
 8018a7e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018a80:	2300      	movs	r3, #0
 8018a82:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018a84:	2300      	movs	r3, #0
 8018a86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8018a88:	687b      	ldr	r3, [r7, #4]
 8018a8a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8018a8e:	78bb      	ldrb	r3, [r7, #2]
 8018a90:	883a      	ldrh	r2, [r7, #0]
 8018a92:	78f9      	ldrb	r1, [r7, #3]
 8018a94:	f7ed fe60 	bl	8006758 <HAL_PCD_EP_Open>
 8018a98:	4603      	mov	r3, r0
 8018a9a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018a9c:	7bfb      	ldrb	r3, [r7, #15]
 8018a9e:	4618      	mov	r0, r3
 8018aa0:	f000 f91c 	bl	8018cdc <USBD_Get_USB_Status>
 8018aa4:	4603      	mov	r3, r0
 8018aa6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018aa8:	7bbb      	ldrb	r3, [r7, #14]
}
 8018aaa:	4618      	mov	r0, r3
 8018aac:	3710      	adds	r7, #16
 8018aae:	46bd      	mov	sp, r7
 8018ab0:	bd80      	pop	{r7, pc}

08018ab2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018ab2:	b580      	push	{r7, lr}
 8018ab4:	b084      	sub	sp, #16
 8018ab6:	af00      	add	r7, sp, #0
 8018ab8:	6078      	str	r0, [r7, #4]
 8018aba:	460b      	mov	r3, r1
 8018abc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018abe:	2300      	movs	r3, #0
 8018ac0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018ac2:	2300      	movs	r3, #0
 8018ac4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8018ac6:	687b      	ldr	r3, [r7, #4]
 8018ac8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8018acc:	78fa      	ldrb	r2, [r7, #3]
 8018ace:	4611      	mov	r1, r2
 8018ad0:	4618      	mov	r0, r3
 8018ad2:	f7ed fea9 	bl	8006828 <HAL_PCD_EP_Close>
 8018ad6:	4603      	mov	r3, r0
 8018ad8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018ada:	7bfb      	ldrb	r3, [r7, #15]
 8018adc:	4618      	mov	r0, r3
 8018ade:	f000 f8fd 	bl	8018cdc <USBD_Get_USB_Status>
 8018ae2:	4603      	mov	r3, r0
 8018ae4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018ae6:	7bbb      	ldrb	r3, [r7, #14]
}
 8018ae8:	4618      	mov	r0, r3
 8018aea:	3710      	adds	r7, #16
 8018aec:	46bd      	mov	sp, r7
 8018aee:	bd80      	pop	{r7, pc}

08018af0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018af0:	b580      	push	{r7, lr}
 8018af2:	b084      	sub	sp, #16
 8018af4:	af00      	add	r7, sp, #0
 8018af6:	6078      	str	r0, [r7, #4]
 8018af8:	460b      	mov	r3, r1
 8018afa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018afc:	2300      	movs	r3, #0
 8018afe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018b00:	2300      	movs	r3, #0
 8018b02:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8018b04:	687b      	ldr	r3, [r7, #4]
 8018b06:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8018b0a:	78fa      	ldrb	r2, [r7, #3]
 8018b0c:	4611      	mov	r1, r2
 8018b0e:	4618      	mov	r0, r3
 8018b10:	f7ed ff81 	bl	8006a16 <HAL_PCD_EP_SetStall>
 8018b14:	4603      	mov	r3, r0
 8018b16:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018b18:	7bfb      	ldrb	r3, [r7, #15]
 8018b1a:	4618      	mov	r0, r3
 8018b1c:	f000 f8de 	bl	8018cdc <USBD_Get_USB_Status>
 8018b20:	4603      	mov	r3, r0
 8018b22:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018b24:	7bbb      	ldrb	r3, [r7, #14]
}
 8018b26:	4618      	mov	r0, r3
 8018b28:	3710      	adds	r7, #16
 8018b2a:	46bd      	mov	sp, r7
 8018b2c:	bd80      	pop	{r7, pc}

08018b2e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018b2e:	b580      	push	{r7, lr}
 8018b30:	b084      	sub	sp, #16
 8018b32:	af00      	add	r7, sp, #0
 8018b34:	6078      	str	r0, [r7, #4]
 8018b36:	460b      	mov	r3, r1
 8018b38:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018b3a:	2300      	movs	r3, #0
 8018b3c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018b3e:	2300      	movs	r3, #0
 8018b40:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8018b42:	687b      	ldr	r3, [r7, #4]
 8018b44:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8018b48:	78fa      	ldrb	r2, [r7, #3]
 8018b4a:	4611      	mov	r1, r2
 8018b4c:	4618      	mov	r0, r3
 8018b4e:	f7ed ffc6 	bl	8006ade <HAL_PCD_EP_ClrStall>
 8018b52:	4603      	mov	r3, r0
 8018b54:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018b56:	7bfb      	ldrb	r3, [r7, #15]
 8018b58:	4618      	mov	r0, r3
 8018b5a:	f000 f8bf 	bl	8018cdc <USBD_Get_USB_Status>
 8018b5e:	4603      	mov	r3, r0
 8018b60:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018b62:	7bbb      	ldrb	r3, [r7, #14]
}
 8018b64:	4618      	mov	r0, r3
 8018b66:	3710      	adds	r7, #16
 8018b68:	46bd      	mov	sp, r7
 8018b6a:	bd80      	pop	{r7, pc}

08018b6c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018b6c:	b480      	push	{r7}
 8018b6e:	b085      	sub	sp, #20
 8018b70:	af00      	add	r7, sp, #0
 8018b72:	6078      	str	r0, [r7, #4]
 8018b74:	460b      	mov	r3, r1
 8018b76:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8018b78:	687b      	ldr	r3, [r7, #4]
 8018b7a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8018b7e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8018b80:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8018b84:	2b00      	cmp	r3, #0
 8018b86:	da0b      	bge.n	8018ba0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8018b88:	78fb      	ldrb	r3, [r7, #3]
 8018b8a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8018b8e:	68f9      	ldr	r1, [r7, #12]
 8018b90:	4613      	mov	r3, r2
 8018b92:	00db      	lsls	r3, r3, #3
 8018b94:	4413      	add	r3, r2
 8018b96:	009b      	lsls	r3, r3, #2
 8018b98:	440b      	add	r3, r1
 8018b9a:	333e      	adds	r3, #62	; 0x3e
 8018b9c:	781b      	ldrb	r3, [r3, #0]
 8018b9e:	e00b      	b.n	8018bb8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8018ba0:	78fb      	ldrb	r3, [r7, #3]
 8018ba2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8018ba6:	68f9      	ldr	r1, [r7, #12]
 8018ba8:	4613      	mov	r3, r2
 8018baa:	00db      	lsls	r3, r3, #3
 8018bac:	4413      	add	r3, r2
 8018bae:	009b      	lsls	r3, r3, #2
 8018bb0:	440b      	add	r3, r1
 8018bb2:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8018bb6:	781b      	ldrb	r3, [r3, #0]
  }
}
 8018bb8:	4618      	mov	r0, r3
 8018bba:	3714      	adds	r7, #20
 8018bbc:	46bd      	mov	sp, r7
 8018bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018bc2:	4770      	bx	lr

08018bc4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8018bc4:	b580      	push	{r7, lr}
 8018bc6:	b084      	sub	sp, #16
 8018bc8:	af00      	add	r7, sp, #0
 8018bca:	6078      	str	r0, [r7, #4]
 8018bcc:	460b      	mov	r3, r1
 8018bce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018bd0:	2300      	movs	r3, #0
 8018bd2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018bd4:	2300      	movs	r3, #0
 8018bd6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8018bd8:	687b      	ldr	r3, [r7, #4]
 8018bda:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8018bde:	78fa      	ldrb	r2, [r7, #3]
 8018be0:	4611      	mov	r1, r2
 8018be2:	4618      	mov	r0, r3
 8018be4:	f7ed fd93 	bl	800670e <HAL_PCD_SetAddress>
 8018be8:	4603      	mov	r3, r0
 8018bea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018bec:	7bfb      	ldrb	r3, [r7, #15]
 8018bee:	4618      	mov	r0, r3
 8018bf0:	f000 f874 	bl	8018cdc <USBD_Get_USB_Status>
 8018bf4:	4603      	mov	r3, r0
 8018bf6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018bf8:	7bbb      	ldrb	r3, [r7, #14]
}
 8018bfa:	4618      	mov	r0, r3
 8018bfc:	3710      	adds	r7, #16
 8018bfe:	46bd      	mov	sp, r7
 8018c00:	bd80      	pop	{r7, pc}

08018c02 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8018c02:	b580      	push	{r7, lr}
 8018c04:	b086      	sub	sp, #24
 8018c06:	af00      	add	r7, sp, #0
 8018c08:	60f8      	str	r0, [r7, #12]
 8018c0a:	607a      	str	r2, [r7, #4]
 8018c0c:	603b      	str	r3, [r7, #0]
 8018c0e:	460b      	mov	r3, r1
 8018c10:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018c12:	2300      	movs	r3, #0
 8018c14:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018c16:	2300      	movs	r3, #0
 8018c18:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8018c1a:	68fb      	ldr	r3, [r7, #12]
 8018c1c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8018c20:	7af9      	ldrb	r1, [r7, #11]
 8018c22:	683b      	ldr	r3, [r7, #0]
 8018c24:	687a      	ldr	r2, [r7, #4]
 8018c26:	f7ed feac 	bl	8006982 <HAL_PCD_EP_Transmit>
 8018c2a:	4603      	mov	r3, r0
 8018c2c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018c2e:	7dfb      	ldrb	r3, [r7, #23]
 8018c30:	4618      	mov	r0, r3
 8018c32:	f000 f853 	bl	8018cdc <USBD_Get_USB_Status>
 8018c36:	4603      	mov	r3, r0
 8018c38:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8018c3a:	7dbb      	ldrb	r3, [r7, #22]
}
 8018c3c:	4618      	mov	r0, r3
 8018c3e:	3718      	adds	r7, #24
 8018c40:	46bd      	mov	sp, r7
 8018c42:	bd80      	pop	{r7, pc}

08018c44 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8018c44:	b580      	push	{r7, lr}
 8018c46:	b086      	sub	sp, #24
 8018c48:	af00      	add	r7, sp, #0
 8018c4a:	60f8      	str	r0, [r7, #12]
 8018c4c:	607a      	str	r2, [r7, #4]
 8018c4e:	603b      	str	r3, [r7, #0]
 8018c50:	460b      	mov	r3, r1
 8018c52:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018c54:	2300      	movs	r3, #0
 8018c56:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018c58:	2300      	movs	r3, #0
 8018c5a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8018c5c:	68fb      	ldr	r3, [r7, #12]
 8018c5e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8018c62:	7af9      	ldrb	r1, [r7, #11]
 8018c64:	683b      	ldr	r3, [r7, #0]
 8018c66:	687a      	ldr	r2, [r7, #4]
 8018c68:	f7ed fe28 	bl	80068bc <HAL_PCD_EP_Receive>
 8018c6c:	4603      	mov	r3, r0
 8018c6e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018c70:	7dfb      	ldrb	r3, [r7, #23]
 8018c72:	4618      	mov	r0, r3
 8018c74:	f000 f832 	bl	8018cdc <USBD_Get_USB_Status>
 8018c78:	4603      	mov	r3, r0
 8018c7a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8018c7c:	7dbb      	ldrb	r3, [r7, #22]
}
 8018c7e:	4618      	mov	r0, r3
 8018c80:	3718      	adds	r7, #24
 8018c82:	46bd      	mov	sp, r7
 8018c84:	bd80      	pop	{r7, pc}

08018c86 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018c86:	b580      	push	{r7, lr}
 8018c88:	b082      	sub	sp, #8
 8018c8a:	af00      	add	r7, sp, #0
 8018c8c:	6078      	str	r0, [r7, #4]
 8018c8e:	460b      	mov	r3, r1
 8018c90:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8018c92:	687b      	ldr	r3, [r7, #4]
 8018c94:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8018c98:	78fa      	ldrb	r2, [r7, #3]
 8018c9a:	4611      	mov	r1, r2
 8018c9c:	4618      	mov	r0, r3
 8018c9e:	f7ed fe58 	bl	8006952 <HAL_PCD_EP_GetRxCount>
 8018ca2:	4603      	mov	r3, r0
}
 8018ca4:	4618      	mov	r0, r3
 8018ca6:	3708      	adds	r7, #8
 8018ca8:	46bd      	mov	sp, r7
 8018caa:	bd80      	pop	{r7, pc}

08018cac <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8018cac:	b480      	push	{r7}
 8018cae:	b083      	sub	sp, #12
 8018cb0:	af00      	add	r7, sp, #0
 8018cb2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8018cb4:	4b03      	ldr	r3, [pc, #12]	; (8018cc4 <USBD_static_malloc+0x18>)
}
 8018cb6:	4618      	mov	r0, r3
 8018cb8:	370c      	adds	r7, #12
 8018cba:	46bd      	mov	sp, r7
 8018cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018cc0:	4770      	bx	lr
 8018cc2:	bf00      	nop
 8018cc4:	200048fc 	.word	0x200048fc

08018cc8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8018cc8:	b480      	push	{r7}
 8018cca:	b083      	sub	sp, #12
 8018ccc:	af00      	add	r7, sp, #0
 8018cce:	6078      	str	r0, [r7, #4]

}
 8018cd0:	bf00      	nop
 8018cd2:	370c      	adds	r7, #12
 8018cd4:	46bd      	mov	sp, r7
 8018cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018cda:	4770      	bx	lr

08018cdc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8018cdc:	b480      	push	{r7}
 8018cde:	b085      	sub	sp, #20
 8018ce0:	af00      	add	r7, sp, #0
 8018ce2:	4603      	mov	r3, r0
 8018ce4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018ce6:	2300      	movs	r3, #0
 8018ce8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8018cea:	79fb      	ldrb	r3, [r7, #7]
 8018cec:	2b03      	cmp	r3, #3
 8018cee:	d817      	bhi.n	8018d20 <USBD_Get_USB_Status+0x44>
 8018cf0:	a201      	add	r2, pc, #4	; (adr r2, 8018cf8 <USBD_Get_USB_Status+0x1c>)
 8018cf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018cf6:	bf00      	nop
 8018cf8:	08018d09 	.word	0x08018d09
 8018cfc:	08018d0f 	.word	0x08018d0f
 8018d00:	08018d15 	.word	0x08018d15
 8018d04:	08018d1b 	.word	0x08018d1b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8018d08:	2300      	movs	r3, #0
 8018d0a:	73fb      	strb	r3, [r7, #15]
    break;
 8018d0c:	e00b      	b.n	8018d26 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8018d0e:	2303      	movs	r3, #3
 8018d10:	73fb      	strb	r3, [r7, #15]
    break;
 8018d12:	e008      	b.n	8018d26 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8018d14:	2301      	movs	r3, #1
 8018d16:	73fb      	strb	r3, [r7, #15]
    break;
 8018d18:	e005      	b.n	8018d26 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8018d1a:	2303      	movs	r3, #3
 8018d1c:	73fb      	strb	r3, [r7, #15]
    break;
 8018d1e:	e002      	b.n	8018d26 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8018d20:	2303      	movs	r3, #3
 8018d22:	73fb      	strb	r3, [r7, #15]
    break;
 8018d24:	bf00      	nop
  }
  return usb_status;
 8018d26:	7bfb      	ldrb	r3, [r7, #15]
}
 8018d28:	4618      	mov	r0, r3
 8018d2a:	3714      	adds	r7, #20
 8018d2c:	46bd      	mov	sp, r7
 8018d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d32:	4770      	bx	lr

08018d34 <_ZdaPv>:
 8018d34:	f000 b813 	b.w	8018d5e <_ZdlPv>

08018d38 <_Znwj>:
 8018d38:	2801      	cmp	r0, #1
 8018d3a:	bf38      	it	cc
 8018d3c:	2001      	movcc	r0, #1
 8018d3e:	b510      	push	{r4, lr}
 8018d40:	4604      	mov	r4, r0
 8018d42:	4620      	mov	r0, r4
 8018d44:	f001 fb94 	bl	801a470 <malloc>
 8018d48:	b930      	cbnz	r0, 8018d58 <_Znwj+0x20>
 8018d4a:	f000 f80b 	bl	8018d64 <_ZSt15get_new_handlerv>
 8018d4e:	b908      	cbnz	r0, 8018d54 <_Znwj+0x1c>
 8018d50:	f001 fb20 	bl	801a394 <abort>
 8018d54:	4780      	blx	r0
 8018d56:	e7f4      	b.n	8018d42 <_Znwj+0xa>
 8018d58:	bd10      	pop	{r4, pc}

08018d5a <_Znaj>:
 8018d5a:	f7ff bfed 	b.w	8018d38 <_Znwj>

08018d5e <_ZdlPv>:
 8018d5e:	f001 bb8f 	b.w	801a480 <free>
	...

08018d64 <_ZSt15get_new_handlerv>:
 8018d64:	4b02      	ldr	r3, [pc, #8]	; (8018d70 <_ZSt15get_new_handlerv+0xc>)
 8018d66:	6818      	ldr	r0, [r3, #0]
 8018d68:	f3bf 8f5b 	dmb	ish
 8018d6c:	4770      	bx	lr
 8018d6e:	bf00      	nop
 8018d70:	20004b1c 	.word	0x20004b1c
 8018d74:	00000000 	.word	0x00000000

08018d78 <floor>:
 8018d78:	ec51 0b10 	vmov	r0, r1, d0
 8018d7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018d80:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8018d84:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8018d88:	2e13      	cmp	r6, #19
 8018d8a:	ee10 5a10 	vmov	r5, s0
 8018d8e:	ee10 8a10 	vmov	r8, s0
 8018d92:	460c      	mov	r4, r1
 8018d94:	dc32      	bgt.n	8018dfc <floor+0x84>
 8018d96:	2e00      	cmp	r6, #0
 8018d98:	da14      	bge.n	8018dc4 <floor+0x4c>
 8018d9a:	a333      	add	r3, pc, #204	; (adr r3, 8018e68 <floor+0xf0>)
 8018d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018da0:	f7e7 fa7e 	bl	80002a0 <__adddf3>
 8018da4:	2200      	movs	r2, #0
 8018da6:	2300      	movs	r3, #0
 8018da8:	f7e7 fec0 	bl	8000b2c <__aeabi_dcmpgt>
 8018dac:	b138      	cbz	r0, 8018dbe <floor+0x46>
 8018dae:	2c00      	cmp	r4, #0
 8018db0:	da57      	bge.n	8018e62 <floor+0xea>
 8018db2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8018db6:	431d      	orrs	r5, r3
 8018db8:	d001      	beq.n	8018dbe <floor+0x46>
 8018dba:	4c2d      	ldr	r4, [pc, #180]	; (8018e70 <floor+0xf8>)
 8018dbc:	2500      	movs	r5, #0
 8018dbe:	4621      	mov	r1, r4
 8018dc0:	4628      	mov	r0, r5
 8018dc2:	e025      	b.n	8018e10 <floor+0x98>
 8018dc4:	4f2b      	ldr	r7, [pc, #172]	; (8018e74 <floor+0xfc>)
 8018dc6:	4137      	asrs	r7, r6
 8018dc8:	ea01 0307 	and.w	r3, r1, r7
 8018dcc:	4303      	orrs	r3, r0
 8018dce:	d01f      	beq.n	8018e10 <floor+0x98>
 8018dd0:	a325      	add	r3, pc, #148	; (adr r3, 8018e68 <floor+0xf0>)
 8018dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018dd6:	f7e7 fa63 	bl	80002a0 <__adddf3>
 8018dda:	2200      	movs	r2, #0
 8018ddc:	2300      	movs	r3, #0
 8018dde:	f7e7 fea5 	bl	8000b2c <__aeabi_dcmpgt>
 8018de2:	2800      	cmp	r0, #0
 8018de4:	d0eb      	beq.n	8018dbe <floor+0x46>
 8018de6:	2c00      	cmp	r4, #0
 8018de8:	bfbe      	ittt	lt
 8018dea:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8018dee:	fa43 f606 	asrlt.w	r6, r3, r6
 8018df2:	19a4      	addlt	r4, r4, r6
 8018df4:	ea24 0407 	bic.w	r4, r4, r7
 8018df8:	2500      	movs	r5, #0
 8018dfa:	e7e0      	b.n	8018dbe <floor+0x46>
 8018dfc:	2e33      	cmp	r6, #51	; 0x33
 8018dfe:	dd0b      	ble.n	8018e18 <floor+0xa0>
 8018e00:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8018e04:	d104      	bne.n	8018e10 <floor+0x98>
 8018e06:	ee10 2a10 	vmov	r2, s0
 8018e0a:	460b      	mov	r3, r1
 8018e0c:	f7e7 fa48 	bl	80002a0 <__adddf3>
 8018e10:	ec41 0b10 	vmov	d0, r0, r1
 8018e14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018e18:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8018e1c:	f04f 33ff 	mov.w	r3, #4294967295
 8018e20:	fa23 f707 	lsr.w	r7, r3, r7
 8018e24:	4207      	tst	r7, r0
 8018e26:	d0f3      	beq.n	8018e10 <floor+0x98>
 8018e28:	a30f      	add	r3, pc, #60	; (adr r3, 8018e68 <floor+0xf0>)
 8018e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018e2e:	f7e7 fa37 	bl	80002a0 <__adddf3>
 8018e32:	2200      	movs	r2, #0
 8018e34:	2300      	movs	r3, #0
 8018e36:	f7e7 fe79 	bl	8000b2c <__aeabi_dcmpgt>
 8018e3a:	2800      	cmp	r0, #0
 8018e3c:	d0bf      	beq.n	8018dbe <floor+0x46>
 8018e3e:	2c00      	cmp	r4, #0
 8018e40:	da02      	bge.n	8018e48 <floor+0xd0>
 8018e42:	2e14      	cmp	r6, #20
 8018e44:	d103      	bne.n	8018e4e <floor+0xd6>
 8018e46:	3401      	adds	r4, #1
 8018e48:	ea25 0507 	bic.w	r5, r5, r7
 8018e4c:	e7b7      	b.n	8018dbe <floor+0x46>
 8018e4e:	2301      	movs	r3, #1
 8018e50:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8018e54:	fa03 f606 	lsl.w	r6, r3, r6
 8018e58:	4435      	add	r5, r6
 8018e5a:	4545      	cmp	r5, r8
 8018e5c:	bf38      	it	cc
 8018e5e:	18e4      	addcc	r4, r4, r3
 8018e60:	e7f2      	b.n	8018e48 <floor+0xd0>
 8018e62:	2500      	movs	r5, #0
 8018e64:	462c      	mov	r4, r5
 8018e66:	e7aa      	b.n	8018dbe <floor+0x46>
 8018e68:	8800759c 	.word	0x8800759c
 8018e6c:	7e37e43c 	.word	0x7e37e43c
 8018e70:	bff00000 	.word	0xbff00000
 8018e74:	000fffff 	.word	0x000fffff

08018e78 <frexp>:
 8018e78:	b570      	push	{r4, r5, r6, lr}
 8018e7a:	2100      	movs	r1, #0
 8018e7c:	ec55 4b10 	vmov	r4, r5, d0
 8018e80:	6001      	str	r1, [r0, #0]
 8018e82:	4916      	ldr	r1, [pc, #88]	; (8018edc <frexp+0x64>)
 8018e84:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 8018e88:	428a      	cmp	r2, r1
 8018e8a:	4606      	mov	r6, r0
 8018e8c:	462b      	mov	r3, r5
 8018e8e:	dc22      	bgt.n	8018ed6 <frexp+0x5e>
 8018e90:	ee10 1a10 	vmov	r1, s0
 8018e94:	4311      	orrs	r1, r2
 8018e96:	d01e      	beq.n	8018ed6 <frexp+0x5e>
 8018e98:	4911      	ldr	r1, [pc, #68]	; (8018ee0 <frexp+0x68>)
 8018e9a:	4029      	ands	r1, r5
 8018e9c:	b969      	cbnz	r1, 8018eba <frexp+0x42>
 8018e9e:	4b11      	ldr	r3, [pc, #68]	; (8018ee4 <frexp+0x6c>)
 8018ea0:	2200      	movs	r2, #0
 8018ea2:	ee10 0a10 	vmov	r0, s0
 8018ea6:	4629      	mov	r1, r5
 8018ea8:	f7e7 fbb0 	bl	800060c <__aeabi_dmul>
 8018eac:	460b      	mov	r3, r1
 8018eae:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8018eb2:	f06f 0135 	mvn.w	r1, #53	; 0x35
 8018eb6:	4604      	mov	r4, r0
 8018eb8:	6031      	str	r1, [r6, #0]
 8018eba:	6831      	ldr	r1, [r6, #0]
 8018ebc:	1512      	asrs	r2, r2, #20
 8018ebe:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8018ec2:	f2a2 32fe 	subw	r2, r2, #1022	; 0x3fe
 8018ec6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8018eca:	440a      	add	r2, r1
 8018ecc:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
 8018ed0:	6032      	str	r2, [r6, #0]
 8018ed2:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 8018ed6:	ec45 4b10 	vmov	d0, r4, r5
 8018eda:	bd70      	pop	{r4, r5, r6, pc}
 8018edc:	7fefffff 	.word	0x7fefffff
 8018ee0:	7ff00000 	.word	0x7ff00000
 8018ee4:	43500000 	.word	0x43500000

08018ee8 <round>:
 8018ee8:	ec51 0b10 	vmov	r0, r1, d0
 8018eec:	b570      	push	{r4, r5, r6, lr}
 8018eee:	f3c1 550a 	ubfx	r5, r1, #20, #11
 8018ef2:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 8018ef6:	2c13      	cmp	r4, #19
 8018ef8:	ee10 2a10 	vmov	r2, s0
 8018efc:	460b      	mov	r3, r1
 8018efe:	dc19      	bgt.n	8018f34 <round+0x4c>
 8018f00:	2c00      	cmp	r4, #0
 8018f02:	da09      	bge.n	8018f18 <round+0x30>
 8018f04:	3401      	adds	r4, #1
 8018f06:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8018f0a:	d103      	bne.n	8018f14 <round+0x2c>
 8018f0c:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8018f10:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8018f14:	2200      	movs	r2, #0
 8018f16:	e028      	b.n	8018f6a <round+0x82>
 8018f18:	4d15      	ldr	r5, [pc, #84]	; (8018f70 <round+0x88>)
 8018f1a:	4125      	asrs	r5, r4
 8018f1c:	ea01 0605 	and.w	r6, r1, r5
 8018f20:	4332      	orrs	r2, r6
 8018f22:	d00e      	beq.n	8018f42 <round+0x5a>
 8018f24:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8018f28:	fa42 f404 	asr.w	r4, r2, r4
 8018f2c:	4423      	add	r3, r4
 8018f2e:	ea23 0305 	bic.w	r3, r3, r5
 8018f32:	e7ef      	b.n	8018f14 <round+0x2c>
 8018f34:	2c33      	cmp	r4, #51	; 0x33
 8018f36:	dd07      	ble.n	8018f48 <round+0x60>
 8018f38:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8018f3c:	d101      	bne.n	8018f42 <round+0x5a>
 8018f3e:	f7e7 f9af 	bl	80002a0 <__adddf3>
 8018f42:	ec41 0b10 	vmov	d0, r0, r1
 8018f46:	bd70      	pop	{r4, r5, r6, pc}
 8018f48:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 8018f4c:	f04f 35ff 	mov.w	r5, #4294967295
 8018f50:	40f5      	lsrs	r5, r6
 8018f52:	4228      	tst	r0, r5
 8018f54:	d0f5      	beq.n	8018f42 <round+0x5a>
 8018f56:	2101      	movs	r1, #1
 8018f58:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8018f5c:	fa01 f404 	lsl.w	r4, r1, r4
 8018f60:	1912      	adds	r2, r2, r4
 8018f62:	bf28      	it	cs
 8018f64:	185b      	addcs	r3, r3, r1
 8018f66:	ea22 0205 	bic.w	r2, r2, r5
 8018f6a:	4619      	mov	r1, r3
 8018f6c:	4610      	mov	r0, r2
 8018f6e:	e7e8      	b.n	8018f42 <round+0x5a>
 8018f70:	000fffff 	.word	0x000fffff

08018f74 <roundf>:
 8018f74:	ee10 0a10 	vmov	r0, s0
 8018f78:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8018f7c:	3a7f      	subs	r2, #127	; 0x7f
 8018f7e:	2a16      	cmp	r2, #22
 8018f80:	dc15      	bgt.n	8018fae <roundf+0x3a>
 8018f82:	2a00      	cmp	r2, #0
 8018f84:	da08      	bge.n	8018f98 <roundf+0x24>
 8018f86:	3201      	adds	r2, #1
 8018f88:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8018f8c:	d101      	bne.n	8018f92 <roundf+0x1e>
 8018f8e:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 8018f92:	ee00 3a10 	vmov	s0, r3
 8018f96:	4770      	bx	lr
 8018f98:	4907      	ldr	r1, [pc, #28]	; (8018fb8 <roundf+0x44>)
 8018f9a:	4111      	asrs	r1, r2
 8018f9c:	4208      	tst	r0, r1
 8018f9e:	d0fa      	beq.n	8018f96 <roundf+0x22>
 8018fa0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8018fa4:	4113      	asrs	r3, r2
 8018fa6:	4403      	add	r3, r0
 8018fa8:	ea23 0301 	bic.w	r3, r3, r1
 8018fac:	e7f1      	b.n	8018f92 <roundf+0x1e>
 8018fae:	2a80      	cmp	r2, #128	; 0x80
 8018fb0:	d1f1      	bne.n	8018f96 <roundf+0x22>
 8018fb2:	ee30 0a00 	vadd.f32	s0, s0, s0
 8018fb6:	4770      	bx	lr
 8018fb8:	007fffff 	.word	0x007fffff

08018fbc <pow>:
 8018fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018fbe:	ed2d 8b02 	vpush	{d8}
 8018fc2:	eeb0 8a40 	vmov.f32	s16, s0
 8018fc6:	eef0 8a60 	vmov.f32	s17, s1
 8018fca:	ec55 4b11 	vmov	r4, r5, d1
 8018fce:	f000 f8e7 	bl	80191a0 <__ieee754_pow>
 8018fd2:	4622      	mov	r2, r4
 8018fd4:	462b      	mov	r3, r5
 8018fd6:	4620      	mov	r0, r4
 8018fd8:	4629      	mov	r1, r5
 8018fda:	ec57 6b10 	vmov	r6, r7, d0
 8018fde:	f7e7 fdaf 	bl	8000b40 <__aeabi_dcmpun>
 8018fe2:	2800      	cmp	r0, #0
 8018fe4:	d13b      	bne.n	801905e <pow+0xa2>
 8018fe6:	ec51 0b18 	vmov	r0, r1, d8
 8018fea:	2200      	movs	r2, #0
 8018fec:	2300      	movs	r3, #0
 8018fee:	f7e7 fd75 	bl	8000adc <__aeabi_dcmpeq>
 8018ff2:	b1b8      	cbz	r0, 8019024 <pow+0x68>
 8018ff4:	2200      	movs	r2, #0
 8018ff6:	2300      	movs	r3, #0
 8018ff8:	4620      	mov	r0, r4
 8018ffa:	4629      	mov	r1, r5
 8018ffc:	f7e7 fd6e 	bl	8000adc <__aeabi_dcmpeq>
 8019000:	2800      	cmp	r0, #0
 8019002:	d146      	bne.n	8019092 <pow+0xd6>
 8019004:	ec45 4b10 	vmov	d0, r4, r5
 8019008:	f001 f91f 	bl	801a24a <finite>
 801900c:	b338      	cbz	r0, 801905e <pow+0xa2>
 801900e:	2200      	movs	r2, #0
 8019010:	2300      	movs	r3, #0
 8019012:	4620      	mov	r0, r4
 8019014:	4629      	mov	r1, r5
 8019016:	f7e7 fd6b 	bl	8000af0 <__aeabi_dcmplt>
 801901a:	b300      	cbz	r0, 801905e <pow+0xa2>
 801901c:	f001 f9e8 	bl	801a3f0 <__errno>
 8019020:	2322      	movs	r3, #34	; 0x22
 8019022:	e01b      	b.n	801905c <pow+0xa0>
 8019024:	ec47 6b10 	vmov	d0, r6, r7
 8019028:	f001 f90f 	bl	801a24a <finite>
 801902c:	b9e0      	cbnz	r0, 8019068 <pow+0xac>
 801902e:	eeb0 0a48 	vmov.f32	s0, s16
 8019032:	eef0 0a68 	vmov.f32	s1, s17
 8019036:	f001 f908 	bl	801a24a <finite>
 801903a:	b1a8      	cbz	r0, 8019068 <pow+0xac>
 801903c:	ec45 4b10 	vmov	d0, r4, r5
 8019040:	f001 f903 	bl	801a24a <finite>
 8019044:	b180      	cbz	r0, 8019068 <pow+0xac>
 8019046:	4632      	mov	r2, r6
 8019048:	463b      	mov	r3, r7
 801904a:	4630      	mov	r0, r6
 801904c:	4639      	mov	r1, r7
 801904e:	f7e7 fd77 	bl	8000b40 <__aeabi_dcmpun>
 8019052:	2800      	cmp	r0, #0
 8019054:	d0e2      	beq.n	801901c <pow+0x60>
 8019056:	f001 f9cb 	bl	801a3f0 <__errno>
 801905a:	2321      	movs	r3, #33	; 0x21
 801905c:	6003      	str	r3, [r0, #0]
 801905e:	ecbd 8b02 	vpop	{d8}
 8019062:	ec47 6b10 	vmov	d0, r6, r7
 8019066:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019068:	2200      	movs	r2, #0
 801906a:	2300      	movs	r3, #0
 801906c:	4630      	mov	r0, r6
 801906e:	4639      	mov	r1, r7
 8019070:	f7e7 fd34 	bl	8000adc <__aeabi_dcmpeq>
 8019074:	2800      	cmp	r0, #0
 8019076:	d0f2      	beq.n	801905e <pow+0xa2>
 8019078:	eeb0 0a48 	vmov.f32	s0, s16
 801907c:	eef0 0a68 	vmov.f32	s1, s17
 8019080:	f001 f8e3 	bl	801a24a <finite>
 8019084:	2800      	cmp	r0, #0
 8019086:	d0ea      	beq.n	801905e <pow+0xa2>
 8019088:	ec45 4b10 	vmov	d0, r4, r5
 801908c:	f001 f8dd 	bl	801a24a <finite>
 8019090:	e7c3      	b.n	801901a <pow+0x5e>
 8019092:	4f01      	ldr	r7, [pc, #4]	; (8019098 <pow+0xdc>)
 8019094:	2600      	movs	r6, #0
 8019096:	e7e2      	b.n	801905e <pow+0xa2>
 8019098:	3ff00000 	.word	0x3ff00000

0801909c <expf>:
 801909c:	b508      	push	{r3, lr}
 801909e:	ed2d 8b02 	vpush	{d8}
 80190a2:	eef0 8a40 	vmov.f32	s17, s0
 80190a6:	f000 fe5b 	bl	8019d60 <__ieee754_expf>
 80190aa:	eeb0 8a40 	vmov.f32	s16, s0
 80190ae:	eeb0 0a68 	vmov.f32	s0, s17
 80190b2:	f001 f95b 	bl	801a36c <finitef>
 80190b6:	b160      	cbz	r0, 80190d2 <expf+0x36>
 80190b8:	eddf 7a0f 	vldr	s15, [pc, #60]	; 80190f8 <expf+0x5c>
 80190bc:	eef4 8ae7 	vcmpe.f32	s17, s15
 80190c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80190c4:	dd0a      	ble.n	80190dc <expf+0x40>
 80190c6:	f001 f993 	bl	801a3f0 <__errno>
 80190ca:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 80190fc <expf+0x60>
 80190ce:	2322      	movs	r3, #34	; 0x22
 80190d0:	6003      	str	r3, [r0, #0]
 80190d2:	eeb0 0a48 	vmov.f32	s0, s16
 80190d6:	ecbd 8b02 	vpop	{d8}
 80190da:	bd08      	pop	{r3, pc}
 80190dc:	eddf 7a08 	vldr	s15, [pc, #32]	; 8019100 <expf+0x64>
 80190e0:	eef4 8ae7 	vcmpe.f32	s17, s15
 80190e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80190e8:	d5f3      	bpl.n	80190d2 <expf+0x36>
 80190ea:	f001 f981 	bl	801a3f0 <__errno>
 80190ee:	2322      	movs	r3, #34	; 0x22
 80190f0:	ed9f 8a04 	vldr	s16, [pc, #16]	; 8019104 <expf+0x68>
 80190f4:	6003      	str	r3, [r0, #0]
 80190f6:	e7ec      	b.n	80190d2 <expf+0x36>
 80190f8:	42b17180 	.word	0x42b17180
 80190fc:	7f800000 	.word	0x7f800000
 8019100:	c2cff1b5 	.word	0xc2cff1b5
 8019104:	00000000 	.word	0x00000000

08019108 <log10f>:
 8019108:	b508      	push	{r3, lr}
 801910a:	ed2d 8b02 	vpush	{d8}
 801910e:	eeb0 8a40 	vmov.f32	s16, s0
 8019112:	f000 ffe3 	bl	801a0dc <__ieee754_log10f>
 8019116:	eeb4 8a48 	vcmp.f32	s16, s16
 801911a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801911e:	d60f      	bvs.n	8019140 <log10f+0x38>
 8019120:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8019124:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019128:	d80a      	bhi.n	8019140 <log10f+0x38>
 801912a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801912e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019132:	d108      	bne.n	8019146 <log10f+0x3e>
 8019134:	f001 f95c 	bl	801a3f0 <__errno>
 8019138:	2322      	movs	r3, #34	; 0x22
 801913a:	ed9f 0a08 	vldr	s0, [pc, #32]	; 801915c <log10f+0x54>
 801913e:	6003      	str	r3, [r0, #0]
 8019140:	ecbd 8b02 	vpop	{d8}
 8019144:	bd08      	pop	{r3, pc}
 8019146:	f001 f953 	bl	801a3f0 <__errno>
 801914a:	ecbd 8b02 	vpop	{d8}
 801914e:	2321      	movs	r3, #33	; 0x21
 8019150:	6003      	str	r3, [r0, #0]
 8019152:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8019156:	4802      	ldr	r0, [pc, #8]	; (8019160 <log10f+0x58>)
 8019158:	f001 b916 	b.w	801a388 <nanf>
 801915c:	ff800000 	.word	0xff800000
 8019160:	0801d9bb 	.word	0x0801d9bb

08019164 <sqrtf>:
 8019164:	b508      	push	{r3, lr}
 8019166:	ed2d 8b02 	vpush	{d8}
 801916a:	eeb0 8a40 	vmov.f32	s16, s0
 801916e:	f001 f80d 	bl	801a18c <__ieee754_sqrtf>
 8019172:	eeb4 8a48 	vcmp.f32	s16, s16
 8019176:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801917a:	d60c      	bvs.n	8019196 <sqrtf+0x32>
 801917c:	eddf 8a07 	vldr	s17, [pc, #28]	; 801919c <sqrtf+0x38>
 8019180:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8019184:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019188:	d505      	bpl.n	8019196 <sqrtf+0x32>
 801918a:	f001 f931 	bl	801a3f0 <__errno>
 801918e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8019192:	2321      	movs	r3, #33	; 0x21
 8019194:	6003      	str	r3, [r0, #0]
 8019196:	ecbd 8b02 	vpop	{d8}
 801919a:	bd08      	pop	{r3, pc}
 801919c:	00000000 	.word	0x00000000

080191a0 <__ieee754_pow>:
 80191a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80191a4:	ed2d 8b06 	vpush	{d8-d10}
 80191a8:	b089      	sub	sp, #36	; 0x24
 80191aa:	ed8d 1b00 	vstr	d1, [sp]
 80191ae:	e9dd 2900 	ldrd	r2, r9, [sp]
 80191b2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80191b6:	ea58 0102 	orrs.w	r1, r8, r2
 80191ba:	ec57 6b10 	vmov	r6, r7, d0
 80191be:	d115      	bne.n	80191ec <__ieee754_pow+0x4c>
 80191c0:	19b3      	adds	r3, r6, r6
 80191c2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 80191c6:	4152      	adcs	r2, r2
 80191c8:	4299      	cmp	r1, r3
 80191ca:	4b89      	ldr	r3, [pc, #548]	; (80193f0 <__ieee754_pow+0x250>)
 80191cc:	4193      	sbcs	r3, r2
 80191ce:	f080 84d2 	bcs.w	8019b76 <__ieee754_pow+0x9d6>
 80191d2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80191d6:	4630      	mov	r0, r6
 80191d8:	4639      	mov	r1, r7
 80191da:	f7e7 f861 	bl	80002a0 <__adddf3>
 80191de:	ec41 0b10 	vmov	d0, r0, r1
 80191e2:	b009      	add	sp, #36	; 0x24
 80191e4:	ecbd 8b06 	vpop	{d8-d10}
 80191e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80191ec:	4b81      	ldr	r3, [pc, #516]	; (80193f4 <__ieee754_pow+0x254>)
 80191ee:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80191f2:	429c      	cmp	r4, r3
 80191f4:	ee10 aa10 	vmov	sl, s0
 80191f8:	463d      	mov	r5, r7
 80191fa:	dc06      	bgt.n	801920a <__ieee754_pow+0x6a>
 80191fc:	d101      	bne.n	8019202 <__ieee754_pow+0x62>
 80191fe:	2e00      	cmp	r6, #0
 8019200:	d1e7      	bne.n	80191d2 <__ieee754_pow+0x32>
 8019202:	4598      	cmp	r8, r3
 8019204:	dc01      	bgt.n	801920a <__ieee754_pow+0x6a>
 8019206:	d10f      	bne.n	8019228 <__ieee754_pow+0x88>
 8019208:	b172      	cbz	r2, 8019228 <__ieee754_pow+0x88>
 801920a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 801920e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8019212:	ea55 050a 	orrs.w	r5, r5, sl
 8019216:	d1dc      	bne.n	80191d2 <__ieee754_pow+0x32>
 8019218:	e9dd 3200 	ldrd	r3, r2, [sp]
 801921c:	18db      	adds	r3, r3, r3
 801921e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8019222:	4152      	adcs	r2, r2
 8019224:	429d      	cmp	r5, r3
 8019226:	e7d0      	b.n	80191ca <__ieee754_pow+0x2a>
 8019228:	2d00      	cmp	r5, #0
 801922a:	da3b      	bge.n	80192a4 <__ieee754_pow+0x104>
 801922c:	4b72      	ldr	r3, [pc, #456]	; (80193f8 <__ieee754_pow+0x258>)
 801922e:	4598      	cmp	r8, r3
 8019230:	dc51      	bgt.n	80192d6 <__ieee754_pow+0x136>
 8019232:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8019236:	4598      	cmp	r8, r3
 8019238:	f340 84ac 	ble.w	8019b94 <__ieee754_pow+0x9f4>
 801923c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8019240:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8019244:	2b14      	cmp	r3, #20
 8019246:	dd0f      	ble.n	8019268 <__ieee754_pow+0xc8>
 8019248:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 801924c:	fa22 f103 	lsr.w	r1, r2, r3
 8019250:	fa01 f303 	lsl.w	r3, r1, r3
 8019254:	4293      	cmp	r3, r2
 8019256:	f040 849d 	bne.w	8019b94 <__ieee754_pow+0x9f4>
 801925a:	f001 0101 	and.w	r1, r1, #1
 801925e:	f1c1 0302 	rsb	r3, r1, #2
 8019262:	9304      	str	r3, [sp, #16]
 8019264:	b182      	cbz	r2, 8019288 <__ieee754_pow+0xe8>
 8019266:	e05f      	b.n	8019328 <__ieee754_pow+0x188>
 8019268:	2a00      	cmp	r2, #0
 801926a:	d15b      	bne.n	8019324 <__ieee754_pow+0x184>
 801926c:	f1c3 0314 	rsb	r3, r3, #20
 8019270:	fa48 f103 	asr.w	r1, r8, r3
 8019274:	fa01 f303 	lsl.w	r3, r1, r3
 8019278:	4543      	cmp	r3, r8
 801927a:	f040 8488 	bne.w	8019b8e <__ieee754_pow+0x9ee>
 801927e:	f001 0101 	and.w	r1, r1, #1
 8019282:	f1c1 0302 	rsb	r3, r1, #2
 8019286:	9304      	str	r3, [sp, #16]
 8019288:	4b5c      	ldr	r3, [pc, #368]	; (80193fc <__ieee754_pow+0x25c>)
 801928a:	4598      	cmp	r8, r3
 801928c:	d132      	bne.n	80192f4 <__ieee754_pow+0x154>
 801928e:	f1b9 0f00 	cmp.w	r9, #0
 8019292:	f280 8478 	bge.w	8019b86 <__ieee754_pow+0x9e6>
 8019296:	4959      	ldr	r1, [pc, #356]	; (80193fc <__ieee754_pow+0x25c>)
 8019298:	4632      	mov	r2, r6
 801929a:	463b      	mov	r3, r7
 801929c:	2000      	movs	r0, #0
 801929e:	f7e7 fadf 	bl	8000860 <__aeabi_ddiv>
 80192a2:	e79c      	b.n	80191de <__ieee754_pow+0x3e>
 80192a4:	2300      	movs	r3, #0
 80192a6:	9304      	str	r3, [sp, #16]
 80192a8:	2a00      	cmp	r2, #0
 80192aa:	d13d      	bne.n	8019328 <__ieee754_pow+0x188>
 80192ac:	4b51      	ldr	r3, [pc, #324]	; (80193f4 <__ieee754_pow+0x254>)
 80192ae:	4598      	cmp	r8, r3
 80192b0:	d1ea      	bne.n	8019288 <__ieee754_pow+0xe8>
 80192b2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80192b6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80192ba:	ea53 030a 	orrs.w	r3, r3, sl
 80192be:	f000 845a 	beq.w	8019b76 <__ieee754_pow+0x9d6>
 80192c2:	4b4f      	ldr	r3, [pc, #316]	; (8019400 <__ieee754_pow+0x260>)
 80192c4:	429c      	cmp	r4, r3
 80192c6:	dd08      	ble.n	80192da <__ieee754_pow+0x13a>
 80192c8:	f1b9 0f00 	cmp.w	r9, #0
 80192cc:	f2c0 8457 	blt.w	8019b7e <__ieee754_pow+0x9de>
 80192d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80192d4:	e783      	b.n	80191de <__ieee754_pow+0x3e>
 80192d6:	2302      	movs	r3, #2
 80192d8:	e7e5      	b.n	80192a6 <__ieee754_pow+0x106>
 80192da:	f1b9 0f00 	cmp.w	r9, #0
 80192de:	f04f 0000 	mov.w	r0, #0
 80192e2:	f04f 0100 	mov.w	r1, #0
 80192e6:	f6bf af7a 	bge.w	80191de <__ieee754_pow+0x3e>
 80192ea:	e9dd 0300 	ldrd	r0, r3, [sp]
 80192ee:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80192f2:	e774      	b.n	80191de <__ieee754_pow+0x3e>
 80192f4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80192f8:	d106      	bne.n	8019308 <__ieee754_pow+0x168>
 80192fa:	4632      	mov	r2, r6
 80192fc:	463b      	mov	r3, r7
 80192fe:	4630      	mov	r0, r6
 8019300:	4639      	mov	r1, r7
 8019302:	f7e7 f983 	bl	800060c <__aeabi_dmul>
 8019306:	e76a      	b.n	80191de <__ieee754_pow+0x3e>
 8019308:	4b3e      	ldr	r3, [pc, #248]	; (8019404 <__ieee754_pow+0x264>)
 801930a:	4599      	cmp	r9, r3
 801930c:	d10c      	bne.n	8019328 <__ieee754_pow+0x188>
 801930e:	2d00      	cmp	r5, #0
 8019310:	db0a      	blt.n	8019328 <__ieee754_pow+0x188>
 8019312:	ec47 6b10 	vmov	d0, r6, r7
 8019316:	b009      	add	sp, #36	; 0x24
 8019318:	ecbd 8b06 	vpop	{d8-d10}
 801931c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019320:	f000 bc6c 	b.w	8019bfc <__ieee754_sqrt>
 8019324:	2300      	movs	r3, #0
 8019326:	9304      	str	r3, [sp, #16]
 8019328:	ec47 6b10 	vmov	d0, r6, r7
 801932c:	f000 ff84 	bl	801a238 <fabs>
 8019330:	ec51 0b10 	vmov	r0, r1, d0
 8019334:	f1ba 0f00 	cmp.w	sl, #0
 8019338:	d129      	bne.n	801938e <__ieee754_pow+0x1ee>
 801933a:	b124      	cbz	r4, 8019346 <__ieee754_pow+0x1a6>
 801933c:	4b2f      	ldr	r3, [pc, #188]	; (80193fc <__ieee754_pow+0x25c>)
 801933e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8019342:	429a      	cmp	r2, r3
 8019344:	d123      	bne.n	801938e <__ieee754_pow+0x1ee>
 8019346:	f1b9 0f00 	cmp.w	r9, #0
 801934a:	da05      	bge.n	8019358 <__ieee754_pow+0x1b8>
 801934c:	4602      	mov	r2, r0
 801934e:	460b      	mov	r3, r1
 8019350:	2000      	movs	r0, #0
 8019352:	492a      	ldr	r1, [pc, #168]	; (80193fc <__ieee754_pow+0x25c>)
 8019354:	f7e7 fa84 	bl	8000860 <__aeabi_ddiv>
 8019358:	2d00      	cmp	r5, #0
 801935a:	f6bf af40 	bge.w	80191de <__ieee754_pow+0x3e>
 801935e:	9b04      	ldr	r3, [sp, #16]
 8019360:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8019364:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8019368:	4323      	orrs	r3, r4
 801936a:	d108      	bne.n	801937e <__ieee754_pow+0x1de>
 801936c:	4602      	mov	r2, r0
 801936e:	460b      	mov	r3, r1
 8019370:	4610      	mov	r0, r2
 8019372:	4619      	mov	r1, r3
 8019374:	f7e6 ff92 	bl	800029c <__aeabi_dsub>
 8019378:	4602      	mov	r2, r0
 801937a:	460b      	mov	r3, r1
 801937c:	e78f      	b.n	801929e <__ieee754_pow+0xfe>
 801937e:	9b04      	ldr	r3, [sp, #16]
 8019380:	2b01      	cmp	r3, #1
 8019382:	f47f af2c 	bne.w	80191de <__ieee754_pow+0x3e>
 8019386:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801938a:	4619      	mov	r1, r3
 801938c:	e727      	b.n	80191de <__ieee754_pow+0x3e>
 801938e:	0feb      	lsrs	r3, r5, #31
 8019390:	3b01      	subs	r3, #1
 8019392:	9306      	str	r3, [sp, #24]
 8019394:	9a06      	ldr	r2, [sp, #24]
 8019396:	9b04      	ldr	r3, [sp, #16]
 8019398:	4313      	orrs	r3, r2
 801939a:	d102      	bne.n	80193a2 <__ieee754_pow+0x202>
 801939c:	4632      	mov	r2, r6
 801939e:	463b      	mov	r3, r7
 80193a0:	e7e6      	b.n	8019370 <__ieee754_pow+0x1d0>
 80193a2:	4b19      	ldr	r3, [pc, #100]	; (8019408 <__ieee754_pow+0x268>)
 80193a4:	4598      	cmp	r8, r3
 80193a6:	f340 80fb 	ble.w	80195a0 <__ieee754_pow+0x400>
 80193aa:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80193ae:	4598      	cmp	r8, r3
 80193b0:	4b13      	ldr	r3, [pc, #76]	; (8019400 <__ieee754_pow+0x260>)
 80193b2:	dd0c      	ble.n	80193ce <__ieee754_pow+0x22e>
 80193b4:	429c      	cmp	r4, r3
 80193b6:	dc0f      	bgt.n	80193d8 <__ieee754_pow+0x238>
 80193b8:	f1b9 0f00 	cmp.w	r9, #0
 80193bc:	da0f      	bge.n	80193de <__ieee754_pow+0x23e>
 80193be:	2000      	movs	r0, #0
 80193c0:	b009      	add	sp, #36	; 0x24
 80193c2:	ecbd 8b06 	vpop	{d8-d10}
 80193c6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80193ca:	f000 bf09 	b.w	801a1e0 <__math_oflow>
 80193ce:	429c      	cmp	r4, r3
 80193d0:	dbf2      	blt.n	80193b8 <__ieee754_pow+0x218>
 80193d2:	4b0a      	ldr	r3, [pc, #40]	; (80193fc <__ieee754_pow+0x25c>)
 80193d4:	429c      	cmp	r4, r3
 80193d6:	dd19      	ble.n	801940c <__ieee754_pow+0x26c>
 80193d8:	f1b9 0f00 	cmp.w	r9, #0
 80193dc:	dcef      	bgt.n	80193be <__ieee754_pow+0x21e>
 80193de:	2000      	movs	r0, #0
 80193e0:	b009      	add	sp, #36	; 0x24
 80193e2:	ecbd 8b06 	vpop	{d8-d10}
 80193e6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80193ea:	f000 bef0 	b.w	801a1ce <__math_uflow>
 80193ee:	bf00      	nop
 80193f0:	fff00000 	.word	0xfff00000
 80193f4:	7ff00000 	.word	0x7ff00000
 80193f8:	433fffff 	.word	0x433fffff
 80193fc:	3ff00000 	.word	0x3ff00000
 8019400:	3fefffff 	.word	0x3fefffff
 8019404:	3fe00000 	.word	0x3fe00000
 8019408:	41e00000 	.word	0x41e00000
 801940c:	4b60      	ldr	r3, [pc, #384]	; (8019590 <__ieee754_pow+0x3f0>)
 801940e:	2200      	movs	r2, #0
 8019410:	f7e6 ff44 	bl	800029c <__aeabi_dsub>
 8019414:	a354      	add	r3, pc, #336	; (adr r3, 8019568 <__ieee754_pow+0x3c8>)
 8019416:	e9d3 2300 	ldrd	r2, r3, [r3]
 801941a:	4604      	mov	r4, r0
 801941c:	460d      	mov	r5, r1
 801941e:	f7e7 f8f5 	bl	800060c <__aeabi_dmul>
 8019422:	a353      	add	r3, pc, #332	; (adr r3, 8019570 <__ieee754_pow+0x3d0>)
 8019424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019428:	4606      	mov	r6, r0
 801942a:	460f      	mov	r7, r1
 801942c:	4620      	mov	r0, r4
 801942e:	4629      	mov	r1, r5
 8019430:	f7e7 f8ec 	bl	800060c <__aeabi_dmul>
 8019434:	4b57      	ldr	r3, [pc, #348]	; (8019594 <__ieee754_pow+0x3f4>)
 8019436:	4682      	mov	sl, r0
 8019438:	468b      	mov	fp, r1
 801943a:	2200      	movs	r2, #0
 801943c:	4620      	mov	r0, r4
 801943e:	4629      	mov	r1, r5
 8019440:	f7e7 f8e4 	bl	800060c <__aeabi_dmul>
 8019444:	4602      	mov	r2, r0
 8019446:	460b      	mov	r3, r1
 8019448:	a14b      	add	r1, pc, #300	; (adr r1, 8019578 <__ieee754_pow+0x3d8>)
 801944a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801944e:	f7e6 ff25 	bl	800029c <__aeabi_dsub>
 8019452:	4622      	mov	r2, r4
 8019454:	462b      	mov	r3, r5
 8019456:	f7e7 f8d9 	bl	800060c <__aeabi_dmul>
 801945a:	4602      	mov	r2, r0
 801945c:	460b      	mov	r3, r1
 801945e:	2000      	movs	r0, #0
 8019460:	494d      	ldr	r1, [pc, #308]	; (8019598 <__ieee754_pow+0x3f8>)
 8019462:	f7e6 ff1b 	bl	800029c <__aeabi_dsub>
 8019466:	4622      	mov	r2, r4
 8019468:	4680      	mov	r8, r0
 801946a:	4689      	mov	r9, r1
 801946c:	462b      	mov	r3, r5
 801946e:	4620      	mov	r0, r4
 8019470:	4629      	mov	r1, r5
 8019472:	f7e7 f8cb 	bl	800060c <__aeabi_dmul>
 8019476:	4602      	mov	r2, r0
 8019478:	460b      	mov	r3, r1
 801947a:	4640      	mov	r0, r8
 801947c:	4649      	mov	r1, r9
 801947e:	f7e7 f8c5 	bl	800060c <__aeabi_dmul>
 8019482:	a33f      	add	r3, pc, #252	; (adr r3, 8019580 <__ieee754_pow+0x3e0>)
 8019484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019488:	f7e7 f8c0 	bl	800060c <__aeabi_dmul>
 801948c:	4602      	mov	r2, r0
 801948e:	460b      	mov	r3, r1
 8019490:	4650      	mov	r0, sl
 8019492:	4659      	mov	r1, fp
 8019494:	f7e6 ff02 	bl	800029c <__aeabi_dsub>
 8019498:	4602      	mov	r2, r0
 801949a:	460b      	mov	r3, r1
 801949c:	4680      	mov	r8, r0
 801949e:	4689      	mov	r9, r1
 80194a0:	4630      	mov	r0, r6
 80194a2:	4639      	mov	r1, r7
 80194a4:	f7e6 fefc 	bl	80002a0 <__adddf3>
 80194a8:	2000      	movs	r0, #0
 80194aa:	4632      	mov	r2, r6
 80194ac:	463b      	mov	r3, r7
 80194ae:	4604      	mov	r4, r0
 80194b0:	460d      	mov	r5, r1
 80194b2:	f7e6 fef3 	bl	800029c <__aeabi_dsub>
 80194b6:	4602      	mov	r2, r0
 80194b8:	460b      	mov	r3, r1
 80194ba:	4640      	mov	r0, r8
 80194bc:	4649      	mov	r1, r9
 80194be:	f7e6 feed 	bl	800029c <__aeabi_dsub>
 80194c2:	9b04      	ldr	r3, [sp, #16]
 80194c4:	9a06      	ldr	r2, [sp, #24]
 80194c6:	3b01      	subs	r3, #1
 80194c8:	4313      	orrs	r3, r2
 80194ca:	4682      	mov	sl, r0
 80194cc:	468b      	mov	fp, r1
 80194ce:	f040 81e7 	bne.w	80198a0 <__ieee754_pow+0x700>
 80194d2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8019588 <__ieee754_pow+0x3e8>
 80194d6:	eeb0 8a47 	vmov.f32	s16, s14
 80194da:	eef0 8a67 	vmov.f32	s17, s15
 80194de:	e9dd 6700 	ldrd	r6, r7, [sp]
 80194e2:	2600      	movs	r6, #0
 80194e4:	4632      	mov	r2, r6
 80194e6:	463b      	mov	r3, r7
 80194e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80194ec:	f7e6 fed6 	bl	800029c <__aeabi_dsub>
 80194f0:	4622      	mov	r2, r4
 80194f2:	462b      	mov	r3, r5
 80194f4:	f7e7 f88a 	bl	800060c <__aeabi_dmul>
 80194f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80194fc:	4680      	mov	r8, r0
 80194fe:	4689      	mov	r9, r1
 8019500:	4650      	mov	r0, sl
 8019502:	4659      	mov	r1, fp
 8019504:	f7e7 f882 	bl	800060c <__aeabi_dmul>
 8019508:	4602      	mov	r2, r0
 801950a:	460b      	mov	r3, r1
 801950c:	4640      	mov	r0, r8
 801950e:	4649      	mov	r1, r9
 8019510:	f7e6 fec6 	bl	80002a0 <__adddf3>
 8019514:	4632      	mov	r2, r6
 8019516:	463b      	mov	r3, r7
 8019518:	4680      	mov	r8, r0
 801951a:	4689      	mov	r9, r1
 801951c:	4620      	mov	r0, r4
 801951e:	4629      	mov	r1, r5
 8019520:	f7e7 f874 	bl	800060c <__aeabi_dmul>
 8019524:	460b      	mov	r3, r1
 8019526:	4604      	mov	r4, r0
 8019528:	460d      	mov	r5, r1
 801952a:	4602      	mov	r2, r0
 801952c:	4649      	mov	r1, r9
 801952e:	4640      	mov	r0, r8
 8019530:	f7e6 feb6 	bl	80002a0 <__adddf3>
 8019534:	4b19      	ldr	r3, [pc, #100]	; (801959c <__ieee754_pow+0x3fc>)
 8019536:	4299      	cmp	r1, r3
 8019538:	ec45 4b19 	vmov	d9, r4, r5
 801953c:	4606      	mov	r6, r0
 801953e:	460f      	mov	r7, r1
 8019540:	468b      	mov	fp, r1
 8019542:	f340 82f1 	ble.w	8019b28 <__ieee754_pow+0x988>
 8019546:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801954a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801954e:	4303      	orrs	r3, r0
 8019550:	f000 81e4 	beq.w	801991c <__ieee754_pow+0x77c>
 8019554:	ec51 0b18 	vmov	r0, r1, d8
 8019558:	2200      	movs	r2, #0
 801955a:	2300      	movs	r3, #0
 801955c:	f7e7 fac8 	bl	8000af0 <__aeabi_dcmplt>
 8019560:	3800      	subs	r0, #0
 8019562:	bf18      	it	ne
 8019564:	2001      	movne	r0, #1
 8019566:	e72b      	b.n	80193c0 <__ieee754_pow+0x220>
 8019568:	60000000 	.word	0x60000000
 801956c:	3ff71547 	.word	0x3ff71547
 8019570:	f85ddf44 	.word	0xf85ddf44
 8019574:	3e54ae0b 	.word	0x3e54ae0b
 8019578:	55555555 	.word	0x55555555
 801957c:	3fd55555 	.word	0x3fd55555
 8019580:	652b82fe 	.word	0x652b82fe
 8019584:	3ff71547 	.word	0x3ff71547
 8019588:	00000000 	.word	0x00000000
 801958c:	bff00000 	.word	0xbff00000
 8019590:	3ff00000 	.word	0x3ff00000
 8019594:	3fd00000 	.word	0x3fd00000
 8019598:	3fe00000 	.word	0x3fe00000
 801959c:	408fffff 	.word	0x408fffff
 80195a0:	4bd5      	ldr	r3, [pc, #852]	; (80198f8 <__ieee754_pow+0x758>)
 80195a2:	402b      	ands	r3, r5
 80195a4:	2200      	movs	r2, #0
 80195a6:	b92b      	cbnz	r3, 80195b4 <__ieee754_pow+0x414>
 80195a8:	4bd4      	ldr	r3, [pc, #848]	; (80198fc <__ieee754_pow+0x75c>)
 80195aa:	f7e7 f82f 	bl	800060c <__aeabi_dmul>
 80195ae:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80195b2:	460c      	mov	r4, r1
 80195b4:	1523      	asrs	r3, r4, #20
 80195b6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80195ba:	4413      	add	r3, r2
 80195bc:	9305      	str	r3, [sp, #20]
 80195be:	4bd0      	ldr	r3, [pc, #832]	; (8019900 <__ieee754_pow+0x760>)
 80195c0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80195c4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80195c8:	429c      	cmp	r4, r3
 80195ca:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80195ce:	dd08      	ble.n	80195e2 <__ieee754_pow+0x442>
 80195d0:	4bcc      	ldr	r3, [pc, #816]	; (8019904 <__ieee754_pow+0x764>)
 80195d2:	429c      	cmp	r4, r3
 80195d4:	f340 8162 	ble.w	801989c <__ieee754_pow+0x6fc>
 80195d8:	9b05      	ldr	r3, [sp, #20]
 80195da:	3301      	adds	r3, #1
 80195dc:	9305      	str	r3, [sp, #20]
 80195de:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80195e2:	2400      	movs	r4, #0
 80195e4:	00e3      	lsls	r3, r4, #3
 80195e6:	9307      	str	r3, [sp, #28]
 80195e8:	4bc7      	ldr	r3, [pc, #796]	; (8019908 <__ieee754_pow+0x768>)
 80195ea:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80195ee:	ed93 7b00 	vldr	d7, [r3]
 80195f2:	4629      	mov	r1, r5
 80195f4:	ec53 2b17 	vmov	r2, r3, d7
 80195f8:	eeb0 9a47 	vmov.f32	s18, s14
 80195fc:	eef0 9a67 	vmov.f32	s19, s15
 8019600:	4682      	mov	sl, r0
 8019602:	f7e6 fe4b 	bl	800029c <__aeabi_dsub>
 8019606:	4652      	mov	r2, sl
 8019608:	4606      	mov	r6, r0
 801960a:	460f      	mov	r7, r1
 801960c:	462b      	mov	r3, r5
 801960e:	ec51 0b19 	vmov	r0, r1, d9
 8019612:	f7e6 fe45 	bl	80002a0 <__adddf3>
 8019616:	4602      	mov	r2, r0
 8019618:	460b      	mov	r3, r1
 801961a:	2000      	movs	r0, #0
 801961c:	49bb      	ldr	r1, [pc, #748]	; (801990c <__ieee754_pow+0x76c>)
 801961e:	f7e7 f91f 	bl	8000860 <__aeabi_ddiv>
 8019622:	ec41 0b1a 	vmov	d10, r0, r1
 8019626:	4602      	mov	r2, r0
 8019628:	460b      	mov	r3, r1
 801962a:	4630      	mov	r0, r6
 801962c:	4639      	mov	r1, r7
 801962e:	f7e6 ffed 	bl	800060c <__aeabi_dmul>
 8019632:	2300      	movs	r3, #0
 8019634:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8019638:	9302      	str	r3, [sp, #8]
 801963a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801963e:	46ab      	mov	fp, r5
 8019640:	106d      	asrs	r5, r5, #1
 8019642:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8019646:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801964a:	ec41 0b18 	vmov	d8, r0, r1
 801964e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8019652:	2200      	movs	r2, #0
 8019654:	4640      	mov	r0, r8
 8019656:	4649      	mov	r1, r9
 8019658:	4614      	mov	r4, r2
 801965a:	461d      	mov	r5, r3
 801965c:	f7e6 ffd6 	bl	800060c <__aeabi_dmul>
 8019660:	4602      	mov	r2, r0
 8019662:	460b      	mov	r3, r1
 8019664:	4630      	mov	r0, r6
 8019666:	4639      	mov	r1, r7
 8019668:	f7e6 fe18 	bl	800029c <__aeabi_dsub>
 801966c:	ec53 2b19 	vmov	r2, r3, d9
 8019670:	4606      	mov	r6, r0
 8019672:	460f      	mov	r7, r1
 8019674:	4620      	mov	r0, r4
 8019676:	4629      	mov	r1, r5
 8019678:	f7e6 fe10 	bl	800029c <__aeabi_dsub>
 801967c:	4602      	mov	r2, r0
 801967e:	460b      	mov	r3, r1
 8019680:	4650      	mov	r0, sl
 8019682:	4659      	mov	r1, fp
 8019684:	f7e6 fe0a 	bl	800029c <__aeabi_dsub>
 8019688:	4642      	mov	r2, r8
 801968a:	464b      	mov	r3, r9
 801968c:	f7e6 ffbe 	bl	800060c <__aeabi_dmul>
 8019690:	4602      	mov	r2, r0
 8019692:	460b      	mov	r3, r1
 8019694:	4630      	mov	r0, r6
 8019696:	4639      	mov	r1, r7
 8019698:	f7e6 fe00 	bl	800029c <__aeabi_dsub>
 801969c:	ec53 2b1a 	vmov	r2, r3, d10
 80196a0:	f7e6 ffb4 	bl	800060c <__aeabi_dmul>
 80196a4:	ec53 2b18 	vmov	r2, r3, d8
 80196a8:	ec41 0b19 	vmov	d9, r0, r1
 80196ac:	ec51 0b18 	vmov	r0, r1, d8
 80196b0:	f7e6 ffac 	bl	800060c <__aeabi_dmul>
 80196b4:	a37c      	add	r3, pc, #496	; (adr r3, 80198a8 <__ieee754_pow+0x708>)
 80196b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80196ba:	4604      	mov	r4, r0
 80196bc:	460d      	mov	r5, r1
 80196be:	f7e6 ffa5 	bl	800060c <__aeabi_dmul>
 80196c2:	a37b      	add	r3, pc, #492	; (adr r3, 80198b0 <__ieee754_pow+0x710>)
 80196c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80196c8:	f7e6 fdea 	bl	80002a0 <__adddf3>
 80196cc:	4622      	mov	r2, r4
 80196ce:	462b      	mov	r3, r5
 80196d0:	f7e6 ff9c 	bl	800060c <__aeabi_dmul>
 80196d4:	a378      	add	r3, pc, #480	; (adr r3, 80198b8 <__ieee754_pow+0x718>)
 80196d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80196da:	f7e6 fde1 	bl	80002a0 <__adddf3>
 80196de:	4622      	mov	r2, r4
 80196e0:	462b      	mov	r3, r5
 80196e2:	f7e6 ff93 	bl	800060c <__aeabi_dmul>
 80196e6:	a376      	add	r3, pc, #472	; (adr r3, 80198c0 <__ieee754_pow+0x720>)
 80196e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80196ec:	f7e6 fdd8 	bl	80002a0 <__adddf3>
 80196f0:	4622      	mov	r2, r4
 80196f2:	462b      	mov	r3, r5
 80196f4:	f7e6 ff8a 	bl	800060c <__aeabi_dmul>
 80196f8:	a373      	add	r3, pc, #460	; (adr r3, 80198c8 <__ieee754_pow+0x728>)
 80196fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80196fe:	f7e6 fdcf 	bl	80002a0 <__adddf3>
 8019702:	4622      	mov	r2, r4
 8019704:	462b      	mov	r3, r5
 8019706:	f7e6 ff81 	bl	800060c <__aeabi_dmul>
 801970a:	a371      	add	r3, pc, #452	; (adr r3, 80198d0 <__ieee754_pow+0x730>)
 801970c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019710:	f7e6 fdc6 	bl	80002a0 <__adddf3>
 8019714:	4622      	mov	r2, r4
 8019716:	4606      	mov	r6, r0
 8019718:	460f      	mov	r7, r1
 801971a:	462b      	mov	r3, r5
 801971c:	4620      	mov	r0, r4
 801971e:	4629      	mov	r1, r5
 8019720:	f7e6 ff74 	bl	800060c <__aeabi_dmul>
 8019724:	4602      	mov	r2, r0
 8019726:	460b      	mov	r3, r1
 8019728:	4630      	mov	r0, r6
 801972a:	4639      	mov	r1, r7
 801972c:	f7e6 ff6e 	bl	800060c <__aeabi_dmul>
 8019730:	4642      	mov	r2, r8
 8019732:	4604      	mov	r4, r0
 8019734:	460d      	mov	r5, r1
 8019736:	464b      	mov	r3, r9
 8019738:	ec51 0b18 	vmov	r0, r1, d8
 801973c:	f7e6 fdb0 	bl	80002a0 <__adddf3>
 8019740:	ec53 2b19 	vmov	r2, r3, d9
 8019744:	f7e6 ff62 	bl	800060c <__aeabi_dmul>
 8019748:	4622      	mov	r2, r4
 801974a:	462b      	mov	r3, r5
 801974c:	f7e6 fda8 	bl	80002a0 <__adddf3>
 8019750:	4642      	mov	r2, r8
 8019752:	4682      	mov	sl, r0
 8019754:	468b      	mov	fp, r1
 8019756:	464b      	mov	r3, r9
 8019758:	4640      	mov	r0, r8
 801975a:	4649      	mov	r1, r9
 801975c:	f7e6 ff56 	bl	800060c <__aeabi_dmul>
 8019760:	4b6b      	ldr	r3, [pc, #428]	; (8019910 <__ieee754_pow+0x770>)
 8019762:	2200      	movs	r2, #0
 8019764:	4606      	mov	r6, r0
 8019766:	460f      	mov	r7, r1
 8019768:	f7e6 fd9a 	bl	80002a0 <__adddf3>
 801976c:	4652      	mov	r2, sl
 801976e:	465b      	mov	r3, fp
 8019770:	f7e6 fd96 	bl	80002a0 <__adddf3>
 8019774:	2000      	movs	r0, #0
 8019776:	4604      	mov	r4, r0
 8019778:	460d      	mov	r5, r1
 801977a:	4602      	mov	r2, r0
 801977c:	460b      	mov	r3, r1
 801977e:	4640      	mov	r0, r8
 8019780:	4649      	mov	r1, r9
 8019782:	f7e6 ff43 	bl	800060c <__aeabi_dmul>
 8019786:	4b62      	ldr	r3, [pc, #392]	; (8019910 <__ieee754_pow+0x770>)
 8019788:	4680      	mov	r8, r0
 801978a:	4689      	mov	r9, r1
 801978c:	2200      	movs	r2, #0
 801978e:	4620      	mov	r0, r4
 8019790:	4629      	mov	r1, r5
 8019792:	f7e6 fd83 	bl	800029c <__aeabi_dsub>
 8019796:	4632      	mov	r2, r6
 8019798:	463b      	mov	r3, r7
 801979a:	f7e6 fd7f 	bl	800029c <__aeabi_dsub>
 801979e:	4602      	mov	r2, r0
 80197a0:	460b      	mov	r3, r1
 80197a2:	4650      	mov	r0, sl
 80197a4:	4659      	mov	r1, fp
 80197a6:	f7e6 fd79 	bl	800029c <__aeabi_dsub>
 80197aa:	ec53 2b18 	vmov	r2, r3, d8
 80197ae:	f7e6 ff2d 	bl	800060c <__aeabi_dmul>
 80197b2:	4622      	mov	r2, r4
 80197b4:	4606      	mov	r6, r0
 80197b6:	460f      	mov	r7, r1
 80197b8:	462b      	mov	r3, r5
 80197ba:	ec51 0b19 	vmov	r0, r1, d9
 80197be:	f7e6 ff25 	bl	800060c <__aeabi_dmul>
 80197c2:	4602      	mov	r2, r0
 80197c4:	460b      	mov	r3, r1
 80197c6:	4630      	mov	r0, r6
 80197c8:	4639      	mov	r1, r7
 80197ca:	f7e6 fd69 	bl	80002a0 <__adddf3>
 80197ce:	4606      	mov	r6, r0
 80197d0:	460f      	mov	r7, r1
 80197d2:	4602      	mov	r2, r0
 80197d4:	460b      	mov	r3, r1
 80197d6:	4640      	mov	r0, r8
 80197d8:	4649      	mov	r1, r9
 80197da:	f7e6 fd61 	bl	80002a0 <__adddf3>
 80197de:	a33e      	add	r3, pc, #248	; (adr r3, 80198d8 <__ieee754_pow+0x738>)
 80197e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80197e4:	2000      	movs	r0, #0
 80197e6:	4604      	mov	r4, r0
 80197e8:	460d      	mov	r5, r1
 80197ea:	f7e6 ff0f 	bl	800060c <__aeabi_dmul>
 80197ee:	4642      	mov	r2, r8
 80197f0:	ec41 0b18 	vmov	d8, r0, r1
 80197f4:	464b      	mov	r3, r9
 80197f6:	4620      	mov	r0, r4
 80197f8:	4629      	mov	r1, r5
 80197fa:	f7e6 fd4f 	bl	800029c <__aeabi_dsub>
 80197fe:	4602      	mov	r2, r0
 8019800:	460b      	mov	r3, r1
 8019802:	4630      	mov	r0, r6
 8019804:	4639      	mov	r1, r7
 8019806:	f7e6 fd49 	bl	800029c <__aeabi_dsub>
 801980a:	a335      	add	r3, pc, #212	; (adr r3, 80198e0 <__ieee754_pow+0x740>)
 801980c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019810:	f7e6 fefc 	bl	800060c <__aeabi_dmul>
 8019814:	a334      	add	r3, pc, #208	; (adr r3, 80198e8 <__ieee754_pow+0x748>)
 8019816:	e9d3 2300 	ldrd	r2, r3, [r3]
 801981a:	4606      	mov	r6, r0
 801981c:	460f      	mov	r7, r1
 801981e:	4620      	mov	r0, r4
 8019820:	4629      	mov	r1, r5
 8019822:	f7e6 fef3 	bl	800060c <__aeabi_dmul>
 8019826:	4602      	mov	r2, r0
 8019828:	460b      	mov	r3, r1
 801982a:	4630      	mov	r0, r6
 801982c:	4639      	mov	r1, r7
 801982e:	f7e6 fd37 	bl	80002a0 <__adddf3>
 8019832:	9a07      	ldr	r2, [sp, #28]
 8019834:	4b37      	ldr	r3, [pc, #220]	; (8019914 <__ieee754_pow+0x774>)
 8019836:	4413      	add	r3, r2
 8019838:	e9d3 2300 	ldrd	r2, r3, [r3]
 801983c:	f7e6 fd30 	bl	80002a0 <__adddf3>
 8019840:	4682      	mov	sl, r0
 8019842:	9805      	ldr	r0, [sp, #20]
 8019844:	468b      	mov	fp, r1
 8019846:	f7e6 fe77 	bl	8000538 <__aeabi_i2d>
 801984a:	9a07      	ldr	r2, [sp, #28]
 801984c:	4b32      	ldr	r3, [pc, #200]	; (8019918 <__ieee754_pow+0x778>)
 801984e:	4413      	add	r3, r2
 8019850:	e9d3 8900 	ldrd	r8, r9, [r3]
 8019854:	4606      	mov	r6, r0
 8019856:	460f      	mov	r7, r1
 8019858:	4652      	mov	r2, sl
 801985a:	465b      	mov	r3, fp
 801985c:	ec51 0b18 	vmov	r0, r1, d8
 8019860:	f7e6 fd1e 	bl	80002a0 <__adddf3>
 8019864:	4642      	mov	r2, r8
 8019866:	464b      	mov	r3, r9
 8019868:	f7e6 fd1a 	bl	80002a0 <__adddf3>
 801986c:	4632      	mov	r2, r6
 801986e:	463b      	mov	r3, r7
 8019870:	f7e6 fd16 	bl	80002a0 <__adddf3>
 8019874:	2000      	movs	r0, #0
 8019876:	4632      	mov	r2, r6
 8019878:	463b      	mov	r3, r7
 801987a:	4604      	mov	r4, r0
 801987c:	460d      	mov	r5, r1
 801987e:	f7e6 fd0d 	bl	800029c <__aeabi_dsub>
 8019882:	4642      	mov	r2, r8
 8019884:	464b      	mov	r3, r9
 8019886:	f7e6 fd09 	bl	800029c <__aeabi_dsub>
 801988a:	ec53 2b18 	vmov	r2, r3, d8
 801988e:	f7e6 fd05 	bl	800029c <__aeabi_dsub>
 8019892:	4602      	mov	r2, r0
 8019894:	460b      	mov	r3, r1
 8019896:	4650      	mov	r0, sl
 8019898:	4659      	mov	r1, fp
 801989a:	e610      	b.n	80194be <__ieee754_pow+0x31e>
 801989c:	2401      	movs	r4, #1
 801989e:	e6a1      	b.n	80195e4 <__ieee754_pow+0x444>
 80198a0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 80198f0 <__ieee754_pow+0x750>
 80198a4:	e617      	b.n	80194d6 <__ieee754_pow+0x336>
 80198a6:	bf00      	nop
 80198a8:	4a454eef 	.word	0x4a454eef
 80198ac:	3fca7e28 	.word	0x3fca7e28
 80198b0:	93c9db65 	.word	0x93c9db65
 80198b4:	3fcd864a 	.word	0x3fcd864a
 80198b8:	a91d4101 	.word	0xa91d4101
 80198bc:	3fd17460 	.word	0x3fd17460
 80198c0:	518f264d 	.word	0x518f264d
 80198c4:	3fd55555 	.word	0x3fd55555
 80198c8:	db6fabff 	.word	0xdb6fabff
 80198cc:	3fdb6db6 	.word	0x3fdb6db6
 80198d0:	33333303 	.word	0x33333303
 80198d4:	3fe33333 	.word	0x3fe33333
 80198d8:	e0000000 	.word	0xe0000000
 80198dc:	3feec709 	.word	0x3feec709
 80198e0:	dc3a03fd 	.word	0xdc3a03fd
 80198e4:	3feec709 	.word	0x3feec709
 80198e8:	145b01f5 	.word	0x145b01f5
 80198ec:	be3e2fe0 	.word	0xbe3e2fe0
 80198f0:	00000000 	.word	0x00000000
 80198f4:	3ff00000 	.word	0x3ff00000
 80198f8:	7ff00000 	.word	0x7ff00000
 80198fc:	43400000 	.word	0x43400000
 8019900:	0003988e 	.word	0x0003988e
 8019904:	000bb679 	.word	0x000bb679
 8019908:	0801d938 	.word	0x0801d938
 801990c:	3ff00000 	.word	0x3ff00000
 8019910:	40080000 	.word	0x40080000
 8019914:	0801d958 	.word	0x0801d958
 8019918:	0801d948 	.word	0x0801d948
 801991c:	a3b5      	add	r3, pc, #724	; (adr r3, 8019bf4 <__ieee754_pow+0xa54>)
 801991e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019922:	4640      	mov	r0, r8
 8019924:	4649      	mov	r1, r9
 8019926:	f7e6 fcbb 	bl	80002a0 <__adddf3>
 801992a:	4622      	mov	r2, r4
 801992c:	ec41 0b1a 	vmov	d10, r0, r1
 8019930:	462b      	mov	r3, r5
 8019932:	4630      	mov	r0, r6
 8019934:	4639      	mov	r1, r7
 8019936:	f7e6 fcb1 	bl	800029c <__aeabi_dsub>
 801993a:	4602      	mov	r2, r0
 801993c:	460b      	mov	r3, r1
 801993e:	ec51 0b1a 	vmov	r0, r1, d10
 8019942:	f7e7 f8f3 	bl	8000b2c <__aeabi_dcmpgt>
 8019946:	2800      	cmp	r0, #0
 8019948:	f47f ae04 	bne.w	8019554 <__ieee754_pow+0x3b4>
 801994c:	4aa4      	ldr	r2, [pc, #656]	; (8019be0 <__ieee754_pow+0xa40>)
 801994e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8019952:	4293      	cmp	r3, r2
 8019954:	f340 8108 	ble.w	8019b68 <__ieee754_pow+0x9c8>
 8019958:	151b      	asrs	r3, r3, #20
 801995a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801995e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8019962:	fa4a f303 	asr.w	r3, sl, r3
 8019966:	445b      	add	r3, fp
 8019968:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801996c:	4e9d      	ldr	r6, [pc, #628]	; (8019be4 <__ieee754_pow+0xa44>)
 801996e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8019972:	4116      	asrs	r6, r2
 8019974:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8019978:	2000      	movs	r0, #0
 801997a:	ea23 0106 	bic.w	r1, r3, r6
 801997e:	f1c2 0214 	rsb	r2, r2, #20
 8019982:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8019986:	fa4a fa02 	asr.w	sl, sl, r2
 801998a:	f1bb 0f00 	cmp.w	fp, #0
 801998e:	4602      	mov	r2, r0
 8019990:	460b      	mov	r3, r1
 8019992:	4620      	mov	r0, r4
 8019994:	4629      	mov	r1, r5
 8019996:	bfb8      	it	lt
 8019998:	f1ca 0a00 	rsblt	sl, sl, #0
 801999c:	f7e6 fc7e 	bl	800029c <__aeabi_dsub>
 80199a0:	ec41 0b19 	vmov	d9, r0, r1
 80199a4:	4642      	mov	r2, r8
 80199a6:	464b      	mov	r3, r9
 80199a8:	ec51 0b19 	vmov	r0, r1, d9
 80199ac:	f7e6 fc78 	bl	80002a0 <__adddf3>
 80199b0:	a37b      	add	r3, pc, #492	; (adr r3, 8019ba0 <__ieee754_pow+0xa00>)
 80199b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80199b6:	2000      	movs	r0, #0
 80199b8:	4604      	mov	r4, r0
 80199ba:	460d      	mov	r5, r1
 80199bc:	f7e6 fe26 	bl	800060c <__aeabi_dmul>
 80199c0:	ec53 2b19 	vmov	r2, r3, d9
 80199c4:	4606      	mov	r6, r0
 80199c6:	460f      	mov	r7, r1
 80199c8:	4620      	mov	r0, r4
 80199ca:	4629      	mov	r1, r5
 80199cc:	f7e6 fc66 	bl	800029c <__aeabi_dsub>
 80199d0:	4602      	mov	r2, r0
 80199d2:	460b      	mov	r3, r1
 80199d4:	4640      	mov	r0, r8
 80199d6:	4649      	mov	r1, r9
 80199d8:	f7e6 fc60 	bl	800029c <__aeabi_dsub>
 80199dc:	a372      	add	r3, pc, #456	; (adr r3, 8019ba8 <__ieee754_pow+0xa08>)
 80199de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80199e2:	f7e6 fe13 	bl	800060c <__aeabi_dmul>
 80199e6:	a372      	add	r3, pc, #456	; (adr r3, 8019bb0 <__ieee754_pow+0xa10>)
 80199e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80199ec:	4680      	mov	r8, r0
 80199ee:	4689      	mov	r9, r1
 80199f0:	4620      	mov	r0, r4
 80199f2:	4629      	mov	r1, r5
 80199f4:	f7e6 fe0a 	bl	800060c <__aeabi_dmul>
 80199f8:	4602      	mov	r2, r0
 80199fa:	460b      	mov	r3, r1
 80199fc:	4640      	mov	r0, r8
 80199fe:	4649      	mov	r1, r9
 8019a00:	f7e6 fc4e 	bl	80002a0 <__adddf3>
 8019a04:	4604      	mov	r4, r0
 8019a06:	460d      	mov	r5, r1
 8019a08:	4602      	mov	r2, r0
 8019a0a:	460b      	mov	r3, r1
 8019a0c:	4630      	mov	r0, r6
 8019a0e:	4639      	mov	r1, r7
 8019a10:	f7e6 fc46 	bl	80002a0 <__adddf3>
 8019a14:	4632      	mov	r2, r6
 8019a16:	463b      	mov	r3, r7
 8019a18:	4680      	mov	r8, r0
 8019a1a:	4689      	mov	r9, r1
 8019a1c:	f7e6 fc3e 	bl	800029c <__aeabi_dsub>
 8019a20:	4602      	mov	r2, r0
 8019a22:	460b      	mov	r3, r1
 8019a24:	4620      	mov	r0, r4
 8019a26:	4629      	mov	r1, r5
 8019a28:	f7e6 fc38 	bl	800029c <__aeabi_dsub>
 8019a2c:	4642      	mov	r2, r8
 8019a2e:	4606      	mov	r6, r0
 8019a30:	460f      	mov	r7, r1
 8019a32:	464b      	mov	r3, r9
 8019a34:	4640      	mov	r0, r8
 8019a36:	4649      	mov	r1, r9
 8019a38:	f7e6 fde8 	bl	800060c <__aeabi_dmul>
 8019a3c:	a35e      	add	r3, pc, #376	; (adr r3, 8019bb8 <__ieee754_pow+0xa18>)
 8019a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019a42:	4604      	mov	r4, r0
 8019a44:	460d      	mov	r5, r1
 8019a46:	f7e6 fde1 	bl	800060c <__aeabi_dmul>
 8019a4a:	a35d      	add	r3, pc, #372	; (adr r3, 8019bc0 <__ieee754_pow+0xa20>)
 8019a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019a50:	f7e6 fc24 	bl	800029c <__aeabi_dsub>
 8019a54:	4622      	mov	r2, r4
 8019a56:	462b      	mov	r3, r5
 8019a58:	f7e6 fdd8 	bl	800060c <__aeabi_dmul>
 8019a5c:	a35a      	add	r3, pc, #360	; (adr r3, 8019bc8 <__ieee754_pow+0xa28>)
 8019a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019a62:	f7e6 fc1d 	bl	80002a0 <__adddf3>
 8019a66:	4622      	mov	r2, r4
 8019a68:	462b      	mov	r3, r5
 8019a6a:	f7e6 fdcf 	bl	800060c <__aeabi_dmul>
 8019a6e:	a358      	add	r3, pc, #352	; (adr r3, 8019bd0 <__ieee754_pow+0xa30>)
 8019a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019a74:	f7e6 fc12 	bl	800029c <__aeabi_dsub>
 8019a78:	4622      	mov	r2, r4
 8019a7a:	462b      	mov	r3, r5
 8019a7c:	f7e6 fdc6 	bl	800060c <__aeabi_dmul>
 8019a80:	a355      	add	r3, pc, #340	; (adr r3, 8019bd8 <__ieee754_pow+0xa38>)
 8019a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019a86:	f7e6 fc0b 	bl	80002a0 <__adddf3>
 8019a8a:	4622      	mov	r2, r4
 8019a8c:	462b      	mov	r3, r5
 8019a8e:	f7e6 fdbd 	bl	800060c <__aeabi_dmul>
 8019a92:	4602      	mov	r2, r0
 8019a94:	460b      	mov	r3, r1
 8019a96:	4640      	mov	r0, r8
 8019a98:	4649      	mov	r1, r9
 8019a9a:	f7e6 fbff 	bl	800029c <__aeabi_dsub>
 8019a9e:	4604      	mov	r4, r0
 8019aa0:	460d      	mov	r5, r1
 8019aa2:	4602      	mov	r2, r0
 8019aa4:	460b      	mov	r3, r1
 8019aa6:	4640      	mov	r0, r8
 8019aa8:	4649      	mov	r1, r9
 8019aaa:	f7e6 fdaf 	bl	800060c <__aeabi_dmul>
 8019aae:	2200      	movs	r2, #0
 8019ab0:	ec41 0b19 	vmov	d9, r0, r1
 8019ab4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8019ab8:	4620      	mov	r0, r4
 8019aba:	4629      	mov	r1, r5
 8019abc:	f7e6 fbee 	bl	800029c <__aeabi_dsub>
 8019ac0:	4602      	mov	r2, r0
 8019ac2:	460b      	mov	r3, r1
 8019ac4:	ec51 0b19 	vmov	r0, r1, d9
 8019ac8:	f7e6 feca 	bl	8000860 <__aeabi_ddiv>
 8019acc:	4632      	mov	r2, r6
 8019ace:	4604      	mov	r4, r0
 8019ad0:	460d      	mov	r5, r1
 8019ad2:	463b      	mov	r3, r7
 8019ad4:	4640      	mov	r0, r8
 8019ad6:	4649      	mov	r1, r9
 8019ad8:	f7e6 fd98 	bl	800060c <__aeabi_dmul>
 8019adc:	4632      	mov	r2, r6
 8019ade:	463b      	mov	r3, r7
 8019ae0:	f7e6 fbde 	bl	80002a0 <__adddf3>
 8019ae4:	4602      	mov	r2, r0
 8019ae6:	460b      	mov	r3, r1
 8019ae8:	4620      	mov	r0, r4
 8019aea:	4629      	mov	r1, r5
 8019aec:	f7e6 fbd6 	bl	800029c <__aeabi_dsub>
 8019af0:	4642      	mov	r2, r8
 8019af2:	464b      	mov	r3, r9
 8019af4:	f7e6 fbd2 	bl	800029c <__aeabi_dsub>
 8019af8:	460b      	mov	r3, r1
 8019afa:	4602      	mov	r2, r0
 8019afc:	493a      	ldr	r1, [pc, #232]	; (8019be8 <__ieee754_pow+0xa48>)
 8019afe:	2000      	movs	r0, #0
 8019b00:	f7e6 fbcc 	bl	800029c <__aeabi_dsub>
 8019b04:	ec41 0b10 	vmov	d0, r0, r1
 8019b08:	ee10 3a90 	vmov	r3, s1
 8019b0c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8019b10:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8019b14:	da2b      	bge.n	8019b6e <__ieee754_pow+0x9ce>
 8019b16:	4650      	mov	r0, sl
 8019b18:	f000 fba2 	bl	801a260 <scalbn>
 8019b1c:	ec51 0b10 	vmov	r0, r1, d0
 8019b20:	ec53 2b18 	vmov	r2, r3, d8
 8019b24:	f7ff bbed 	b.w	8019302 <__ieee754_pow+0x162>
 8019b28:	4b30      	ldr	r3, [pc, #192]	; (8019bec <__ieee754_pow+0xa4c>)
 8019b2a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8019b2e:	429e      	cmp	r6, r3
 8019b30:	f77f af0c 	ble.w	801994c <__ieee754_pow+0x7ac>
 8019b34:	4b2e      	ldr	r3, [pc, #184]	; (8019bf0 <__ieee754_pow+0xa50>)
 8019b36:	440b      	add	r3, r1
 8019b38:	4303      	orrs	r3, r0
 8019b3a:	d009      	beq.n	8019b50 <__ieee754_pow+0x9b0>
 8019b3c:	ec51 0b18 	vmov	r0, r1, d8
 8019b40:	2200      	movs	r2, #0
 8019b42:	2300      	movs	r3, #0
 8019b44:	f7e6 ffd4 	bl	8000af0 <__aeabi_dcmplt>
 8019b48:	3800      	subs	r0, #0
 8019b4a:	bf18      	it	ne
 8019b4c:	2001      	movne	r0, #1
 8019b4e:	e447      	b.n	80193e0 <__ieee754_pow+0x240>
 8019b50:	4622      	mov	r2, r4
 8019b52:	462b      	mov	r3, r5
 8019b54:	f7e6 fba2 	bl	800029c <__aeabi_dsub>
 8019b58:	4642      	mov	r2, r8
 8019b5a:	464b      	mov	r3, r9
 8019b5c:	f7e6 ffdc 	bl	8000b18 <__aeabi_dcmpge>
 8019b60:	2800      	cmp	r0, #0
 8019b62:	f43f aef3 	beq.w	801994c <__ieee754_pow+0x7ac>
 8019b66:	e7e9      	b.n	8019b3c <__ieee754_pow+0x99c>
 8019b68:	f04f 0a00 	mov.w	sl, #0
 8019b6c:	e71a      	b.n	80199a4 <__ieee754_pow+0x804>
 8019b6e:	ec51 0b10 	vmov	r0, r1, d0
 8019b72:	4619      	mov	r1, r3
 8019b74:	e7d4      	b.n	8019b20 <__ieee754_pow+0x980>
 8019b76:	491c      	ldr	r1, [pc, #112]	; (8019be8 <__ieee754_pow+0xa48>)
 8019b78:	2000      	movs	r0, #0
 8019b7a:	f7ff bb30 	b.w	80191de <__ieee754_pow+0x3e>
 8019b7e:	2000      	movs	r0, #0
 8019b80:	2100      	movs	r1, #0
 8019b82:	f7ff bb2c 	b.w	80191de <__ieee754_pow+0x3e>
 8019b86:	4630      	mov	r0, r6
 8019b88:	4639      	mov	r1, r7
 8019b8a:	f7ff bb28 	b.w	80191de <__ieee754_pow+0x3e>
 8019b8e:	9204      	str	r2, [sp, #16]
 8019b90:	f7ff bb7a 	b.w	8019288 <__ieee754_pow+0xe8>
 8019b94:	2300      	movs	r3, #0
 8019b96:	f7ff bb64 	b.w	8019262 <__ieee754_pow+0xc2>
 8019b9a:	bf00      	nop
 8019b9c:	f3af 8000 	nop.w
 8019ba0:	00000000 	.word	0x00000000
 8019ba4:	3fe62e43 	.word	0x3fe62e43
 8019ba8:	fefa39ef 	.word	0xfefa39ef
 8019bac:	3fe62e42 	.word	0x3fe62e42
 8019bb0:	0ca86c39 	.word	0x0ca86c39
 8019bb4:	be205c61 	.word	0xbe205c61
 8019bb8:	72bea4d0 	.word	0x72bea4d0
 8019bbc:	3e663769 	.word	0x3e663769
 8019bc0:	c5d26bf1 	.word	0xc5d26bf1
 8019bc4:	3ebbbd41 	.word	0x3ebbbd41
 8019bc8:	af25de2c 	.word	0xaf25de2c
 8019bcc:	3f11566a 	.word	0x3f11566a
 8019bd0:	16bebd93 	.word	0x16bebd93
 8019bd4:	3f66c16c 	.word	0x3f66c16c
 8019bd8:	5555553e 	.word	0x5555553e
 8019bdc:	3fc55555 	.word	0x3fc55555
 8019be0:	3fe00000 	.word	0x3fe00000
 8019be4:	000fffff 	.word	0x000fffff
 8019be8:	3ff00000 	.word	0x3ff00000
 8019bec:	4090cbff 	.word	0x4090cbff
 8019bf0:	3f6f3400 	.word	0x3f6f3400
 8019bf4:	652b82fe 	.word	0x652b82fe
 8019bf8:	3c971547 	.word	0x3c971547

08019bfc <__ieee754_sqrt>:
 8019bfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019c00:	ec55 4b10 	vmov	r4, r5, d0
 8019c04:	4e55      	ldr	r6, [pc, #340]	; (8019d5c <__ieee754_sqrt+0x160>)
 8019c06:	43ae      	bics	r6, r5
 8019c08:	ee10 0a10 	vmov	r0, s0
 8019c0c:	ee10 3a10 	vmov	r3, s0
 8019c10:	462a      	mov	r2, r5
 8019c12:	4629      	mov	r1, r5
 8019c14:	d110      	bne.n	8019c38 <__ieee754_sqrt+0x3c>
 8019c16:	ee10 2a10 	vmov	r2, s0
 8019c1a:	462b      	mov	r3, r5
 8019c1c:	f7e6 fcf6 	bl	800060c <__aeabi_dmul>
 8019c20:	4602      	mov	r2, r0
 8019c22:	460b      	mov	r3, r1
 8019c24:	4620      	mov	r0, r4
 8019c26:	4629      	mov	r1, r5
 8019c28:	f7e6 fb3a 	bl	80002a0 <__adddf3>
 8019c2c:	4604      	mov	r4, r0
 8019c2e:	460d      	mov	r5, r1
 8019c30:	ec45 4b10 	vmov	d0, r4, r5
 8019c34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019c38:	2d00      	cmp	r5, #0
 8019c3a:	dc10      	bgt.n	8019c5e <__ieee754_sqrt+0x62>
 8019c3c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8019c40:	4330      	orrs	r0, r6
 8019c42:	d0f5      	beq.n	8019c30 <__ieee754_sqrt+0x34>
 8019c44:	b15d      	cbz	r5, 8019c5e <__ieee754_sqrt+0x62>
 8019c46:	ee10 2a10 	vmov	r2, s0
 8019c4a:	462b      	mov	r3, r5
 8019c4c:	ee10 0a10 	vmov	r0, s0
 8019c50:	f7e6 fb24 	bl	800029c <__aeabi_dsub>
 8019c54:	4602      	mov	r2, r0
 8019c56:	460b      	mov	r3, r1
 8019c58:	f7e6 fe02 	bl	8000860 <__aeabi_ddiv>
 8019c5c:	e7e6      	b.n	8019c2c <__ieee754_sqrt+0x30>
 8019c5e:	1512      	asrs	r2, r2, #20
 8019c60:	d074      	beq.n	8019d4c <__ieee754_sqrt+0x150>
 8019c62:	07d4      	lsls	r4, r2, #31
 8019c64:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8019c68:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8019c6c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8019c70:	bf5e      	ittt	pl
 8019c72:	0fda      	lsrpl	r2, r3, #31
 8019c74:	005b      	lslpl	r3, r3, #1
 8019c76:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8019c7a:	2400      	movs	r4, #0
 8019c7c:	0fda      	lsrs	r2, r3, #31
 8019c7e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8019c82:	107f      	asrs	r7, r7, #1
 8019c84:	005b      	lsls	r3, r3, #1
 8019c86:	2516      	movs	r5, #22
 8019c88:	4620      	mov	r0, r4
 8019c8a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8019c8e:	1886      	adds	r6, r0, r2
 8019c90:	428e      	cmp	r6, r1
 8019c92:	bfde      	ittt	le
 8019c94:	1b89      	suble	r1, r1, r6
 8019c96:	18b0      	addle	r0, r6, r2
 8019c98:	18a4      	addle	r4, r4, r2
 8019c9a:	0049      	lsls	r1, r1, #1
 8019c9c:	3d01      	subs	r5, #1
 8019c9e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8019ca2:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8019ca6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8019caa:	d1f0      	bne.n	8019c8e <__ieee754_sqrt+0x92>
 8019cac:	462a      	mov	r2, r5
 8019cae:	f04f 0e20 	mov.w	lr, #32
 8019cb2:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8019cb6:	4281      	cmp	r1, r0
 8019cb8:	eb06 0c05 	add.w	ip, r6, r5
 8019cbc:	dc02      	bgt.n	8019cc4 <__ieee754_sqrt+0xc8>
 8019cbe:	d113      	bne.n	8019ce8 <__ieee754_sqrt+0xec>
 8019cc0:	459c      	cmp	ip, r3
 8019cc2:	d811      	bhi.n	8019ce8 <__ieee754_sqrt+0xec>
 8019cc4:	f1bc 0f00 	cmp.w	ip, #0
 8019cc8:	eb0c 0506 	add.w	r5, ip, r6
 8019ccc:	da43      	bge.n	8019d56 <__ieee754_sqrt+0x15a>
 8019cce:	2d00      	cmp	r5, #0
 8019cd0:	db41      	blt.n	8019d56 <__ieee754_sqrt+0x15a>
 8019cd2:	f100 0801 	add.w	r8, r0, #1
 8019cd6:	1a09      	subs	r1, r1, r0
 8019cd8:	459c      	cmp	ip, r3
 8019cda:	bf88      	it	hi
 8019cdc:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8019ce0:	eba3 030c 	sub.w	r3, r3, ip
 8019ce4:	4432      	add	r2, r6
 8019ce6:	4640      	mov	r0, r8
 8019ce8:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8019cec:	f1be 0e01 	subs.w	lr, lr, #1
 8019cf0:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8019cf4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8019cf8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8019cfc:	d1db      	bne.n	8019cb6 <__ieee754_sqrt+0xba>
 8019cfe:	430b      	orrs	r3, r1
 8019d00:	d006      	beq.n	8019d10 <__ieee754_sqrt+0x114>
 8019d02:	1c50      	adds	r0, r2, #1
 8019d04:	bf13      	iteet	ne
 8019d06:	3201      	addne	r2, #1
 8019d08:	3401      	addeq	r4, #1
 8019d0a:	4672      	moveq	r2, lr
 8019d0c:	f022 0201 	bicne.w	r2, r2, #1
 8019d10:	1063      	asrs	r3, r4, #1
 8019d12:	0852      	lsrs	r2, r2, #1
 8019d14:	07e1      	lsls	r1, r4, #31
 8019d16:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8019d1a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8019d1e:	bf48      	it	mi
 8019d20:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8019d24:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8019d28:	4614      	mov	r4, r2
 8019d2a:	e781      	b.n	8019c30 <__ieee754_sqrt+0x34>
 8019d2c:	0ad9      	lsrs	r1, r3, #11
 8019d2e:	3815      	subs	r0, #21
 8019d30:	055b      	lsls	r3, r3, #21
 8019d32:	2900      	cmp	r1, #0
 8019d34:	d0fa      	beq.n	8019d2c <__ieee754_sqrt+0x130>
 8019d36:	02cd      	lsls	r5, r1, #11
 8019d38:	d50a      	bpl.n	8019d50 <__ieee754_sqrt+0x154>
 8019d3a:	f1c2 0420 	rsb	r4, r2, #32
 8019d3e:	fa23 f404 	lsr.w	r4, r3, r4
 8019d42:	1e55      	subs	r5, r2, #1
 8019d44:	4093      	lsls	r3, r2
 8019d46:	4321      	orrs	r1, r4
 8019d48:	1b42      	subs	r2, r0, r5
 8019d4a:	e78a      	b.n	8019c62 <__ieee754_sqrt+0x66>
 8019d4c:	4610      	mov	r0, r2
 8019d4e:	e7f0      	b.n	8019d32 <__ieee754_sqrt+0x136>
 8019d50:	0049      	lsls	r1, r1, #1
 8019d52:	3201      	adds	r2, #1
 8019d54:	e7ef      	b.n	8019d36 <__ieee754_sqrt+0x13a>
 8019d56:	4680      	mov	r8, r0
 8019d58:	e7bd      	b.n	8019cd6 <__ieee754_sqrt+0xda>
 8019d5a:	bf00      	nop
 8019d5c:	7ff00000 	.word	0x7ff00000

08019d60 <__ieee754_expf>:
 8019d60:	ee10 2a10 	vmov	r2, s0
 8019d64:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8019d68:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8019d6c:	d902      	bls.n	8019d74 <__ieee754_expf+0x14>
 8019d6e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8019d72:	4770      	bx	lr
 8019d74:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 8019d78:	d106      	bne.n	8019d88 <__ieee754_expf+0x28>
 8019d7a:	eddf 7a4e 	vldr	s15, [pc, #312]	; 8019eb4 <__ieee754_expf+0x154>
 8019d7e:	2b00      	cmp	r3, #0
 8019d80:	bf18      	it	ne
 8019d82:	eeb0 0a67 	vmovne.f32	s0, s15
 8019d86:	4770      	bx	lr
 8019d88:	484b      	ldr	r0, [pc, #300]	; (8019eb8 <__ieee754_expf+0x158>)
 8019d8a:	4282      	cmp	r2, r0
 8019d8c:	dd02      	ble.n	8019d94 <__ieee754_expf+0x34>
 8019d8e:	2000      	movs	r0, #0
 8019d90:	f000 ba4c 	b.w	801a22c <__math_oflowf>
 8019d94:	2a00      	cmp	r2, #0
 8019d96:	da05      	bge.n	8019da4 <__ieee754_expf+0x44>
 8019d98:	4a48      	ldr	r2, [pc, #288]	; (8019ebc <__ieee754_expf+0x15c>)
 8019d9a:	4291      	cmp	r1, r2
 8019d9c:	d902      	bls.n	8019da4 <__ieee754_expf+0x44>
 8019d9e:	2000      	movs	r0, #0
 8019da0:	f000 ba3e 	b.w	801a220 <__math_uflowf>
 8019da4:	4a46      	ldr	r2, [pc, #280]	; (8019ec0 <__ieee754_expf+0x160>)
 8019da6:	4291      	cmp	r1, r2
 8019da8:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8019dac:	d952      	bls.n	8019e54 <__ieee754_expf+0xf4>
 8019dae:	4a45      	ldr	r2, [pc, #276]	; (8019ec4 <__ieee754_expf+0x164>)
 8019db0:	4291      	cmp	r1, r2
 8019db2:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8019db6:	d834      	bhi.n	8019e22 <__ieee754_expf+0xc2>
 8019db8:	4943      	ldr	r1, [pc, #268]	; (8019ec8 <__ieee754_expf+0x168>)
 8019dba:	4411      	add	r1, r2
 8019dbc:	ed91 7a00 	vldr	s14, [r1]
 8019dc0:	4942      	ldr	r1, [pc, #264]	; (8019ecc <__ieee754_expf+0x16c>)
 8019dc2:	440a      	add	r2, r1
 8019dc4:	edd2 7a00 	vldr	s15, [r2]
 8019dc8:	ee30 7a47 	vsub.f32	s14, s0, s14
 8019dcc:	f1c3 0201 	rsb	r2, r3, #1
 8019dd0:	1ad2      	subs	r2, r2, r3
 8019dd2:	ee37 0a67 	vsub.f32	s0, s14, s15
 8019dd6:	ee20 6a00 	vmul.f32	s12, s0, s0
 8019dda:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 8019ed0 <__ieee754_expf+0x170>
 8019dde:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8019ed4 <__ieee754_expf+0x174>
 8019de2:	eee6 6a05 	vfma.f32	s13, s12, s10
 8019de6:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 8019ed8 <__ieee754_expf+0x178>
 8019dea:	eea6 5a86 	vfma.f32	s10, s13, s12
 8019dee:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8019edc <__ieee754_expf+0x17c>
 8019df2:	eee5 6a06 	vfma.f32	s13, s10, s12
 8019df6:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 8019ee0 <__ieee754_expf+0x180>
 8019dfa:	eea6 5a86 	vfma.f32	s10, s13, s12
 8019dfe:	eef0 6a40 	vmov.f32	s13, s0
 8019e02:	eee5 6a46 	vfms.f32	s13, s10, s12
 8019e06:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8019e0a:	ee20 5a26 	vmul.f32	s10, s0, s13
 8019e0e:	bb92      	cbnz	r2, 8019e76 <__ieee754_expf+0x116>
 8019e10:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8019e14:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8019e18:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8019e1c:	ee35 0ac0 	vsub.f32	s0, s11, s0
 8019e20:	4770      	bx	lr
 8019e22:	4b30      	ldr	r3, [pc, #192]	; (8019ee4 <__ieee754_expf+0x184>)
 8019e24:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8019ee8 <__ieee754_expf+0x188>
 8019e28:	eddf 6a30 	vldr	s13, [pc, #192]	; 8019eec <__ieee754_expf+0x18c>
 8019e2c:	4413      	add	r3, r2
 8019e2e:	edd3 7a00 	vldr	s15, [r3]
 8019e32:	eee0 7a07 	vfma.f32	s15, s0, s14
 8019e36:	eeb0 7a40 	vmov.f32	s14, s0
 8019e3a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019e3e:	ee17 2a90 	vmov	r2, s15
 8019e42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019e46:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8019e4a:	eddf 6a29 	vldr	s13, [pc, #164]	; 8019ef0 <__ieee754_expf+0x190>
 8019e4e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8019e52:	e7be      	b.n	8019dd2 <__ieee754_expf+0x72>
 8019e54:	f1b1 5f50 	cmp.w	r1, #872415232	; 0x34000000
 8019e58:	d20b      	bcs.n	8019e72 <__ieee754_expf+0x112>
 8019e5a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8019ef4 <__ieee754_expf+0x194>
 8019e5e:	ee70 6a26 	vadd.f32	s13, s0, s13
 8019e62:	eef4 6ae5 	vcmpe.f32	s13, s11
 8019e66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019e6a:	dd02      	ble.n	8019e72 <__ieee754_expf+0x112>
 8019e6c:	ee30 0a25 	vadd.f32	s0, s0, s11
 8019e70:	4770      	bx	lr
 8019e72:	2200      	movs	r2, #0
 8019e74:	e7af      	b.n	8019dd6 <__ieee754_expf+0x76>
 8019e76:	ee76 6a66 	vsub.f32	s13, s12, s13
 8019e7a:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 8019e7e:	ee85 0a26 	vdiv.f32	s0, s10, s13
 8019e82:	bfb8      	it	lt
 8019e84:	3264      	addlt	r2, #100	; 0x64
 8019e86:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8019e8a:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8019e8e:	ee75 7ac0 	vsub.f32	s15, s11, s0
 8019e92:	ee17 3a90 	vmov	r3, s15
 8019e96:	bfab      	itete	ge
 8019e98:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 8019e9c:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 8019ea0:	ee00 3a10 	vmovge	s0, r3
 8019ea4:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 8019ef8 <__ieee754_expf+0x198>
 8019ea8:	bfbc      	itt	lt
 8019eaa:	ee00 3a10 	vmovlt	s0, r3
 8019eae:	ee20 0a27 	vmullt.f32	s0, s0, s15
 8019eb2:	4770      	bx	lr
 8019eb4:	00000000 	.word	0x00000000
 8019eb8:	42b17217 	.word	0x42b17217
 8019ebc:	42cff1b5 	.word	0x42cff1b5
 8019ec0:	3eb17218 	.word	0x3eb17218
 8019ec4:	3f851591 	.word	0x3f851591
 8019ec8:	0801d970 	.word	0x0801d970
 8019ecc:	0801d978 	.word	0x0801d978
 8019ed0:	3331bb4c 	.word	0x3331bb4c
 8019ed4:	b5ddea0e 	.word	0xb5ddea0e
 8019ed8:	388ab355 	.word	0x388ab355
 8019edc:	bb360b61 	.word	0xbb360b61
 8019ee0:	3e2aaaab 	.word	0x3e2aaaab
 8019ee4:	0801d968 	.word	0x0801d968
 8019ee8:	3fb8aa3b 	.word	0x3fb8aa3b
 8019eec:	3f317180 	.word	0x3f317180
 8019ef0:	3717f7d1 	.word	0x3717f7d1
 8019ef4:	7149f2ca 	.word	0x7149f2ca
 8019ef8:	0d800000 	.word	0x0d800000

08019efc <__ieee754_logf>:
 8019efc:	ee10 3a10 	vmov	r3, s0
 8019f00:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8019f04:	d106      	bne.n	8019f14 <__ieee754_logf+0x18>
 8019f06:	ed9f 7a65 	vldr	s14, [pc, #404]	; 801a09c <__ieee754_logf+0x1a0>
 8019f0a:	eddf 7a65 	vldr	s15, [pc, #404]	; 801a0a0 <__ieee754_logf+0x1a4>
 8019f0e:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8019f12:	4770      	bx	lr
 8019f14:	2b00      	cmp	r3, #0
 8019f16:	da02      	bge.n	8019f1e <__ieee754_logf+0x22>
 8019f18:	ee30 7a40 	vsub.f32	s14, s0, s0
 8019f1c:	e7f5      	b.n	8019f0a <__ieee754_logf+0xe>
 8019f1e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8019f22:	db02      	blt.n	8019f2a <__ieee754_logf+0x2e>
 8019f24:	ee30 0a00 	vadd.f32	s0, s0, s0
 8019f28:	4770      	bx	lr
 8019f2a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8019f2e:	bfb8      	it	lt
 8019f30:	eddf 7a5c 	vldrlt	s15, [pc, #368]	; 801a0a4 <__ieee754_logf+0x1a8>
 8019f34:	485c      	ldr	r0, [pc, #368]	; (801a0a8 <__ieee754_logf+0x1ac>)
 8019f36:	bfbe      	ittt	lt
 8019f38:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8019f3c:	f06f 0118 	mvnlt.w	r1, #24
 8019f40:	ee17 3a90 	vmovlt	r3, s15
 8019f44:	ea4f 52e3 	mov.w	r2, r3, asr #23
 8019f48:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8019f4c:	4418      	add	r0, r3
 8019f4e:	bfa8      	it	ge
 8019f50:	2100      	movge	r1, #0
 8019f52:	3a7f      	subs	r2, #127	; 0x7f
 8019f54:	440a      	add	r2, r1
 8019f56:	f400 0100 	and.w	r1, r0, #8388608	; 0x800000
 8019f5a:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 8019f5e:	4319      	orrs	r1, r3
 8019f60:	ee00 1a10 	vmov	s0, r1
 8019f64:	4951      	ldr	r1, [pc, #324]	; (801a0ac <__ieee754_logf+0x1b0>)
 8019f66:	eb02 52d0 	add.w	r2, r2, r0, lsr #23
 8019f6a:	f103 000f 	add.w	r0, r3, #15
 8019f6e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8019f72:	4001      	ands	r1, r0
 8019f74:	ee30 0a67 	vsub.f32	s0, s0, s15
 8019f78:	bb89      	cbnz	r1, 8019fde <__ieee754_logf+0xe2>
 8019f7a:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8019f7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019f82:	d10f      	bne.n	8019fa4 <__ieee754_logf+0xa8>
 8019f84:	2a00      	cmp	r2, #0
 8019f86:	f000 8085 	beq.w	801a094 <__ieee754_logf+0x198>
 8019f8a:	ee07 2a90 	vmov	s15, r2
 8019f8e:	ed9f 0a48 	vldr	s0, [pc, #288]	; 801a0b0 <__ieee754_logf+0x1b4>
 8019f92:	ed9f 7a48 	vldr	s14, [pc, #288]	; 801a0b4 <__ieee754_logf+0x1b8>
 8019f96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019f9a:	ee27 0a80 	vmul.f32	s0, s15, s0
 8019f9e:	eea7 0a87 	vfma.f32	s0, s15, s14
 8019fa2:	4770      	bx	lr
 8019fa4:	eddf 6a44 	vldr	s13, [pc, #272]	; 801a0b8 <__ieee754_logf+0x1bc>
 8019fa8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8019fac:	eee0 7a66 	vfms.f32	s15, s0, s13
 8019fb0:	ee20 7a00 	vmul.f32	s14, s0, s0
 8019fb4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8019fb8:	b912      	cbnz	r2, 8019fc0 <__ieee754_logf+0xc4>
 8019fba:	ee30 0a47 	vsub.f32	s0, s0, s14
 8019fbe:	4770      	bx	lr
 8019fc0:	ee07 2a90 	vmov	s15, r2
 8019fc4:	eddf 6a3a 	vldr	s13, [pc, #232]	; 801a0b0 <__ieee754_logf+0x1b4>
 8019fc8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019fcc:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8019fd0:	ee37 0a40 	vsub.f32	s0, s14, s0
 8019fd4:	ed9f 7a37 	vldr	s14, [pc, #220]	; 801a0b4 <__ieee754_logf+0x1b8>
 8019fd8:	ee97 0a87 	vfnms.f32	s0, s15, s14
 8019fdc:	4770      	bx	lr
 8019fde:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8019fe2:	ee70 7a27 	vadd.f32	s15, s0, s15
 8019fe6:	eddf 5a35 	vldr	s11, [pc, #212]	; 801a0bc <__ieee754_logf+0x1c0>
 8019fea:	eddf 4a35 	vldr	s9, [pc, #212]	; 801a0c0 <__ieee754_logf+0x1c4>
 8019fee:	4935      	ldr	r1, [pc, #212]	; (801a0c4 <__ieee754_logf+0x1c8>)
 8019ff0:	ee80 6a27 	vdiv.f32	s12, s0, s15
 8019ff4:	4419      	add	r1, r3
 8019ff6:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 8019ffa:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8019ffe:	430b      	orrs	r3, r1
 801a000:	2b00      	cmp	r3, #0
 801a002:	ee07 2a90 	vmov	s15, r2
 801a006:	ee26 5a06 	vmul.f32	s10, s12, s12
 801a00a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801a00e:	ee25 7a05 	vmul.f32	s14, s10, s10
 801a012:	eddf 7a2d 	vldr	s15, [pc, #180]	; 801a0c8 <__ieee754_logf+0x1cc>
 801a016:	eee7 7a25 	vfma.f32	s15, s14, s11
 801a01a:	eddf 5a2c 	vldr	s11, [pc, #176]	; 801a0cc <__ieee754_logf+0x1d0>
 801a01e:	eee7 5a87 	vfma.f32	s11, s15, s14
 801a022:	eddf 7a2b 	vldr	s15, [pc, #172]	; 801a0d0 <__ieee754_logf+0x1d4>
 801a026:	eee7 7a24 	vfma.f32	s15, s14, s9
 801a02a:	eddf 4a2a 	vldr	s9, [pc, #168]	; 801a0d4 <__ieee754_logf+0x1d8>
 801a02e:	eee7 4a87 	vfma.f32	s9, s15, s14
 801a032:	eddf 7a29 	vldr	s15, [pc, #164]	; 801a0d8 <__ieee754_logf+0x1dc>
 801a036:	eee4 7a87 	vfma.f32	s15, s9, s14
 801a03a:	ee67 7a85 	vmul.f32	s15, s15, s10
 801a03e:	eee5 7a87 	vfma.f32	s15, s11, s14
 801a042:	dd1c      	ble.n	801a07e <__ieee754_logf+0x182>
 801a044:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801a048:	ee20 7a07 	vmul.f32	s14, s0, s14
 801a04c:	ee27 7a00 	vmul.f32	s14, s14, s0
 801a050:	ee77 7a87 	vadd.f32	s15, s15, s14
 801a054:	ee67 7a86 	vmul.f32	s15, s15, s12
 801a058:	b922      	cbnz	r2, 801a064 <__ieee754_logf+0x168>
 801a05a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801a05e:	ee30 0a67 	vsub.f32	s0, s0, s15
 801a062:	4770      	bx	lr
 801a064:	ed9f 6a12 	vldr	s12, [pc, #72]	; 801a0b0 <__ieee754_logf+0x1b4>
 801a068:	eee6 7a86 	vfma.f32	s15, s13, s12
 801a06c:	ee77 7a67 	vsub.f32	s15, s14, s15
 801a070:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801a074:	eddf 7a0f 	vldr	s15, [pc, #60]	; 801a0b4 <__ieee754_logf+0x1b8>
 801a078:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 801a07c:	4770      	bx	lr
 801a07e:	ee70 7a67 	vsub.f32	s15, s0, s15
 801a082:	ee67 7a86 	vmul.f32	s15, s15, s12
 801a086:	2a00      	cmp	r2, #0
 801a088:	d0e9      	beq.n	801a05e <__ieee754_logf+0x162>
 801a08a:	ed9f 7a09 	vldr	s14, [pc, #36]	; 801a0b0 <__ieee754_logf+0x1b4>
 801a08e:	eee6 7ac7 	vfms.f32	s15, s13, s14
 801a092:	e7ed      	b.n	801a070 <__ieee754_logf+0x174>
 801a094:	ed9f 0a02 	vldr	s0, [pc, #8]	; 801a0a0 <__ieee754_logf+0x1a4>
 801a098:	4770      	bx	lr
 801a09a:	bf00      	nop
 801a09c:	cc000000 	.word	0xcc000000
 801a0a0:	00000000 	.word	0x00000000
 801a0a4:	4c000000 	.word	0x4c000000
 801a0a8:	004afb20 	.word	0x004afb20
 801a0ac:	007ffff0 	.word	0x007ffff0
 801a0b0:	3717f7d1 	.word	0x3717f7d1
 801a0b4:	3f317180 	.word	0x3f317180
 801a0b8:	3eaaaaab 	.word	0x3eaaaaab
 801a0bc:	3e1cd04f 	.word	0x3e1cd04f
 801a0c0:	3e178897 	.word	0x3e178897
 801a0c4:	ffcf5c30 	.word	0xffcf5c30
 801a0c8:	3e638e29 	.word	0x3e638e29
 801a0cc:	3ecccccd 	.word	0x3ecccccd
 801a0d0:	3e3a3325 	.word	0x3e3a3325
 801a0d4:	3e924925 	.word	0x3e924925
 801a0d8:	3f2aaaab 	.word	0x3f2aaaab

0801a0dc <__ieee754_log10f>:
 801a0dc:	b508      	push	{r3, lr}
 801a0de:	ee10 2a10 	vmov	r2, s0
 801a0e2:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 801a0e6:	ed2d 8b02 	vpush	{d8}
 801a0ea:	d108      	bne.n	801a0fe <__ieee754_log10f+0x22>
 801a0ec:	ed9f 7a21 	vldr	s14, [pc, #132]	; 801a174 <__ieee754_log10f+0x98>
 801a0f0:	eddf 7a21 	vldr	s15, [pc, #132]	; 801a178 <__ieee754_log10f+0x9c>
 801a0f4:	ee87 0a27 	vdiv.f32	s0, s14, s15
 801a0f8:	ecbd 8b02 	vpop	{d8}
 801a0fc:	bd08      	pop	{r3, pc}
 801a0fe:	2a00      	cmp	r2, #0
 801a100:	da02      	bge.n	801a108 <__ieee754_log10f+0x2c>
 801a102:	ee30 7a40 	vsub.f32	s14, s0, s0
 801a106:	e7f3      	b.n	801a0f0 <__ieee754_log10f+0x14>
 801a108:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 801a10c:	db02      	blt.n	801a114 <__ieee754_log10f+0x38>
 801a10e:	ee30 0a00 	vadd.f32	s0, s0, s0
 801a112:	e7f1      	b.n	801a0f8 <__ieee754_log10f+0x1c>
 801a114:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 801a118:	bfbf      	itttt	lt
 801a11a:	eddf 7a18 	vldrlt	s15, [pc, #96]	; 801a17c <__ieee754_log10f+0xa0>
 801a11e:	ee60 7a27 	vmullt.f32	s15, s0, s15
 801a122:	f06f 0118 	mvnlt.w	r1, #24
 801a126:	ee17 2a90 	vmovlt	r2, s15
 801a12a:	ea4f 53e2 	mov.w	r3, r2, asr #23
 801a12e:	bfa8      	it	ge
 801a130:	2100      	movge	r1, #0
 801a132:	3b7f      	subs	r3, #127	; 0x7f
 801a134:	440b      	add	r3, r1
 801a136:	0fd9      	lsrs	r1, r3, #31
 801a138:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 801a13c:	ee07 3a90 	vmov	s15, r3
 801a140:	f3c2 0216 	ubfx	r2, r2, #0, #23
 801a144:	f1c1 037f 	rsb	r3, r1, #127	; 0x7f
 801a148:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 801a14c:	ee00 3a10 	vmov	s0, r3
 801a150:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 801a154:	f7ff fed2 	bl	8019efc <__ieee754_logf>
 801a158:	eddf 7a09 	vldr	s15, [pc, #36]	; 801a180 <__ieee754_log10f+0xa4>
 801a15c:	ee20 0a27 	vmul.f32	s0, s0, s15
 801a160:	eddf 7a08 	vldr	s15, [pc, #32]	; 801a184 <__ieee754_log10f+0xa8>
 801a164:	eea8 0a27 	vfma.f32	s0, s16, s15
 801a168:	eddf 7a07 	vldr	s15, [pc, #28]	; 801a188 <__ieee754_log10f+0xac>
 801a16c:	eea8 0a27 	vfma.f32	s0, s16, s15
 801a170:	e7c2      	b.n	801a0f8 <__ieee754_log10f+0x1c>
 801a172:	bf00      	nop
 801a174:	cc000000 	.word	0xcc000000
 801a178:	00000000 	.word	0x00000000
 801a17c:	4c000000 	.word	0x4c000000
 801a180:	3ede5bd9 	.word	0x3ede5bd9
 801a184:	355427db 	.word	0x355427db
 801a188:	3e9a2080 	.word	0x3e9a2080

0801a18c <__ieee754_sqrtf>:
 801a18c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801a190:	4770      	bx	lr

0801a192 <with_errno>:
 801a192:	b570      	push	{r4, r5, r6, lr}
 801a194:	4604      	mov	r4, r0
 801a196:	460d      	mov	r5, r1
 801a198:	4616      	mov	r6, r2
 801a19a:	f000 f929 	bl	801a3f0 <__errno>
 801a19e:	4629      	mov	r1, r5
 801a1a0:	6006      	str	r6, [r0, #0]
 801a1a2:	4620      	mov	r0, r4
 801a1a4:	bd70      	pop	{r4, r5, r6, pc}

0801a1a6 <xflow>:
 801a1a6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a1a8:	4614      	mov	r4, r2
 801a1aa:	461d      	mov	r5, r3
 801a1ac:	b108      	cbz	r0, 801a1b2 <xflow+0xc>
 801a1ae:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801a1b2:	e9cd 2300 	strd	r2, r3, [sp]
 801a1b6:	e9dd 2300 	ldrd	r2, r3, [sp]
 801a1ba:	4620      	mov	r0, r4
 801a1bc:	4629      	mov	r1, r5
 801a1be:	f7e6 fa25 	bl	800060c <__aeabi_dmul>
 801a1c2:	2222      	movs	r2, #34	; 0x22
 801a1c4:	b003      	add	sp, #12
 801a1c6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a1ca:	f7ff bfe2 	b.w	801a192 <with_errno>

0801a1ce <__math_uflow>:
 801a1ce:	b508      	push	{r3, lr}
 801a1d0:	2200      	movs	r2, #0
 801a1d2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 801a1d6:	f7ff ffe6 	bl	801a1a6 <xflow>
 801a1da:	ec41 0b10 	vmov	d0, r0, r1
 801a1de:	bd08      	pop	{r3, pc}

0801a1e0 <__math_oflow>:
 801a1e0:	b508      	push	{r3, lr}
 801a1e2:	2200      	movs	r2, #0
 801a1e4:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 801a1e8:	f7ff ffdd 	bl	801a1a6 <xflow>
 801a1ec:	ec41 0b10 	vmov	d0, r0, r1
 801a1f0:	bd08      	pop	{r3, pc}

0801a1f2 <with_errnof>:
 801a1f2:	b513      	push	{r0, r1, r4, lr}
 801a1f4:	4604      	mov	r4, r0
 801a1f6:	ed8d 0a01 	vstr	s0, [sp, #4]
 801a1fa:	f000 f8f9 	bl	801a3f0 <__errno>
 801a1fe:	ed9d 0a01 	vldr	s0, [sp, #4]
 801a202:	6004      	str	r4, [r0, #0]
 801a204:	b002      	add	sp, #8
 801a206:	bd10      	pop	{r4, pc}

0801a208 <xflowf>:
 801a208:	b130      	cbz	r0, 801a218 <xflowf+0x10>
 801a20a:	eef1 7a40 	vneg.f32	s15, s0
 801a20e:	ee27 0a80 	vmul.f32	s0, s15, s0
 801a212:	2022      	movs	r0, #34	; 0x22
 801a214:	f7ff bfed 	b.w	801a1f2 <with_errnof>
 801a218:	eef0 7a40 	vmov.f32	s15, s0
 801a21c:	e7f7      	b.n	801a20e <xflowf+0x6>
	...

0801a220 <__math_uflowf>:
 801a220:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801a228 <__math_uflowf+0x8>
 801a224:	f7ff bff0 	b.w	801a208 <xflowf>
 801a228:	10000000 	.word	0x10000000

0801a22c <__math_oflowf>:
 801a22c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801a234 <__math_oflowf+0x8>
 801a230:	f7ff bfea 	b.w	801a208 <xflowf>
 801a234:	70000000 	.word	0x70000000

0801a238 <fabs>:
 801a238:	ec51 0b10 	vmov	r0, r1, d0
 801a23c:	ee10 2a10 	vmov	r2, s0
 801a240:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801a244:	ec43 2b10 	vmov	d0, r2, r3
 801a248:	4770      	bx	lr

0801a24a <finite>:
 801a24a:	b082      	sub	sp, #8
 801a24c:	ed8d 0b00 	vstr	d0, [sp]
 801a250:	9801      	ldr	r0, [sp, #4]
 801a252:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 801a256:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801a25a:	0fc0      	lsrs	r0, r0, #31
 801a25c:	b002      	add	sp, #8
 801a25e:	4770      	bx	lr

0801a260 <scalbn>:
 801a260:	b570      	push	{r4, r5, r6, lr}
 801a262:	ec55 4b10 	vmov	r4, r5, d0
 801a266:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801a26a:	4606      	mov	r6, r0
 801a26c:	462b      	mov	r3, r5
 801a26e:	b99a      	cbnz	r2, 801a298 <scalbn+0x38>
 801a270:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801a274:	4323      	orrs	r3, r4
 801a276:	d036      	beq.n	801a2e6 <scalbn+0x86>
 801a278:	4b39      	ldr	r3, [pc, #228]	; (801a360 <scalbn+0x100>)
 801a27a:	4629      	mov	r1, r5
 801a27c:	ee10 0a10 	vmov	r0, s0
 801a280:	2200      	movs	r2, #0
 801a282:	f7e6 f9c3 	bl	800060c <__aeabi_dmul>
 801a286:	4b37      	ldr	r3, [pc, #220]	; (801a364 <scalbn+0x104>)
 801a288:	429e      	cmp	r6, r3
 801a28a:	4604      	mov	r4, r0
 801a28c:	460d      	mov	r5, r1
 801a28e:	da10      	bge.n	801a2b2 <scalbn+0x52>
 801a290:	a32b      	add	r3, pc, #172	; (adr r3, 801a340 <scalbn+0xe0>)
 801a292:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a296:	e03a      	b.n	801a30e <scalbn+0xae>
 801a298:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801a29c:	428a      	cmp	r2, r1
 801a29e:	d10c      	bne.n	801a2ba <scalbn+0x5a>
 801a2a0:	ee10 2a10 	vmov	r2, s0
 801a2a4:	4620      	mov	r0, r4
 801a2a6:	4629      	mov	r1, r5
 801a2a8:	f7e5 fffa 	bl	80002a0 <__adddf3>
 801a2ac:	4604      	mov	r4, r0
 801a2ae:	460d      	mov	r5, r1
 801a2b0:	e019      	b.n	801a2e6 <scalbn+0x86>
 801a2b2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801a2b6:	460b      	mov	r3, r1
 801a2b8:	3a36      	subs	r2, #54	; 0x36
 801a2ba:	4432      	add	r2, r6
 801a2bc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801a2c0:	428a      	cmp	r2, r1
 801a2c2:	dd08      	ble.n	801a2d6 <scalbn+0x76>
 801a2c4:	2d00      	cmp	r5, #0
 801a2c6:	a120      	add	r1, pc, #128	; (adr r1, 801a348 <scalbn+0xe8>)
 801a2c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a2cc:	da1c      	bge.n	801a308 <scalbn+0xa8>
 801a2ce:	a120      	add	r1, pc, #128	; (adr r1, 801a350 <scalbn+0xf0>)
 801a2d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a2d4:	e018      	b.n	801a308 <scalbn+0xa8>
 801a2d6:	2a00      	cmp	r2, #0
 801a2d8:	dd08      	ble.n	801a2ec <scalbn+0x8c>
 801a2da:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801a2de:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801a2e2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801a2e6:	ec45 4b10 	vmov	d0, r4, r5
 801a2ea:	bd70      	pop	{r4, r5, r6, pc}
 801a2ec:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801a2f0:	da19      	bge.n	801a326 <scalbn+0xc6>
 801a2f2:	f24c 3350 	movw	r3, #50000	; 0xc350
 801a2f6:	429e      	cmp	r6, r3
 801a2f8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 801a2fc:	dd0a      	ble.n	801a314 <scalbn+0xb4>
 801a2fe:	a112      	add	r1, pc, #72	; (adr r1, 801a348 <scalbn+0xe8>)
 801a300:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a304:	2b00      	cmp	r3, #0
 801a306:	d1e2      	bne.n	801a2ce <scalbn+0x6e>
 801a308:	a30f      	add	r3, pc, #60	; (adr r3, 801a348 <scalbn+0xe8>)
 801a30a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a30e:	f7e6 f97d 	bl	800060c <__aeabi_dmul>
 801a312:	e7cb      	b.n	801a2ac <scalbn+0x4c>
 801a314:	a10a      	add	r1, pc, #40	; (adr r1, 801a340 <scalbn+0xe0>)
 801a316:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a31a:	2b00      	cmp	r3, #0
 801a31c:	d0b8      	beq.n	801a290 <scalbn+0x30>
 801a31e:	a10e      	add	r1, pc, #56	; (adr r1, 801a358 <scalbn+0xf8>)
 801a320:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a324:	e7b4      	b.n	801a290 <scalbn+0x30>
 801a326:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801a32a:	3236      	adds	r2, #54	; 0x36
 801a32c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801a330:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801a334:	4620      	mov	r0, r4
 801a336:	4b0c      	ldr	r3, [pc, #48]	; (801a368 <scalbn+0x108>)
 801a338:	2200      	movs	r2, #0
 801a33a:	e7e8      	b.n	801a30e <scalbn+0xae>
 801a33c:	f3af 8000 	nop.w
 801a340:	c2f8f359 	.word	0xc2f8f359
 801a344:	01a56e1f 	.word	0x01a56e1f
 801a348:	8800759c 	.word	0x8800759c
 801a34c:	7e37e43c 	.word	0x7e37e43c
 801a350:	8800759c 	.word	0x8800759c
 801a354:	fe37e43c 	.word	0xfe37e43c
 801a358:	c2f8f359 	.word	0xc2f8f359
 801a35c:	81a56e1f 	.word	0x81a56e1f
 801a360:	43500000 	.word	0x43500000
 801a364:	ffff3cb0 	.word	0xffff3cb0
 801a368:	3c900000 	.word	0x3c900000

0801a36c <finitef>:
 801a36c:	b082      	sub	sp, #8
 801a36e:	ed8d 0a01 	vstr	s0, [sp, #4]
 801a372:	9801      	ldr	r0, [sp, #4]
 801a374:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801a378:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 801a37c:	bfac      	ite	ge
 801a37e:	2000      	movge	r0, #0
 801a380:	2001      	movlt	r0, #1
 801a382:	b002      	add	sp, #8
 801a384:	4770      	bx	lr
	...

0801a388 <nanf>:
 801a388:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801a390 <nanf+0x8>
 801a38c:	4770      	bx	lr
 801a38e:	bf00      	nop
 801a390:	7fc00000 	.word	0x7fc00000

0801a394 <abort>:
 801a394:	b508      	push	{r3, lr}
 801a396:	2006      	movs	r0, #6
 801a398:	f000 fcc6 	bl	801ad28 <raise>
 801a39c:	2001      	movs	r0, #1
 801a39e:	f7ea ff4b 	bl	8005238 <_exit>
	...

0801a3a4 <__assert_func>:
 801a3a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801a3a6:	4614      	mov	r4, r2
 801a3a8:	461a      	mov	r2, r3
 801a3aa:	4b09      	ldr	r3, [pc, #36]	; (801a3d0 <__assert_func+0x2c>)
 801a3ac:	681b      	ldr	r3, [r3, #0]
 801a3ae:	4605      	mov	r5, r0
 801a3b0:	68d8      	ldr	r0, [r3, #12]
 801a3b2:	b14c      	cbz	r4, 801a3c8 <__assert_func+0x24>
 801a3b4:	4b07      	ldr	r3, [pc, #28]	; (801a3d4 <__assert_func+0x30>)
 801a3b6:	9100      	str	r1, [sp, #0]
 801a3b8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801a3bc:	4906      	ldr	r1, [pc, #24]	; (801a3d8 <__assert_func+0x34>)
 801a3be:	462b      	mov	r3, r5
 801a3c0:	f000 f81c 	bl	801a3fc <fiprintf>
 801a3c4:	f7ff ffe6 	bl	801a394 <abort>
 801a3c8:	4b04      	ldr	r3, [pc, #16]	; (801a3dc <__assert_func+0x38>)
 801a3ca:	461c      	mov	r4, r3
 801a3cc:	e7f3      	b.n	801a3b6 <__assert_func+0x12>
 801a3ce:	bf00      	nop
 801a3d0:	20000258 	.word	0x20000258
 801a3d4:	0801d980 	.word	0x0801d980
 801a3d8:	0801d98d 	.word	0x0801d98d
 801a3dc:	0801d9bb 	.word	0x0801d9bb

0801a3e0 <calloc>:
 801a3e0:	4b02      	ldr	r3, [pc, #8]	; (801a3ec <calloc+0xc>)
 801a3e2:	460a      	mov	r2, r1
 801a3e4:	4601      	mov	r1, r0
 801a3e6:	6818      	ldr	r0, [r3, #0]
 801a3e8:	f000 b882 	b.w	801a4f0 <_calloc_r>
 801a3ec:	20000258 	.word	0x20000258

0801a3f0 <__errno>:
 801a3f0:	4b01      	ldr	r3, [pc, #4]	; (801a3f8 <__errno+0x8>)
 801a3f2:	6818      	ldr	r0, [r3, #0]
 801a3f4:	4770      	bx	lr
 801a3f6:	bf00      	nop
 801a3f8:	20000258 	.word	0x20000258

0801a3fc <fiprintf>:
 801a3fc:	b40e      	push	{r1, r2, r3}
 801a3fe:	b503      	push	{r0, r1, lr}
 801a400:	4601      	mov	r1, r0
 801a402:	ab03      	add	r3, sp, #12
 801a404:	4805      	ldr	r0, [pc, #20]	; (801a41c <fiprintf+0x20>)
 801a406:	f853 2b04 	ldr.w	r2, [r3], #4
 801a40a:	6800      	ldr	r0, [r0, #0]
 801a40c:	9301      	str	r3, [sp, #4]
 801a40e:	f000 f98f 	bl	801a730 <_vfiprintf_r>
 801a412:	b002      	add	sp, #8
 801a414:	f85d eb04 	ldr.w	lr, [sp], #4
 801a418:	b003      	add	sp, #12
 801a41a:	4770      	bx	lr
 801a41c:	20000258 	.word	0x20000258

0801a420 <__libc_init_array>:
 801a420:	b570      	push	{r4, r5, r6, lr}
 801a422:	4d0d      	ldr	r5, [pc, #52]	; (801a458 <__libc_init_array+0x38>)
 801a424:	4c0d      	ldr	r4, [pc, #52]	; (801a45c <__libc_init_array+0x3c>)
 801a426:	1b64      	subs	r4, r4, r5
 801a428:	10a4      	asrs	r4, r4, #2
 801a42a:	2600      	movs	r6, #0
 801a42c:	42a6      	cmp	r6, r4
 801a42e:	d109      	bne.n	801a444 <__libc_init_array+0x24>
 801a430:	4d0b      	ldr	r5, [pc, #44]	; (801a460 <__libc_init_array+0x40>)
 801a432:	4c0c      	ldr	r4, [pc, #48]	; (801a464 <__libc_init_array+0x44>)
 801a434:	f001 f9da 	bl	801b7ec <_init>
 801a438:	1b64      	subs	r4, r4, r5
 801a43a:	10a4      	asrs	r4, r4, #2
 801a43c:	2600      	movs	r6, #0
 801a43e:	42a6      	cmp	r6, r4
 801a440:	d105      	bne.n	801a44e <__libc_init_array+0x2e>
 801a442:	bd70      	pop	{r4, r5, r6, pc}
 801a444:	f855 3b04 	ldr.w	r3, [r5], #4
 801a448:	4798      	blx	r3
 801a44a:	3601      	adds	r6, #1
 801a44c:	e7ee      	b.n	801a42c <__libc_init_array+0xc>
 801a44e:	f855 3b04 	ldr.w	r3, [r5], #4
 801a452:	4798      	blx	r3
 801a454:	3601      	adds	r6, #1
 801a456:	e7f2      	b.n	801a43e <__libc_init_array+0x1e>
 801a458:	0801da5c 	.word	0x0801da5c
 801a45c:	0801da5c 	.word	0x0801da5c
 801a460:	0801da5c 	.word	0x0801da5c
 801a464:	0801da64 	.word	0x0801da64

0801a468 <__retarget_lock_init_recursive>:
 801a468:	4770      	bx	lr

0801a46a <__retarget_lock_acquire_recursive>:
 801a46a:	4770      	bx	lr

0801a46c <__retarget_lock_release_recursive>:
 801a46c:	4770      	bx	lr
	...

0801a470 <malloc>:
 801a470:	4b02      	ldr	r3, [pc, #8]	; (801a47c <malloc+0xc>)
 801a472:	4601      	mov	r1, r0
 801a474:	6818      	ldr	r0, [r3, #0]
 801a476:	f000 b8bd 	b.w	801a5f4 <_malloc_r>
 801a47a:	bf00      	nop
 801a47c:	20000258 	.word	0x20000258

0801a480 <free>:
 801a480:	4b02      	ldr	r3, [pc, #8]	; (801a48c <free+0xc>)
 801a482:	4601      	mov	r1, r0
 801a484:	6818      	ldr	r0, [r3, #0]
 801a486:	f000 b849 	b.w	801a51c <_free_r>
 801a48a:	bf00      	nop
 801a48c:	20000258 	.word	0x20000258

0801a490 <memcpy>:
 801a490:	440a      	add	r2, r1
 801a492:	4291      	cmp	r1, r2
 801a494:	f100 33ff 	add.w	r3, r0, #4294967295
 801a498:	d100      	bne.n	801a49c <memcpy+0xc>
 801a49a:	4770      	bx	lr
 801a49c:	b510      	push	{r4, lr}
 801a49e:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a4a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 801a4a6:	4291      	cmp	r1, r2
 801a4a8:	d1f9      	bne.n	801a49e <memcpy+0xe>
 801a4aa:	bd10      	pop	{r4, pc}

0801a4ac <memmove>:
 801a4ac:	4288      	cmp	r0, r1
 801a4ae:	b510      	push	{r4, lr}
 801a4b0:	eb01 0402 	add.w	r4, r1, r2
 801a4b4:	d902      	bls.n	801a4bc <memmove+0x10>
 801a4b6:	4284      	cmp	r4, r0
 801a4b8:	4623      	mov	r3, r4
 801a4ba:	d807      	bhi.n	801a4cc <memmove+0x20>
 801a4bc:	1e43      	subs	r3, r0, #1
 801a4be:	42a1      	cmp	r1, r4
 801a4c0:	d008      	beq.n	801a4d4 <memmove+0x28>
 801a4c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a4c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 801a4ca:	e7f8      	b.n	801a4be <memmove+0x12>
 801a4cc:	4402      	add	r2, r0
 801a4ce:	4601      	mov	r1, r0
 801a4d0:	428a      	cmp	r2, r1
 801a4d2:	d100      	bne.n	801a4d6 <memmove+0x2a>
 801a4d4:	bd10      	pop	{r4, pc}
 801a4d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801a4da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801a4de:	e7f7      	b.n	801a4d0 <memmove+0x24>

0801a4e0 <memset>:
 801a4e0:	4402      	add	r2, r0
 801a4e2:	4603      	mov	r3, r0
 801a4e4:	4293      	cmp	r3, r2
 801a4e6:	d100      	bne.n	801a4ea <memset+0xa>
 801a4e8:	4770      	bx	lr
 801a4ea:	f803 1b01 	strb.w	r1, [r3], #1
 801a4ee:	e7f9      	b.n	801a4e4 <memset+0x4>

0801a4f0 <_calloc_r>:
 801a4f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a4f2:	fba1 2402 	umull	r2, r4, r1, r2
 801a4f6:	b94c      	cbnz	r4, 801a50c <_calloc_r+0x1c>
 801a4f8:	4611      	mov	r1, r2
 801a4fa:	9201      	str	r2, [sp, #4]
 801a4fc:	f000 f87a 	bl	801a5f4 <_malloc_r>
 801a500:	9a01      	ldr	r2, [sp, #4]
 801a502:	4605      	mov	r5, r0
 801a504:	b930      	cbnz	r0, 801a514 <_calloc_r+0x24>
 801a506:	4628      	mov	r0, r5
 801a508:	b003      	add	sp, #12
 801a50a:	bd30      	pop	{r4, r5, pc}
 801a50c:	220c      	movs	r2, #12
 801a50e:	6002      	str	r2, [r0, #0]
 801a510:	2500      	movs	r5, #0
 801a512:	e7f8      	b.n	801a506 <_calloc_r+0x16>
 801a514:	4621      	mov	r1, r4
 801a516:	f7ff ffe3 	bl	801a4e0 <memset>
 801a51a:	e7f4      	b.n	801a506 <_calloc_r+0x16>

0801a51c <_free_r>:
 801a51c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a51e:	2900      	cmp	r1, #0
 801a520:	d044      	beq.n	801a5ac <_free_r+0x90>
 801a522:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a526:	9001      	str	r0, [sp, #4]
 801a528:	2b00      	cmp	r3, #0
 801a52a:	f1a1 0404 	sub.w	r4, r1, #4
 801a52e:	bfb8      	it	lt
 801a530:	18e4      	addlt	r4, r4, r3
 801a532:	f000 ff11 	bl	801b358 <__malloc_lock>
 801a536:	4a1e      	ldr	r2, [pc, #120]	; (801a5b0 <_free_r+0x94>)
 801a538:	9801      	ldr	r0, [sp, #4]
 801a53a:	6813      	ldr	r3, [r2, #0]
 801a53c:	b933      	cbnz	r3, 801a54c <_free_r+0x30>
 801a53e:	6063      	str	r3, [r4, #4]
 801a540:	6014      	str	r4, [r2, #0]
 801a542:	b003      	add	sp, #12
 801a544:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a548:	f000 bf0c 	b.w	801b364 <__malloc_unlock>
 801a54c:	42a3      	cmp	r3, r4
 801a54e:	d908      	bls.n	801a562 <_free_r+0x46>
 801a550:	6825      	ldr	r5, [r4, #0]
 801a552:	1961      	adds	r1, r4, r5
 801a554:	428b      	cmp	r3, r1
 801a556:	bf01      	itttt	eq
 801a558:	6819      	ldreq	r1, [r3, #0]
 801a55a:	685b      	ldreq	r3, [r3, #4]
 801a55c:	1949      	addeq	r1, r1, r5
 801a55e:	6021      	streq	r1, [r4, #0]
 801a560:	e7ed      	b.n	801a53e <_free_r+0x22>
 801a562:	461a      	mov	r2, r3
 801a564:	685b      	ldr	r3, [r3, #4]
 801a566:	b10b      	cbz	r3, 801a56c <_free_r+0x50>
 801a568:	42a3      	cmp	r3, r4
 801a56a:	d9fa      	bls.n	801a562 <_free_r+0x46>
 801a56c:	6811      	ldr	r1, [r2, #0]
 801a56e:	1855      	adds	r5, r2, r1
 801a570:	42a5      	cmp	r5, r4
 801a572:	d10b      	bne.n	801a58c <_free_r+0x70>
 801a574:	6824      	ldr	r4, [r4, #0]
 801a576:	4421      	add	r1, r4
 801a578:	1854      	adds	r4, r2, r1
 801a57a:	42a3      	cmp	r3, r4
 801a57c:	6011      	str	r1, [r2, #0]
 801a57e:	d1e0      	bne.n	801a542 <_free_r+0x26>
 801a580:	681c      	ldr	r4, [r3, #0]
 801a582:	685b      	ldr	r3, [r3, #4]
 801a584:	6053      	str	r3, [r2, #4]
 801a586:	4421      	add	r1, r4
 801a588:	6011      	str	r1, [r2, #0]
 801a58a:	e7da      	b.n	801a542 <_free_r+0x26>
 801a58c:	d902      	bls.n	801a594 <_free_r+0x78>
 801a58e:	230c      	movs	r3, #12
 801a590:	6003      	str	r3, [r0, #0]
 801a592:	e7d6      	b.n	801a542 <_free_r+0x26>
 801a594:	6825      	ldr	r5, [r4, #0]
 801a596:	1961      	adds	r1, r4, r5
 801a598:	428b      	cmp	r3, r1
 801a59a:	bf04      	itt	eq
 801a59c:	6819      	ldreq	r1, [r3, #0]
 801a59e:	685b      	ldreq	r3, [r3, #4]
 801a5a0:	6063      	str	r3, [r4, #4]
 801a5a2:	bf04      	itt	eq
 801a5a4:	1949      	addeq	r1, r1, r5
 801a5a6:	6021      	streq	r1, [r4, #0]
 801a5a8:	6054      	str	r4, [r2, #4]
 801a5aa:	e7ca      	b.n	801a542 <_free_r+0x26>
 801a5ac:	b003      	add	sp, #12
 801a5ae:	bd30      	pop	{r4, r5, pc}
 801a5b0:	20004b24 	.word	0x20004b24

0801a5b4 <sbrk_aligned>:
 801a5b4:	b570      	push	{r4, r5, r6, lr}
 801a5b6:	4e0e      	ldr	r6, [pc, #56]	; (801a5f0 <sbrk_aligned+0x3c>)
 801a5b8:	460c      	mov	r4, r1
 801a5ba:	6831      	ldr	r1, [r6, #0]
 801a5bc:	4605      	mov	r5, r0
 801a5be:	b911      	cbnz	r1, 801a5c6 <sbrk_aligned+0x12>
 801a5c0:	f000 fb7a 	bl	801acb8 <_sbrk_r>
 801a5c4:	6030      	str	r0, [r6, #0]
 801a5c6:	4621      	mov	r1, r4
 801a5c8:	4628      	mov	r0, r5
 801a5ca:	f000 fb75 	bl	801acb8 <_sbrk_r>
 801a5ce:	1c43      	adds	r3, r0, #1
 801a5d0:	d00a      	beq.n	801a5e8 <sbrk_aligned+0x34>
 801a5d2:	1cc4      	adds	r4, r0, #3
 801a5d4:	f024 0403 	bic.w	r4, r4, #3
 801a5d8:	42a0      	cmp	r0, r4
 801a5da:	d007      	beq.n	801a5ec <sbrk_aligned+0x38>
 801a5dc:	1a21      	subs	r1, r4, r0
 801a5de:	4628      	mov	r0, r5
 801a5e0:	f000 fb6a 	bl	801acb8 <_sbrk_r>
 801a5e4:	3001      	adds	r0, #1
 801a5e6:	d101      	bne.n	801a5ec <sbrk_aligned+0x38>
 801a5e8:	f04f 34ff 	mov.w	r4, #4294967295
 801a5ec:	4620      	mov	r0, r4
 801a5ee:	bd70      	pop	{r4, r5, r6, pc}
 801a5f0:	20004b28 	.word	0x20004b28

0801a5f4 <_malloc_r>:
 801a5f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a5f8:	1ccd      	adds	r5, r1, #3
 801a5fa:	f025 0503 	bic.w	r5, r5, #3
 801a5fe:	3508      	adds	r5, #8
 801a600:	2d0c      	cmp	r5, #12
 801a602:	bf38      	it	cc
 801a604:	250c      	movcc	r5, #12
 801a606:	2d00      	cmp	r5, #0
 801a608:	4607      	mov	r7, r0
 801a60a:	db01      	blt.n	801a610 <_malloc_r+0x1c>
 801a60c:	42a9      	cmp	r1, r5
 801a60e:	d905      	bls.n	801a61c <_malloc_r+0x28>
 801a610:	230c      	movs	r3, #12
 801a612:	603b      	str	r3, [r7, #0]
 801a614:	2600      	movs	r6, #0
 801a616:	4630      	mov	r0, r6
 801a618:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a61c:	4e2e      	ldr	r6, [pc, #184]	; (801a6d8 <_malloc_r+0xe4>)
 801a61e:	f000 fe9b 	bl	801b358 <__malloc_lock>
 801a622:	6833      	ldr	r3, [r6, #0]
 801a624:	461c      	mov	r4, r3
 801a626:	bb34      	cbnz	r4, 801a676 <_malloc_r+0x82>
 801a628:	4629      	mov	r1, r5
 801a62a:	4638      	mov	r0, r7
 801a62c:	f7ff ffc2 	bl	801a5b4 <sbrk_aligned>
 801a630:	1c43      	adds	r3, r0, #1
 801a632:	4604      	mov	r4, r0
 801a634:	d14d      	bne.n	801a6d2 <_malloc_r+0xde>
 801a636:	6834      	ldr	r4, [r6, #0]
 801a638:	4626      	mov	r6, r4
 801a63a:	2e00      	cmp	r6, #0
 801a63c:	d140      	bne.n	801a6c0 <_malloc_r+0xcc>
 801a63e:	6823      	ldr	r3, [r4, #0]
 801a640:	4631      	mov	r1, r6
 801a642:	4638      	mov	r0, r7
 801a644:	eb04 0803 	add.w	r8, r4, r3
 801a648:	f000 fb36 	bl	801acb8 <_sbrk_r>
 801a64c:	4580      	cmp	r8, r0
 801a64e:	d13a      	bne.n	801a6c6 <_malloc_r+0xd2>
 801a650:	6821      	ldr	r1, [r4, #0]
 801a652:	3503      	adds	r5, #3
 801a654:	1a6d      	subs	r5, r5, r1
 801a656:	f025 0503 	bic.w	r5, r5, #3
 801a65a:	3508      	adds	r5, #8
 801a65c:	2d0c      	cmp	r5, #12
 801a65e:	bf38      	it	cc
 801a660:	250c      	movcc	r5, #12
 801a662:	4629      	mov	r1, r5
 801a664:	4638      	mov	r0, r7
 801a666:	f7ff ffa5 	bl	801a5b4 <sbrk_aligned>
 801a66a:	3001      	adds	r0, #1
 801a66c:	d02b      	beq.n	801a6c6 <_malloc_r+0xd2>
 801a66e:	6823      	ldr	r3, [r4, #0]
 801a670:	442b      	add	r3, r5
 801a672:	6023      	str	r3, [r4, #0]
 801a674:	e00e      	b.n	801a694 <_malloc_r+0xa0>
 801a676:	6822      	ldr	r2, [r4, #0]
 801a678:	1b52      	subs	r2, r2, r5
 801a67a:	d41e      	bmi.n	801a6ba <_malloc_r+0xc6>
 801a67c:	2a0b      	cmp	r2, #11
 801a67e:	d916      	bls.n	801a6ae <_malloc_r+0xba>
 801a680:	1961      	adds	r1, r4, r5
 801a682:	42a3      	cmp	r3, r4
 801a684:	6025      	str	r5, [r4, #0]
 801a686:	bf18      	it	ne
 801a688:	6059      	strne	r1, [r3, #4]
 801a68a:	6863      	ldr	r3, [r4, #4]
 801a68c:	bf08      	it	eq
 801a68e:	6031      	streq	r1, [r6, #0]
 801a690:	5162      	str	r2, [r4, r5]
 801a692:	604b      	str	r3, [r1, #4]
 801a694:	4638      	mov	r0, r7
 801a696:	f104 060b 	add.w	r6, r4, #11
 801a69a:	f000 fe63 	bl	801b364 <__malloc_unlock>
 801a69e:	f026 0607 	bic.w	r6, r6, #7
 801a6a2:	1d23      	adds	r3, r4, #4
 801a6a4:	1af2      	subs	r2, r6, r3
 801a6a6:	d0b6      	beq.n	801a616 <_malloc_r+0x22>
 801a6a8:	1b9b      	subs	r3, r3, r6
 801a6aa:	50a3      	str	r3, [r4, r2]
 801a6ac:	e7b3      	b.n	801a616 <_malloc_r+0x22>
 801a6ae:	6862      	ldr	r2, [r4, #4]
 801a6b0:	42a3      	cmp	r3, r4
 801a6b2:	bf0c      	ite	eq
 801a6b4:	6032      	streq	r2, [r6, #0]
 801a6b6:	605a      	strne	r2, [r3, #4]
 801a6b8:	e7ec      	b.n	801a694 <_malloc_r+0xa0>
 801a6ba:	4623      	mov	r3, r4
 801a6bc:	6864      	ldr	r4, [r4, #4]
 801a6be:	e7b2      	b.n	801a626 <_malloc_r+0x32>
 801a6c0:	4634      	mov	r4, r6
 801a6c2:	6876      	ldr	r6, [r6, #4]
 801a6c4:	e7b9      	b.n	801a63a <_malloc_r+0x46>
 801a6c6:	230c      	movs	r3, #12
 801a6c8:	603b      	str	r3, [r7, #0]
 801a6ca:	4638      	mov	r0, r7
 801a6cc:	f000 fe4a 	bl	801b364 <__malloc_unlock>
 801a6d0:	e7a1      	b.n	801a616 <_malloc_r+0x22>
 801a6d2:	6025      	str	r5, [r4, #0]
 801a6d4:	e7de      	b.n	801a694 <_malloc_r+0xa0>
 801a6d6:	bf00      	nop
 801a6d8:	20004b24 	.word	0x20004b24

0801a6dc <__sfputc_r>:
 801a6dc:	6893      	ldr	r3, [r2, #8]
 801a6de:	3b01      	subs	r3, #1
 801a6e0:	2b00      	cmp	r3, #0
 801a6e2:	b410      	push	{r4}
 801a6e4:	6093      	str	r3, [r2, #8]
 801a6e6:	da08      	bge.n	801a6fa <__sfputc_r+0x1e>
 801a6e8:	6994      	ldr	r4, [r2, #24]
 801a6ea:	42a3      	cmp	r3, r4
 801a6ec:	db01      	blt.n	801a6f2 <__sfputc_r+0x16>
 801a6ee:	290a      	cmp	r1, #10
 801a6f0:	d103      	bne.n	801a6fa <__sfputc_r+0x1e>
 801a6f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a6f6:	f000 bb53 	b.w	801ada0 <__swbuf_r>
 801a6fa:	6813      	ldr	r3, [r2, #0]
 801a6fc:	1c58      	adds	r0, r3, #1
 801a6fe:	6010      	str	r0, [r2, #0]
 801a700:	7019      	strb	r1, [r3, #0]
 801a702:	4608      	mov	r0, r1
 801a704:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a708:	4770      	bx	lr

0801a70a <__sfputs_r>:
 801a70a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a70c:	4606      	mov	r6, r0
 801a70e:	460f      	mov	r7, r1
 801a710:	4614      	mov	r4, r2
 801a712:	18d5      	adds	r5, r2, r3
 801a714:	42ac      	cmp	r4, r5
 801a716:	d101      	bne.n	801a71c <__sfputs_r+0x12>
 801a718:	2000      	movs	r0, #0
 801a71a:	e007      	b.n	801a72c <__sfputs_r+0x22>
 801a71c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a720:	463a      	mov	r2, r7
 801a722:	4630      	mov	r0, r6
 801a724:	f7ff ffda 	bl	801a6dc <__sfputc_r>
 801a728:	1c43      	adds	r3, r0, #1
 801a72a:	d1f3      	bne.n	801a714 <__sfputs_r+0xa>
 801a72c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801a730 <_vfiprintf_r>:
 801a730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a734:	460d      	mov	r5, r1
 801a736:	b09d      	sub	sp, #116	; 0x74
 801a738:	4614      	mov	r4, r2
 801a73a:	4698      	mov	r8, r3
 801a73c:	4606      	mov	r6, r0
 801a73e:	b118      	cbz	r0, 801a748 <_vfiprintf_r+0x18>
 801a740:	6983      	ldr	r3, [r0, #24]
 801a742:	b90b      	cbnz	r3, 801a748 <_vfiprintf_r+0x18>
 801a744:	f000 fd06 	bl	801b154 <__sinit>
 801a748:	4b89      	ldr	r3, [pc, #548]	; (801a970 <_vfiprintf_r+0x240>)
 801a74a:	429d      	cmp	r5, r3
 801a74c:	d11b      	bne.n	801a786 <_vfiprintf_r+0x56>
 801a74e:	6875      	ldr	r5, [r6, #4]
 801a750:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a752:	07d9      	lsls	r1, r3, #31
 801a754:	d405      	bmi.n	801a762 <_vfiprintf_r+0x32>
 801a756:	89ab      	ldrh	r3, [r5, #12]
 801a758:	059a      	lsls	r2, r3, #22
 801a75a:	d402      	bmi.n	801a762 <_vfiprintf_r+0x32>
 801a75c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a75e:	f7ff fe84 	bl	801a46a <__retarget_lock_acquire_recursive>
 801a762:	89ab      	ldrh	r3, [r5, #12]
 801a764:	071b      	lsls	r3, r3, #28
 801a766:	d501      	bpl.n	801a76c <_vfiprintf_r+0x3c>
 801a768:	692b      	ldr	r3, [r5, #16]
 801a76a:	b9eb      	cbnz	r3, 801a7a8 <_vfiprintf_r+0x78>
 801a76c:	4629      	mov	r1, r5
 801a76e:	4630      	mov	r0, r6
 801a770:	f000 fb68 	bl	801ae44 <__swsetup_r>
 801a774:	b1c0      	cbz	r0, 801a7a8 <_vfiprintf_r+0x78>
 801a776:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a778:	07dc      	lsls	r4, r3, #31
 801a77a:	d50e      	bpl.n	801a79a <_vfiprintf_r+0x6a>
 801a77c:	f04f 30ff 	mov.w	r0, #4294967295
 801a780:	b01d      	add	sp, #116	; 0x74
 801a782:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a786:	4b7b      	ldr	r3, [pc, #492]	; (801a974 <_vfiprintf_r+0x244>)
 801a788:	429d      	cmp	r5, r3
 801a78a:	d101      	bne.n	801a790 <_vfiprintf_r+0x60>
 801a78c:	68b5      	ldr	r5, [r6, #8]
 801a78e:	e7df      	b.n	801a750 <_vfiprintf_r+0x20>
 801a790:	4b79      	ldr	r3, [pc, #484]	; (801a978 <_vfiprintf_r+0x248>)
 801a792:	429d      	cmp	r5, r3
 801a794:	bf08      	it	eq
 801a796:	68f5      	ldreq	r5, [r6, #12]
 801a798:	e7da      	b.n	801a750 <_vfiprintf_r+0x20>
 801a79a:	89ab      	ldrh	r3, [r5, #12]
 801a79c:	0598      	lsls	r0, r3, #22
 801a79e:	d4ed      	bmi.n	801a77c <_vfiprintf_r+0x4c>
 801a7a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a7a2:	f7ff fe63 	bl	801a46c <__retarget_lock_release_recursive>
 801a7a6:	e7e9      	b.n	801a77c <_vfiprintf_r+0x4c>
 801a7a8:	2300      	movs	r3, #0
 801a7aa:	9309      	str	r3, [sp, #36]	; 0x24
 801a7ac:	2320      	movs	r3, #32
 801a7ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a7b2:	f8cd 800c 	str.w	r8, [sp, #12]
 801a7b6:	2330      	movs	r3, #48	; 0x30
 801a7b8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801a97c <_vfiprintf_r+0x24c>
 801a7bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a7c0:	f04f 0901 	mov.w	r9, #1
 801a7c4:	4623      	mov	r3, r4
 801a7c6:	469a      	mov	sl, r3
 801a7c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a7cc:	b10a      	cbz	r2, 801a7d2 <_vfiprintf_r+0xa2>
 801a7ce:	2a25      	cmp	r2, #37	; 0x25
 801a7d0:	d1f9      	bne.n	801a7c6 <_vfiprintf_r+0x96>
 801a7d2:	ebba 0b04 	subs.w	fp, sl, r4
 801a7d6:	d00b      	beq.n	801a7f0 <_vfiprintf_r+0xc0>
 801a7d8:	465b      	mov	r3, fp
 801a7da:	4622      	mov	r2, r4
 801a7dc:	4629      	mov	r1, r5
 801a7de:	4630      	mov	r0, r6
 801a7e0:	f7ff ff93 	bl	801a70a <__sfputs_r>
 801a7e4:	3001      	adds	r0, #1
 801a7e6:	f000 80aa 	beq.w	801a93e <_vfiprintf_r+0x20e>
 801a7ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a7ec:	445a      	add	r2, fp
 801a7ee:	9209      	str	r2, [sp, #36]	; 0x24
 801a7f0:	f89a 3000 	ldrb.w	r3, [sl]
 801a7f4:	2b00      	cmp	r3, #0
 801a7f6:	f000 80a2 	beq.w	801a93e <_vfiprintf_r+0x20e>
 801a7fa:	2300      	movs	r3, #0
 801a7fc:	f04f 32ff 	mov.w	r2, #4294967295
 801a800:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a804:	f10a 0a01 	add.w	sl, sl, #1
 801a808:	9304      	str	r3, [sp, #16]
 801a80a:	9307      	str	r3, [sp, #28]
 801a80c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a810:	931a      	str	r3, [sp, #104]	; 0x68
 801a812:	4654      	mov	r4, sl
 801a814:	2205      	movs	r2, #5
 801a816:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a81a:	4858      	ldr	r0, [pc, #352]	; (801a97c <_vfiprintf_r+0x24c>)
 801a81c:	f7e5 fcd8 	bl	80001d0 <memchr>
 801a820:	9a04      	ldr	r2, [sp, #16]
 801a822:	b9d8      	cbnz	r0, 801a85c <_vfiprintf_r+0x12c>
 801a824:	06d1      	lsls	r1, r2, #27
 801a826:	bf44      	itt	mi
 801a828:	2320      	movmi	r3, #32
 801a82a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a82e:	0713      	lsls	r3, r2, #28
 801a830:	bf44      	itt	mi
 801a832:	232b      	movmi	r3, #43	; 0x2b
 801a834:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a838:	f89a 3000 	ldrb.w	r3, [sl]
 801a83c:	2b2a      	cmp	r3, #42	; 0x2a
 801a83e:	d015      	beq.n	801a86c <_vfiprintf_r+0x13c>
 801a840:	9a07      	ldr	r2, [sp, #28]
 801a842:	4654      	mov	r4, sl
 801a844:	2000      	movs	r0, #0
 801a846:	f04f 0c0a 	mov.w	ip, #10
 801a84a:	4621      	mov	r1, r4
 801a84c:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a850:	3b30      	subs	r3, #48	; 0x30
 801a852:	2b09      	cmp	r3, #9
 801a854:	d94e      	bls.n	801a8f4 <_vfiprintf_r+0x1c4>
 801a856:	b1b0      	cbz	r0, 801a886 <_vfiprintf_r+0x156>
 801a858:	9207      	str	r2, [sp, #28]
 801a85a:	e014      	b.n	801a886 <_vfiprintf_r+0x156>
 801a85c:	eba0 0308 	sub.w	r3, r0, r8
 801a860:	fa09 f303 	lsl.w	r3, r9, r3
 801a864:	4313      	orrs	r3, r2
 801a866:	9304      	str	r3, [sp, #16]
 801a868:	46a2      	mov	sl, r4
 801a86a:	e7d2      	b.n	801a812 <_vfiprintf_r+0xe2>
 801a86c:	9b03      	ldr	r3, [sp, #12]
 801a86e:	1d19      	adds	r1, r3, #4
 801a870:	681b      	ldr	r3, [r3, #0]
 801a872:	9103      	str	r1, [sp, #12]
 801a874:	2b00      	cmp	r3, #0
 801a876:	bfbb      	ittet	lt
 801a878:	425b      	neglt	r3, r3
 801a87a:	f042 0202 	orrlt.w	r2, r2, #2
 801a87e:	9307      	strge	r3, [sp, #28]
 801a880:	9307      	strlt	r3, [sp, #28]
 801a882:	bfb8      	it	lt
 801a884:	9204      	strlt	r2, [sp, #16]
 801a886:	7823      	ldrb	r3, [r4, #0]
 801a888:	2b2e      	cmp	r3, #46	; 0x2e
 801a88a:	d10c      	bne.n	801a8a6 <_vfiprintf_r+0x176>
 801a88c:	7863      	ldrb	r3, [r4, #1]
 801a88e:	2b2a      	cmp	r3, #42	; 0x2a
 801a890:	d135      	bne.n	801a8fe <_vfiprintf_r+0x1ce>
 801a892:	9b03      	ldr	r3, [sp, #12]
 801a894:	1d1a      	adds	r2, r3, #4
 801a896:	681b      	ldr	r3, [r3, #0]
 801a898:	9203      	str	r2, [sp, #12]
 801a89a:	2b00      	cmp	r3, #0
 801a89c:	bfb8      	it	lt
 801a89e:	f04f 33ff 	movlt.w	r3, #4294967295
 801a8a2:	3402      	adds	r4, #2
 801a8a4:	9305      	str	r3, [sp, #20]
 801a8a6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801a98c <_vfiprintf_r+0x25c>
 801a8aa:	7821      	ldrb	r1, [r4, #0]
 801a8ac:	2203      	movs	r2, #3
 801a8ae:	4650      	mov	r0, sl
 801a8b0:	f7e5 fc8e 	bl	80001d0 <memchr>
 801a8b4:	b140      	cbz	r0, 801a8c8 <_vfiprintf_r+0x198>
 801a8b6:	2340      	movs	r3, #64	; 0x40
 801a8b8:	eba0 000a 	sub.w	r0, r0, sl
 801a8bc:	fa03 f000 	lsl.w	r0, r3, r0
 801a8c0:	9b04      	ldr	r3, [sp, #16]
 801a8c2:	4303      	orrs	r3, r0
 801a8c4:	3401      	adds	r4, #1
 801a8c6:	9304      	str	r3, [sp, #16]
 801a8c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a8cc:	482c      	ldr	r0, [pc, #176]	; (801a980 <_vfiprintf_r+0x250>)
 801a8ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801a8d2:	2206      	movs	r2, #6
 801a8d4:	f7e5 fc7c 	bl	80001d0 <memchr>
 801a8d8:	2800      	cmp	r0, #0
 801a8da:	d03f      	beq.n	801a95c <_vfiprintf_r+0x22c>
 801a8dc:	4b29      	ldr	r3, [pc, #164]	; (801a984 <_vfiprintf_r+0x254>)
 801a8de:	bb1b      	cbnz	r3, 801a928 <_vfiprintf_r+0x1f8>
 801a8e0:	9b03      	ldr	r3, [sp, #12]
 801a8e2:	3307      	adds	r3, #7
 801a8e4:	f023 0307 	bic.w	r3, r3, #7
 801a8e8:	3308      	adds	r3, #8
 801a8ea:	9303      	str	r3, [sp, #12]
 801a8ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a8ee:	443b      	add	r3, r7
 801a8f0:	9309      	str	r3, [sp, #36]	; 0x24
 801a8f2:	e767      	b.n	801a7c4 <_vfiprintf_r+0x94>
 801a8f4:	fb0c 3202 	mla	r2, ip, r2, r3
 801a8f8:	460c      	mov	r4, r1
 801a8fa:	2001      	movs	r0, #1
 801a8fc:	e7a5      	b.n	801a84a <_vfiprintf_r+0x11a>
 801a8fe:	2300      	movs	r3, #0
 801a900:	3401      	adds	r4, #1
 801a902:	9305      	str	r3, [sp, #20]
 801a904:	4619      	mov	r1, r3
 801a906:	f04f 0c0a 	mov.w	ip, #10
 801a90a:	4620      	mov	r0, r4
 801a90c:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a910:	3a30      	subs	r2, #48	; 0x30
 801a912:	2a09      	cmp	r2, #9
 801a914:	d903      	bls.n	801a91e <_vfiprintf_r+0x1ee>
 801a916:	2b00      	cmp	r3, #0
 801a918:	d0c5      	beq.n	801a8a6 <_vfiprintf_r+0x176>
 801a91a:	9105      	str	r1, [sp, #20]
 801a91c:	e7c3      	b.n	801a8a6 <_vfiprintf_r+0x176>
 801a91e:	fb0c 2101 	mla	r1, ip, r1, r2
 801a922:	4604      	mov	r4, r0
 801a924:	2301      	movs	r3, #1
 801a926:	e7f0      	b.n	801a90a <_vfiprintf_r+0x1da>
 801a928:	ab03      	add	r3, sp, #12
 801a92a:	9300      	str	r3, [sp, #0]
 801a92c:	462a      	mov	r2, r5
 801a92e:	4b16      	ldr	r3, [pc, #88]	; (801a988 <_vfiprintf_r+0x258>)
 801a930:	a904      	add	r1, sp, #16
 801a932:	4630      	mov	r0, r6
 801a934:	f3af 8000 	nop.w
 801a938:	4607      	mov	r7, r0
 801a93a:	1c78      	adds	r0, r7, #1
 801a93c:	d1d6      	bne.n	801a8ec <_vfiprintf_r+0x1bc>
 801a93e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a940:	07d9      	lsls	r1, r3, #31
 801a942:	d405      	bmi.n	801a950 <_vfiprintf_r+0x220>
 801a944:	89ab      	ldrh	r3, [r5, #12]
 801a946:	059a      	lsls	r2, r3, #22
 801a948:	d402      	bmi.n	801a950 <_vfiprintf_r+0x220>
 801a94a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a94c:	f7ff fd8e 	bl	801a46c <__retarget_lock_release_recursive>
 801a950:	89ab      	ldrh	r3, [r5, #12]
 801a952:	065b      	lsls	r3, r3, #25
 801a954:	f53f af12 	bmi.w	801a77c <_vfiprintf_r+0x4c>
 801a958:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a95a:	e711      	b.n	801a780 <_vfiprintf_r+0x50>
 801a95c:	ab03      	add	r3, sp, #12
 801a95e:	9300      	str	r3, [sp, #0]
 801a960:	462a      	mov	r2, r5
 801a962:	4b09      	ldr	r3, [pc, #36]	; (801a988 <_vfiprintf_r+0x258>)
 801a964:	a904      	add	r1, sp, #16
 801a966:	4630      	mov	r0, r6
 801a968:	f000 f880 	bl	801aa6c <_printf_i>
 801a96c:	e7e4      	b.n	801a938 <_vfiprintf_r+0x208>
 801a96e:	bf00      	nop
 801a970:	0801da14 	.word	0x0801da14
 801a974:	0801da34 	.word	0x0801da34
 801a978:	0801d9f4 	.word	0x0801d9f4
 801a97c:	0801d9c0 	.word	0x0801d9c0
 801a980:	0801d9ca 	.word	0x0801d9ca
 801a984:	00000000 	.word	0x00000000
 801a988:	0801a70b 	.word	0x0801a70b
 801a98c:	0801d9c6 	.word	0x0801d9c6

0801a990 <_printf_common>:
 801a990:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a994:	4616      	mov	r6, r2
 801a996:	4699      	mov	r9, r3
 801a998:	688a      	ldr	r2, [r1, #8]
 801a99a:	690b      	ldr	r3, [r1, #16]
 801a99c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801a9a0:	4293      	cmp	r3, r2
 801a9a2:	bfb8      	it	lt
 801a9a4:	4613      	movlt	r3, r2
 801a9a6:	6033      	str	r3, [r6, #0]
 801a9a8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801a9ac:	4607      	mov	r7, r0
 801a9ae:	460c      	mov	r4, r1
 801a9b0:	b10a      	cbz	r2, 801a9b6 <_printf_common+0x26>
 801a9b2:	3301      	adds	r3, #1
 801a9b4:	6033      	str	r3, [r6, #0]
 801a9b6:	6823      	ldr	r3, [r4, #0]
 801a9b8:	0699      	lsls	r1, r3, #26
 801a9ba:	bf42      	ittt	mi
 801a9bc:	6833      	ldrmi	r3, [r6, #0]
 801a9be:	3302      	addmi	r3, #2
 801a9c0:	6033      	strmi	r3, [r6, #0]
 801a9c2:	6825      	ldr	r5, [r4, #0]
 801a9c4:	f015 0506 	ands.w	r5, r5, #6
 801a9c8:	d106      	bne.n	801a9d8 <_printf_common+0x48>
 801a9ca:	f104 0a19 	add.w	sl, r4, #25
 801a9ce:	68e3      	ldr	r3, [r4, #12]
 801a9d0:	6832      	ldr	r2, [r6, #0]
 801a9d2:	1a9b      	subs	r3, r3, r2
 801a9d4:	42ab      	cmp	r3, r5
 801a9d6:	dc26      	bgt.n	801aa26 <_printf_common+0x96>
 801a9d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801a9dc:	1e13      	subs	r3, r2, #0
 801a9de:	6822      	ldr	r2, [r4, #0]
 801a9e0:	bf18      	it	ne
 801a9e2:	2301      	movne	r3, #1
 801a9e4:	0692      	lsls	r2, r2, #26
 801a9e6:	d42b      	bmi.n	801aa40 <_printf_common+0xb0>
 801a9e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801a9ec:	4649      	mov	r1, r9
 801a9ee:	4638      	mov	r0, r7
 801a9f0:	47c0      	blx	r8
 801a9f2:	3001      	adds	r0, #1
 801a9f4:	d01e      	beq.n	801aa34 <_printf_common+0xa4>
 801a9f6:	6823      	ldr	r3, [r4, #0]
 801a9f8:	68e5      	ldr	r5, [r4, #12]
 801a9fa:	6832      	ldr	r2, [r6, #0]
 801a9fc:	f003 0306 	and.w	r3, r3, #6
 801aa00:	2b04      	cmp	r3, #4
 801aa02:	bf08      	it	eq
 801aa04:	1aad      	subeq	r5, r5, r2
 801aa06:	68a3      	ldr	r3, [r4, #8]
 801aa08:	6922      	ldr	r2, [r4, #16]
 801aa0a:	bf0c      	ite	eq
 801aa0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801aa10:	2500      	movne	r5, #0
 801aa12:	4293      	cmp	r3, r2
 801aa14:	bfc4      	itt	gt
 801aa16:	1a9b      	subgt	r3, r3, r2
 801aa18:	18ed      	addgt	r5, r5, r3
 801aa1a:	2600      	movs	r6, #0
 801aa1c:	341a      	adds	r4, #26
 801aa1e:	42b5      	cmp	r5, r6
 801aa20:	d11a      	bne.n	801aa58 <_printf_common+0xc8>
 801aa22:	2000      	movs	r0, #0
 801aa24:	e008      	b.n	801aa38 <_printf_common+0xa8>
 801aa26:	2301      	movs	r3, #1
 801aa28:	4652      	mov	r2, sl
 801aa2a:	4649      	mov	r1, r9
 801aa2c:	4638      	mov	r0, r7
 801aa2e:	47c0      	blx	r8
 801aa30:	3001      	adds	r0, #1
 801aa32:	d103      	bne.n	801aa3c <_printf_common+0xac>
 801aa34:	f04f 30ff 	mov.w	r0, #4294967295
 801aa38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801aa3c:	3501      	adds	r5, #1
 801aa3e:	e7c6      	b.n	801a9ce <_printf_common+0x3e>
 801aa40:	18e1      	adds	r1, r4, r3
 801aa42:	1c5a      	adds	r2, r3, #1
 801aa44:	2030      	movs	r0, #48	; 0x30
 801aa46:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801aa4a:	4422      	add	r2, r4
 801aa4c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801aa50:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801aa54:	3302      	adds	r3, #2
 801aa56:	e7c7      	b.n	801a9e8 <_printf_common+0x58>
 801aa58:	2301      	movs	r3, #1
 801aa5a:	4622      	mov	r2, r4
 801aa5c:	4649      	mov	r1, r9
 801aa5e:	4638      	mov	r0, r7
 801aa60:	47c0      	blx	r8
 801aa62:	3001      	adds	r0, #1
 801aa64:	d0e6      	beq.n	801aa34 <_printf_common+0xa4>
 801aa66:	3601      	adds	r6, #1
 801aa68:	e7d9      	b.n	801aa1e <_printf_common+0x8e>
	...

0801aa6c <_printf_i>:
 801aa6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801aa70:	7e0f      	ldrb	r7, [r1, #24]
 801aa72:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801aa74:	2f78      	cmp	r7, #120	; 0x78
 801aa76:	4691      	mov	r9, r2
 801aa78:	4680      	mov	r8, r0
 801aa7a:	460c      	mov	r4, r1
 801aa7c:	469a      	mov	sl, r3
 801aa7e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801aa82:	d807      	bhi.n	801aa94 <_printf_i+0x28>
 801aa84:	2f62      	cmp	r7, #98	; 0x62
 801aa86:	d80a      	bhi.n	801aa9e <_printf_i+0x32>
 801aa88:	2f00      	cmp	r7, #0
 801aa8a:	f000 80d8 	beq.w	801ac3e <_printf_i+0x1d2>
 801aa8e:	2f58      	cmp	r7, #88	; 0x58
 801aa90:	f000 80a3 	beq.w	801abda <_printf_i+0x16e>
 801aa94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801aa98:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801aa9c:	e03a      	b.n	801ab14 <_printf_i+0xa8>
 801aa9e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801aaa2:	2b15      	cmp	r3, #21
 801aaa4:	d8f6      	bhi.n	801aa94 <_printf_i+0x28>
 801aaa6:	a101      	add	r1, pc, #4	; (adr r1, 801aaac <_printf_i+0x40>)
 801aaa8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801aaac:	0801ab05 	.word	0x0801ab05
 801aab0:	0801ab19 	.word	0x0801ab19
 801aab4:	0801aa95 	.word	0x0801aa95
 801aab8:	0801aa95 	.word	0x0801aa95
 801aabc:	0801aa95 	.word	0x0801aa95
 801aac0:	0801aa95 	.word	0x0801aa95
 801aac4:	0801ab19 	.word	0x0801ab19
 801aac8:	0801aa95 	.word	0x0801aa95
 801aacc:	0801aa95 	.word	0x0801aa95
 801aad0:	0801aa95 	.word	0x0801aa95
 801aad4:	0801aa95 	.word	0x0801aa95
 801aad8:	0801ac25 	.word	0x0801ac25
 801aadc:	0801ab49 	.word	0x0801ab49
 801aae0:	0801ac07 	.word	0x0801ac07
 801aae4:	0801aa95 	.word	0x0801aa95
 801aae8:	0801aa95 	.word	0x0801aa95
 801aaec:	0801ac47 	.word	0x0801ac47
 801aaf0:	0801aa95 	.word	0x0801aa95
 801aaf4:	0801ab49 	.word	0x0801ab49
 801aaf8:	0801aa95 	.word	0x0801aa95
 801aafc:	0801aa95 	.word	0x0801aa95
 801ab00:	0801ac0f 	.word	0x0801ac0f
 801ab04:	682b      	ldr	r3, [r5, #0]
 801ab06:	1d1a      	adds	r2, r3, #4
 801ab08:	681b      	ldr	r3, [r3, #0]
 801ab0a:	602a      	str	r2, [r5, #0]
 801ab0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801ab10:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801ab14:	2301      	movs	r3, #1
 801ab16:	e0a3      	b.n	801ac60 <_printf_i+0x1f4>
 801ab18:	6820      	ldr	r0, [r4, #0]
 801ab1a:	6829      	ldr	r1, [r5, #0]
 801ab1c:	0606      	lsls	r6, r0, #24
 801ab1e:	f101 0304 	add.w	r3, r1, #4
 801ab22:	d50a      	bpl.n	801ab3a <_printf_i+0xce>
 801ab24:	680e      	ldr	r6, [r1, #0]
 801ab26:	602b      	str	r3, [r5, #0]
 801ab28:	2e00      	cmp	r6, #0
 801ab2a:	da03      	bge.n	801ab34 <_printf_i+0xc8>
 801ab2c:	232d      	movs	r3, #45	; 0x2d
 801ab2e:	4276      	negs	r6, r6
 801ab30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801ab34:	485e      	ldr	r0, [pc, #376]	; (801acb0 <_printf_i+0x244>)
 801ab36:	230a      	movs	r3, #10
 801ab38:	e019      	b.n	801ab6e <_printf_i+0x102>
 801ab3a:	680e      	ldr	r6, [r1, #0]
 801ab3c:	602b      	str	r3, [r5, #0]
 801ab3e:	f010 0f40 	tst.w	r0, #64	; 0x40
 801ab42:	bf18      	it	ne
 801ab44:	b236      	sxthne	r6, r6
 801ab46:	e7ef      	b.n	801ab28 <_printf_i+0xbc>
 801ab48:	682b      	ldr	r3, [r5, #0]
 801ab4a:	6820      	ldr	r0, [r4, #0]
 801ab4c:	1d19      	adds	r1, r3, #4
 801ab4e:	6029      	str	r1, [r5, #0]
 801ab50:	0601      	lsls	r1, r0, #24
 801ab52:	d501      	bpl.n	801ab58 <_printf_i+0xec>
 801ab54:	681e      	ldr	r6, [r3, #0]
 801ab56:	e002      	b.n	801ab5e <_printf_i+0xf2>
 801ab58:	0646      	lsls	r6, r0, #25
 801ab5a:	d5fb      	bpl.n	801ab54 <_printf_i+0xe8>
 801ab5c:	881e      	ldrh	r6, [r3, #0]
 801ab5e:	4854      	ldr	r0, [pc, #336]	; (801acb0 <_printf_i+0x244>)
 801ab60:	2f6f      	cmp	r7, #111	; 0x6f
 801ab62:	bf0c      	ite	eq
 801ab64:	2308      	moveq	r3, #8
 801ab66:	230a      	movne	r3, #10
 801ab68:	2100      	movs	r1, #0
 801ab6a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801ab6e:	6865      	ldr	r5, [r4, #4]
 801ab70:	60a5      	str	r5, [r4, #8]
 801ab72:	2d00      	cmp	r5, #0
 801ab74:	bfa2      	ittt	ge
 801ab76:	6821      	ldrge	r1, [r4, #0]
 801ab78:	f021 0104 	bicge.w	r1, r1, #4
 801ab7c:	6021      	strge	r1, [r4, #0]
 801ab7e:	b90e      	cbnz	r6, 801ab84 <_printf_i+0x118>
 801ab80:	2d00      	cmp	r5, #0
 801ab82:	d04d      	beq.n	801ac20 <_printf_i+0x1b4>
 801ab84:	4615      	mov	r5, r2
 801ab86:	fbb6 f1f3 	udiv	r1, r6, r3
 801ab8a:	fb03 6711 	mls	r7, r3, r1, r6
 801ab8e:	5dc7      	ldrb	r7, [r0, r7]
 801ab90:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801ab94:	4637      	mov	r7, r6
 801ab96:	42bb      	cmp	r3, r7
 801ab98:	460e      	mov	r6, r1
 801ab9a:	d9f4      	bls.n	801ab86 <_printf_i+0x11a>
 801ab9c:	2b08      	cmp	r3, #8
 801ab9e:	d10b      	bne.n	801abb8 <_printf_i+0x14c>
 801aba0:	6823      	ldr	r3, [r4, #0]
 801aba2:	07de      	lsls	r6, r3, #31
 801aba4:	d508      	bpl.n	801abb8 <_printf_i+0x14c>
 801aba6:	6923      	ldr	r3, [r4, #16]
 801aba8:	6861      	ldr	r1, [r4, #4]
 801abaa:	4299      	cmp	r1, r3
 801abac:	bfde      	ittt	le
 801abae:	2330      	movle	r3, #48	; 0x30
 801abb0:	f805 3c01 	strble.w	r3, [r5, #-1]
 801abb4:	f105 35ff 	addle.w	r5, r5, #4294967295
 801abb8:	1b52      	subs	r2, r2, r5
 801abba:	6122      	str	r2, [r4, #16]
 801abbc:	f8cd a000 	str.w	sl, [sp]
 801abc0:	464b      	mov	r3, r9
 801abc2:	aa03      	add	r2, sp, #12
 801abc4:	4621      	mov	r1, r4
 801abc6:	4640      	mov	r0, r8
 801abc8:	f7ff fee2 	bl	801a990 <_printf_common>
 801abcc:	3001      	adds	r0, #1
 801abce:	d14c      	bne.n	801ac6a <_printf_i+0x1fe>
 801abd0:	f04f 30ff 	mov.w	r0, #4294967295
 801abd4:	b004      	add	sp, #16
 801abd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801abda:	4835      	ldr	r0, [pc, #212]	; (801acb0 <_printf_i+0x244>)
 801abdc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801abe0:	6829      	ldr	r1, [r5, #0]
 801abe2:	6823      	ldr	r3, [r4, #0]
 801abe4:	f851 6b04 	ldr.w	r6, [r1], #4
 801abe8:	6029      	str	r1, [r5, #0]
 801abea:	061d      	lsls	r5, r3, #24
 801abec:	d514      	bpl.n	801ac18 <_printf_i+0x1ac>
 801abee:	07df      	lsls	r7, r3, #31
 801abf0:	bf44      	itt	mi
 801abf2:	f043 0320 	orrmi.w	r3, r3, #32
 801abf6:	6023      	strmi	r3, [r4, #0]
 801abf8:	b91e      	cbnz	r6, 801ac02 <_printf_i+0x196>
 801abfa:	6823      	ldr	r3, [r4, #0]
 801abfc:	f023 0320 	bic.w	r3, r3, #32
 801ac00:	6023      	str	r3, [r4, #0]
 801ac02:	2310      	movs	r3, #16
 801ac04:	e7b0      	b.n	801ab68 <_printf_i+0xfc>
 801ac06:	6823      	ldr	r3, [r4, #0]
 801ac08:	f043 0320 	orr.w	r3, r3, #32
 801ac0c:	6023      	str	r3, [r4, #0]
 801ac0e:	2378      	movs	r3, #120	; 0x78
 801ac10:	4828      	ldr	r0, [pc, #160]	; (801acb4 <_printf_i+0x248>)
 801ac12:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801ac16:	e7e3      	b.n	801abe0 <_printf_i+0x174>
 801ac18:	0659      	lsls	r1, r3, #25
 801ac1a:	bf48      	it	mi
 801ac1c:	b2b6      	uxthmi	r6, r6
 801ac1e:	e7e6      	b.n	801abee <_printf_i+0x182>
 801ac20:	4615      	mov	r5, r2
 801ac22:	e7bb      	b.n	801ab9c <_printf_i+0x130>
 801ac24:	682b      	ldr	r3, [r5, #0]
 801ac26:	6826      	ldr	r6, [r4, #0]
 801ac28:	6961      	ldr	r1, [r4, #20]
 801ac2a:	1d18      	adds	r0, r3, #4
 801ac2c:	6028      	str	r0, [r5, #0]
 801ac2e:	0635      	lsls	r5, r6, #24
 801ac30:	681b      	ldr	r3, [r3, #0]
 801ac32:	d501      	bpl.n	801ac38 <_printf_i+0x1cc>
 801ac34:	6019      	str	r1, [r3, #0]
 801ac36:	e002      	b.n	801ac3e <_printf_i+0x1d2>
 801ac38:	0670      	lsls	r0, r6, #25
 801ac3a:	d5fb      	bpl.n	801ac34 <_printf_i+0x1c8>
 801ac3c:	8019      	strh	r1, [r3, #0]
 801ac3e:	2300      	movs	r3, #0
 801ac40:	6123      	str	r3, [r4, #16]
 801ac42:	4615      	mov	r5, r2
 801ac44:	e7ba      	b.n	801abbc <_printf_i+0x150>
 801ac46:	682b      	ldr	r3, [r5, #0]
 801ac48:	1d1a      	adds	r2, r3, #4
 801ac4a:	602a      	str	r2, [r5, #0]
 801ac4c:	681d      	ldr	r5, [r3, #0]
 801ac4e:	6862      	ldr	r2, [r4, #4]
 801ac50:	2100      	movs	r1, #0
 801ac52:	4628      	mov	r0, r5
 801ac54:	f7e5 fabc 	bl	80001d0 <memchr>
 801ac58:	b108      	cbz	r0, 801ac5e <_printf_i+0x1f2>
 801ac5a:	1b40      	subs	r0, r0, r5
 801ac5c:	6060      	str	r0, [r4, #4]
 801ac5e:	6863      	ldr	r3, [r4, #4]
 801ac60:	6123      	str	r3, [r4, #16]
 801ac62:	2300      	movs	r3, #0
 801ac64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801ac68:	e7a8      	b.n	801abbc <_printf_i+0x150>
 801ac6a:	6923      	ldr	r3, [r4, #16]
 801ac6c:	462a      	mov	r2, r5
 801ac6e:	4649      	mov	r1, r9
 801ac70:	4640      	mov	r0, r8
 801ac72:	47d0      	blx	sl
 801ac74:	3001      	adds	r0, #1
 801ac76:	d0ab      	beq.n	801abd0 <_printf_i+0x164>
 801ac78:	6823      	ldr	r3, [r4, #0]
 801ac7a:	079b      	lsls	r3, r3, #30
 801ac7c:	d413      	bmi.n	801aca6 <_printf_i+0x23a>
 801ac7e:	68e0      	ldr	r0, [r4, #12]
 801ac80:	9b03      	ldr	r3, [sp, #12]
 801ac82:	4298      	cmp	r0, r3
 801ac84:	bfb8      	it	lt
 801ac86:	4618      	movlt	r0, r3
 801ac88:	e7a4      	b.n	801abd4 <_printf_i+0x168>
 801ac8a:	2301      	movs	r3, #1
 801ac8c:	4632      	mov	r2, r6
 801ac8e:	4649      	mov	r1, r9
 801ac90:	4640      	mov	r0, r8
 801ac92:	47d0      	blx	sl
 801ac94:	3001      	adds	r0, #1
 801ac96:	d09b      	beq.n	801abd0 <_printf_i+0x164>
 801ac98:	3501      	adds	r5, #1
 801ac9a:	68e3      	ldr	r3, [r4, #12]
 801ac9c:	9903      	ldr	r1, [sp, #12]
 801ac9e:	1a5b      	subs	r3, r3, r1
 801aca0:	42ab      	cmp	r3, r5
 801aca2:	dcf2      	bgt.n	801ac8a <_printf_i+0x21e>
 801aca4:	e7eb      	b.n	801ac7e <_printf_i+0x212>
 801aca6:	2500      	movs	r5, #0
 801aca8:	f104 0619 	add.w	r6, r4, #25
 801acac:	e7f5      	b.n	801ac9a <_printf_i+0x22e>
 801acae:	bf00      	nop
 801acb0:	0801d9d1 	.word	0x0801d9d1
 801acb4:	0801d9e2 	.word	0x0801d9e2

0801acb8 <_sbrk_r>:
 801acb8:	b538      	push	{r3, r4, r5, lr}
 801acba:	4d06      	ldr	r5, [pc, #24]	; (801acd4 <_sbrk_r+0x1c>)
 801acbc:	2300      	movs	r3, #0
 801acbe:	4604      	mov	r4, r0
 801acc0:	4608      	mov	r0, r1
 801acc2:	602b      	str	r3, [r5, #0]
 801acc4:	f7ea fb30 	bl	8005328 <_sbrk>
 801acc8:	1c43      	adds	r3, r0, #1
 801acca:	d102      	bne.n	801acd2 <_sbrk_r+0x1a>
 801accc:	682b      	ldr	r3, [r5, #0]
 801acce:	b103      	cbz	r3, 801acd2 <_sbrk_r+0x1a>
 801acd0:	6023      	str	r3, [r4, #0]
 801acd2:	bd38      	pop	{r3, r4, r5, pc}
 801acd4:	20004b2c 	.word	0x20004b2c

0801acd8 <_raise_r>:
 801acd8:	291f      	cmp	r1, #31
 801acda:	b538      	push	{r3, r4, r5, lr}
 801acdc:	4604      	mov	r4, r0
 801acde:	460d      	mov	r5, r1
 801ace0:	d904      	bls.n	801acec <_raise_r+0x14>
 801ace2:	2316      	movs	r3, #22
 801ace4:	6003      	str	r3, [r0, #0]
 801ace6:	f04f 30ff 	mov.w	r0, #4294967295
 801acea:	bd38      	pop	{r3, r4, r5, pc}
 801acec:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801acee:	b112      	cbz	r2, 801acf6 <_raise_r+0x1e>
 801acf0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801acf4:	b94b      	cbnz	r3, 801ad0a <_raise_r+0x32>
 801acf6:	4620      	mov	r0, r4
 801acf8:	f000 f830 	bl	801ad5c <_getpid_r>
 801acfc:	462a      	mov	r2, r5
 801acfe:	4601      	mov	r1, r0
 801ad00:	4620      	mov	r0, r4
 801ad02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ad06:	f000 b817 	b.w	801ad38 <_kill_r>
 801ad0a:	2b01      	cmp	r3, #1
 801ad0c:	d00a      	beq.n	801ad24 <_raise_r+0x4c>
 801ad0e:	1c59      	adds	r1, r3, #1
 801ad10:	d103      	bne.n	801ad1a <_raise_r+0x42>
 801ad12:	2316      	movs	r3, #22
 801ad14:	6003      	str	r3, [r0, #0]
 801ad16:	2001      	movs	r0, #1
 801ad18:	e7e7      	b.n	801acea <_raise_r+0x12>
 801ad1a:	2400      	movs	r4, #0
 801ad1c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801ad20:	4628      	mov	r0, r5
 801ad22:	4798      	blx	r3
 801ad24:	2000      	movs	r0, #0
 801ad26:	e7e0      	b.n	801acea <_raise_r+0x12>

0801ad28 <raise>:
 801ad28:	4b02      	ldr	r3, [pc, #8]	; (801ad34 <raise+0xc>)
 801ad2a:	4601      	mov	r1, r0
 801ad2c:	6818      	ldr	r0, [r3, #0]
 801ad2e:	f7ff bfd3 	b.w	801acd8 <_raise_r>
 801ad32:	bf00      	nop
 801ad34:	20000258 	.word	0x20000258

0801ad38 <_kill_r>:
 801ad38:	b538      	push	{r3, r4, r5, lr}
 801ad3a:	4d07      	ldr	r5, [pc, #28]	; (801ad58 <_kill_r+0x20>)
 801ad3c:	2300      	movs	r3, #0
 801ad3e:	4604      	mov	r4, r0
 801ad40:	4608      	mov	r0, r1
 801ad42:	4611      	mov	r1, r2
 801ad44:	602b      	str	r3, [r5, #0]
 801ad46:	f7ea fa67 	bl	8005218 <_kill>
 801ad4a:	1c43      	adds	r3, r0, #1
 801ad4c:	d102      	bne.n	801ad54 <_kill_r+0x1c>
 801ad4e:	682b      	ldr	r3, [r5, #0]
 801ad50:	b103      	cbz	r3, 801ad54 <_kill_r+0x1c>
 801ad52:	6023      	str	r3, [r4, #0]
 801ad54:	bd38      	pop	{r3, r4, r5, pc}
 801ad56:	bf00      	nop
 801ad58:	20004b2c 	.word	0x20004b2c

0801ad5c <_getpid_r>:
 801ad5c:	f7ea ba54 	b.w	8005208 <_getpid>

0801ad60 <_vsiprintf_r>:
 801ad60:	b500      	push	{lr}
 801ad62:	b09b      	sub	sp, #108	; 0x6c
 801ad64:	9100      	str	r1, [sp, #0]
 801ad66:	9104      	str	r1, [sp, #16]
 801ad68:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801ad6c:	9105      	str	r1, [sp, #20]
 801ad6e:	9102      	str	r1, [sp, #8]
 801ad70:	4905      	ldr	r1, [pc, #20]	; (801ad88 <_vsiprintf_r+0x28>)
 801ad72:	9103      	str	r1, [sp, #12]
 801ad74:	4669      	mov	r1, sp
 801ad76:	f000 fb85 	bl	801b484 <_svfiprintf_r>
 801ad7a:	9b00      	ldr	r3, [sp, #0]
 801ad7c:	2200      	movs	r2, #0
 801ad7e:	701a      	strb	r2, [r3, #0]
 801ad80:	b01b      	add	sp, #108	; 0x6c
 801ad82:	f85d fb04 	ldr.w	pc, [sp], #4
 801ad86:	bf00      	nop
 801ad88:	ffff0208 	.word	0xffff0208

0801ad8c <vsiprintf>:
 801ad8c:	4613      	mov	r3, r2
 801ad8e:	460a      	mov	r2, r1
 801ad90:	4601      	mov	r1, r0
 801ad92:	4802      	ldr	r0, [pc, #8]	; (801ad9c <vsiprintf+0x10>)
 801ad94:	6800      	ldr	r0, [r0, #0]
 801ad96:	f7ff bfe3 	b.w	801ad60 <_vsiprintf_r>
 801ad9a:	bf00      	nop
 801ad9c:	20000258 	.word	0x20000258

0801ada0 <__swbuf_r>:
 801ada0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ada2:	460e      	mov	r6, r1
 801ada4:	4614      	mov	r4, r2
 801ada6:	4605      	mov	r5, r0
 801ada8:	b118      	cbz	r0, 801adb2 <__swbuf_r+0x12>
 801adaa:	6983      	ldr	r3, [r0, #24]
 801adac:	b90b      	cbnz	r3, 801adb2 <__swbuf_r+0x12>
 801adae:	f000 f9d1 	bl	801b154 <__sinit>
 801adb2:	4b21      	ldr	r3, [pc, #132]	; (801ae38 <__swbuf_r+0x98>)
 801adb4:	429c      	cmp	r4, r3
 801adb6:	d12b      	bne.n	801ae10 <__swbuf_r+0x70>
 801adb8:	686c      	ldr	r4, [r5, #4]
 801adba:	69a3      	ldr	r3, [r4, #24]
 801adbc:	60a3      	str	r3, [r4, #8]
 801adbe:	89a3      	ldrh	r3, [r4, #12]
 801adc0:	071a      	lsls	r2, r3, #28
 801adc2:	d52f      	bpl.n	801ae24 <__swbuf_r+0x84>
 801adc4:	6923      	ldr	r3, [r4, #16]
 801adc6:	b36b      	cbz	r3, 801ae24 <__swbuf_r+0x84>
 801adc8:	6923      	ldr	r3, [r4, #16]
 801adca:	6820      	ldr	r0, [r4, #0]
 801adcc:	1ac0      	subs	r0, r0, r3
 801adce:	6963      	ldr	r3, [r4, #20]
 801add0:	b2f6      	uxtb	r6, r6
 801add2:	4283      	cmp	r3, r0
 801add4:	4637      	mov	r7, r6
 801add6:	dc04      	bgt.n	801ade2 <__swbuf_r+0x42>
 801add8:	4621      	mov	r1, r4
 801adda:	4628      	mov	r0, r5
 801addc:	f000 f926 	bl	801b02c <_fflush_r>
 801ade0:	bb30      	cbnz	r0, 801ae30 <__swbuf_r+0x90>
 801ade2:	68a3      	ldr	r3, [r4, #8]
 801ade4:	3b01      	subs	r3, #1
 801ade6:	60a3      	str	r3, [r4, #8]
 801ade8:	6823      	ldr	r3, [r4, #0]
 801adea:	1c5a      	adds	r2, r3, #1
 801adec:	6022      	str	r2, [r4, #0]
 801adee:	701e      	strb	r6, [r3, #0]
 801adf0:	6963      	ldr	r3, [r4, #20]
 801adf2:	3001      	adds	r0, #1
 801adf4:	4283      	cmp	r3, r0
 801adf6:	d004      	beq.n	801ae02 <__swbuf_r+0x62>
 801adf8:	89a3      	ldrh	r3, [r4, #12]
 801adfa:	07db      	lsls	r3, r3, #31
 801adfc:	d506      	bpl.n	801ae0c <__swbuf_r+0x6c>
 801adfe:	2e0a      	cmp	r6, #10
 801ae00:	d104      	bne.n	801ae0c <__swbuf_r+0x6c>
 801ae02:	4621      	mov	r1, r4
 801ae04:	4628      	mov	r0, r5
 801ae06:	f000 f911 	bl	801b02c <_fflush_r>
 801ae0a:	b988      	cbnz	r0, 801ae30 <__swbuf_r+0x90>
 801ae0c:	4638      	mov	r0, r7
 801ae0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ae10:	4b0a      	ldr	r3, [pc, #40]	; (801ae3c <__swbuf_r+0x9c>)
 801ae12:	429c      	cmp	r4, r3
 801ae14:	d101      	bne.n	801ae1a <__swbuf_r+0x7a>
 801ae16:	68ac      	ldr	r4, [r5, #8]
 801ae18:	e7cf      	b.n	801adba <__swbuf_r+0x1a>
 801ae1a:	4b09      	ldr	r3, [pc, #36]	; (801ae40 <__swbuf_r+0xa0>)
 801ae1c:	429c      	cmp	r4, r3
 801ae1e:	bf08      	it	eq
 801ae20:	68ec      	ldreq	r4, [r5, #12]
 801ae22:	e7ca      	b.n	801adba <__swbuf_r+0x1a>
 801ae24:	4621      	mov	r1, r4
 801ae26:	4628      	mov	r0, r5
 801ae28:	f000 f80c 	bl	801ae44 <__swsetup_r>
 801ae2c:	2800      	cmp	r0, #0
 801ae2e:	d0cb      	beq.n	801adc8 <__swbuf_r+0x28>
 801ae30:	f04f 37ff 	mov.w	r7, #4294967295
 801ae34:	e7ea      	b.n	801ae0c <__swbuf_r+0x6c>
 801ae36:	bf00      	nop
 801ae38:	0801da14 	.word	0x0801da14
 801ae3c:	0801da34 	.word	0x0801da34
 801ae40:	0801d9f4 	.word	0x0801d9f4

0801ae44 <__swsetup_r>:
 801ae44:	4b32      	ldr	r3, [pc, #200]	; (801af10 <__swsetup_r+0xcc>)
 801ae46:	b570      	push	{r4, r5, r6, lr}
 801ae48:	681d      	ldr	r5, [r3, #0]
 801ae4a:	4606      	mov	r6, r0
 801ae4c:	460c      	mov	r4, r1
 801ae4e:	b125      	cbz	r5, 801ae5a <__swsetup_r+0x16>
 801ae50:	69ab      	ldr	r3, [r5, #24]
 801ae52:	b913      	cbnz	r3, 801ae5a <__swsetup_r+0x16>
 801ae54:	4628      	mov	r0, r5
 801ae56:	f000 f97d 	bl	801b154 <__sinit>
 801ae5a:	4b2e      	ldr	r3, [pc, #184]	; (801af14 <__swsetup_r+0xd0>)
 801ae5c:	429c      	cmp	r4, r3
 801ae5e:	d10f      	bne.n	801ae80 <__swsetup_r+0x3c>
 801ae60:	686c      	ldr	r4, [r5, #4]
 801ae62:	89a3      	ldrh	r3, [r4, #12]
 801ae64:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801ae68:	0719      	lsls	r1, r3, #28
 801ae6a:	d42c      	bmi.n	801aec6 <__swsetup_r+0x82>
 801ae6c:	06dd      	lsls	r5, r3, #27
 801ae6e:	d411      	bmi.n	801ae94 <__swsetup_r+0x50>
 801ae70:	2309      	movs	r3, #9
 801ae72:	6033      	str	r3, [r6, #0]
 801ae74:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801ae78:	81a3      	strh	r3, [r4, #12]
 801ae7a:	f04f 30ff 	mov.w	r0, #4294967295
 801ae7e:	e03e      	b.n	801aefe <__swsetup_r+0xba>
 801ae80:	4b25      	ldr	r3, [pc, #148]	; (801af18 <__swsetup_r+0xd4>)
 801ae82:	429c      	cmp	r4, r3
 801ae84:	d101      	bne.n	801ae8a <__swsetup_r+0x46>
 801ae86:	68ac      	ldr	r4, [r5, #8]
 801ae88:	e7eb      	b.n	801ae62 <__swsetup_r+0x1e>
 801ae8a:	4b24      	ldr	r3, [pc, #144]	; (801af1c <__swsetup_r+0xd8>)
 801ae8c:	429c      	cmp	r4, r3
 801ae8e:	bf08      	it	eq
 801ae90:	68ec      	ldreq	r4, [r5, #12]
 801ae92:	e7e6      	b.n	801ae62 <__swsetup_r+0x1e>
 801ae94:	0758      	lsls	r0, r3, #29
 801ae96:	d512      	bpl.n	801aebe <__swsetup_r+0x7a>
 801ae98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801ae9a:	b141      	cbz	r1, 801aeae <__swsetup_r+0x6a>
 801ae9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801aea0:	4299      	cmp	r1, r3
 801aea2:	d002      	beq.n	801aeaa <__swsetup_r+0x66>
 801aea4:	4630      	mov	r0, r6
 801aea6:	f7ff fb39 	bl	801a51c <_free_r>
 801aeaa:	2300      	movs	r3, #0
 801aeac:	6363      	str	r3, [r4, #52]	; 0x34
 801aeae:	89a3      	ldrh	r3, [r4, #12]
 801aeb0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801aeb4:	81a3      	strh	r3, [r4, #12]
 801aeb6:	2300      	movs	r3, #0
 801aeb8:	6063      	str	r3, [r4, #4]
 801aeba:	6923      	ldr	r3, [r4, #16]
 801aebc:	6023      	str	r3, [r4, #0]
 801aebe:	89a3      	ldrh	r3, [r4, #12]
 801aec0:	f043 0308 	orr.w	r3, r3, #8
 801aec4:	81a3      	strh	r3, [r4, #12]
 801aec6:	6923      	ldr	r3, [r4, #16]
 801aec8:	b94b      	cbnz	r3, 801aede <__swsetup_r+0x9a>
 801aeca:	89a3      	ldrh	r3, [r4, #12]
 801aecc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801aed0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801aed4:	d003      	beq.n	801aede <__swsetup_r+0x9a>
 801aed6:	4621      	mov	r1, r4
 801aed8:	4630      	mov	r0, r6
 801aeda:	f000 f9fd 	bl	801b2d8 <__smakebuf_r>
 801aede:	89a0      	ldrh	r0, [r4, #12]
 801aee0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801aee4:	f010 0301 	ands.w	r3, r0, #1
 801aee8:	d00a      	beq.n	801af00 <__swsetup_r+0xbc>
 801aeea:	2300      	movs	r3, #0
 801aeec:	60a3      	str	r3, [r4, #8]
 801aeee:	6963      	ldr	r3, [r4, #20]
 801aef0:	425b      	negs	r3, r3
 801aef2:	61a3      	str	r3, [r4, #24]
 801aef4:	6923      	ldr	r3, [r4, #16]
 801aef6:	b943      	cbnz	r3, 801af0a <__swsetup_r+0xc6>
 801aef8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801aefc:	d1ba      	bne.n	801ae74 <__swsetup_r+0x30>
 801aefe:	bd70      	pop	{r4, r5, r6, pc}
 801af00:	0781      	lsls	r1, r0, #30
 801af02:	bf58      	it	pl
 801af04:	6963      	ldrpl	r3, [r4, #20]
 801af06:	60a3      	str	r3, [r4, #8]
 801af08:	e7f4      	b.n	801aef4 <__swsetup_r+0xb0>
 801af0a:	2000      	movs	r0, #0
 801af0c:	e7f7      	b.n	801aefe <__swsetup_r+0xba>
 801af0e:	bf00      	nop
 801af10:	20000258 	.word	0x20000258
 801af14:	0801da14 	.word	0x0801da14
 801af18:	0801da34 	.word	0x0801da34
 801af1c:	0801d9f4 	.word	0x0801d9f4

0801af20 <__sflush_r>:
 801af20:	898a      	ldrh	r2, [r1, #12]
 801af22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801af26:	4605      	mov	r5, r0
 801af28:	0710      	lsls	r0, r2, #28
 801af2a:	460c      	mov	r4, r1
 801af2c:	d458      	bmi.n	801afe0 <__sflush_r+0xc0>
 801af2e:	684b      	ldr	r3, [r1, #4]
 801af30:	2b00      	cmp	r3, #0
 801af32:	dc05      	bgt.n	801af40 <__sflush_r+0x20>
 801af34:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801af36:	2b00      	cmp	r3, #0
 801af38:	dc02      	bgt.n	801af40 <__sflush_r+0x20>
 801af3a:	2000      	movs	r0, #0
 801af3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801af40:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801af42:	2e00      	cmp	r6, #0
 801af44:	d0f9      	beq.n	801af3a <__sflush_r+0x1a>
 801af46:	2300      	movs	r3, #0
 801af48:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801af4c:	682f      	ldr	r7, [r5, #0]
 801af4e:	602b      	str	r3, [r5, #0]
 801af50:	d032      	beq.n	801afb8 <__sflush_r+0x98>
 801af52:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801af54:	89a3      	ldrh	r3, [r4, #12]
 801af56:	075a      	lsls	r2, r3, #29
 801af58:	d505      	bpl.n	801af66 <__sflush_r+0x46>
 801af5a:	6863      	ldr	r3, [r4, #4]
 801af5c:	1ac0      	subs	r0, r0, r3
 801af5e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801af60:	b10b      	cbz	r3, 801af66 <__sflush_r+0x46>
 801af62:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801af64:	1ac0      	subs	r0, r0, r3
 801af66:	2300      	movs	r3, #0
 801af68:	4602      	mov	r2, r0
 801af6a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801af6c:	6a21      	ldr	r1, [r4, #32]
 801af6e:	4628      	mov	r0, r5
 801af70:	47b0      	blx	r6
 801af72:	1c43      	adds	r3, r0, #1
 801af74:	89a3      	ldrh	r3, [r4, #12]
 801af76:	d106      	bne.n	801af86 <__sflush_r+0x66>
 801af78:	6829      	ldr	r1, [r5, #0]
 801af7a:	291d      	cmp	r1, #29
 801af7c:	d82c      	bhi.n	801afd8 <__sflush_r+0xb8>
 801af7e:	4a2a      	ldr	r2, [pc, #168]	; (801b028 <__sflush_r+0x108>)
 801af80:	40ca      	lsrs	r2, r1
 801af82:	07d6      	lsls	r6, r2, #31
 801af84:	d528      	bpl.n	801afd8 <__sflush_r+0xb8>
 801af86:	2200      	movs	r2, #0
 801af88:	6062      	str	r2, [r4, #4]
 801af8a:	04d9      	lsls	r1, r3, #19
 801af8c:	6922      	ldr	r2, [r4, #16]
 801af8e:	6022      	str	r2, [r4, #0]
 801af90:	d504      	bpl.n	801af9c <__sflush_r+0x7c>
 801af92:	1c42      	adds	r2, r0, #1
 801af94:	d101      	bne.n	801af9a <__sflush_r+0x7a>
 801af96:	682b      	ldr	r3, [r5, #0]
 801af98:	b903      	cbnz	r3, 801af9c <__sflush_r+0x7c>
 801af9a:	6560      	str	r0, [r4, #84]	; 0x54
 801af9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801af9e:	602f      	str	r7, [r5, #0]
 801afa0:	2900      	cmp	r1, #0
 801afa2:	d0ca      	beq.n	801af3a <__sflush_r+0x1a>
 801afa4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801afa8:	4299      	cmp	r1, r3
 801afaa:	d002      	beq.n	801afb2 <__sflush_r+0x92>
 801afac:	4628      	mov	r0, r5
 801afae:	f7ff fab5 	bl	801a51c <_free_r>
 801afb2:	2000      	movs	r0, #0
 801afb4:	6360      	str	r0, [r4, #52]	; 0x34
 801afb6:	e7c1      	b.n	801af3c <__sflush_r+0x1c>
 801afb8:	6a21      	ldr	r1, [r4, #32]
 801afba:	2301      	movs	r3, #1
 801afbc:	4628      	mov	r0, r5
 801afbe:	47b0      	blx	r6
 801afc0:	1c41      	adds	r1, r0, #1
 801afc2:	d1c7      	bne.n	801af54 <__sflush_r+0x34>
 801afc4:	682b      	ldr	r3, [r5, #0]
 801afc6:	2b00      	cmp	r3, #0
 801afc8:	d0c4      	beq.n	801af54 <__sflush_r+0x34>
 801afca:	2b1d      	cmp	r3, #29
 801afcc:	d001      	beq.n	801afd2 <__sflush_r+0xb2>
 801afce:	2b16      	cmp	r3, #22
 801afd0:	d101      	bne.n	801afd6 <__sflush_r+0xb6>
 801afd2:	602f      	str	r7, [r5, #0]
 801afd4:	e7b1      	b.n	801af3a <__sflush_r+0x1a>
 801afd6:	89a3      	ldrh	r3, [r4, #12]
 801afd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801afdc:	81a3      	strh	r3, [r4, #12]
 801afde:	e7ad      	b.n	801af3c <__sflush_r+0x1c>
 801afe0:	690f      	ldr	r7, [r1, #16]
 801afe2:	2f00      	cmp	r7, #0
 801afe4:	d0a9      	beq.n	801af3a <__sflush_r+0x1a>
 801afe6:	0793      	lsls	r3, r2, #30
 801afe8:	680e      	ldr	r6, [r1, #0]
 801afea:	bf08      	it	eq
 801afec:	694b      	ldreq	r3, [r1, #20]
 801afee:	600f      	str	r7, [r1, #0]
 801aff0:	bf18      	it	ne
 801aff2:	2300      	movne	r3, #0
 801aff4:	eba6 0807 	sub.w	r8, r6, r7
 801aff8:	608b      	str	r3, [r1, #8]
 801affa:	f1b8 0f00 	cmp.w	r8, #0
 801affe:	dd9c      	ble.n	801af3a <__sflush_r+0x1a>
 801b000:	6a21      	ldr	r1, [r4, #32]
 801b002:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801b004:	4643      	mov	r3, r8
 801b006:	463a      	mov	r2, r7
 801b008:	4628      	mov	r0, r5
 801b00a:	47b0      	blx	r6
 801b00c:	2800      	cmp	r0, #0
 801b00e:	dc06      	bgt.n	801b01e <__sflush_r+0xfe>
 801b010:	89a3      	ldrh	r3, [r4, #12]
 801b012:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b016:	81a3      	strh	r3, [r4, #12]
 801b018:	f04f 30ff 	mov.w	r0, #4294967295
 801b01c:	e78e      	b.n	801af3c <__sflush_r+0x1c>
 801b01e:	4407      	add	r7, r0
 801b020:	eba8 0800 	sub.w	r8, r8, r0
 801b024:	e7e9      	b.n	801affa <__sflush_r+0xda>
 801b026:	bf00      	nop
 801b028:	20400001 	.word	0x20400001

0801b02c <_fflush_r>:
 801b02c:	b538      	push	{r3, r4, r5, lr}
 801b02e:	690b      	ldr	r3, [r1, #16]
 801b030:	4605      	mov	r5, r0
 801b032:	460c      	mov	r4, r1
 801b034:	b913      	cbnz	r3, 801b03c <_fflush_r+0x10>
 801b036:	2500      	movs	r5, #0
 801b038:	4628      	mov	r0, r5
 801b03a:	bd38      	pop	{r3, r4, r5, pc}
 801b03c:	b118      	cbz	r0, 801b046 <_fflush_r+0x1a>
 801b03e:	6983      	ldr	r3, [r0, #24]
 801b040:	b90b      	cbnz	r3, 801b046 <_fflush_r+0x1a>
 801b042:	f000 f887 	bl	801b154 <__sinit>
 801b046:	4b14      	ldr	r3, [pc, #80]	; (801b098 <_fflush_r+0x6c>)
 801b048:	429c      	cmp	r4, r3
 801b04a:	d11b      	bne.n	801b084 <_fflush_r+0x58>
 801b04c:	686c      	ldr	r4, [r5, #4]
 801b04e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b052:	2b00      	cmp	r3, #0
 801b054:	d0ef      	beq.n	801b036 <_fflush_r+0xa>
 801b056:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801b058:	07d0      	lsls	r0, r2, #31
 801b05a:	d404      	bmi.n	801b066 <_fflush_r+0x3a>
 801b05c:	0599      	lsls	r1, r3, #22
 801b05e:	d402      	bmi.n	801b066 <_fflush_r+0x3a>
 801b060:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b062:	f7ff fa02 	bl	801a46a <__retarget_lock_acquire_recursive>
 801b066:	4628      	mov	r0, r5
 801b068:	4621      	mov	r1, r4
 801b06a:	f7ff ff59 	bl	801af20 <__sflush_r>
 801b06e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b070:	07da      	lsls	r2, r3, #31
 801b072:	4605      	mov	r5, r0
 801b074:	d4e0      	bmi.n	801b038 <_fflush_r+0xc>
 801b076:	89a3      	ldrh	r3, [r4, #12]
 801b078:	059b      	lsls	r3, r3, #22
 801b07a:	d4dd      	bmi.n	801b038 <_fflush_r+0xc>
 801b07c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b07e:	f7ff f9f5 	bl	801a46c <__retarget_lock_release_recursive>
 801b082:	e7d9      	b.n	801b038 <_fflush_r+0xc>
 801b084:	4b05      	ldr	r3, [pc, #20]	; (801b09c <_fflush_r+0x70>)
 801b086:	429c      	cmp	r4, r3
 801b088:	d101      	bne.n	801b08e <_fflush_r+0x62>
 801b08a:	68ac      	ldr	r4, [r5, #8]
 801b08c:	e7df      	b.n	801b04e <_fflush_r+0x22>
 801b08e:	4b04      	ldr	r3, [pc, #16]	; (801b0a0 <_fflush_r+0x74>)
 801b090:	429c      	cmp	r4, r3
 801b092:	bf08      	it	eq
 801b094:	68ec      	ldreq	r4, [r5, #12]
 801b096:	e7da      	b.n	801b04e <_fflush_r+0x22>
 801b098:	0801da14 	.word	0x0801da14
 801b09c:	0801da34 	.word	0x0801da34
 801b0a0:	0801d9f4 	.word	0x0801d9f4

0801b0a4 <std>:
 801b0a4:	2300      	movs	r3, #0
 801b0a6:	b510      	push	{r4, lr}
 801b0a8:	4604      	mov	r4, r0
 801b0aa:	e9c0 3300 	strd	r3, r3, [r0]
 801b0ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801b0b2:	6083      	str	r3, [r0, #8]
 801b0b4:	8181      	strh	r1, [r0, #12]
 801b0b6:	6643      	str	r3, [r0, #100]	; 0x64
 801b0b8:	81c2      	strh	r2, [r0, #14]
 801b0ba:	6183      	str	r3, [r0, #24]
 801b0bc:	4619      	mov	r1, r3
 801b0be:	2208      	movs	r2, #8
 801b0c0:	305c      	adds	r0, #92	; 0x5c
 801b0c2:	f7ff fa0d 	bl	801a4e0 <memset>
 801b0c6:	4b05      	ldr	r3, [pc, #20]	; (801b0dc <std+0x38>)
 801b0c8:	6263      	str	r3, [r4, #36]	; 0x24
 801b0ca:	4b05      	ldr	r3, [pc, #20]	; (801b0e0 <std+0x3c>)
 801b0cc:	62a3      	str	r3, [r4, #40]	; 0x28
 801b0ce:	4b05      	ldr	r3, [pc, #20]	; (801b0e4 <std+0x40>)
 801b0d0:	62e3      	str	r3, [r4, #44]	; 0x2c
 801b0d2:	4b05      	ldr	r3, [pc, #20]	; (801b0e8 <std+0x44>)
 801b0d4:	6224      	str	r4, [r4, #32]
 801b0d6:	6323      	str	r3, [r4, #48]	; 0x30
 801b0d8:	bd10      	pop	{r4, pc}
 801b0da:	bf00      	nop
 801b0dc:	0801b685 	.word	0x0801b685
 801b0e0:	0801b6a7 	.word	0x0801b6a7
 801b0e4:	0801b6df 	.word	0x0801b6df
 801b0e8:	0801b703 	.word	0x0801b703

0801b0ec <_cleanup_r>:
 801b0ec:	4901      	ldr	r1, [pc, #4]	; (801b0f4 <_cleanup_r+0x8>)
 801b0ee:	f000 b8af 	b.w	801b250 <_fwalk_reent>
 801b0f2:	bf00      	nop
 801b0f4:	0801b02d 	.word	0x0801b02d

0801b0f8 <__sfmoreglue>:
 801b0f8:	b570      	push	{r4, r5, r6, lr}
 801b0fa:	2268      	movs	r2, #104	; 0x68
 801b0fc:	1e4d      	subs	r5, r1, #1
 801b0fe:	4355      	muls	r5, r2
 801b100:	460e      	mov	r6, r1
 801b102:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801b106:	f7ff fa75 	bl	801a5f4 <_malloc_r>
 801b10a:	4604      	mov	r4, r0
 801b10c:	b140      	cbz	r0, 801b120 <__sfmoreglue+0x28>
 801b10e:	2100      	movs	r1, #0
 801b110:	e9c0 1600 	strd	r1, r6, [r0]
 801b114:	300c      	adds	r0, #12
 801b116:	60a0      	str	r0, [r4, #8]
 801b118:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801b11c:	f7ff f9e0 	bl	801a4e0 <memset>
 801b120:	4620      	mov	r0, r4
 801b122:	bd70      	pop	{r4, r5, r6, pc}

0801b124 <__sfp_lock_acquire>:
 801b124:	4801      	ldr	r0, [pc, #4]	; (801b12c <__sfp_lock_acquire+0x8>)
 801b126:	f7ff b9a0 	b.w	801a46a <__retarget_lock_acquire_recursive>
 801b12a:	bf00      	nop
 801b12c:	20004b21 	.word	0x20004b21

0801b130 <__sfp_lock_release>:
 801b130:	4801      	ldr	r0, [pc, #4]	; (801b138 <__sfp_lock_release+0x8>)
 801b132:	f7ff b99b 	b.w	801a46c <__retarget_lock_release_recursive>
 801b136:	bf00      	nop
 801b138:	20004b21 	.word	0x20004b21

0801b13c <__sinit_lock_acquire>:
 801b13c:	4801      	ldr	r0, [pc, #4]	; (801b144 <__sinit_lock_acquire+0x8>)
 801b13e:	f7ff b994 	b.w	801a46a <__retarget_lock_acquire_recursive>
 801b142:	bf00      	nop
 801b144:	20004b22 	.word	0x20004b22

0801b148 <__sinit_lock_release>:
 801b148:	4801      	ldr	r0, [pc, #4]	; (801b150 <__sinit_lock_release+0x8>)
 801b14a:	f7ff b98f 	b.w	801a46c <__retarget_lock_release_recursive>
 801b14e:	bf00      	nop
 801b150:	20004b22 	.word	0x20004b22

0801b154 <__sinit>:
 801b154:	b510      	push	{r4, lr}
 801b156:	4604      	mov	r4, r0
 801b158:	f7ff fff0 	bl	801b13c <__sinit_lock_acquire>
 801b15c:	69a3      	ldr	r3, [r4, #24]
 801b15e:	b11b      	cbz	r3, 801b168 <__sinit+0x14>
 801b160:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b164:	f7ff bff0 	b.w	801b148 <__sinit_lock_release>
 801b168:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801b16c:	6523      	str	r3, [r4, #80]	; 0x50
 801b16e:	4b13      	ldr	r3, [pc, #76]	; (801b1bc <__sinit+0x68>)
 801b170:	4a13      	ldr	r2, [pc, #76]	; (801b1c0 <__sinit+0x6c>)
 801b172:	681b      	ldr	r3, [r3, #0]
 801b174:	62a2      	str	r2, [r4, #40]	; 0x28
 801b176:	42a3      	cmp	r3, r4
 801b178:	bf04      	itt	eq
 801b17a:	2301      	moveq	r3, #1
 801b17c:	61a3      	streq	r3, [r4, #24]
 801b17e:	4620      	mov	r0, r4
 801b180:	f000 f820 	bl	801b1c4 <__sfp>
 801b184:	6060      	str	r0, [r4, #4]
 801b186:	4620      	mov	r0, r4
 801b188:	f000 f81c 	bl	801b1c4 <__sfp>
 801b18c:	60a0      	str	r0, [r4, #8]
 801b18e:	4620      	mov	r0, r4
 801b190:	f000 f818 	bl	801b1c4 <__sfp>
 801b194:	2200      	movs	r2, #0
 801b196:	60e0      	str	r0, [r4, #12]
 801b198:	2104      	movs	r1, #4
 801b19a:	6860      	ldr	r0, [r4, #4]
 801b19c:	f7ff ff82 	bl	801b0a4 <std>
 801b1a0:	68a0      	ldr	r0, [r4, #8]
 801b1a2:	2201      	movs	r2, #1
 801b1a4:	2109      	movs	r1, #9
 801b1a6:	f7ff ff7d 	bl	801b0a4 <std>
 801b1aa:	68e0      	ldr	r0, [r4, #12]
 801b1ac:	2202      	movs	r2, #2
 801b1ae:	2112      	movs	r1, #18
 801b1b0:	f7ff ff78 	bl	801b0a4 <std>
 801b1b4:	2301      	movs	r3, #1
 801b1b6:	61a3      	str	r3, [r4, #24]
 801b1b8:	e7d2      	b.n	801b160 <__sinit+0xc>
 801b1ba:	bf00      	nop
 801b1bc:	0801d9bc 	.word	0x0801d9bc
 801b1c0:	0801b0ed 	.word	0x0801b0ed

0801b1c4 <__sfp>:
 801b1c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b1c6:	4607      	mov	r7, r0
 801b1c8:	f7ff ffac 	bl	801b124 <__sfp_lock_acquire>
 801b1cc:	4b1e      	ldr	r3, [pc, #120]	; (801b248 <__sfp+0x84>)
 801b1ce:	681e      	ldr	r6, [r3, #0]
 801b1d0:	69b3      	ldr	r3, [r6, #24]
 801b1d2:	b913      	cbnz	r3, 801b1da <__sfp+0x16>
 801b1d4:	4630      	mov	r0, r6
 801b1d6:	f7ff ffbd 	bl	801b154 <__sinit>
 801b1da:	3648      	adds	r6, #72	; 0x48
 801b1dc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801b1e0:	3b01      	subs	r3, #1
 801b1e2:	d503      	bpl.n	801b1ec <__sfp+0x28>
 801b1e4:	6833      	ldr	r3, [r6, #0]
 801b1e6:	b30b      	cbz	r3, 801b22c <__sfp+0x68>
 801b1e8:	6836      	ldr	r6, [r6, #0]
 801b1ea:	e7f7      	b.n	801b1dc <__sfp+0x18>
 801b1ec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801b1f0:	b9d5      	cbnz	r5, 801b228 <__sfp+0x64>
 801b1f2:	4b16      	ldr	r3, [pc, #88]	; (801b24c <__sfp+0x88>)
 801b1f4:	60e3      	str	r3, [r4, #12]
 801b1f6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801b1fa:	6665      	str	r5, [r4, #100]	; 0x64
 801b1fc:	f7ff f934 	bl	801a468 <__retarget_lock_init_recursive>
 801b200:	f7ff ff96 	bl	801b130 <__sfp_lock_release>
 801b204:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801b208:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801b20c:	6025      	str	r5, [r4, #0]
 801b20e:	61a5      	str	r5, [r4, #24]
 801b210:	2208      	movs	r2, #8
 801b212:	4629      	mov	r1, r5
 801b214:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801b218:	f7ff f962 	bl	801a4e0 <memset>
 801b21c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801b220:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801b224:	4620      	mov	r0, r4
 801b226:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b228:	3468      	adds	r4, #104	; 0x68
 801b22a:	e7d9      	b.n	801b1e0 <__sfp+0x1c>
 801b22c:	2104      	movs	r1, #4
 801b22e:	4638      	mov	r0, r7
 801b230:	f7ff ff62 	bl	801b0f8 <__sfmoreglue>
 801b234:	4604      	mov	r4, r0
 801b236:	6030      	str	r0, [r6, #0]
 801b238:	2800      	cmp	r0, #0
 801b23a:	d1d5      	bne.n	801b1e8 <__sfp+0x24>
 801b23c:	f7ff ff78 	bl	801b130 <__sfp_lock_release>
 801b240:	230c      	movs	r3, #12
 801b242:	603b      	str	r3, [r7, #0]
 801b244:	e7ee      	b.n	801b224 <__sfp+0x60>
 801b246:	bf00      	nop
 801b248:	0801d9bc 	.word	0x0801d9bc
 801b24c:	ffff0001 	.word	0xffff0001

0801b250 <_fwalk_reent>:
 801b250:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b254:	4606      	mov	r6, r0
 801b256:	4688      	mov	r8, r1
 801b258:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801b25c:	2700      	movs	r7, #0
 801b25e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801b262:	f1b9 0901 	subs.w	r9, r9, #1
 801b266:	d505      	bpl.n	801b274 <_fwalk_reent+0x24>
 801b268:	6824      	ldr	r4, [r4, #0]
 801b26a:	2c00      	cmp	r4, #0
 801b26c:	d1f7      	bne.n	801b25e <_fwalk_reent+0xe>
 801b26e:	4638      	mov	r0, r7
 801b270:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b274:	89ab      	ldrh	r3, [r5, #12]
 801b276:	2b01      	cmp	r3, #1
 801b278:	d907      	bls.n	801b28a <_fwalk_reent+0x3a>
 801b27a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801b27e:	3301      	adds	r3, #1
 801b280:	d003      	beq.n	801b28a <_fwalk_reent+0x3a>
 801b282:	4629      	mov	r1, r5
 801b284:	4630      	mov	r0, r6
 801b286:	47c0      	blx	r8
 801b288:	4307      	orrs	r7, r0
 801b28a:	3568      	adds	r5, #104	; 0x68
 801b28c:	e7e9      	b.n	801b262 <_fwalk_reent+0x12>

0801b28e <__swhatbuf_r>:
 801b28e:	b570      	push	{r4, r5, r6, lr}
 801b290:	460e      	mov	r6, r1
 801b292:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b296:	2900      	cmp	r1, #0
 801b298:	b096      	sub	sp, #88	; 0x58
 801b29a:	4614      	mov	r4, r2
 801b29c:	461d      	mov	r5, r3
 801b29e:	da08      	bge.n	801b2b2 <__swhatbuf_r+0x24>
 801b2a0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801b2a4:	2200      	movs	r2, #0
 801b2a6:	602a      	str	r2, [r5, #0]
 801b2a8:	061a      	lsls	r2, r3, #24
 801b2aa:	d410      	bmi.n	801b2ce <__swhatbuf_r+0x40>
 801b2ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801b2b0:	e00e      	b.n	801b2d0 <__swhatbuf_r+0x42>
 801b2b2:	466a      	mov	r2, sp
 801b2b4:	f000 fa4c 	bl	801b750 <_fstat_r>
 801b2b8:	2800      	cmp	r0, #0
 801b2ba:	dbf1      	blt.n	801b2a0 <__swhatbuf_r+0x12>
 801b2bc:	9a01      	ldr	r2, [sp, #4]
 801b2be:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801b2c2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801b2c6:	425a      	negs	r2, r3
 801b2c8:	415a      	adcs	r2, r3
 801b2ca:	602a      	str	r2, [r5, #0]
 801b2cc:	e7ee      	b.n	801b2ac <__swhatbuf_r+0x1e>
 801b2ce:	2340      	movs	r3, #64	; 0x40
 801b2d0:	2000      	movs	r0, #0
 801b2d2:	6023      	str	r3, [r4, #0]
 801b2d4:	b016      	add	sp, #88	; 0x58
 801b2d6:	bd70      	pop	{r4, r5, r6, pc}

0801b2d8 <__smakebuf_r>:
 801b2d8:	898b      	ldrh	r3, [r1, #12]
 801b2da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801b2dc:	079d      	lsls	r5, r3, #30
 801b2de:	4606      	mov	r6, r0
 801b2e0:	460c      	mov	r4, r1
 801b2e2:	d507      	bpl.n	801b2f4 <__smakebuf_r+0x1c>
 801b2e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801b2e8:	6023      	str	r3, [r4, #0]
 801b2ea:	6123      	str	r3, [r4, #16]
 801b2ec:	2301      	movs	r3, #1
 801b2ee:	6163      	str	r3, [r4, #20]
 801b2f0:	b002      	add	sp, #8
 801b2f2:	bd70      	pop	{r4, r5, r6, pc}
 801b2f4:	ab01      	add	r3, sp, #4
 801b2f6:	466a      	mov	r2, sp
 801b2f8:	f7ff ffc9 	bl	801b28e <__swhatbuf_r>
 801b2fc:	9900      	ldr	r1, [sp, #0]
 801b2fe:	4605      	mov	r5, r0
 801b300:	4630      	mov	r0, r6
 801b302:	f7ff f977 	bl	801a5f4 <_malloc_r>
 801b306:	b948      	cbnz	r0, 801b31c <__smakebuf_r+0x44>
 801b308:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b30c:	059a      	lsls	r2, r3, #22
 801b30e:	d4ef      	bmi.n	801b2f0 <__smakebuf_r+0x18>
 801b310:	f023 0303 	bic.w	r3, r3, #3
 801b314:	f043 0302 	orr.w	r3, r3, #2
 801b318:	81a3      	strh	r3, [r4, #12]
 801b31a:	e7e3      	b.n	801b2e4 <__smakebuf_r+0xc>
 801b31c:	4b0d      	ldr	r3, [pc, #52]	; (801b354 <__smakebuf_r+0x7c>)
 801b31e:	62b3      	str	r3, [r6, #40]	; 0x28
 801b320:	89a3      	ldrh	r3, [r4, #12]
 801b322:	6020      	str	r0, [r4, #0]
 801b324:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b328:	81a3      	strh	r3, [r4, #12]
 801b32a:	9b00      	ldr	r3, [sp, #0]
 801b32c:	6163      	str	r3, [r4, #20]
 801b32e:	9b01      	ldr	r3, [sp, #4]
 801b330:	6120      	str	r0, [r4, #16]
 801b332:	b15b      	cbz	r3, 801b34c <__smakebuf_r+0x74>
 801b334:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b338:	4630      	mov	r0, r6
 801b33a:	f000 fa1b 	bl	801b774 <_isatty_r>
 801b33e:	b128      	cbz	r0, 801b34c <__smakebuf_r+0x74>
 801b340:	89a3      	ldrh	r3, [r4, #12]
 801b342:	f023 0303 	bic.w	r3, r3, #3
 801b346:	f043 0301 	orr.w	r3, r3, #1
 801b34a:	81a3      	strh	r3, [r4, #12]
 801b34c:	89a0      	ldrh	r0, [r4, #12]
 801b34e:	4305      	orrs	r5, r0
 801b350:	81a5      	strh	r5, [r4, #12]
 801b352:	e7cd      	b.n	801b2f0 <__smakebuf_r+0x18>
 801b354:	0801b0ed 	.word	0x0801b0ed

0801b358 <__malloc_lock>:
 801b358:	4801      	ldr	r0, [pc, #4]	; (801b360 <__malloc_lock+0x8>)
 801b35a:	f7ff b886 	b.w	801a46a <__retarget_lock_acquire_recursive>
 801b35e:	bf00      	nop
 801b360:	20004b20 	.word	0x20004b20

0801b364 <__malloc_unlock>:
 801b364:	4801      	ldr	r0, [pc, #4]	; (801b36c <__malloc_unlock+0x8>)
 801b366:	f7ff b881 	b.w	801a46c <__retarget_lock_release_recursive>
 801b36a:	bf00      	nop
 801b36c:	20004b20 	.word	0x20004b20

0801b370 <_realloc_r>:
 801b370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b374:	4680      	mov	r8, r0
 801b376:	4614      	mov	r4, r2
 801b378:	460e      	mov	r6, r1
 801b37a:	b921      	cbnz	r1, 801b386 <_realloc_r+0x16>
 801b37c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b380:	4611      	mov	r1, r2
 801b382:	f7ff b937 	b.w	801a5f4 <_malloc_r>
 801b386:	b92a      	cbnz	r2, 801b394 <_realloc_r+0x24>
 801b388:	f7ff f8c8 	bl	801a51c <_free_r>
 801b38c:	4625      	mov	r5, r4
 801b38e:	4628      	mov	r0, r5
 801b390:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b394:	f000 fa10 	bl	801b7b8 <_malloc_usable_size_r>
 801b398:	4284      	cmp	r4, r0
 801b39a:	4607      	mov	r7, r0
 801b39c:	d802      	bhi.n	801b3a4 <_realloc_r+0x34>
 801b39e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801b3a2:	d812      	bhi.n	801b3ca <_realloc_r+0x5a>
 801b3a4:	4621      	mov	r1, r4
 801b3a6:	4640      	mov	r0, r8
 801b3a8:	f7ff f924 	bl	801a5f4 <_malloc_r>
 801b3ac:	4605      	mov	r5, r0
 801b3ae:	2800      	cmp	r0, #0
 801b3b0:	d0ed      	beq.n	801b38e <_realloc_r+0x1e>
 801b3b2:	42bc      	cmp	r4, r7
 801b3b4:	4622      	mov	r2, r4
 801b3b6:	4631      	mov	r1, r6
 801b3b8:	bf28      	it	cs
 801b3ba:	463a      	movcs	r2, r7
 801b3bc:	f7ff f868 	bl	801a490 <memcpy>
 801b3c0:	4631      	mov	r1, r6
 801b3c2:	4640      	mov	r0, r8
 801b3c4:	f7ff f8aa 	bl	801a51c <_free_r>
 801b3c8:	e7e1      	b.n	801b38e <_realloc_r+0x1e>
 801b3ca:	4635      	mov	r5, r6
 801b3cc:	e7df      	b.n	801b38e <_realloc_r+0x1e>

0801b3ce <__ssputs_r>:
 801b3ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b3d2:	688e      	ldr	r6, [r1, #8]
 801b3d4:	429e      	cmp	r6, r3
 801b3d6:	4682      	mov	sl, r0
 801b3d8:	460c      	mov	r4, r1
 801b3da:	4690      	mov	r8, r2
 801b3dc:	461f      	mov	r7, r3
 801b3de:	d838      	bhi.n	801b452 <__ssputs_r+0x84>
 801b3e0:	898a      	ldrh	r2, [r1, #12]
 801b3e2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801b3e6:	d032      	beq.n	801b44e <__ssputs_r+0x80>
 801b3e8:	6825      	ldr	r5, [r4, #0]
 801b3ea:	6909      	ldr	r1, [r1, #16]
 801b3ec:	eba5 0901 	sub.w	r9, r5, r1
 801b3f0:	6965      	ldr	r5, [r4, #20]
 801b3f2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801b3f6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801b3fa:	3301      	adds	r3, #1
 801b3fc:	444b      	add	r3, r9
 801b3fe:	106d      	asrs	r5, r5, #1
 801b400:	429d      	cmp	r5, r3
 801b402:	bf38      	it	cc
 801b404:	461d      	movcc	r5, r3
 801b406:	0553      	lsls	r3, r2, #21
 801b408:	d531      	bpl.n	801b46e <__ssputs_r+0xa0>
 801b40a:	4629      	mov	r1, r5
 801b40c:	f7ff f8f2 	bl	801a5f4 <_malloc_r>
 801b410:	4606      	mov	r6, r0
 801b412:	b950      	cbnz	r0, 801b42a <__ssputs_r+0x5c>
 801b414:	230c      	movs	r3, #12
 801b416:	f8ca 3000 	str.w	r3, [sl]
 801b41a:	89a3      	ldrh	r3, [r4, #12]
 801b41c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b420:	81a3      	strh	r3, [r4, #12]
 801b422:	f04f 30ff 	mov.w	r0, #4294967295
 801b426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b42a:	6921      	ldr	r1, [r4, #16]
 801b42c:	464a      	mov	r2, r9
 801b42e:	f7ff f82f 	bl	801a490 <memcpy>
 801b432:	89a3      	ldrh	r3, [r4, #12]
 801b434:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801b438:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b43c:	81a3      	strh	r3, [r4, #12]
 801b43e:	6126      	str	r6, [r4, #16]
 801b440:	6165      	str	r5, [r4, #20]
 801b442:	444e      	add	r6, r9
 801b444:	eba5 0509 	sub.w	r5, r5, r9
 801b448:	6026      	str	r6, [r4, #0]
 801b44a:	60a5      	str	r5, [r4, #8]
 801b44c:	463e      	mov	r6, r7
 801b44e:	42be      	cmp	r6, r7
 801b450:	d900      	bls.n	801b454 <__ssputs_r+0x86>
 801b452:	463e      	mov	r6, r7
 801b454:	6820      	ldr	r0, [r4, #0]
 801b456:	4632      	mov	r2, r6
 801b458:	4641      	mov	r1, r8
 801b45a:	f7ff f827 	bl	801a4ac <memmove>
 801b45e:	68a3      	ldr	r3, [r4, #8]
 801b460:	1b9b      	subs	r3, r3, r6
 801b462:	60a3      	str	r3, [r4, #8]
 801b464:	6823      	ldr	r3, [r4, #0]
 801b466:	4433      	add	r3, r6
 801b468:	6023      	str	r3, [r4, #0]
 801b46a:	2000      	movs	r0, #0
 801b46c:	e7db      	b.n	801b426 <__ssputs_r+0x58>
 801b46e:	462a      	mov	r2, r5
 801b470:	f7ff ff7e 	bl	801b370 <_realloc_r>
 801b474:	4606      	mov	r6, r0
 801b476:	2800      	cmp	r0, #0
 801b478:	d1e1      	bne.n	801b43e <__ssputs_r+0x70>
 801b47a:	6921      	ldr	r1, [r4, #16]
 801b47c:	4650      	mov	r0, sl
 801b47e:	f7ff f84d 	bl	801a51c <_free_r>
 801b482:	e7c7      	b.n	801b414 <__ssputs_r+0x46>

0801b484 <_svfiprintf_r>:
 801b484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b488:	4698      	mov	r8, r3
 801b48a:	898b      	ldrh	r3, [r1, #12]
 801b48c:	061b      	lsls	r3, r3, #24
 801b48e:	b09d      	sub	sp, #116	; 0x74
 801b490:	4607      	mov	r7, r0
 801b492:	460d      	mov	r5, r1
 801b494:	4614      	mov	r4, r2
 801b496:	d50e      	bpl.n	801b4b6 <_svfiprintf_r+0x32>
 801b498:	690b      	ldr	r3, [r1, #16]
 801b49a:	b963      	cbnz	r3, 801b4b6 <_svfiprintf_r+0x32>
 801b49c:	2140      	movs	r1, #64	; 0x40
 801b49e:	f7ff f8a9 	bl	801a5f4 <_malloc_r>
 801b4a2:	6028      	str	r0, [r5, #0]
 801b4a4:	6128      	str	r0, [r5, #16]
 801b4a6:	b920      	cbnz	r0, 801b4b2 <_svfiprintf_r+0x2e>
 801b4a8:	230c      	movs	r3, #12
 801b4aa:	603b      	str	r3, [r7, #0]
 801b4ac:	f04f 30ff 	mov.w	r0, #4294967295
 801b4b0:	e0d1      	b.n	801b656 <_svfiprintf_r+0x1d2>
 801b4b2:	2340      	movs	r3, #64	; 0x40
 801b4b4:	616b      	str	r3, [r5, #20]
 801b4b6:	2300      	movs	r3, #0
 801b4b8:	9309      	str	r3, [sp, #36]	; 0x24
 801b4ba:	2320      	movs	r3, #32
 801b4bc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801b4c0:	f8cd 800c 	str.w	r8, [sp, #12]
 801b4c4:	2330      	movs	r3, #48	; 0x30
 801b4c6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801b670 <_svfiprintf_r+0x1ec>
 801b4ca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801b4ce:	f04f 0901 	mov.w	r9, #1
 801b4d2:	4623      	mov	r3, r4
 801b4d4:	469a      	mov	sl, r3
 801b4d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b4da:	b10a      	cbz	r2, 801b4e0 <_svfiprintf_r+0x5c>
 801b4dc:	2a25      	cmp	r2, #37	; 0x25
 801b4de:	d1f9      	bne.n	801b4d4 <_svfiprintf_r+0x50>
 801b4e0:	ebba 0b04 	subs.w	fp, sl, r4
 801b4e4:	d00b      	beq.n	801b4fe <_svfiprintf_r+0x7a>
 801b4e6:	465b      	mov	r3, fp
 801b4e8:	4622      	mov	r2, r4
 801b4ea:	4629      	mov	r1, r5
 801b4ec:	4638      	mov	r0, r7
 801b4ee:	f7ff ff6e 	bl	801b3ce <__ssputs_r>
 801b4f2:	3001      	adds	r0, #1
 801b4f4:	f000 80aa 	beq.w	801b64c <_svfiprintf_r+0x1c8>
 801b4f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b4fa:	445a      	add	r2, fp
 801b4fc:	9209      	str	r2, [sp, #36]	; 0x24
 801b4fe:	f89a 3000 	ldrb.w	r3, [sl]
 801b502:	2b00      	cmp	r3, #0
 801b504:	f000 80a2 	beq.w	801b64c <_svfiprintf_r+0x1c8>
 801b508:	2300      	movs	r3, #0
 801b50a:	f04f 32ff 	mov.w	r2, #4294967295
 801b50e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b512:	f10a 0a01 	add.w	sl, sl, #1
 801b516:	9304      	str	r3, [sp, #16]
 801b518:	9307      	str	r3, [sp, #28]
 801b51a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801b51e:	931a      	str	r3, [sp, #104]	; 0x68
 801b520:	4654      	mov	r4, sl
 801b522:	2205      	movs	r2, #5
 801b524:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b528:	4851      	ldr	r0, [pc, #324]	; (801b670 <_svfiprintf_r+0x1ec>)
 801b52a:	f7e4 fe51 	bl	80001d0 <memchr>
 801b52e:	9a04      	ldr	r2, [sp, #16]
 801b530:	b9d8      	cbnz	r0, 801b56a <_svfiprintf_r+0xe6>
 801b532:	06d0      	lsls	r0, r2, #27
 801b534:	bf44      	itt	mi
 801b536:	2320      	movmi	r3, #32
 801b538:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b53c:	0711      	lsls	r1, r2, #28
 801b53e:	bf44      	itt	mi
 801b540:	232b      	movmi	r3, #43	; 0x2b
 801b542:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b546:	f89a 3000 	ldrb.w	r3, [sl]
 801b54a:	2b2a      	cmp	r3, #42	; 0x2a
 801b54c:	d015      	beq.n	801b57a <_svfiprintf_r+0xf6>
 801b54e:	9a07      	ldr	r2, [sp, #28]
 801b550:	4654      	mov	r4, sl
 801b552:	2000      	movs	r0, #0
 801b554:	f04f 0c0a 	mov.w	ip, #10
 801b558:	4621      	mov	r1, r4
 801b55a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b55e:	3b30      	subs	r3, #48	; 0x30
 801b560:	2b09      	cmp	r3, #9
 801b562:	d94e      	bls.n	801b602 <_svfiprintf_r+0x17e>
 801b564:	b1b0      	cbz	r0, 801b594 <_svfiprintf_r+0x110>
 801b566:	9207      	str	r2, [sp, #28]
 801b568:	e014      	b.n	801b594 <_svfiprintf_r+0x110>
 801b56a:	eba0 0308 	sub.w	r3, r0, r8
 801b56e:	fa09 f303 	lsl.w	r3, r9, r3
 801b572:	4313      	orrs	r3, r2
 801b574:	9304      	str	r3, [sp, #16]
 801b576:	46a2      	mov	sl, r4
 801b578:	e7d2      	b.n	801b520 <_svfiprintf_r+0x9c>
 801b57a:	9b03      	ldr	r3, [sp, #12]
 801b57c:	1d19      	adds	r1, r3, #4
 801b57e:	681b      	ldr	r3, [r3, #0]
 801b580:	9103      	str	r1, [sp, #12]
 801b582:	2b00      	cmp	r3, #0
 801b584:	bfbb      	ittet	lt
 801b586:	425b      	neglt	r3, r3
 801b588:	f042 0202 	orrlt.w	r2, r2, #2
 801b58c:	9307      	strge	r3, [sp, #28]
 801b58e:	9307      	strlt	r3, [sp, #28]
 801b590:	bfb8      	it	lt
 801b592:	9204      	strlt	r2, [sp, #16]
 801b594:	7823      	ldrb	r3, [r4, #0]
 801b596:	2b2e      	cmp	r3, #46	; 0x2e
 801b598:	d10c      	bne.n	801b5b4 <_svfiprintf_r+0x130>
 801b59a:	7863      	ldrb	r3, [r4, #1]
 801b59c:	2b2a      	cmp	r3, #42	; 0x2a
 801b59e:	d135      	bne.n	801b60c <_svfiprintf_r+0x188>
 801b5a0:	9b03      	ldr	r3, [sp, #12]
 801b5a2:	1d1a      	adds	r2, r3, #4
 801b5a4:	681b      	ldr	r3, [r3, #0]
 801b5a6:	9203      	str	r2, [sp, #12]
 801b5a8:	2b00      	cmp	r3, #0
 801b5aa:	bfb8      	it	lt
 801b5ac:	f04f 33ff 	movlt.w	r3, #4294967295
 801b5b0:	3402      	adds	r4, #2
 801b5b2:	9305      	str	r3, [sp, #20]
 801b5b4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801b680 <_svfiprintf_r+0x1fc>
 801b5b8:	7821      	ldrb	r1, [r4, #0]
 801b5ba:	2203      	movs	r2, #3
 801b5bc:	4650      	mov	r0, sl
 801b5be:	f7e4 fe07 	bl	80001d0 <memchr>
 801b5c2:	b140      	cbz	r0, 801b5d6 <_svfiprintf_r+0x152>
 801b5c4:	2340      	movs	r3, #64	; 0x40
 801b5c6:	eba0 000a 	sub.w	r0, r0, sl
 801b5ca:	fa03 f000 	lsl.w	r0, r3, r0
 801b5ce:	9b04      	ldr	r3, [sp, #16]
 801b5d0:	4303      	orrs	r3, r0
 801b5d2:	3401      	adds	r4, #1
 801b5d4:	9304      	str	r3, [sp, #16]
 801b5d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b5da:	4826      	ldr	r0, [pc, #152]	; (801b674 <_svfiprintf_r+0x1f0>)
 801b5dc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801b5e0:	2206      	movs	r2, #6
 801b5e2:	f7e4 fdf5 	bl	80001d0 <memchr>
 801b5e6:	2800      	cmp	r0, #0
 801b5e8:	d038      	beq.n	801b65c <_svfiprintf_r+0x1d8>
 801b5ea:	4b23      	ldr	r3, [pc, #140]	; (801b678 <_svfiprintf_r+0x1f4>)
 801b5ec:	bb1b      	cbnz	r3, 801b636 <_svfiprintf_r+0x1b2>
 801b5ee:	9b03      	ldr	r3, [sp, #12]
 801b5f0:	3307      	adds	r3, #7
 801b5f2:	f023 0307 	bic.w	r3, r3, #7
 801b5f6:	3308      	adds	r3, #8
 801b5f8:	9303      	str	r3, [sp, #12]
 801b5fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b5fc:	4433      	add	r3, r6
 801b5fe:	9309      	str	r3, [sp, #36]	; 0x24
 801b600:	e767      	b.n	801b4d2 <_svfiprintf_r+0x4e>
 801b602:	fb0c 3202 	mla	r2, ip, r2, r3
 801b606:	460c      	mov	r4, r1
 801b608:	2001      	movs	r0, #1
 801b60a:	e7a5      	b.n	801b558 <_svfiprintf_r+0xd4>
 801b60c:	2300      	movs	r3, #0
 801b60e:	3401      	adds	r4, #1
 801b610:	9305      	str	r3, [sp, #20]
 801b612:	4619      	mov	r1, r3
 801b614:	f04f 0c0a 	mov.w	ip, #10
 801b618:	4620      	mov	r0, r4
 801b61a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b61e:	3a30      	subs	r2, #48	; 0x30
 801b620:	2a09      	cmp	r2, #9
 801b622:	d903      	bls.n	801b62c <_svfiprintf_r+0x1a8>
 801b624:	2b00      	cmp	r3, #0
 801b626:	d0c5      	beq.n	801b5b4 <_svfiprintf_r+0x130>
 801b628:	9105      	str	r1, [sp, #20]
 801b62a:	e7c3      	b.n	801b5b4 <_svfiprintf_r+0x130>
 801b62c:	fb0c 2101 	mla	r1, ip, r1, r2
 801b630:	4604      	mov	r4, r0
 801b632:	2301      	movs	r3, #1
 801b634:	e7f0      	b.n	801b618 <_svfiprintf_r+0x194>
 801b636:	ab03      	add	r3, sp, #12
 801b638:	9300      	str	r3, [sp, #0]
 801b63a:	462a      	mov	r2, r5
 801b63c:	4b0f      	ldr	r3, [pc, #60]	; (801b67c <_svfiprintf_r+0x1f8>)
 801b63e:	a904      	add	r1, sp, #16
 801b640:	4638      	mov	r0, r7
 801b642:	f3af 8000 	nop.w
 801b646:	1c42      	adds	r2, r0, #1
 801b648:	4606      	mov	r6, r0
 801b64a:	d1d6      	bne.n	801b5fa <_svfiprintf_r+0x176>
 801b64c:	89ab      	ldrh	r3, [r5, #12]
 801b64e:	065b      	lsls	r3, r3, #25
 801b650:	f53f af2c 	bmi.w	801b4ac <_svfiprintf_r+0x28>
 801b654:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b656:	b01d      	add	sp, #116	; 0x74
 801b658:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b65c:	ab03      	add	r3, sp, #12
 801b65e:	9300      	str	r3, [sp, #0]
 801b660:	462a      	mov	r2, r5
 801b662:	4b06      	ldr	r3, [pc, #24]	; (801b67c <_svfiprintf_r+0x1f8>)
 801b664:	a904      	add	r1, sp, #16
 801b666:	4638      	mov	r0, r7
 801b668:	f7ff fa00 	bl	801aa6c <_printf_i>
 801b66c:	e7eb      	b.n	801b646 <_svfiprintf_r+0x1c2>
 801b66e:	bf00      	nop
 801b670:	0801d9c0 	.word	0x0801d9c0
 801b674:	0801d9ca 	.word	0x0801d9ca
 801b678:	00000000 	.word	0x00000000
 801b67c:	0801b3cf 	.word	0x0801b3cf
 801b680:	0801d9c6 	.word	0x0801d9c6

0801b684 <__sread>:
 801b684:	b510      	push	{r4, lr}
 801b686:	460c      	mov	r4, r1
 801b688:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b68c:	f000 f89c 	bl	801b7c8 <_read_r>
 801b690:	2800      	cmp	r0, #0
 801b692:	bfab      	itete	ge
 801b694:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801b696:	89a3      	ldrhlt	r3, [r4, #12]
 801b698:	181b      	addge	r3, r3, r0
 801b69a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801b69e:	bfac      	ite	ge
 801b6a0:	6563      	strge	r3, [r4, #84]	; 0x54
 801b6a2:	81a3      	strhlt	r3, [r4, #12]
 801b6a4:	bd10      	pop	{r4, pc}

0801b6a6 <__swrite>:
 801b6a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b6aa:	461f      	mov	r7, r3
 801b6ac:	898b      	ldrh	r3, [r1, #12]
 801b6ae:	05db      	lsls	r3, r3, #23
 801b6b0:	4605      	mov	r5, r0
 801b6b2:	460c      	mov	r4, r1
 801b6b4:	4616      	mov	r6, r2
 801b6b6:	d505      	bpl.n	801b6c4 <__swrite+0x1e>
 801b6b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b6bc:	2302      	movs	r3, #2
 801b6be:	2200      	movs	r2, #0
 801b6c0:	f000 f868 	bl	801b794 <_lseek_r>
 801b6c4:	89a3      	ldrh	r3, [r4, #12]
 801b6c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b6ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801b6ce:	81a3      	strh	r3, [r4, #12]
 801b6d0:	4632      	mov	r2, r6
 801b6d2:	463b      	mov	r3, r7
 801b6d4:	4628      	mov	r0, r5
 801b6d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b6da:	f000 b817 	b.w	801b70c <_write_r>

0801b6de <__sseek>:
 801b6de:	b510      	push	{r4, lr}
 801b6e0:	460c      	mov	r4, r1
 801b6e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b6e6:	f000 f855 	bl	801b794 <_lseek_r>
 801b6ea:	1c43      	adds	r3, r0, #1
 801b6ec:	89a3      	ldrh	r3, [r4, #12]
 801b6ee:	bf15      	itete	ne
 801b6f0:	6560      	strne	r0, [r4, #84]	; 0x54
 801b6f2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801b6f6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801b6fa:	81a3      	strheq	r3, [r4, #12]
 801b6fc:	bf18      	it	ne
 801b6fe:	81a3      	strhne	r3, [r4, #12]
 801b700:	bd10      	pop	{r4, pc}

0801b702 <__sclose>:
 801b702:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b706:	f000 b813 	b.w	801b730 <_close_r>
	...

0801b70c <_write_r>:
 801b70c:	b538      	push	{r3, r4, r5, lr}
 801b70e:	4d07      	ldr	r5, [pc, #28]	; (801b72c <_write_r+0x20>)
 801b710:	4604      	mov	r4, r0
 801b712:	4608      	mov	r0, r1
 801b714:	4611      	mov	r1, r2
 801b716:	2200      	movs	r2, #0
 801b718:	602a      	str	r2, [r5, #0]
 801b71a:	461a      	mov	r2, r3
 801b71c:	f7e9 fdb3 	bl	8005286 <_write>
 801b720:	1c43      	adds	r3, r0, #1
 801b722:	d102      	bne.n	801b72a <_write_r+0x1e>
 801b724:	682b      	ldr	r3, [r5, #0]
 801b726:	b103      	cbz	r3, 801b72a <_write_r+0x1e>
 801b728:	6023      	str	r3, [r4, #0]
 801b72a:	bd38      	pop	{r3, r4, r5, pc}
 801b72c:	20004b2c 	.word	0x20004b2c

0801b730 <_close_r>:
 801b730:	b538      	push	{r3, r4, r5, lr}
 801b732:	4d06      	ldr	r5, [pc, #24]	; (801b74c <_close_r+0x1c>)
 801b734:	2300      	movs	r3, #0
 801b736:	4604      	mov	r4, r0
 801b738:	4608      	mov	r0, r1
 801b73a:	602b      	str	r3, [r5, #0]
 801b73c:	f7e9 fdbf 	bl	80052be <_close>
 801b740:	1c43      	adds	r3, r0, #1
 801b742:	d102      	bne.n	801b74a <_close_r+0x1a>
 801b744:	682b      	ldr	r3, [r5, #0]
 801b746:	b103      	cbz	r3, 801b74a <_close_r+0x1a>
 801b748:	6023      	str	r3, [r4, #0]
 801b74a:	bd38      	pop	{r3, r4, r5, pc}
 801b74c:	20004b2c 	.word	0x20004b2c

0801b750 <_fstat_r>:
 801b750:	b538      	push	{r3, r4, r5, lr}
 801b752:	4d07      	ldr	r5, [pc, #28]	; (801b770 <_fstat_r+0x20>)
 801b754:	2300      	movs	r3, #0
 801b756:	4604      	mov	r4, r0
 801b758:	4608      	mov	r0, r1
 801b75a:	4611      	mov	r1, r2
 801b75c:	602b      	str	r3, [r5, #0]
 801b75e:	f7e9 fdba 	bl	80052d6 <_fstat>
 801b762:	1c43      	adds	r3, r0, #1
 801b764:	d102      	bne.n	801b76c <_fstat_r+0x1c>
 801b766:	682b      	ldr	r3, [r5, #0]
 801b768:	b103      	cbz	r3, 801b76c <_fstat_r+0x1c>
 801b76a:	6023      	str	r3, [r4, #0]
 801b76c:	bd38      	pop	{r3, r4, r5, pc}
 801b76e:	bf00      	nop
 801b770:	20004b2c 	.word	0x20004b2c

0801b774 <_isatty_r>:
 801b774:	b538      	push	{r3, r4, r5, lr}
 801b776:	4d06      	ldr	r5, [pc, #24]	; (801b790 <_isatty_r+0x1c>)
 801b778:	2300      	movs	r3, #0
 801b77a:	4604      	mov	r4, r0
 801b77c:	4608      	mov	r0, r1
 801b77e:	602b      	str	r3, [r5, #0]
 801b780:	f7e9 fdb9 	bl	80052f6 <_isatty>
 801b784:	1c43      	adds	r3, r0, #1
 801b786:	d102      	bne.n	801b78e <_isatty_r+0x1a>
 801b788:	682b      	ldr	r3, [r5, #0]
 801b78a:	b103      	cbz	r3, 801b78e <_isatty_r+0x1a>
 801b78c:	6023      	str	r3, [r4, #0]
 801b78e:	bd38      	pop	{r3, r4, r5, pc}
 801b790:	20004b2c 	.word	0x20004b2c

0801b794 <_lseek_r>:
 801b794:	b538      	push	{r3, r4, r5, lr}
 801b796:	4d07      	ldr	r5, [pc, #28]	; (801b7b4 <_lseek_r+0x20>)
 801b798:	4604      	mov	r4, r0
 801b79a:	4608      	mov	r0, r1
 801b79c:	4611      	mov	r1, r2
 801b79e:	2200      	movs	r2, #0
 801b7a0:	602a      	str	r2, [r5, #0]
 801b7a2:	461a      	mov	r2, r3
 801b7a4:	f7e9 fdb2 	bl	800530c <_lseek>
 801b7a8:	1c43      	adds	r3, r0, #1
 801b7aa:	d102      	bne.n	801b7b2 <_lseek_r+0x1e>
 801b7ac:	682b      	ldr	r3, [r5, #0]
 801b7ae:	b103      	cbz	r3, 801b7b2 <_lseek_r+0x1e>
 801b7b0:	6023      	str	r3, [r4, #0]
 801b7b2:	bd38      	pop	{r3, r4, r5, pc}
 801b7b4:	20004b2c 	.word	0x20004b2c

0801b7b8 <_malloc_usable_size_r>:
 801b7b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b7bc:	1f18      	subs	r0, r3, #4
 801b7be:	2b00      	cmp	r3, #0
 801b7c0:	bfbc      	itt	lt
 801b7c2:	580b      	ldrlt	r3, [r1, r0]
 801b7c4:	18c0      	addlt	r0, r0, r3
 801b7c6:	4770      	bx	lr

0801b7c8 <_read_r>:
 801b7c8:	b538      	push	{r3, r4, r5, lr}
 801b7ca:	4d07      	ldr	r5, [pc, #28]	; (801b7e8 <_read_r+0x20>)
 801b7cc:	4604      	mov	r4, r0
 801b7ce:	4608      	mov	r0, r1
 801b7d0:	4611      	mov	r1, r2
 801b7d2:	2200      	movs	r2, #0
 801b7d4:	602a      	str	r2, [r5, #0]
 801b7d6:	461a      	mov	r2, r3
 801b7d8:	f7e9 fd38 	bl	800524c <_read>
 801b7dc:	1c43      	adds	r3, r0, #1
 801b7de:	d102      	bne.n	801b7e6 <_read_r+0x1e>
 801b7e0:	682b      	ldr	r3, [r5, #0]
 801b7e2:	b103      	cbz	r3, 801b7e6 <_read_r+0x1e>
 801b7e4:	6023      	str	r3, [r4, #0]
 801b7e6:	bd38      	pop	{r3, r4, r5, pc}
 801b7e8:	20004b2c 	.word	0x20004b2c

0801b7ec <_init>:
 801b7ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b7ee:	bf00      	nop
 801b7f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b7f2:	bc08      	pop	{r3}
 801b7f4:	469e      	mov	lr, r3
 801b7f6:	4770      	bx	lr

0801b7f8 <_fini>:
 801b7f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b7fa:	bf00      	nop
 801b7fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b7fe:	bc08      	pop	{r3}
 801b800:	469e      	mov	lr, r3
 801b802:	4770      	bx	lr
